
Automated_Door_Project.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00004ab4  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         000000c2  00800060  00004ab4  00004b48  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000001c  00800122  00800122  00004c0a  2**0
                  ALLOC
  3 .debug_aranges 000003e8  00000000  00000000  00004c0a  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_pubnames 000007d4  00000000  00000000  00004ff2  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00003ef9  00000000  00000000  000057c6  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00001b4a  00000000  00000000  000096bf  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000421d  00000000  00000000  0000b209  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000550  00000000  00000000  0000f428  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000dac  00000000  00000000  0000f978  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000088e  00000000  00000000  00010724  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_macinfo 000100e4  00000000  00000000  00010fb2  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000288  00000000  00000000  00021096  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 a9 1d 	jmp	0x3b52	; 0x3b52 <__vector_7>
      20:	0c 94 dc 1d 	jmp	0x3bb8	; 0x3bb8 <__vector_8>
      24:	0c 94 0f 1e 	jmp	0x3c1e	; 0x3c1e <__vector_9>
      28:	0c 94 42 1e 	jmp	0x3c84	; 0x3c84 <__vector_10>
      2c:	0c 94 75 1e 	jmp	0x3cea	; 0x3cea <__vector_11>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 8b 24 	jmp	0x4916	; 0x4916 <__vector_16>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	11 e0       	ldi	r17, 0x01	; 1
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e4 eb       	ldi	r30, 0xB4	; 180
      68:	fa e4       	ldi	r31, 0x4A	; 74
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a2 32       	cpi	r26, 0x22	; 34
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	11 e0       	ldi	r17, 0x01	; 1
      78:	a2 e2       	ldi	r26, 0x22	; 34
      7a:	b1 e0       	ldi	r27, 0x01	; 1
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	ae 33       	cpi	r26, 0x3E	; 62
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 4f 06 	call	0xc9e	; 0xc9e <main>
      8a:	0c 94 58 25 	jmp	0x4ab0	; 0x4ab0 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 55 04 	call	0x8aa	; 0x8aa <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 55 04 	call	0x8aa	; 0x8aa <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 21 25 	jmp	0x4a42	; 0x4a42 <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a9 ee       	ldi	r26, 0xE9	; 233
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 3d 25 	jmp	0x4a7a	; 0x4a7a <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 2d 25 	jmp	0x4a5a	; 0x4a5a <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 a9 04 	call	0x952	; 0x952 <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 49 25 	jmp	0x4a92	; 0x4a92 <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 2d 25 	jmp	0x4a5a	; 0x4a5a <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 a9 04 	call	0x952	; 0x952 <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 49 25 	jmp	0x4a92	; 0x4a92 <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 21 25 	jmp	0x4a42	; 0x4a42 <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	89 ee       	ldi	r24, 0xE9	; 233
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 a9 04 	call	0x952	; 0x952 <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 3d 25 	jmp	0x4a7a	; 0x4a7a <__epilogue_restores__>

00000632 <__divsf3>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 29 25 	jmp	0x4a52	; 0x4a52 <__prologue_saves__+0x10>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	b9 e0       	ldi	r27, 0x09	; 9
     650:	eb 2e       	mov	r14, r27
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     672:	29 85       	ldd	r18, Y+9	; 0x09
     674:	22 30       	cpi	r18, 0x02	; 2
     676:	08 f4       	brcc	.+2      	; 0x67a <__divsf3+0x48>
     678:	7e c0       	rjmp	.+252    	; 0x776 <__divsf3+0x144>
     67a:	39 89       	ldd	r19, Y+17	; 0x11
     67c:	32 30       	cpi	r19, 0x02	; 2
     67e:	10 f4       	brcc	.+4      	; 0x684 <__divsf3+0x52>
     680:	b8 01       	movw	r22, r16
     682:	7c c0       	rjmp	.+248    	; 0x77c <__divsf3+0x14a>
     684:	8a 85       	ldd	r24, Y+10	; 0x0a
     686:	9a 89       	ldd	r25, Y+18	; 0x12
     688:	89 27       	eor	r24, r25
     68a:	8a 87       	std	Y+10, r24	; 0x0a
     68c:	24 30       	cpi	r18, 0x04	; 4
     68e:	11 f0       	breq	.+4      	; 0x694 <__divsf3+0x62>
     690:	22 30       	cpi	r18, 0x02	; 2
     692:	31 f4       	brne	.+12     	; 0x6a0 <__divsf3+0x6e>
     694:	23 17       	cp	r18, r19
     696:	09 f0       	breq	.+2      	; 0x69a <__divsf3+0x68>
     698:	6e c0       	rjmp	.+220    	; 0x776 <__divsf3+0x144>
     69a:	69 ee       	ldi	r22, 0xE9	; 233
     69c:	70 e0       	ldi	r23, 0x00	; 0
     69e:	6e c0       	rjmp	.+220    	; 0x77c <__divsf3+0x14a>
     6a0:	34 30       	cpi	r19, 0x04	; 4
     6a2:	39 f4       	brne	.+14     	; 0x6b2 <__divsf3+0x80>
     6a4:	1d 86       	std	Y+13, r1	; 0x0d
     6a6:	1e 86       	std	Y+14, r1	; 0x0e
     6a8:	1f 86       	std	Y+15, r1	; 0x0f
     6aa:	18 8a       	std	Y+16, r1	; 0x10
     6ac:	1c 86       	std	Y+12, r1	; 0x0c
     6ae:	1b 86       	std	Y+11, r1	; 0x0b
     6b0:	04 c0       	rjmp	.+8      	; 0x6ba <__divsf3+0x88>
     6b2:	32 30       	cpi	r19, 0x02	; 2
     6b4:	21 f4       	brne	.+8      	; 0x6be <__divsf3+0x8c>
     6b6:	84 e0       	ldi	r24, 0x04	; 4
     6b8:	89 87       	std	Y+9, r24	; 0x09
     6ba:	b7 01       	movw	r22, r14
     6bc:	5f c0       	rjmp	.+190    	; 0x77c <__divsf3+0x14a>
     6be:	2b 85       	ldd	r18, Y+11	; 0x0b
     6c0:	3c 85       	ldd	r19, Y+12	; 0x0c
     6c2:	8b 89       	ldd	r24, Y+19	; 0x13
     6c4:	9c 89       	ldd	r25, Y+20	; 0x14
     6c6:	28 1b       	sub	r18, r24
     6c8:	39 0b       	sbc	r19, r25
     6ca:	3c 87       	std	Y+12, r19	; 0x0c
     6cc:	2b 87       	std	Y+11, r18	; 0x0b
     6ce:	ed 84       	ldd	r14, Y+13	; 0x0d
     6d0:	fe 84       	ldd	r15, Y+14	; 0x0e
     6d2:	0f 85       	ldd	r16, Y+15	; 0x0f
     6d4:	18 89       	ldd	r17, Y+16	; 0x10
     6d6:	ad 88       	ldd	r10, Y+21	; 0x15
     6d8:	be 88       	ldd	r11, Y+22	; 0x16
     6da:	cf 88       	ldd	r12, Y+23	; 0x17
     6dc:	d8 8c       	ldd	r13, Y+24	; 0x18
     6de:	ea 14       	cp	r14, r10
     6e0:	fb 04       	cpc	r15, r11
     6e2:	0c 05       	cpc	r16, r12
     6e4:	1d 05       	cpc	r17, r13
     6e6:	40 f4       	brcc	.+16     	; 0x6f8 <__divsf3+0xc6>
     6e8:	ee 0c       	add	r14, r14
     6ea:	ff 1c       	adc	r15, r15
     6ec:	00 1f       	adc	r16, r16
     6ee:	11 1f       	adc	r17, r17
     6f0:	21 50       	subi	r18, 0x01	; 1
     6f2:	30 40       	sbci	r19, 0x00	; 0
     6f4:	3c 87       	std	Y+12, r19	; 0x0c
     6f6:	2b 87       	std	Y+11, r18	; 0x0b
     6f8:	20 e0       	ldi	r18, 0x00	; 0
     6fa:	30 e0       	ldi	r19, 0x00	; 0
     6fc:	40 e0       	ldi	r20, 0x00	; 0
     6fe:	50 e0       	ldi	r21, 0x00	; 0
     700:	80 e0       	ldi	r24, 0x00	; 0
     702:	90 e0       	ldi	r25, 0x00	; 0
     704:	a0 e0       	ldi	r26, 0x00	; 0
     706:	b0 e4       	ldi	r27, 0x40	; 64
     708:	60 e0       	ldi	r22, 0x00	; 0
     70a:	70 e0       	ldi	r23, 0x00	; 0
     70c:	ea 14       	cp	r14, r10
     70e:	fb 04       	cpc	r15, r11
     710:	0c 05       	cpc	r16, r12
     712:	1d 05       	cpc	r17, r13
     714:	40 f0       	brcs	.+16     	; 0x726 <__divsf3+0xf4>
     716:	28 2b       	or	r18, r24
     718:	39 2b       	or	r19, r25
     71a:	4a 2b       	or	r20, r26
     71c:	5b 2b       	or	r21, r27
     71e:	ea 18       	sub	r14, r10
     720:	fb 08       	sbc	r15, r11
     722:	0c 09       	sbc	r16, r12
     724:	1d 09       	sbc	r17, r13
     726:	b6 95       	lsr	r27
     728:	a7 95       	ror	r26
     72a:	97 95       	ror	r25
     72c:	87 95       	ror	r24
     72e:	ee 0c       	add	r14, r14
     730:	ff 1c       	adc	r15, r15
     732:	00 1f       	adc	r16, r16
     734:	11 1f       	adc	r17, r17
     736:	6f 5f       	subi	r22, 0xFF	; 255
     738:	7f 4f       	sbci	r23, 0xFF	; 255
     73a:	6f 31       	cpi	r22, 0x1F	; 31
     73c:	71 05       	cpc	r23, r1
     73e:	31 f7       	brne	.-52     	; 0x70c <__divsf3+0xda>
     740:	da 01       	movw	r26, r20
     742:	c9 01       	movw	r24, r18
     744:	8f 77       	andi	r24, 0x7F	; 127
     746:	90 70       	andi	r25, 0x00	; 0
     748:	a0 70       	andi	r26, 0x00	; 0
     74a:	b0 70       	andi	r27, 0x00	; 0
     74c:	80 34       	cpi	r24, 0x40	; 64
     74e:	91 05       	cpc	r25, r1
     750:	a1 05       	cpc	r26, r1
     752:	b1 05       	cpc	r27, r1
     754:	61 f4       	brne	.+24     	; 0x76e <__divsf3+0x13c>
     756:	27 fd       	sbrc	r18, 7
     758:	0a c0       	rjmp	.+20     	; 0x76e <__divsf3+0x13c>
     75a:	e1 14       	cp	r14, r1
     75c:	f1 04       	cpc	r15, r1
     75e:	01 05       	cpc	r16, r1
     760:	11 05       	cpc	r17, r1
     762:	29 f0       	breq	.+10     	; 0x76e <__divsf3+0x13c>
     764:	20 5c       	subi	r18, 0xC0	; 192
     766:	3f 4f       	sbci	r19, 0xFF	; 255
     768:	4f 4f       	sbci	r20, 0xFF	; 255
     76a:	5f 4f       	sbci	r21, 0xFF	; 255
     76c:	20 78       	andi	r18, 0x80	; 128
     76e:	2d 87       	std	Y+13, r18	; 0x0d
     770:	3e 87       	std	Y+14, r19	; 0x0e
     772:	4f 87       	std	Y+15, r20	; 0x0f
     774:	58 8b       	std	Y+16, r21	; 0x10
     776:	be 01       	movw	r22, r28
     778:	67 5f       	subi	r22, 0xF7	; 247
     77a:	7f 4f       	sbci	r23, 0xFF	; 255
     77c:	cb 01       	movw	r24, r22
     77e:	0e 94 a9 04 	call	0x952	; 0x952 <__pack_f>
     782:	68 96       	adiw	r28, 0x18	; 24
     784:	ea e0       	ldi	r30, 0x0A	; 10
     786:	0c 94 45 25 	jmp	0x4a8a	; 0x4a8a <__epilogue_restores__+0x10>

0000078a <__gtsf2>:
     78a:	a8 e1       	ldi	r26, 0x18	; 24
     78c:	b0 e0       	ldi	r27, 0x00	; 0
     78e:	eb ec       	ldi	r30, 0xCB	; 203
     790:	f3 e0       	ldi	r31, 0x03	; 3
     792:	0c 94 2d 25 	jmp	0x4a5a	; 0x4a5a <__prologue_saves__+0x18>
     796:	69 83       	std	Y+1, r22	; 0x01
     798:	7a 83       	std	Y+2, r23	; 0x02
     79a:	8b 83       	std	Y+3, r24	; 0x03
     79c:	9c 83       	std	Y+4, r25	; 0x04
     79e:	2d 83       	std	Y+5, r18	; 0x05
     7a0:	3e 83       	std	Y+6, r19	; 0x06
     7a2:	4f 83       	std	Y+7, r20	; 0x07
     7a4:	58 87       	std	Y+8, r21	; 0x08
     7a6:	89 e0       	ldi	r24, 0x09	; 9
     7a8:	e8 2e       	mov	r14, r24
     7aa:	f1 2c       	mov	r15, r1
     7ac:	ec 0e       	add	r14, r28
     7ae:	fd 1e       	adc	r15, r29
     7b0:	ce 01       	movw	r24, r28
     7b2:	01 96       	adiw	r24, 0x01	; 1
     7b4:	b7 01       	movw	r22, r14
     7b6:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     7ba:	8e 01       	movw	r16, r28
     7bc:	0f 5e       	subi	r16, 0xEF	; 239
     7be:	1f 4f       	sbci	r17, 0xFF	; 255
     7c0:	ce 01       	movw	r24, r28
     7c2:	05 96       	adiw	r24, 0x05	; 5
     7c4:	b8 01       	movw	r22, r16
     7c6:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     7ca:	89 85       	ldd	r24, Y+9	; 0x09
     7cc:	82 30       	cpi	r24, 0x02	; 2
     7ce:	40 f0       	brcs	.+16     	; 0x7e0 <__gtsf2+0x56>
     7d0:	89 89       	ldd	r24, Y+17	; 0x11
     7d2:	82 30       	cpi	r24, 0x02	; 2
     7d4:	28 f0       	brcs	.+10     	; 0x7e0 <__gtsf2+0x56>
     7d6:	c7 01       	movw	r24, r14
     7d8:	b8 01       	movw	r22, r16
     7da:	0e 94 f6 05 	call	0xbec	; 0xbec <__fpcmp_parts_f>
     7de:	01 c0       	rjmp	.+2      	; 0x7e2 <__gtsf2+0x58>
     7e0:	8f ef       	ldi	r24, 0xFF	; 255
     7e2:	68 96       	adiw	r28, 0x18	; 24
     7e4:	e6 e0       	ldi	r30, 0x06	; 6
     7e6:	0c 94 49 25 	jmp	0x4a92	; 0x4a92 <__epilogue_restores__+0x18>

000007ea <__gesf2>:
     7ea:	a8 e1       	ldi	r26, 0x18	; 24
     7ec:	b0 e0       	ldi	r27, 0x00	; 0
     7ee:	eb ef       	ldi	r30, 0xFB	; 251
     7f0:	f3 e0       	ldi	r31, 0x03	; 3
     7f2:	0c 94 2d 25 	jmp	0x4a5a	; 0x4a5a <__prologue_saves__+0x18>
     7f6:	69 83       	std	Y+1, r22	; 0x01
     7f8:	7a 83       	std	Y+2, r23	; 0x02
     7fa:	8b 83       	std	Y+3, r24	; 0x03
     7fc:	9c 83       	std	Y+4, r25	; 0x04
     7fe:	2d 83       	std	Y+5, r18	; 0x05
     800:	3e 83       	std	Y+6, r19	; 0x06
     802:	4f 83       	std	Y+7, r20	; 0x07
     804:	58 87       	std	Y+8, r21	; 0x08
     806:	89 e0       	ldi	r24, 0x09	; 9
     808:	e8 2e       	mov	r14, r24
     80a:	f1 2c       	mov	r15, r1
     80c:	ec 0e       	add	r14, r28
     80e:	fd 1e       	adc	r15, r29
     810:	ce 01       	movw	r24, r28
     812:	01 96       	adiw	r24, 0x01	; 1
     814:	b7 01       	movw	r22, r14
     816:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     81a:	8e 01       	movw	r16, r28
     81c:	0f 5e       	subi	r16, 0xEF	; 239
     81e:	1f 4f       	sbci	r17, 0xFF	; 255
     820:	ce 01       	movw	r24, r28
     822:	05 96       	adiw	r24, 0x05	; 5
     824:	b8 01       	movw	r22, r16
     826:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     82a:	89 85       	ldd	r24, Y+9	; 0x09
     82c:	82 30       	cpi	r24, 0x02	; 2
     82e:	40 f0       	brcs	.+16     	; 0x840 <__gesf2+0x56>
     830:	89 89       	ldd	r24, Y+17	; 0x11
     832:	82 30       	cpi	r24, 0x02	; 2
     834:	28 f0       	brcs	.+10     	; 0x840 <__gesf2+0x56>
     836:	c7 01       	movw	r24, r14
     838:	b8 01       	movw	r22, r16
     83a:	0e 94 f6 05 	call	0xbec	; 0xbec <__fpcmp_parts_f>
     83e:	01 c0       	rjmp	.+2      	; 0x842 <__gesf2+0x58>
     840:	8f ef       	ldi	r24, 0xFF	; 255
     842:	68 96       	adiw	r28, 0x18	; 24
     844:	e6 e0       	ldi	r30, 0x06	; 6
     846:	0c 94 49 25 	jmp	0x4a92	; 0x4a92 <__epilogue_restores__+0x18>

0000084a <__ltsf2>:
     84a:	a8 e1       	ldi	r26, 0x18	; 24
     84c:	b0 e0       	ldi	r27, 0x00	; 0
     84e:	eb e2       	ldi	r30, 0x2B	; 43
     850:	f4 e0       	ldi	r31, 0x04	; 4
     852:	0c 94 2d 25 	jmp	0x4a5a	; 0x4a5a <__prologue_saves__+0x18>
     856:	69 83       	std	Y+1, r22	; 0x01
     858:	7a 83       	std	Y+2, r23	; 0x02
     85a:	8b 83       	std	Y+3, r24	; 0x03
     85c:	9c 83       	std	Y+4, r25	; 0x04
     85e:	2d 83       	std	Y+5, r18	; 0x05
     860:	3e 83       	std	Y+6, r19	; 0x06
     862:	4f 83       	std	Y+7, r20	; 0x07
     864:	58 87       	std	Y+8, r21	; 0x08
     866:	89 e0       	ldi	r24, 0x09	; 9
     868:	e8 2e       	mov	r14, r24
     86a:	f1 2c       	mov	r15, r1
     86c:	ec 0e       	add	r14, r28
     86e:	fd 1e       	adc	r15, r29
     870:	ce 01       	movw	r24, r28
     872:	01 96       	adiw	r24, 0x01	; 1
     874:	b7 01       	movw	r22, r14
     876:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     87a:	8e 01       	movw	r16, r28
     87c:	0f 5e       	subi	r16, 0xEF	; 239
     87e:	1f 4f       	sbci	r17, 0xFF	; 255
     880:	ce 01       	movw	r24, r28
     882:	05 96       	adiw	r24, 0x05	; 5
     884:	b8 01       	movw	r22, r16
     886:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     88a:	89 85       	ldd	r24, Y+9	; 0x09
     88c:	82 30       	cpi	r24, 0x02	; 2
     88e:	40 f0       	brcs	.+16     	; 0x8a0 <__stack+0x41>
     890:	89 89       	ldd	r24, Y+17	; 0x11
     892:	82 30       	cpi	r24, 0x02	; 2
     894:	28 f0       	brcs	.+10     	; 0x8a0 <__stack+0x41>
     896:	c7 01       	movw	r24, r14
     898:	b8 01       	movw	r22, r16
     89a:	0e 94 f6 05 	call	0xbec	; 0xbec <__fpcmp_parts_f>
     89e:	01 c0       	rjmp	.+2      	; 0x8a2 <__stack+0x43>
     8a0:	81 e0       	ldi	r24, 0x01	; 1
     8a2:	68 96       	adiw	r28, 0x18	; 24
     8a4:	e6 e0       	ldi	r30, 0x06	; 6
     8a6:	0c 94 49 25 	jmp	0x4a92	; 0x4a92 <__epilogue_restores__+0x18>

000008aa <__fixsfsi>:
     8aa:	ac e0       	ldi	r26, 0x0C	; 12
     8ac:	b0 e0       	ldi	r27, 0x00	; 0
     8ae:	eb e5       	ldi	r30, 0x5B	; 91
     8b0:	f4 e0       	ldi	r31, 0x04	; 4
     8b2:	0c 94 31 25 	jmp	0x4a62	; 0x4a62 <__prologue_saves__+0x20>
     8b6:	69 83       	std	Y+1, r22	; 0x01
     8b8:	7a 83       	std	Y+2, r23	; 0x02
     8ba:	8b 83       	std	Y+3, r24	; 0x03
     8bc:	9c 83       	std	Y+4, r25	; 0x04
     8be:	ce 01       	movw	r24, r28
     8c0:	01 96       	adiw	r24, 0x01	; 1
     8c2:	be 01       	movw	r22, r28
     8c4:	6b 5f       	subi	r22, 0xFB	; 251
     8c6:	7f 4f       	sbci	r23, 0xFF	; 255
     8c8:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     8cc:	8d 81       	ldd	r24, Y+5	; 0x05
     8ce:	82 30       	cpi	r24, 0x02	; 2
     8d0:	61 f1       	breq	.+88     	; 0x92a <__fixsfsi+0x80>
     8d2:	82 30       	cpi	r24, 0x02	; 2
     8d4:	50 f1       	brcs	.+84     	; 0x92a <__fixsfsi+0x80>
     8d6:	84 30       	cpi	r24, 0x04	; 4
     8d8:	21 f4       	brne	.+8      	; 0x8e2 <__fixsfsi+0x38>
     8da:	8e 81       	ldd	r24, Y+6	; 0x06
     8dc:	88 23       	and	r24, r24
     8de:	51 f1       	breq	.+84     	; 0x934 <__fixsfsi+0x8a>
     8e0:	2e c0       	rjmp	.+92     	; 0x93e <__fixsfsi+0x94>
     8e2:	2f 81       	ldd	r18, Y+7	; 0x07
     8e4:	38 85       	ldd	r19, Y+8	; 0x08
     8e6:	37 fd       	sbrc	r19, 7
     8e8:	20 c0       	rjmp	.+64     	; 0x92a <__fixsfsi+0x80>
     8ea:	6e 81       	ldd	r22, Y+6	; 0x06
     8ec:	2f 31       	cpi	r18, 0x1F	; 31
     8ee:	31 05       	cpc	r19, r1
     8f0:	1c f0       	brlt	.+6      	; 0x8f8 <__fixsfsi+0x4e>
     8f2:	66 23       	and	r22, r22
     8f4:	f9 f0       	breq	.+62     	; 0x934 <__fixsfsi+0x8a>
     8f6:	23 c0       	rjmp	.+70     	; 0x93e <__fixsfsi+0x94>
     8f8:	8e e1       	ldi	r24, 0x1E	; 30
     8fa:	90 e0       	ldi	r25, 0x00	; 0
     8fc:	82 1b       	sub	r24, r18
     8fe:	93 0b       	sbc	r25, r19
     900:	29 85       	ldd	r18, Y+9	; 0x09
     902:	3a 85       	ldd	r19, Y+10	; 0x0a
     904:	4b 85       	ldd	r20, Y+11	; 0x0b
     906:	5c 85       	ldd	r21, Y+12	; 0x0c
     908:	04 c0       	rjmp	.+8      	; 0x912 <__fixsfsi+0x68>
     90a:	56 95       	lsr	r21
     90c:	47 95       	ror	r20
     90e:	37 95       	ror	r19
     910:	27 95       	ror	r18
     912:	8a 95       	dec	r24
     914:	d2 f7       	brpl	.-12     	; 0x90a <__fixsfsi+0x60>
     916:	66 23       	and	r22, r22
     918:	b1 f0       	breq	.+44     	; 0x946 <__fixsfsi+0x9c>
     91a:	50 95       	com	r21
     91c:	40 95       	com	r20
     91e:	30 95       	com	r19
     920:	21 95       	neg	r18
     922:	3f 4f       	sbci	r19, 0xFF	; 255
     924:	4f 4f       	sbci	r20, 0xFF	; 255
     926:	5f 4f       	sbci	r21, 0xFF	; 255
     928:	0e c0       	rjmp	.+28     	; 0x946 <__fixsfsi+0x9c>
     92a:	20 e0       	ldi	r18, 0x00	; 0
     92c:	30 e0       	ldi	r19, 0x00	; 0
     92e:	40 e0       	ldi	r20, 0x00	; 0
     930:	50 e0       	ldi	r21, 0x00	; 0
     932:	09 c0       	rjmp	.+18     	; 0x946 <__fixsfsi+0x9c>
     934:	2f ef       	ldi	r18, 0xFF	; 255
     936:	3f ef       	ldi	r19, 0xFF	; 255
     938:	4f ef       	ldi	r20, 0xFF	; 255
     93a:	5f e7       	ldi	r21, 0x7F	; 127
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__fixsfsi+0x9c>
     93e:	20 e0       	ldi	r18, 0x00	; 0
     940:	30 e0       	ldi	r19, 0x00	; 0
     942:	40 e0       	ldi	r20, 0x00	; 0
     944:	50 e8       	ldi	r21, 0x80	; 128
     946:	b9 01       	movw	r22, r18
     948:	ca 01       	movw	r24, r20
     94a:	2c 96       	adiw	r28, 0x0c	; 12
     94c:	e2 e0       	ldi	r30, 0x02	; 2
     94e:	0c 94 4d 25 	jmp	0x4a9a	; 0x4a9a <__epilogue_restores__+0x20>

00000952 <__pack_f>:
     952:	df 92       	push	r13
     954:	ef 92       	push	r14
     956:	ff 92       	push	r15
     958:	0f 93       	push	r16
     95a:	1f 93       	push	r17
     95c:	fc 01       	movw	r30, r24
     95e:	e4 80       	ldd	r14, Z+4	; 0x04
     960:	f5 80       	ldd	r15, Z+5	; 0x05
     962:	06 81       	ldd	r16, Z+6	; 0x06
     964:	17 81       	ldd	r17, Z+7	; 0x07
     966:	d1 80       	ldd	r13, Z+1	; 0x01
     968:	80 81       	ld	r24, Z
     96a:	82 30       	cpi	r24, 0x02	; 2
     96c:	48 f4       	brcc	.+18     	; 0x980 <__pack_f+0x2e>
     96e:	80 e0       	ldi	r24, 0x00	; 0
     970:	90 e0       	ldi	r25, 0x00	; 0
     972:	a0 e1       	ldi	r26, 0x10	; 16
     974:	b0 e0       	ldi	r27, 0x00	; 0
     976:	e8 2a       	or	r14, r24
     978:	f9 2a       	or	r15, r25
     97a:	0a 2b       	or	r16, r26
     97c:	1b 2b       	or	r17, r27
     97e:	a5 c0       	rjmp	.+330    	; 0xaca <__pack_f+0x178>
     980:	84 30       	cpi	r24, 0x04	; 4
     982:	09 f4       	brne	.+2      	; 0x986 <__pack_f+0x34>
     984:	9f c0       	rjmp	.+318    	; 0xac4 <__pack_f+0x172>
     986:	82 30       	cpi	r24, 0x02	; 2
     988:	21 f4       	brne	.+8      	; 0x992 <__pack_f+0x40>
     98a:	ee 24       	eor	r14, r14
     98c:	ff 24       	eor	r15, r15
     98e:	87 01       	movw	r16, r14
     990:	05 c0       	rjmp	.+10     	; 0x99c <__pack_f+0x4a>
     992:	e1 14       	cp	r14, r1
     994:	f1 04       	cpc	r15, r1
     996:	01 05       	cpc	r16, r1
     998:	11 05       	cpc	r17, r1
     99a:	19 f4       	brne	.+6      	; 0x9a2 <__pack_f+0x50>
     99c:	e0 e0       	ldi	r30, 0x00	; 0
     99e:	f0 e0       	ldi	r31, 0x00	; 0
     9a0:	96 c0       	rjmp	.+300    	; 0xace <__pack_f+0x17c>
     9a2:	62 81       	ldd	r22, Z+2	; 0x02
     9a4:	73 81       	ldd	r23, Z+3	; 0x03
     9a6:	9f ef       	ldi	r25, 0xFF	; 255
     9a8:	62 38       	cpi	r22, 0x82	; 130
     9aa:	79 07       	cpc	r23, r25
     9ac:	0c f0       	brlt	.+2      	; 0x9b0 <__pack_f+0x5e>
     9ae:	5b c0       	rjmp	.+182    	; 0xa66 <__pack_f+0x114>
     9b0:	22 e8       	ldi	r18, 0x82	; 130
     9b2:	3f ef       	ldi	r19, 0xFF	; 255
     9b4:	26 1b       	sub	r18, r22
     9b6:	37 0b       	sbc	r19, r23
     9b8:	2a 31       	cpi	r18, 0x1A	; 26
     9ba:	31 05       	cpc	r19, r1
     9bc:	2c f0       	brlt	.+10     	; 0x9c8 <__pack_f+0x76>
     9be:	20 e0       	ldi	r18, 0x00	; 0
     9c0:	30 e0       	ldi	r19, 0x00	; 0
     9c2:	40 e0       	ldi	r20, 0x00	; 0
     9c4:	50 e0       	ldi	r21, 0x00	; 0
     9c6:	2a c0       	rjmp	.+84     	; 0xa1c <__pack_f+0xca>
     9c8:	b8 01       	movw	r22, r16
     9ca:	a7 01       	movw	r20, r14
     9cc:	02 2e       	mov	r0, r18
     9ce:	04 c0       	rjmp	.+8      	; 0x9d8 <__pack_f+0x86>
     9d0:	76 95       	lsr	r23
     9d2:	67 95       	ror	r22
     9d4:	57 95       	ror	r21
     9d6:	47 95       	ror	r20
     9d8:	0a 94       	dec	r0
     9da:	d2 f7       	brpl	.-12     	; 0x9d0 <__pack_f+0x7e>
     9dc:	81 e0       	ldi	r24, 0x01	; 1
     9de:	90 e0       	ldi	r25, 0x00	; 0
     9e0:	a0 e0       	ldi	r26, 0x00	; 0
     9e2:	b0 e0       	ldi	r27, 0x00	; 0
     9e4:	04 c0       	rjmp	.+8      	; 0x9ee <__pack_f+0x9c>
     9e6:	88 0f       	add	r24, r24
     9e8:	99 1f       	adc	r25, r25
     9ea:	aa 1f       	adc	r26, r26
     9ec:	bb 1f       	adc	r27, r27
     9ee:	2a 95       	dec	r18
     9f0:	d2 f7       	brpl	.-12     	; 0x9e6 <__pack_f+0x94>
     9f2:	01 97       	sbiw	r24, 0x01	; 1
     9f4:	a1 09       	sbc	r26, r1
     9f6:	b1 09       	sbc	r27, r1
     9f8:	8e 21       	and	r24, r14
     9fa:	9f 21       	and	r25, r15
     9fc:	a0 23       	and	r26, r16
     9fe:	b1 23       	and	r27, r17
     a00:	00 97       	sbiw	r24, 0x00	; 0
     a02:	a1 05       	cpc	r26, r1
     a04:	b1 05       	cpc	r27, r1
     a06:	21 f0       	breq	.+8      	; 0xa10 <__pack_f+0xbe>
     a08:	81 e0       	ldi	r24, 0x01	; 1
     a0a:	90 e0       	ldi	r25, 0x00	; 0
     a0c:	a0 e0       	ldi	r26, 0x00	; 0
     a0e:	b0 e0       	ldi	r27, 0x00	; 0
     a10:	9a 01       	movw	r18, r20
     a12:	ab 01       	movw	r20, r22
     a14:	28 2b       	or	r18, r24
     a16:	39 2b       	or	r19, r25
     a18:	4a 2b       	or	r20, r26
     a1a:	5b 2b       	or	r21, r27
     a1c:	da 01       	movw	r26, r20
     a1e:	c9 01       	movw	r24, r18
     a20:	8f 77       	andi	r24, 0x7F	; 127
     a22:	90 70       	andi	r25, 0x00	; 0
     a24:	a0 70       	andi	r26, 0x00	; 0
     a26:	b0 70       	andi	r27, 0x00	; 0
     a28:	80 34       	cpi	r24, 0x40	; 64
     a2a:	91 05       	cpc	r25, r1
     a2c:	a1 05       	cpc	r26, r1
     a2e:	b1 05       	cpc	r27, r1
     a30:	39 f4       	brne	.+14     	; 0xa40 <__pack_f+0xee>
     a32:	27 ff       	sbrs	r18, 7
     a34:	09 c0       	rjmp	.+18     	; 0xa48 <__pack_f+0xf6>
     a36:	20 5c       	subi	r18, 0xC0	; 192
     a38:	3f 4f       	sbci	r19, 0xFF	; 255
     a3a:	4f 4f       	sbci	r20, 0xFF	; 255
     a3c:	5f 4f       	sbci	r21, 0xFF	; 255
     a3e:	04 c0       	rjmp	.+8      	; 0xa48 <__pack_f+0xf6>
     a40:	21 5c       	subi	r18, 0xC1	; 193
     a42:	3f 4f       	sbci	r19, 0xFF	; 255
     a44:	4f 4f       	sbci	r20, 0xFF	; 255
     a46:	5f 4f       	sbci	r21, 0xFF	; 255
     a48:	e0 e0       	ldi	r30, 0x00	; 0
     a4a:	f0 e0       	ldi	r31, 0x00	; 0
     a4c:	20 30       	cpi	r18, 0x00	; 0
     a4e:	a0 e0       	ldi	r26, 0x00	; 0
     a50:	3a 07       	cpc	r19, r26
     a52:	a0 e0       	ldi	r26, 0x00	; 0
     a54:	4a 07       	cpc	r20, r26
     a56:	a0 e4       	ldi	r26, 0x40	; 64
     a58:	5a 07       	cpc	r21, r26
     a5a:	10 f0       	brcs	.+4      	; 0xa60 <__pack_f+0x10e>
     a5c:	e1 e0       	ldi	r30, 0x01	; 1
     a5e:	f0 e0       	ldi	r31, 0x00	; 0
     a60:	79 01       	movw	r14, r18
     a62:	8a 01       	movw	r16, r20
     a64:	27 c0       	rjmp	.+78     	; 0xab4 <__pack_f+0x162>
     a66:	60 38       	cpi	r22, 0x80	; 128
     a68:	71 05       	cpc	r23, r1
     a6a:	64 f5       	brge	.+88     	; 0xac4 <__pack_f+0x172>
     a6c:	fb 01       	movw	r30, r22
     a6e:	e1 58       	subi	r30, 0x81	; 129
     a70:	ff 4f       	sbci	r31, 0xFF	; 255
     a72:	d8 01       	movw	r26, r16
     a74:	c7 01       	movw	r24, r14
     a76:	8f 77       	andi	r24, 0x7F	; 127
     a78:	90 70       	andi	r25, 0x00	; 0
     a7a:	a0 70       	andi	r26, 0x00	; 0
     a7c:	b0 70       	andi	r27, 0x00	; 0
     a7e:	80 34       	cpi	r24, 0x40	; 64
     a80:	91 05       	cpc	r25, r1
     a82:	a1 05       	cpc	r26, r1
     a84:	b1 05       	cpc	r27, r1
     a86:	39 f4       	brne	.+14     	; 0xa96 <__pack_f+0x144>
     a88:	e7 fe       	sbrs	r14, 7
     a8a:	0d c0       	rjmp	.+26     	; 0xaa6 <__pack_f+0x154>
     a8c:	80 e4       	ldi	r24, 0x40	; 64
     a8e:	90 e0       	ldi	r25, 0x00	; 0
     a90:	a0 e0       	ldi	r26, 0x00	; 0
     a92:	b0 e0       	ldi	r27, 0x00	; 0
     a94:	04 c0       	rjmp	.+8      	; 0xa9e <__pack_f+0x14c>
     a96:	8f e3       	ldi	r24, 0x3F	; 63
     a98:	90 e0       	ldi	r25, 0x00	; 0
     a9a:	a0 e0       	ldi	r26, 0x00	; 0
     a9c:	b0 e0       	ldi	r27, 0x00	; 0
     a9e:	e8 0e       	add	r14, r24
     aa0:	f9 1e       	adc	r15, r25
     aa2:	0a 1f       	adc	r16, r26
     aa4:	1b 1f       	adc	r17, r27
     aa6:	17 ff       	sbrs	r17, 7
     aa8:	05 c0       	rjmp	.+10     	; 0xab4 <__pack_f+0x162>
     aaa:	16 95       	lsr	r17
     aac:	07 95       	ror	r16
     aae:	f7 94       	ror	r15
     ab0:	e7 94       	ror	r14
     ab2:	31 96       	adiw	r30, 0x01	; 1
     ab4:	87 e0       	ldi	r24, 0x07	; 7
     ab6:	16 95       	lsr	r17
     ab8:	07 95       	ror	r16
     aba:	f7 94       	ror	r15
     abc:	e7 94       	ror	r14
     abe:	8a 95       	dec	r24
     ac0:	d1 f7       	brne	.-12     	; 0xab6 <__pack_f+0x164>
     ac2:	05 c0       	rjmp	.+10     	; 0xace <__pack_f+0x17c>
     ac4:	ee 24       	eor	r14, r14
     ac6:	ff 24       	eor	r15, r15
     ac8:	87 01       	movw	r16, r14
     aca:	ef ef       	ldi	r30, 0xFF	; 255
     acc:	f0 e0       	ldi	r31, 0x00	; 0
     ace:	6e 2f       	mov	r22, r30
     ad0:	67 95       	ror	r22
     ad2:	66 27       	eor	r22, r22
     ad4:	67 95       	ror	r22
     ad6:	90 2f       	mov	r25, r16
     ad8:	9f 77       	andi	r25, 0x7F	; 127
     ada:	d7 94       	ror	r13
     adc:	dd 24       	eor	r13, r13
     ade:	d7 94       	ror	r13
     ae0:	8e 2f       	mov	r24, r30
     ae2:	86 95       	lsr	r24
     ae4:	49 2f       	mov	r20, r25
     ae6:	46 2b       	or	r20, r22
     ae8:	58 2f       	mov	r21, r24
     aea:	5d 29       	or	r21, r13
     aec:	b7 01       	movw	r22, r14
     aee:	ca 01       	movw	r24, r20
     af0:	1f 91       	pop	r17
     af2:	0f 91       	pop	r16
     af4:	ff 90       	pop	r15
     af6:	ef 90       	pop	r14
     af8:	df 90       	pop	r13
     afa:	08 95       	ret

00000afc <__unpack_f>:
     afc:	fc 01       	movw	r30, r24
     afe:	db 01       	movw	r26, r22
     b00:	40 81       	ld	r20, Z
     b02:	51 81       	ldd	r21, Z+1	; 0x01
     b04:	22 81       	ldd	r18, Z+2	; 0x02
     b06:	62 2f       	mov	r22, r18
     b08:	6f 77       	andi	r22, 0x7F	; 127
     b0a:	70 e0       	ldi	r23, 0x00	; 0
     b0c:	22 1f       	adc	r18, r18
     b0e:	22 27       	eor	r18, r18
     b10:	22 1f       	adc	r18, r18
     b12:	93 81       	ldd	r25, Z+3	; 0x03
     b14:	89 2f       	mov	r24, r25
     b16:	88 0f       	add	r24, r24
     b18:	82 2b       	or	r24, r18
     b1a:	28 2f       	mov	r18, r24
     b1c:	30 e0       	ldi	r19, 0x00	; 0
     b1e:	99 1f       	adc	r25, r25
     b20:	99 27       	eor	r25, r25
     b22:	99 1f       	adc	r25, r25
     b24:	11 96       	adiw	r26, 0x01	; 1
     b26:	9c 93       	st	X, r25
     b28:	11 97       	sbiw	r26, 0x01	; 1
     b2a:	21 15       	cp	r18, r1
     b2c:	31 05       	cpc	r19, r1
     b2e:	a9 f5       	brne	.+106    	; 0xb9a <__unpack_f+0x9e>
     b30:	41 15       	cp	r20, r1
     b32:	51 05       	cpc	r21, r1
     b34:	61 05       	cpc	r22, r1
     b36:	71 05       	cpc	r23, r1
     b38:	11 f4       	brne	.+4      	; 0xb3e <__unpack_f+0x42>
     b3a:	82 e0       	ldi	r24, 0x02	; 2
     b3c:	37 c0       	rjmp	.+110    	; 0xbac <__unpack_f+0xb0>
     b3e:	82 e8       	ldi	r24, 0x82	; 130
     b40:	9f ef       	ldi	r25, 0xFF	; 255
     b42:	13 96       	adiw	r26, 0x03	; 3
     b44:	9c 93       	st	X, r25
     b46:	8e 93       	st	-X, r24
     b48:	12 97       	sbiw	r26, 0x02	; 2
     b4a:	9a 01       	movw	r18, r20
     b4c:	ab 01       	movw	r20, r22
     b4e:	67 e0       	ldi	r22, 0x07	; 7
     b50:	22 0f       	add	r18, r18
     b52:	33 1f       	adc	r19, r19
     b54:	44 1f       	adc	r20, r20
     b56:	55 1f       	adc	r21, r21
     b58:	6a 95       	dec	r22
     b5a:	d1 f7       	brne	.-12     	; 0xb50 <__unpack_f+0x54>
     b5c:	83 e0       	ldi	r24, 0x03	; 3
     b5e:	8c 93       	st	X, r24
     b60:	0d c0       	rjmp	.+26     	; 0xb7c <__unpack_f+0x80>
     b62:	22 0f       	add	r18, r18
     b64:	33 1f       	adc	r19, r19
     b66:	44 1f       	adc	r20, r20
     b68:	55 1f       	adc	r21, r21
     b6a:	12 96       	adiw	r26, 0x02	; 2
     b6c:	8d 91       	ld	r24, X+
     b6e:	9c 91       	ld	r25, X
     b70:	13 97       	sbiw	r26, 0x03	; 3
     b72:	01 97       	sbiw	r24, 0x01	; 1
     b74:	13 96       	adiw	r26, 0x03	; 3
     b76:	9c 93       	st	X, r25
     b78:	8e 93       	st	-X, r24
     b7a:	12 97       	sbiw	r26, 0x02	; 2
     b7c:	20 30       	cpi	r18, 0x00	; 0
     b7e:	80 e0       	ldi	r24, 0x00	; 0
     b80:	38 07       	cpc	r19, r24
     b82:	80 e0       	ldi	r24, 0x00	; 0
     b84:	48 07       	cpc	r20, r24
     b86:	80 e4       	ldi	r24, 0x40	; 64
     b88:	58 07       	cpc	r21, r24
     b8a:	58 f3       	brcs	.-42     	; 0xb62 <__unpack_f+0x66>
     b8c:	14 96       	adiw	r26, 0x04	; 4
     b8e:	2d 93       	st	X+, r18
     b90:	3d 93       	st	X+, r19
     b92:	4d 93       	st	X+, r20
     b94:	5c 93       	st	X, r21
     b96:	17 97       	sbiw	r26, 0x07	; 7
     b98:	08 95       	ret
     b9a:	2f 3f       	cpi	r18, 0xFF	; 255
     b9c:	31 05       	cpc	r19, r1
     b9e:	79 f4       	brne	.+30     	; 0xbbe <__unpack_f+0xc2>
     ba0:	41 15       	cp	r20, r1
     ba2:	51 05       	cpc	r21, r1
     ba4:	61 05       	cpc	r22, r1
     ba6:	71 05       	cpc	r23, r1
     ba8:	19 f4       	brne	.+6      	; 0xbb0 <__unpack_f+0xb4>
     baa:	84 e0       	ldi	r24, 0x04	; 4
     bac:	8c 93       	st	X, r24
     bae:	08 95       	ret
     bb0:	64 ff       	sbrs	r22, 4
     bb2:	03 c0       	rjmp	.+6      	; 0xbba <__unpack_f+0xbe>
     bb4:	81 e0       	ldi	r24, 0x01	; 1
     bb6:	8c 93       	st	X, r24
     bb8:	12 c0       	rjmp	.+36     	; 0xbde <__unpack_f+0xe2>
     bba:	1c 92       	st	X, r1
     bbc:	10 c0       	rjmp	.+32     	; 0xbde <__unpack_f+0xe2>
     bbe:	2f 57       	subi	r18, 0x7F	; 127
     bc0:	30 40       	sbci	r19, 0x00	; 0
     bc2:	13 96       	adiw	r26, 0x03	; 3
     bc4:	3c 93       	st	X, r19
     bc6:	2e 93       	st	-X, r18
     bc8:	12 97       	sbiw	r26, 0x02	; 2
     bca:	83 e0       	ldi	r24, 0x03	; 3
     bcc:	8c 93       	st	X, r24
     bce:	87 e0       	ldi	r24, 0x07	; 7
     bd0:	44 0f       	add	r20, r20
     bd2:	55 1f       	adc	r21, r21
     bd4:	66 1f       	adc	r22, r22
     bd6:	77 1f       	adc	r23, r23
     bd8:	8a 95       	dec	r24
     bda:	d1 f7       	brne	.-12     	; 0xbd0 <__unpack_f+0xd4>
     bdc:	70 64       	ori	r23, 0x40	; 64
     bde:	14 96       	adiw	r26, 0x04	; 4
     be0:	4d 93       	st	X+, r20
     be2:	5d 93       	st	X+, r21
     be4:	6d 93       	st	X+, r22
     be6:	7c 93       	st	X, r23
     be8:	17 97       	sbiw	r26, 0x07	; 7
     bea:	08 95       	ret

00000bec <__fpcmp_parts_f>:
     bec:	1f 93       	push	r17
     bee:	dc 01       	movw	r26, r24
     bf0:	fb 01       	movw	r30, r22
     bf2:	9c 91       	ld	r25, X
     bf4:	92 30       	cpi	r25, 0x02	; 2
     bf6:	08 f4       	brcc	.+2      	; 0xbfa <__fpcmp_parts_f+0xe>
     bf8:	47 c0       	rjmp	.+142    	; 0xc88 <__fpcmp_parts_f+0x9c>
     bfa:	80 81       	ld	r24, Z
     bfc:	82 30       	cpi	r24, 0x02	; 2
     bfe:	08 f4       	brcc	.+2      	; 0xc02 <__fpcmp_parts_f+0x16>
     c00:	43 c0       	rjmp	.+134    	; 0xc88 <__fpcmp_parts_f+0x9c>
     c02:	94 30       	cpi	r25, 0x04	; 4
     c04:	51 f4       	brne	.+20     	; 0xc1a <__fpcmp_parts_f+0x2e>
     c06:	11 96       	adiw	r26, 0x01	; 1
     c08:	1c 91       	ld	r17, X
     c0a:	84 30       	cpi	r24, 0x04	; 4
     c0c:	99 f5       	brne	.+102    	; 0xc74 <__fpcmp_parts_f+0x88>
     c0e:	81 81       	ldd	r24, Z+1	; 0x01
     c10:	68 2f       	mov	r22, r24
     c12:	70 e0       	ldi	r23, 0x00	; 0
     c14:	61 1b       	sub	r22, r17
     c16:	71 09       	sbc	r23, r1
     c18:	3f c0       	rjmp	.+126    	; 0xc98 <__fpcmp_parts_f+0xac>
     c1a:	84 30       	cpi	r24, 0x04	; 4
     c1c:	21 f0       	breq	.+8      	; 0xc26 <__fpcmp_parts_f+0x3a>
     c1e:	92 30       	cpi	r25, 0x02	; 2
     c20:	31 f4       	brne	.+12     	; 0xc2e <__fpcmp_parts_f+0x42>
     c22:	82 30       	cpi	r24, 0x02	; 2
     c24:	b9 f1       	breq	.+110    	; 0xc94 <__fpcmp_parts_f+0xa8>
     c26:	81 81       	ldd	r24, Z+1	; 0x01
     c28:	88 23       	and	r24, r24
     c2a:	89 f1       	breq	.+98     	; 0xc8e <__fpcmp_parts_f+0xa2>
     c2c:	2d c0       	rjmp	.+90     	; 0xc88 <__fpcmp_parts_f+0x9c>
     c2e:	11 96       	adiw	r26, 0x01	; 1
     c30:	1c 91       	ld	r17, X
     c32:	11 97       	sbiw	r26, 0x01	; 1
     c34:	82 30       	cpi	r24, 0x02	; 2
     c36:	f1 f0       	breq	.+60     	; 0xc74 <__fpcmp_parts_f+0x88>
     c38:	81 81       	ldd	r24, Z+1	; 0x01
     c3a:	18 17       	cp	r17, r24
     c3c:	d9 f4       	brne	.+54     	; 0xc74 <__fpcmp_parts_f+0x88>
     c3e:	12 96       	adiw	r26, 0x02	; 2
     c40:	2d 91       	ld	r18, X+
     c42:	3c 91       	ld	r19, X
     c44:	13 97       	sbiw	r26, 0x03	; 3
     c46:	82 81       	ldd	r24, Z+2	; 0x02
     c48:	93 81       	ldd	r25, Z+3	; 0x03
     c4a:	82 17       	cp	r24, r18
     c4c:	93 07       	cpc	r25, r19
     c4e:	94 f0       	brlt	.+36     	; 0xc74 <__fpcmp_parts_f+0x88>
     c50:	28 17       	cp	r18, r24
     c52:	39 07       	cpc	r19, r25
     c54:	bc f0       	brlt	.+46     	; 0xc84 <__fpcmp_parts_f+0x98>
     c56:	14 96       	adiw	r26, 0x04	; 4
     c58:	8d 91       	ld	r24, X+
     c5a:	9d 91       	ld	r25, X+
     c5c:	0d 90       	ld	r0, X+
     c5e:	bc 91       	ld	r27, X
     c60:	a0 2d       	mov	r26, r0
     c62:	24 81       	ldd	r18, Z+4	; 0x04
     c64:	35 81       	ldd	r19, Z+5	; 0x05
     c66:	46 81       	ldd	r20, Z+6	; 0x06
     c68:	57 81       	ldd	r21, Z+7	; 0x07
     c6a:	28 17       	cp	r18, r24
     c6c:	39 07       	cpc	r19, r25
     c6e:	4a 07       	cpc	r20, r26
     c70:	5b 07       	cpc	r21, r27
     c72:	18 f4       	brcc	.+6      	; 0xc7a <__fpcmp_parts_f+0x8e>
     c74:	11 23       	and	r17, r17
     c76:	41 f0       	breq	.+16     	; 0xc88 <__fpcmp_parts_f+0x9c>
     c78:	0a c0       	rjmp	.+20     	; 0xc8e <__fpcmp_parts_f+0xa2>
     c7a:	82 17       	cp	r24, r18
     c7c:	93 07       	cpc	r25, r19
     c7e:	a4 07       	cpc	r26, r20
     c80:	b5 07       	cpc	r27, r21
     c82:	40 f4       	brcc	.+16     	; 0xc94 <__fpcmp_parts_f+0xa8>
     c84:	11 23       	and	r17, r17
     c86:	19 f0       	breq	.+6      	; 0xc8e <__fpcmp_parts_f+0xa2>
     c88:	61 e0       	ldi	r22, 0x01	; 1
     c8a:	70 e0       	ldi	r23, 0x00	; 0
     c8c:	05 c0       	rjmp	.+10     	; 0xc98 <__fpcmp_parts_f+0xac>
     c8e:	6f ef       	ldi	r22, 0xFF	; 255
     c90:	7f ef       	ldi	r23, 0xFF	; 255
     c92:	02 c0       	rjmp	.+4      	; 0xc98 <__fpcmp_parts_f+0xac>
     c94:	60 e0       	ldi	r22, 0x00	; 0
     c96:	70 e0       	ldi	r23, 0x00	; 0
     c98:	cb 01       	movw	r24, r22
     c9a:	1f 91       	pop	r17
     c9c:	08 95       	ret

00000c9e <main>:
void displayOptionsAndGetUserOption(void);
void checkSide(void);
/***********************************************************/
u8 pass[] = PASSWORD , userPass[PASSWORD_LENGTH] ,Flag =0 ,Index =0,adminFlag =0,option =0;
u16 sensor1Value  = 0,sensor2Value =0;
int main(){
     c9e:	df 93       	push	r29
     ca0:	cf 93       	push	r28
     ca2:	cd b7       	in	r28, 0x3d	; 61
     ca4:	de b7       	in	r29, 0x3e	; 62
	ADC_enu_Init();
     ca6:	0e 94 8c 23 	call	0x4718	; 0x4718 <ADC_enu_Init>
	Keypad_enu_Init();
     caa:	0e 94 c6 17 	call	0x2f8c	; 0x2f8c <Keypad_enu_Init>
	Servo_enu_Init();
     cae:	0e 94 c1 0e 	call	0x1d82	; 0x1d82 <Servo_enu_Init>
	LCD_enu_Init();
     cb2:	0e 94 00 14 	call	0x2800	; 0x2800 <LCD_enu_Init>
	LCD_enu_SendString("Hi...");
     cb6:	80 e6       	ldi	r24, 0x60	; 96
     cb8:	90 e0       	ldi	r25, 0x00	; 0
     cba:	0e 94 23 13 	call	0x2646	; 0x2646 <LCD_enu_SendString>
	while(1){
		checkSide();
     cbe:	0e 94 a2 08 	call	0x1144	; 0x1144 <checkSide>
     cc2:	fd cf       	rjmp	.-6      	; 0xcbe <main+0x20>

00000cc4 <wrongPasswordHandling>:
	}
	return 0;
}
/**********************************************************************/
void wrongPasswordHandling(void){
     cc4:	df 93       	push	r29
     cc6:	cf 93       	push	r28
     cc8:	cd b7       	in	r28, 0x3d	; 61
     cca:	de b7       	in	r29, 0x3e	; 62
     ccc:	2e 97       	sbiw	r28, 0x0e	; 14
     cce:	0f b6       	in	r0, 0x3f	; 63
     cd0:	f8 94       	cli
     cd2:	de bf       	out	0x3e, r29	; 62
     cd4:	0f be       	out	0x3f, r0	; 63
     cd6:	cd bf       	out	0x3d, r28	; 61
	Index = 0;
     cd8:	10 92 23 01 	sts	0x0123, r1
	Flag = 0;
     cdc:	10 92 22 01 	sts	0x0122, r1
	LCD_enu_Clear();
     ce0:	0e 94 ed 16 	call	0x2dda	; 0x2dda <LCD_enu_Clear>
	LCD_enu_SendString("Wrong Password!");
     ce4:	86 e6       	ldi	r24, 0x66	; 102
     ce6:	90 e0       	ldi	r25, 0x00	; 0
     ce8:	0e 94 23 13 	call	0x2646	; 0x2646 <LCD_enu_SendString>
     cec:	80 e0       	ldi	r24, 0x00	; 0
     cee:	90 e0       	ldi	r25, 0x00	; 0
     cf0:	aa e7       	ldi	r26, 0x7A	; 122
     cf2:	b4 e4       	ldi	r27, 0x44	; 68
     cf4:	8b 87       	std	Y+11, r24	; 0x0b
     cf6:	9c 87       	std	Y+12, r25	; 0x0c
     cf8:	ad 87       	std	Y+13, r26	; 0x0d
     cfa:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     cfc:	6b 85       	ldd	r22, Y+11	; 0x0b
     cfe:	7c 85       	ldd	r23, Y+12	; 0x0c
     d00:	8d 85       	ldd	r24, Y+13	; 0x0d
     d02:	9e 85       	ldd	r25, Y+14	; 0x0e
     d04:	20 e0       	ldi	r18, 0x00	; 0
     d06:	30 e0       	ldi	r19, 0x00	; 0
     d08:	4a e7       	ldi	r20, 0x7A	; 122
     d0a:	55 e4       	ldi	r21, 0x45	; 69
     d0c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     d10:	dc 01       	movw	r26, r24
     d12:	cb 01       	movw	r24, r22
     d14:	8f 83       	std	Y+7, r24	; 0x07
     d16:	98 87       	std	Y+8, r25	; 0x08
     d18:	a9 87       	std	Y+9, r26	; 0x09
     d1a:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
     d1c:	6f 81       	ldd	r22, Y+7	; 0x07
     d1e:	78 85       	ldd	r23, Y+8	; 0x08
     d20:	89 85       	ldd	r24, Y+9	; 0x09
     d22:	9a 85       	ldd	r25, Y+10	; 0x0a
     d24:	20 e0       	ldi	r18, 0x00	; 0
     d26:	30 e0       	ldi	r19, 0x00	; 0
     d28:	40 e8       	ldi	r20, 0x80	; 128
     d2a:	5f e3       	ldi	r21, 0x3F	; 63
     d2c:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
     d30:	88 23       	and	r24, r24
     d32:	2c f4       	brge	.+10     	; 0xd3e <wrongPasswordHandling+0x7a>
		__ticks = 1;
     d34:	81 e0       	ldi	r24, 0x01	; 1
     d36:	90 e0       	ldi	r25, 0x00	; 0
     d38:	9e 83       	std	Y+6, r25	; 0x06
     d3a:	8d 83       	std	Y+5, r24	; 0x05
     d3c:	3f c0       	rjmp	.+126    	; 0xdbc <wrongPasswordHandling+0xf8>
	else if (__tmp > 65535)
     d3e:	6f 81       	ldd	r22, Y+7	; 0x07
     d40:	78 85       	ldd	r23, Y+8	; 0x08
     d42:	89 85       	ldd	r24, Y+9	; 0x09
     d44:	9a 85       	ldd	r25, Y+10	; 0x0a
     d46:	20 e0       	ldi	r18, 0x00	; 0
     d48:	3f ef       	ldi	r19, 0xFF	; 255
     d4a:	4f e7       	ldi	r20, 0x7F	; 127
     d4c:	57 e4       	ldi	r21, 0x47	; 71
     d4e:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
     d52:	18 16       	cp	r1, r24
     d54:	4c f5       	brge	.+82     	; 0xda8 <wrongPasswordHandling+0xe4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     d56:	6b 85       	ldd	r22, Y+11	; 0x0b
     d58:	7c 85       	ldd	r23, Y+12	; 0x0c
     d5a:	8d 85       	ldd	r24, Y+13	; 0x0d
     d5c:	9e 85       	ldd	r25, Y+14	; 0x0e
     d5e:	20 e0       	ldi	r18, 0x00	; 0
     d60:	30 e0       	ldi	r19, 0x00	; 0
     d62:	40 e2       	ldi	r20, 0x20	; 32
     d64:	51 e4       	ldi	r21, 0x41	; 65
     d66:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     d6a:	dc 01       	movw	r26, r24
     d6c:	cb 01       	movw	r24, r22
     d6e:	bc 01       	movw	r22, r24
     d70:	cd 01       	movw	r24, r26
     d72:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     d76:	dc 01       	movw	r26, r24
     d78:	cb 01       	movw	r24, r22
     d7a:	9e 83       	std	Y+6, r25	; 0x06
     d7c:	8d 83       	std	Y+5, r24	; 0x05
     d7e:	0f c0       	rjmp	.+30     	; 0xd9e <wrongPasswordHandling+0xda>
     d80:	80 e9       	ldi	r24, 0x90	; 144
     d82:	91 e0       	ldi	r25, 0x01	; 1
     d84:	9c 83       	std	Y+4, r25	; 0x04
     d86:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     d88:	8b 81       	ldd	r24, Y+3	; 0x03
     d8a:	9c 81       	ldd	r25, Y+4	; 0x04
     d8c:	01 97       	sbiw	r24, 0x01	; 1
     d8e:	f1 f7       	brne	.-4      	; 0xd8c <wrongPasswordHandling+0xc8>
     d90:	9c 83       	std	Y+4, r25	; 0x04
     d92:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     d94:	8d 81       	ldd	r24, Y+5	; 0x05
     d96:	9e 81       	ldd	r25, Y+6	; 0x06
     d98:	01 97       	sbiw	r24, 0x01	; 1
     d9a:	9e 83       	std	Y+6, r25	; 0x06
     d9c:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     d9e:	8d 81       	ldd	r24, Y+5	; 0x05
     da0:	9e 81       	ldd	r25, Y+6	; 0x06
     da2:	00 97       	sbiw	r24, 0x00	; 0
     da4:	69 f7       	brne	.-38     	; 0xd80 <wrongPasswordHandling+0xbc>
     da6:	14 c0       	rjmp	.+40     	; 0xdd0 <wrongPasswordHandling+0x10c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     da8:	6f 81       	ldd	r22, Y+7	; 0x07
     daa:	78 85       	ldd	r23, Y+8	; 0x08
     dac:	89 85       	ldd	r24, Y+9	; 0x09
     dae:	9a 85       	ldd	r25, Y+10	; 0x0a
     db0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     db4:	dc 01       	movw	r26, r24
     db6:	cb 01       	movw	r24, r22
     db8:	9e 83       	std	Y+6, r25	; 0x06
     dba:	8d 83       	std	Y+5, r24	; 0x05
     dbc:	8d 81       	ldd	r24, Y+5	; 0x05
     dbe:	9e 81       	ldd	r25, Y+6	; 0x06
     dc0:	9a 83       	std	Y+2, r25	; 0x02
     dc2:	89 83       	std	Y+1, r24	; 0x01
     dc4:	89 81       	ldd	r24, Y+1	; 0x01
     dc6:	9a 81       	ldd	r25, Y+2	; 0x02
     dc8:	01 97       	sbiw	r24, 0x01	; 1
     dca:	f1 f7       	brne	.-4      	; 0xdc8 <wrongPasswordHandling+0x104>
     dcc:	9a 83       	std	Y+2, r25	; 0x02
     dce:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1000);
	LCD_enu_Clear();
     dd0:	0e 94 ed 16 	call	0x2dda	; 0x2dda <LCD_enu_Clear>
	LCD_enu_SendString("Enter Password:");
     dd4:	86 e7       	ldi	r24, 0x76	; 118
     dd6:	90 e0       	ldi	r25, 0x00	; 0
     dd8:	0e 94 23 13 	call	0x2646	; 0x2646 <LCD_enu_SendString>
	LCD_enu_SetCursor(1,0);
     ddc:	81 e0       	ldi	r24, 0x01	; 1
     dde:	60 e0       	ldi	r22, 0x00	; 0
     de0:	0e 94 cd 13 	call	0x279a	; 0x279a <LCD_enu_SetCursor>
}
     de4:	2e 96       	adiw	r28, 0x0e	; 14
     de6:	0f b6       	in	r0, 0x3f	; 63
     de8:	f8 94       	cli
     dea:	de bf       	out	0x3e, r29	; 62
     dec:	0f be       	out	0x3f, r0	; 63
     dee:	cd bf       	out	0x3d, r28	; 61
     df0:	cf 91       	pop	r28
     df2:	df 91       	pop	r29
     df4:	08 95       	ret

00000df6 <getUserPassword>:
void getUserPassword(void){
     df6:	df 93       	push	r29
     df8:	cf 93       	push	r28
     dfa:	cd b7       	in	r28, 0x3d	; 61
     dfc:	de b7       	in	r29, 0x3e	; 62
     dfe:	6e 97       	sbiw	r28, 0x1e	; 30
     e00:	0f b6       	in	r0, 0x3f	; 63
     e02:	f8 94       	cli
     e04:	de bf       	out	0x3e, r29	; 62
     e06:	0f be       	out	0x3f, r0	; 63
     e08:	cd bf       	out	0x3d, r28	; 61
	LCD_enu_Clear();
     e0a:	0e 94 ed 16 	call	0x2dda	; 0x2dda <LCD_enu_Clear>
	LCD_enu_SendString("Enter Password:");
     e0e:	86 e7       	ldi	r24, 0x76	; 118
     e10:	90 e0       	ldi	r25, 0x00	; 0
     e12:	0e 94 23 13 	call	0x2646	; 0x2646 <LCD_enu_SendString>
	LCD_enu_SetCursor(1,0);
     e16:	81 e0       	ldi	r24, 0x01	; 1
     e18:	60 e0       	ldi	r22, 0x00	; 0
     e1a:	0e 94 cd 13 	call	0x279a	; 0x279a <LCD_enu_SetCursor>
	while(1){
		u8 key =0;
     e1e:	1e 8e       	std	Y+30, r1	; 0x1e
		Keypad_enu_getKey(&key);
     e20:	ce 01       	movw	r24, r28
     e22:	4e 96       	adiw	r24, 0x1e	; 30
     e24:	0e 94 08 18 	call	0x3010	; 0x3010 <Keypad_enu_getKey>
		if((key != KEYPAD_U8_NO_KEY_PRESSED) && (key != '=')){
     e28:	8e 8d       	ldd	r24, Y+30	; 0x1e
     e2a:	8f 3f       	cpi	r24, 0xFF	; 255
     e2c:	a9 f0       	breq	.+42     	; 0xe58 <getUserPassword+0x62>
     e2e:	8e 8d       	ldd	r24, Y+30	; 0x1e
     e30:	8d 33       	cpi	r24, 0x3D	; 61
     e32:	91 f0       	breq	.+36     	; 0xe58 <getUserPassword+0x62>
			LCD_enu_SendChar('*');
     e34:	8a e2       	ldi	r24, 0x2A	; 42
     e36:	0e 94 23 11 	call	0x2246	; 0x2246 <LCD_enu_SendChar>
			userPass[Index] =key;
     e3a:	80 91 23 01 	lds	r24, 0x0123
     e3e:	88 2f       	mov	r24, r24
     e40:	90 e0       	ldi	r25, 0x00	; 0
     e42:	2e 8d       	ldd	r18, Y+30	; 0x1e
     e44:	fc 01       	movw	r30, r24
     e46:	e7 5c       	subi	r30, 0xC7	; 199
     e48:	fe 4f       	sbci	r31, 0xFE	; 254
     e4a:	20 83       	st	Z, r18
			Index++;
     e4c:	80 91 23 01 	lds	r24, 0x0123
     e50:	8f 5f       	subi	r24, 0xFF	; 255
     e52:	80 93 23 01 	sts	0x0123, r24
     e56:	e3 cf       	rjmp	.-58     	; 0xe1e <getUserPassword+0x28>
		}else if(key == '='){
     e58:	8e 8d       	ldd	r24, Y+30	; 0x1e
     e5a:	8d 33       	cpi	r24, 0x3D	; 61
     e5c:	01 f7       	brne	.-64     	; 0xe1e <getUserPassword+0x28>
			if(Index == PASSWORD_LENGTH){
     e5e:	80 91 23 01 	lds	r24, 0x0123
     e62:	85 30       	cpi	r24, 0x05	; 5
     e64:	e9 f4       	brne	.+58     	; 0xea0 <getUserPassword+0xaa>
				for(u8 i = 0;i< PASSWORD_LENGTH;i++){
     e66:	1d 8e       	std	Y+29, r1	; 0x1d
     e68:	17 c0       	rjmp	.+46     	; 0xe98 <getUserPassword+0xa2>
					if(pass[i]!=userPass[i]){
     e6a:	8d 8d       	ldd	r24, Y+29	; 0x1d
     e6c:	88 2f       	mov	r24, r24
     e6e:	90 e0       	ldi	r25, 0x00	; 0
     e70:	fc 01       	movw	r30, r24
     e72:	ef 50       	subi	r30, 0x0F	; 15
     e74:	ff 4f       	sbci	r31, 0xFF	; 255
     e76:	20 81       	ld	r18, Z
     e78:	8d 8d       	ldd	r24, Y+29	; 0x1d
     e7a:	88 2f       	mov	r24, r24
     e7c:	90 e0       	ldi	r25, 0x00	; 0
     e7e:	fc 01       	movw	r30, r24
     e80:	e7 5c       	subi	r30, 0xC7	; 199
     e82:	fe 4f       	sbci	r31, 0xFE	; 254
     e84:	80 81       	ld	r24, Z
     e86:	28 17       	cp	r18, r24
     e88:	21 f0       	breq	.+8      	; 0xe92 <getUserPassword+0x9c>
						Flag = 1;
     e8a:	81 e0       	ldi	r24, 0x01	; 1
     e8c:	80 93 22 01 	sts	0x0122, r24
     e90:	09 c0       	rjmp	.+18     	; 0xea4 <getUserPassword+0xae>
			LCD_enu_SendChar('*');
			userPass[Index] =key;
			Index++;
		}else if(key == '='){
			if(Index == PASSWORD_LENGTH){
				for(u8 i = 0;i< PASSWORD_LENGTH;i++){
     e92:	8d 8d       	ldd	r24, Y+29	; 0x1d
     e94:	8f 5f       	subi	r24, 0xFF	; 255
     e96:	8d 8f       	std	Y+29, r24	; 0x1d
     e98:	8d 8d       	ldd	r24, Y+29	; 0x1d
     e9a:	85 30       	cpi	r24, 0x05	; 5
     e9c:	30 f3       	brcs	.-52     	; 0xe6a <getUserPassword+0x74>
     e9e:	02 c0       	rjmp	.+4      	; 0xea4 <getUserPassword+0xae>
						Flag = 1;
						break;
					}
				}
			}else{
				wrongPasswordHandling();
     ea0:	0e 94 62 06 	call	0xcc4	; 0xcc4 <wrongPasswordHandling>
			}
			if(Flag){
     ea4:	80 91 22 01 	lds	r24, 0x0122
     ea8:	88 23       	and	r24, r24
     eaa:	19 f0       	breq	.+6      	; 0xeb2 <getUserPassword+0xbc>
				wrongPasswordHandling();
     eac:	0e 94 62 06 	call	0xcc4	; 0xcc4 <wrongPasswordHandling>
     eb0:	b6 cf       	rjmp	.-148    	; 0xe1e <getUserPassword+0x28>
			}else if ((!Flag)&&(Index == PASSWORD_LENGTH)){
     eb2:	80 91 22 01 	lds	r24, 0x0122
     eb6:	88 23       	and	r24, r24
     eb8:	09 f0       	breq	.+2      	; 0xebc <getUserPassword+0xc6>
     eba:	b1 cf       	rjmp	.-158    	; 0xe1e <getUserPassword+0x28>
     ebc:	80 91 23 01 	lds	r24, 0x0123
     ec0:	85 30       	cpi	r24, 0x05	; 5
     ec2:	09 f0       	breq	.+2      	; 0xec6 <getUserPassword+0xd0>
     ec4:	ac cf       	rjmp	.-168    	; 0xe1e <getUserPassword+0x28>
				LCD_enu_Clear();
     ec6:	0e 94 ed 16 	call	0x2dda	; 0x2dda <LCD_enu_Clear>
				if(option == '1'){
     eca:	80 91 25 01 	lds	r24, 0x0125
     ece:	81 33       	cpi	r24, 0x31	; 49
     ed0:	09 f0       	breq	.+2      	; 0xed4 <getUserPassword+0xde>
     ed2:	86 c0       	rjmp	.+268    	; 0xfe0 <getUserPassword+0x1ea>
					LCD_enu_SendString("Welcome, User :)");
     ed4:	86 e8       	ldi	r24, 0x86	; 134
     ed6:	90 e0       	ldi	r25, 0x00	; 0
     ed8:	0e 94 23 13 	call	0x2646	; 0x2646 <LCD_enu_SendString>
					LCD_enu_SetCursor(1,0);
     edc:	81 e0       	ldi	r24, 0x01	; 1
     ede:	60 e0       	ldi	r22, 0x00	; 0
     ee0:	0e 94 cd 13 	call	0x279a	; 0x279a <LCD_enu_SetCursor>
					LCD_enu_SendString("Door Locked");
     ee4:	87 e9       	ldi	r24, 0x97	; 151
     ee6:	90 e0       	ldi	r25, 0x00	; 0
     ee8:	0e 94 23 13 	call	0x2646	; 0x2646 <LCD_enu_SendString>
     eec:	80 e0       	ldi	r24, 0x00	; 0
     eee:	90 e0       	ldi	r25, 0x00	; 0
     ef0:	aa e7       	ldi	r26, 0x7A	; 122
     ef2:	b4 e4       	ldi	r27, 0x44	; 68
     ef4:	89 8f       	std	Y+25, r24	; 0x19
     ef6:	9a 8f       	std	Y+26, r25	; 0x1a
     ef8:	ab 8f       	std	Y+27, r26	; 0x1b
     efa:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     efc:	69 8d       	ldd	r22, Y+25	; 0x19
     efe:	7a 8d       	ldd	r23, Y+26	; 0x1a
     f00:	8b 8d       	ldd	r24, Y+27	; 0x1b
     f02:	9c 8d       	ldd	r25, Y+28	; 0x1c
     f04:	20 e0       	ldi	r18, 0x00	; 0
     f06:	30 e0       	ldi	r19, 0x00	; 0
     f08:	4a e7       	ldi	r20, 0x7A	; 122
     f0a:	55 e4       	ldi	r21, 0x45	; 69
     f0c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     f10:	dc 01       	movw	r26, r24
     f12:	cb 01       	movw	r24, r22
     f14:	8d 8b       	std	Y+21, r24	; 0x15
     f16:	9e 8b       	std	Y+22, r25	; 0x16
     f18:	af 8b       	std	Y+23, r26	; 0x17
     f1a:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
     f1c:	6d 89       	ldd	r22, Y+21	; 0x15
     f1e:	7e 89       	ldd	r23, Y+22	; 0x16
     f20:	8f 89       	ldd	r24, Y+23	; 0x17
     f22:	98 8d       	ldd	r25, Y+24	; 0x18
     f24:	20 e0       	ldi	r18, 0x00	; 0
     f26:	30 e0       	ldi	r19, 0x00	; 0
     f28:	40 e8       	ldi	r20, 0x80	; 128
     f2a:	5f e3       	ldi	r21, 0x3F	; 63
     f2c:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
     f30:	88 23       	and	r24, r24
     f32:	2c f4       	brge	.+10     	; 0xf3e <getUserPassword+0x148>
		__ticks = 1;
     f34:	81 e0       	ldi	r24, 0x01	; 1
     f36:	90 e0       	ldi	r25, 0x00	; 0
     f38:	9c 8b       	std	Y+20, r25	; 0x14
     f3a:	8b 8b       	std	Y+19, r24	; 0x13
     f3c:	3f c0       	rjmp	.+126    	; 0xfbc <getUserPassword+0x1c6>
	else if (__tmp > 65535)
     f3e:	6d 89       	ldd	r22, Y+21	; 0x15
     f40:	7e 89       	ldd	r23, Y+22	; 0x16
     f42:	8f 89       	ldd	r24, Y+23	; 0x17
     f44:	98 8d       	ldd	r25, Y+24	; 0x18
     f46:	20 e0       	ldi	r18, 0x00	; 0
     f48:	3f ef       	ldi	r19, 0xFF	; 255
     f4a:	4f e7       	ldi	r20, 0x7F	; 127
     f4c:	57 e4       	ldi	r21, 0x47	; 71
     f4e:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
     f52:	18 16       	cp	r1, r24
     f54:	4c f5       	brge	.+82     	; 0xfa8 <getUserPassword+0x1b2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     f56:	69 8d       	ldd	r22, Y+25	; 0x19
     f58:	7a 8d       	ldd	r23, Y+26	; 0x1a
     f5a:	8b 8d       	ldd	r24, Y+27	; 0x1b
     f5c:	9c 8d       	ldd	r25, Y+28	; 0x1c
     f5e:	20 e0       	ldi	r18, 0x00	; 0
     f60:	30 e0       	ldi	r19, 0x00	; 0
     f62:	40 e2       	ldi	r20, 0x20	; 32
     f64:	51 e4       	ldi	r21, 0x41	; 65
     f66:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     f6a:	dc 01       	movw	r26, r24
     f6c:	cb 01       	movw	r24, r22
     f6e:	bc 01       	movw	r22, r24
     f70:	cd 01       	movw	r24, r26
     f72:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     f76:	dc 01       	movw	r26, r24
     f78:	cb 01       	movw	r24, r22
     f7a:	9c 8b       	std	Y+20, r25	; 0x14
     f7c:	8b 8b       	std	Y+19, r24	; 0x13
     f7e:	0f c0       	rjmp	.+30     	; 0xf9e <getUserPassword+0x1a8>
     f80:	80 e9       	ldi	r24, 0x90	; 144
     f82:	91 e0       	ldi	r25, 0x01	; 1
     f84:	9a 8b       	std	Y+18, r25	; 0x12
     f86:	89 8b       	std	Y+17, r24	; 0x11
     f88:	89 89       	ldd	r24, Y+17	; 0x11
     f8a:	9a 89       	ldd	r25, Y+18	; 0x12
     f8c:	01 97       	sbiw	r24, 0x01	; 1
     f8e:	f1 f7       	brne	.-4      	; 0xf8c <getUserPassword+0x196>
     f90:	9a 8b       	std	Y+18, r25	; 0x12
     f92:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     f94:	8b 89       	ldd	r24, Y+19	; 0x13
     f96:	9c 89       	ldd	r25, Y+20	; 0x14
     f98:	01 97       	sbiw	r24, 0x01	; 1
     f9a:	9c 8b       	std	Y+20, r25	; 0x14
     f9c:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     f9e:	8b 89       	ldd	r24, Y+19	; 0x13
     fa0:	9c 89       	ldd	r25, Y+20	; 0x14
     fa2:	00 97       	sbiw	r24, 0x00	; 0
     fa4:	69 f7       	brne	.-38     	; 0xf80 <getUserPassword+0x18a>
     fa6:	14 c0       	rjmp	.+40     	; 0xfd0 <getUserPassword+0x1da>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     fa8:	6d 89       	ldd	r22, Y+21	; 0x15
     faa:	7e 89       	ldd	r23, Y+22	; 0x16
     fac:	8f 89       	ldd	r24, Y+23	; 0x17
     fae:	98 8d       	ldd	r25, Y+24	; 0x18
     fb0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     fb4:	dc 01       	movw	r26, r24
     fb6:	cb 01       	movw	r24, r22
     fb8:	9c 8b       	std	Y+20, r25	; 0x14
     fba:	8b 8b       	std	Y+19, r24	; 0x13
     fbc:	8b 89       	ldd	r24, Y+19	; 0x13
     fbe:	9c 89       	ldd	r25, Y+20	; 0x14
     fc0:	98 8b       	std	Y+16, r25	; 0x10
     fc2:	8f 87       	std	Y+15, r24	; 0x0f
     fc4:	8f 85       	ldd	r24, Y+15	; 0x0f
     fc6:	98 89       	ldd	r25, Y+16	; 0x10
     fc8:	01 97       	sbiw	r24, 0x01	; 1
     fca:	f1 f7       	brne	.-4      	; 0xfc8 <getUserPassword+0x1d2>
     fcc:	98 8b       	std	Y+16, r25	; 0x10
     fce:	8f 87       	std	Y+15, r24	; 0x0f
					_delay_ms(1000);
					adminFlag = 1;
     fd0:	81 e0       	ldi	r24, 0x01	; 1
     fd2:	80 93 24 01 	sts	0x0124, r24
					option = 0;
     fd6:	10 92 25 01 	sts	0x0125, r1
					Index= 0;
     fda:	10 92 23 01 	sts	0x0123, r1
     fde:	85 c0       	rjmp	.+266    	; 0x10ea <getUserPassword+0x2f4>
					break;
				}else if(option == '2'){
     fe0:	80 91 25 01 	lds	r24, 0x0125
     fe4:	82 33       	cpi	r24, 0x32	; 50
     fe6:	09 f0       	breq	.+2      	; 0xfea <getUserPassword+0x1f4>
     fe8:	1a cf       	rjmp	.-460    	; 0xe1e <getUserPassword+0x28>
					LCD_enu_SetCursor(0,0);
     fea:	80 e0       	ldi	r24, 0x00	; 0
     fec:	60 e0       	ldi	r22, 0x00	; 0
     fee:	0e 94 cd 13 	call	0x279a	; 0x279a <LCD_enu_SetCursor>
					LCD_enu_SendString("Door UnLocked");
     ff2:	83 ea       	ldi	r24, 0xA3	; 163
     ff4:	90 e0       	ldi	r25, 0x00	; 0
     ff6:	0e 94 23 13 	call	0x2646	; 0x2646 <LCD_enu_SendString>
     ffa:	80 e0       	ldi	r24, 0x00	; 0
     ffc:	90 e0       	ldi	r25, 0x00	; 0
     ffe:	aa e7       	ldi	r26, 0x7A	; 122
    1000:	b4 e4       	ldi	r27, 0x44	; 68
    1002:	8b 87       	std	Y+11, r24	; 0x0b
    1004:	9c 87       	std	Y+12, r25	; 0x0c
    1006:	ad 87       	std	Y+13, r26	; 0x0d
    1008:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    100a:	6b 85       	ldd	r22, Y+11	; 0x0b
    100c:	7c 85       	ldd	r23, Y+12	; 0x0c
    100e:	8d 85       	ldd	r24, Y+13	; 0x0d
    1010:	9e 85       	ldd	r25, Y+14	; 0x0e
    1012:	20 e0       	ldi	r18, 0x00	; 0
    1014:	30 e0       	ldi	r19, 0x00	; 0
    1016:	4a e7       	ldi	r20, 0x7A	; 122
    1018:	55 e4       	ldi	r21, 0x45	; 69
    101a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    101e:	dc 01       	movw	r26, r24
    1020:	cb 01       	movw	r24, r22
    1022:	8f 83       	std	Y+7, r24	; 0x07
    1024:	98 87       	std	Y+8, r25	; 0x08
    1026:	a9 87       	std	Y+9, r26	; 0x09
    1028:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    102a:	6f 81       	ldd	r22, Y+7	; 0x07
    102c:	78 85       	ldd	r23, Y+8	; 0x08
    102e:	89 85       	ldd	r24, Y+9	; 0x09
    1030:	9a 85       	ldd	r25, Y+10	; 0x0a
    1032:	20 e0       	ldi	r18, 0x00	; 0
    1034:	30 e0       	ldi	r19, 0x00	; 0
    1036:	40 e8       	ldi	r20, 0x80	; 128
    1038:	5f e3       	ldi	r21, 0x3F	; 63
    103a:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    103e:	88 23       	and	r24, r24
    1040:	2c f4       	brge	.+10     	; 0x104c <getUserPassword+0x256>
		__ticks = 1;
    1042:	81 e0       	ldi	r24, 0x01	; 1
    1044:	90 e0       	ldi	r25, 0x00	; 0
    1046:	9e 83       	std	Y+6, r25	; 0x06
    1048:	8d 83       	std	Y+5, r24	; 0x05
    104a:	3f c0       	rjmp	.+126    	; 0x10ca <getUserPassword+0x2d4>
	else if (__tmp > 65535)
    104c:	6f 81       	ldd	r22, Y+7	; 0x07
    104e:	78 85       	ldd	r23, Y+8	; 0x08
    1050:	89 85       	ldd	r24, Y+9	; 0x09
    1052:	9a 85       	ldd	r25, Y+10	; 0x0a
    1054:	20 e0       	ldi	r18, 0x00	; 0
    1056:	3f ef       	ldi	r19, 0xFF	; 255
    1058:	4f e7       	ldi	r20, 0x7F	; 127
    105a:	57 e4       	ldi	r21, 0x47	; 71
    105c:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1060:	18 16       	cp	r1, r24
    1062:	4c f5       	brge	.+82     	; 0x10b6 <getUserPassword+0x2c0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1064:	6b 85       	ldd	r22, Y+11	; 0x0b
    1066:	7c 85       	ldd	r23, Y+12	; 0x0c
    1068:	8d 85       	ldd	r24, Y+13	; 0x0d
    106a:	9e 85       	ldd	r25, Y+14	; 0x0e
    106c:	20 e0       	ldi	r18, 0x00	; 0
    106e:	30 e0       	ldi	r19, 0x00	; 0
    1070:	40 e2       	ldi	r20, 0x20	; 32
    1072:	51 e4       	ldi	r21, 0x41	; 65
    1074:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1078:	dc 01       	movw	r26, r24
    107a:	cb 01       	movw	r24, r22
    107c:	bc 01       	movw	r22, r24
    107e:	cd 01       	movw	r24, r26
    1080:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1084:	dc 01       	movw	r26, r24
    1086:	cb 01       	movw	r24, r22
    1088:	9e 83       	std	Y+6, r25	; 0x06
    108a:	8d 83       	std	Y+5, r24	; 0x05
    108c:	0f c0       	rjmp	.+30     	; 0x10ac <getUserPassword+0x2b6>
    108e:	80 e9       	ldi	r24, 0x90	; 144
    1090:	91 e0       	ldi	r25, 0x01	; 1
    1092:	9c 83       	std	Y+4, r25	; 0x04
    1094:	8b 83       	std	Y+3, r24	; 0x03
    1096:	8b 81       	ldd	r24, Y+3	; 0x03
    1098:	9c 81       	ldd	r25, Y+4	; 0x04
    109a:	01 97       	sbiw	r24, 0x01	; 1
    109c:	f1 f7       	brne	.-4      	; 0x109a <getUserPassword+0x2a4>
    109e:	9c 83       	std	Y+4, r25	; 0x04
    10a0:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    10a2:	8d 81       	ldd	r24, Y+5	; 0x05
    10a4:	9e 81       	ldd	r25, Y+6	; 0x06
    10a6:	01 97       	sbiw	r24, 0x01	; 1
    10a8:	9e 83       	std	Y+6, r25	; 0x06
    10aa:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    10ac:	8d 81       	ldd	r24, Y+5	; 0x05
    10ae:	9e 81       	ldd	r25, Y+6	; 0x06
    10b0:	00 97       	sbiw	r24, 0x00	; 0
    10b2:	69 f7       	brne	.-38     	; 0x108e <getUserPassword+0x298>
    10b4:	14 c0       	rjmp	.+40     	; 0x10de <getUserPassword+0x2e8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    10b6:	6f 81       	ldd	r22, Y+7	; 0x07
    10b8:	78 85       	ldd	r23, Y+8	; 0x08
    10ba:	89 85       	ldd	r24, Y+9	; 0x09
    10bc:	9a 85       	ldd	r25, Y+10	; 0x0a
    10be:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    10c2:	dc 01       	movw	r26, r24
    10c4:	cb 01       	movw	r24, r22
    10c6:	9e 83       	std	Y+6, r25	; 0x06
    10c8:	8d 83       	std	Y+5, r24	; 0x05
    10ca:	8d 81       	ldd	r24, Y+5	; 0x05
    10cc:	9e 81       	ldd	r25, Y+6	; 0x06
    10ce:	9a 83       	std	Y+2, r25	; 0x02
    10d0:	89 83       	std	Y+1, r24	; 0x01
    10d2:	89 81       	ldd	r24, Y+1	; 0x01
    10d4:	9a 81       	ldd	r25, Y+2	; 0x02
    10d6:	01 97       	sbiw	r24, 0x01	; 1
    10d8:	f1 f7       	brne	.-4      	; 0x10d6 <getUserPassword+0x2e0>
    10da:	9a 83       	std	Y+2, r25	; 0x02
    10dc:	89 83       	std	Y+1, r24	; 0x01
					_delay_ms(1000);
					option = 0;
    10de:	10 92 25 01 	sts	0x0125, r1
					adminFlag = 0;
    10e2:	10 92 24 01 	sts	0x0124, r1
					Index= 0;
    10e6:	10 92 23 01 	sts	0x0123, r1
					break;
				}
			}
		}
	}
}
    10ea:	6e 96       	adiw	r28, 0x1e	; 30
    10ec:	0f b6       	in	r0, 0x3f	; 63
    10ee:	f8 94       	cli
    10f0:	de bf       	out	0x3e, r29	; 62
    10f2:	0f be       	out	0x3f, r0	; 63
    10f4:	cd bf       	out	0x3d, r28	; 61
    10f6:	cf 91       	pop	r28
    10f8:	df 91       	pop	r29
    10fa:	08 95       	ret

000010fc <displayOptionsAndGetUserOption>:
void displayOptionsAndGetUserOption(void){
    10fc:	df 93       	push	r29
    10fe:	cf 93       	push	r28
    1100:	cd b7       	in	r28, 0x3d	; 61
    1102:	de b7       	in	r29, 0x3e	; 62
	LCD_enu_Clear();
    1104:	0e 94 ed 16 	call	0x2dda	; 0x2dda <LCD_enu_Clear>
	LCD_enu_SendString("1-Lock Door");
    1108:	81 eb       	ldi	r24, 0xB1	; 177
    110a:	90 e0       	ldi	r25, 0x00	; 0
    110c:	0e 94 23 13 	call	0x2646	; 0x2646 <LCD_enu_SendString>
	LCD_enu_SetCursor(1,0);
    1110:	81 e0       	ldi	r24, 0x01	; 1
    1112:	60 e0       	ldi	r22, 0x00	; 0
    1114:	0e 94 cd 13 	call	0x279a	; 0x279a <LCD_enu_SetCursor>
	LCD_enu_SendString("2-UnLock Door");
    1118:	8d eb       	ldi	r24, 0xBD	; 189
    111a:	90 e0       	ldi	r25, 0x00	; 0
    111c:	0e 94 23 13 	call	0x2646	; 0x2646 <LCD_enu_SendString>
    1120:	04 c0       	rjmp	.+8      	; 0x112a <displayOptionsAndGetUserOption+0x2e>
	while((option!= '1') && (option!= '2')){Keypad_enu_getKey(&option);}
    1122:	85 e2       	ldi	r24, 0x25	; 37
    1124:	91 e0       	ldi	r25, 0x01	; 1
    1126:	0e 94 08 18 	call	0x3010	; 0x3010 <Keypad_enu_getKey>
    112a:	80 91 25 01 	lds	r24, 0x0125
    112e:	81 33       	cpi	r24, 0x31	; 49
    1130:	21 f0       	breq	.+8      	; 0x113a <displayOptionsAndGetUserOption+0x3e>
    1132:	80 91 25 01 	lds	r24, 0x0125
    1136:	82 33       	cpi	r24, 0x32	; 50
    1138:	a1 f7       	brne	.-24     	; 0x1122 <displayOptionsAndGetUserOption+0x26>
	getUserPassword();
    113a:	0e 94 fb 06 	call	0xdf6	; 0xdf6 <getUserPassword>
}
    113e:	cf 91       	pop	r28
    1140:	df 91       	pop	r29
    1142:	08 95       	ret

00001144 <checkSide>:
void checkSide(void){
    1144:	df 93       	push	r29
    1146:	cf 93       	push	r28
    1148:	cd b7       	in	r28, 0x3d	; 61
    114a:	de b7       	in	r29, 0x3e	; 62
    114c:	e8 97       	sbiw	r28, 0x38	; 56
    114e:	0f b6       	in	r0, 0x3f	; 63
    1150:	f8 94       	cli
    1152:	de bf       	out	0x3e, r29	; 62
    1154:	0f be       	out	0x3f, r0	; 63
    1156:	cd bf       	out	0x3d, r28	; 61
	Keypad_enu_getKey(&option);
    1158:	85 e2       	ldi	r24, 0x25	; 37
    115a:	91 e0       	ldi	r25, 0x01	; 1
    115c:	0e 94 08 18 	call	0x3010	; 0x3010 <Keypad_enu_getKey>
    1160:	17 c2       	rjmp	.+1070   	; 0x1590 <checkSide+0x44c>
	while(option == KEYPAD_U8_NO_KEY_PRESSED){
		if(!adminFlag){
    1162:	80 91 24 01 	lds	r24, 0x0124
    1166:	88 23       	and	r24, r24
    1168:	09 f0       	breq	.+2      	; 0x116c <checkSide+0x28>
    116a:	10 c2       	rjmp	.+1056   	; 0x158c <checkSide+0x448>
		ADC_enu_GetDigitalValueSynchNonBlocking(ADC_U8_CHANNEL0, &sensor1Value);
    116c:	26 e2       	ldi	r18, 0x26	; 38
    116e:	31 e0       	ldi	r19, 0x01	; 1
    1170:	80 e0       	ldi	r24, 0x00	; 0
    1172:	b9 01       	movw	r22, r18
    1174:	0e 94 be 23 	call	0x477c	; 0x477c <ADC_enu_GetDigitalValueSynchNonBlocking>
		ADC_enu_GetDigitalValueSynchNonBlocking(ADC_U8_CHANNEL7, &sensor2Value);
    1178:	28 e2       	ldi	r18, 0x28	; 40
    117a:	31 e0       	ldi	r19, 0x01	; 1
    117c:	87 e0       	ldi	r24, 0x07	; 7
    117e:	b9 01       	movw	r22, r18
    1180:	0e 94 be 23 	call	0x477c	; 0x477c <ADC_enu_GetDigitalValueSynchNonBlocking>
		if((sensor1Value < IR_RANGE)){
    1184:	80 91 26 01 	lds	r24, 0x0126
    1188:	90 91 27 01 	lds	r25, 0x0127
    118c:	21 e0       	ldi	r18, 0x01	; 1
    118e:	8c 32       	cpi	r24, 0x2C	; 44
    1190:	92 07       	cpc	r25, r18
    1192:	08 f0       	brcs	.+2      	; 0x1196 <checkSide+0x52>
    1194:	f7 c0       	rjmp	.+494    	; 0x1384 <checkSide+0x240>
				Servo_enu_SetAngle(OPEN_ANGLE);
    1196:	8a e5       	ldi	r24, 0x5A	; 90
    1198:	0e 94 d8 0e 	call	0x1db0	; 0x1db0 <Servo_enu_SetAngle>
				LCD_enu_Clear();
    119c:	0e 94 ed 16 	call	0x2dda	; 0x2dda <LCD_enu_Clear>
				LCD_enu_SendString("Opening Door..");
    11a0:	8b ec       	ldi	r24, 0xCB	; 203
    11a2:	90 e0       	ldi	r25, 0x00	; 0
    11a4:	0e 94 23 13 	call	0x2646	; 0x2646 <LCD_enu_SendString>
    11a8:	80 e0       	ldi	r24, 0x00	; 0
    11aa:	90 e8       	ldi	r25, 0x80	; 128
    11ac:	ab eb       	ldi	r26, 0xBB	; 187
    11ae:	b4 e4       	ldi	r27, 0x44	; 68
    11b0:	8d ab       	std	Y+53, r24	; 0x35
    11b2:	9e ab       	std	Y+54, r25	; 0x36
    11b4:	af ab       	std	Y+55, r26	; 0x37
    11b6:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    11b8:	6d a9       	ldd	r22, Y+53	; 0x35
    11ba:	7e a9       	ldd	r23, Y+54	; 0x36
    11bc:	8f a9       	ldd	r24, Y+55	; 0x37
    11be:	98 ad       	ldd	r25, Y+56	; 0x38
    11c0:	20 e0       	ldi	r18, 0x00	; 0
    11c2:	30 e0       	ldi	r19, 0x00	; 0
    11c4:	4a e7       	ldi	r20, 0x7A	; 122
    11c6:	55 e4       	ldi	r21, 0x45	; 69
    11c8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    11cc:	dc 01       	movw	r26, r24
    11ce:	cb 01       	movw	r24, r22
    11d0:	89 ab       	std	Y+49, r24	; 0x31
    11d2:	9a ab       	std	Y+50, r25	; 0x32
    11d4:	ab ab       	std	Y+51, r26	; 0x33
    11d6:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    11d8:	69 a9       	ldd	r22, Y+49	; 0x31
    11da:	7a a9       	ldd	r23, Y+50	; 0x32
    11dc:	8b a9       	ldd	r24, Y+51	; 0x33
    11de:	9c a9       	ldd	r25, Y+52	; 0x34
    11e0:	20 e0       	ldi	r18, 0x00	; 0
    11e2:	30 e0       	ldi	r19, 0x00	; 0
    11e4:	40 e8       	ldi	r20, 0x80	; 128
    11e6:	5f e3       	ldi	r21, 0x3F	; 63
    11e8:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    11ec:	88 23       	and	r24, r24
    11ee:	2c f4       	brge	.+10     	; 0x11fa <checkSide+0xb6>
		__ticks = 1;
    11f0:	81 e0       	ldi	r24, 0x01	; 1
    11f2:	90 e0       	ldi	r25, 0x00	; 0
    11f4:	98 ab       	std	Y+48, r25	; 0x30
    11f6:	8f a7       	std	Y+47, r24	; 0x2f
    11f8:	3f c0       	rjmp	.+126    	; 0x1278 <checkSide+0x134>
	else if (__tmp > 65535)
    11fa:	69 a9       	ldd	r22, Y+49	; 0x31
    11fc:	7a a9       	ldd	r23, Y+50	; 0x32
    11fe:	8b a9       	ldd	r24, Y+51	; 0x33
    1200:	9c a9       	ldd	r25, Y+52	; 0x34
    1202:	20 e0       	ldi	r18, 0x00	; 0
    1204:	3f ef       	ldi	r19, 0xFF	; 255
    1206:	4f e7       	ldi	r20, 0x7F	; 127
    1208:	57 e4       	ldi	r21, 0x47	; 71
    120a:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    120e:	18 16       	cp	r1, r24
    1210:	4c f5       	brge	.+82     	; 0x1264 <checkSide+0x120>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1212:	6d a9       	ldd	r22, Y+53	; 0x35
    1214:	7e a9       	ldd	r23, Y+54	; 0x36
    1216:	8f a9       	ldd	r24, Y+55	; 0x37
    1218:	98 ad       	ldd	r25, Y+56	; 0x38
    121a:	20 e0       	ldi	r18, 0x00	; 0
    121c:	30 e0       	ldi	r19, 0x00	; 0
    121e:	40 e2       	ldi	r20, 0x20	; 32
    1220:	51 e4       	ldi	r21, 0x41	; 65
    1222:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1226:	dc 01       	movw	r26, r24
    1228:	cb 01       	movw	r24, r22
    122a:	bc 01       	movw	r22, r24
    122c:	cd 01       	movw	r24, r26
    122e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1232:	dc 01       	movw	r26, r24
    1234:	cb 01       	movw	r24, r22
    1236:	98 ab       	std	Y+48, r25	; 0x30
    1238:	8f a7       	std	Y+47, r24	; 0x2f
    123a:	0f c0       	rjmp	.+30     	; 0x125a <checkSide+0x116>
    123c:	80 e9       	ldi	r24, 0x90	; 144
    123e:	91 e0       	ldi	r25, 0x01	; 1
    1240:	9e a7       	std	Y+46, r25	; 0x2e
    1242:	8d a7       	std	Y+45, r24	; 0x2d
    1244:	8d a5       	ldd	r24, Y+45	; 0x2d
    1246:	9e a5       	ldd	r25, Y+46	; 0x2e
    1248:	01 97       	sbiw	r24, 0x01	; 1
    124a:	f1 f7       	brne	.-4      	; 0x1248 <checkSide+0x104>
    124c:	9e a7       	std	Y+46, r25	; 0x2e
    124e:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1250:	8f a5       	ldd	r24, Y+47	; 0x2f
    1252:	98 a9       	ldd	r25, Y+48	; 0x30
    1254:	01 97       	sbiw	r24, 0x01	; 1
    1256:	98 ab       	std	Y+48, r25	; 0x30
    1258:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    125a:	8f a5       	ldd	r24, Y+47	; 0x2f
    125c:	98 a9       	ldd	r25, Y+48	; 0x30
    125e:	00 97       	sbiw	r24, 0x00	; 0
    1260:	69 f7       	brne	.-38     	; 0x123c <checkSide+0xf8>
    1262:	14 c0       	rjmp	.+40     	; 0x128c <checkSide+0x148>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1264:	69 a9       	ldd	r22, Y+49	; 0x31
    1266:	7a a9       	ldd	r23, Y+50	; 0x32
    1268:	8b a9       	ldd	r24, Y+51	; 0x33
    126a:	9c a9       	ldd	r25, Y+52	; 0x34
    126c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1270:	dc 01       	movw	r26, r24
    1272:	cb 01       	movw	r24, r22
    1274:	98 ab       	std	Y+48, r25	; 0x30
    1276:	8f a7       	std	Y+47, r24	; 0x2f
    1278:	8f a5       	ldd	r24, Y+47	; 0x2f
    127a:	98 a9       	ldd	r25, Y+48	; 0x30
    127c:	9c a7       	std	Y+44, r25	; 0x2c
    127e:	8b a7       	std	Y+43, r24	; 0x2b
    1280:	8b a5       	ldd	r24, Y+43	; 0x2b
    1282:	9c a5       	ldd	r25, Y+44	; 0x2c
    1284:	01 97       	sbiw	r24, 0x01	; 1
    1286:	f1 f7       	brne	.-4      	; 0x1284 <checkSide+0x140>
    1288:	9c a7       	std	Y+44, r25	; 0x2c
    128a:	8b a7       	std	Y+43, r24	; 0x2b
				_delay_ms(OPEN_DELAY);
				Servo_enu_SetAngle(CLOSE_ANGLE);
    128c:	80 e0       	ldi	r24, 0x00	; 0
    128e:	0e 94 d8 0e 	call	0x1db0	; 0x1db0 <Servo_enu_SetAngle>
				LCD_enu_Clear();
    1292:	0e 94 ed 16 	call	0x2dda	; 0x2dda <LCD_enu_Clear>
				LCD_enu_SendString("Closing Door..");
    1296:	8a ed       	ldi	r24, 0xDA	; 218
    1298:	90 e0       	ldi	r25, 0x00	; 0
    129a:	0e 94 23 13 	call	0x2646	; 0x2646 <LCD_enu_SendString>
    129e:	80 e0       	ldi	r24, 0x00	; 0
    12a0:	90 e0       	ldi	r25, 0x00	; 0
    12a2:	aa e7       	ldi	r26, 0x7A	; 122
    12a4:	b4 e4       	ldi	r27, 0x44	; 68
    12a6:	8f a3       	std	Y+39, r24	; 0x27
    12a8:	98 a7       	std	Y+40, r25	; 0x28
    12aa:	a9 a7       	std	Y+41, r26	; 0x29
    12ac:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    12ae:	6f a1       	ldd	r22, Y+39	; 0x27
    12b0:	78 a5       	ldd	r23, Y+40	; 0x28
    12b2:	89 a5       	ldd	r24, Y+41	; 0x29
    12b4:	9a a5       	ldd	r25, Y+42	; 0x2a
    12b6:	20 e0       	ldi	r18, 0x00	; 0
    12b8:	30 e0       	ldi	r19, 0x00	; 0
    12ba:	4a e7       	ldi	r20, 0x7A	; 122
    12bc:	55 e4       	ldi	r21, 0x45	; 69
    12be:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    12c2:	dc 01       	movw	r26, r24
    12c4:	cb 01       	movw	r24, r22
    12c6:	8b a3       	std	Y+35, r24	; 0x23
    12c8:	9c a3       	std	Y+36, r25	; 0x24
    12ca:	ad a3       	std	Y+37, r26	; 0x25
    12cc:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    12ce:	6b a1       	ldd	r22, Y+35	; 0x23
    12d0:	7c a1       	ldd	r23, Y+36	; 0x24
    12d2:	8d a1       	ldd	r24, Y+37	; 0x25
    12d4:	9e a1       	ldd	r25, Y+38	; 0x26
    12d6:	20 e0       	ldi	r18, 0x00	; 0
    12d8:	30 e0       	ldi	r19, 0x00	; 0
    12da:	40 e8       	ldi	r20, 0x80	; 128
    12dc:	5f e3       	ldi	r21, 0x3F	; 63
    12de:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    12e2:	88 23       	and	r24, r24
    12e4:	2c f4       	brge	.+10     	; 0x12f0 <checkSide+0x1ac>
		__ticks = 1;
    12e6:	81 e0       	ldi	r24, 0x01	; 1
    12e8:	90 e0       	ldi	r25, 0x00	; 0
    12ea:	9a a3       	std	Y+34, r25	; 0x22
    12ec:	89 a3       	std	Y+33, r24	; 0x21
    12ee:	3f c0       	rjmp	.+126    	; 0x136e <checkSide+0x22a>
	else if (__tmp > 65535)
    12f0:	6b a1       	ldd	r22, Y+35	; 0x23
    12f2:	7c a1       	ldd	r23, Y+36	; 0x24
    12f4:	8d a1       	ldd	r24, Y+37	; 0x25
    12f6:	9e a1       	ldd	r25, Y+38	; 0x26
    12f8:	20 e0       	ldi	r18, 0x00	; 0
    12fa:	3f ef       	ldi	r19, 0xFF	; 255
    12fc:	4f e7       	ldi	r20, 0x7F	; 127
    12fe:	57 e4       	ldi	r21, 0x47	; 71
    1300:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1304:	18 16       	cp	r1, r24
    1306:	4c f5       	brge	.+82     	; 0x135a <checkSide+0x216>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1308:	6f a1       	ldd	r22, Y+39	; 0x27
    130a:	78 a5       	ldd	r23, Y+40	; 0x28
    130c:	89 a5       	ldd	r24, Y+41	; 0x29
    130e:	9a a5       	ldd	r25, Y+42	; 0x2a
    1310:	20 e0       	ldi	r18, 0x00	; 0
    1312:	30 e0       	ldi	r19, 0x00	; 0
    1314:	40 e2       	ldi	r20, 0x20	; 32
    1316:	51 e4       	ldi	r21, 0x41	; 65
    1318:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    131c:	dc 01       	movw	r26, r24
    131e:	cb 01       	movw	r24, r22
    1320:	bc 01       	movw	r22, r24
    1322:	cd 01       	movw	r24, r26
    1324:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1328:	dc 01       	movw	r26, r24
    132a:	cb 01       	movw	r24, r22
    132c:	9a a3       	std	Y+34, r25	; 0x22
    132e:	89 a3       	std	Y+33, r24	; 0x21
    1330:	0f c0       	rjmp	.+30     	; 0x1350 <checkSide+0x20c>
    1332:	80 e9       	ldi	r24, 0x90	; 144
    1334:	91 e0       	ldi	r25, 0x01	; 1
    1336:	98 a3       	std	Y+32, r25	; 0x20
    1338:	8f 8f       	std	Y+31, r24	; 0x1f
    133a:	8f 8d       	ldd	r24, Y+31	; 0x1f
    133c:	98 a1       	ldd	r25, Y+32	; 0x20
    133e:	01 97       	sbiw	r24, 0x01	; 1
    1340:	f1 f7       	brne	.-4      	; 0x133e <checkSide+0x1fa>
    1342:	98 a3       	std	Y+32, r25	; 0x20
    1344:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1346:	89 a1       	ldd	r24, Y+33	; 0x21
    1348:	9a a1       	ldd	r25, Y+34	; 0x22
    134a:	01 97       	sbiw	r24, 0x01	; 1
    134c:	9a a3       	std	Y+34, r25	; 0x22
    134e:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1350:	89 a1       	ldd	r24, Y+33	; 0x21
    1352:	9a a1       	ldd	r25, Y+34	; 0x22
    1354:	00 97       	sbiw	r24, 0x00	; 0
    1356:	69 f7       	brne	.-38     	; 0x1332 <checkSide+0x1ee>
    1358:	14 c1       	rjmp	.+552    	; 0x1582 <checkSide+0x43e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    135a:	6b a1       	ldd	r22, Y+35	; 0x23
    135c:	7c a1       	ldd	r23, Y+36	; 0x24
    135e:	8d a1       	ldd	r24, Y+37	; 0x25
    1360:	9e a1       	ldd	r25, Y+38	; 0x26
    1362:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1366:	dc 01       	movw	r26, r24
    1368:	cb 01       	movw	r24, r22
    136a:	9a a3       	std	Y+34, r25	; 0x22
    136c:	89 a3       	std	Y+33, r24	; 0x21
    136e:	89 a1       	ldd	r24, Y+33	; 0x21
    1370:	9a a1       	ldd	r25, Y+34	; 0x22
    1372:	9e 8f       	std	Y+30, r25	; 0x1e
    1374:	8d 8f       	std	Y+29, r24	; 0x1d
    1376:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1378:	9e 8d       	ldd	r25, Y+30	; 0x1e
    137a:	01 97       	sbiw	r24, 0x01	; 1
    137c:	f1 f7       	brne	.-4      	; 0x137a <checkSide+0x236>
    137e:	9e 8f       	std	Y+30, r25	; 0x1e
    1380:	8d 8f       	std	Y+29, r24	; 0x1d
    1382:	ff c0       	rjmp	.+510    	; 0x1582 <checkSide+0x43e>
				_delay_ms(CLOSE_DELAY);
			}
			else if((sensor2Value < IR_RANGE)){
    1384:	80 91 28 01 	lds	r24, 0x0128
    1388:	90 91 29 01 	lds	r25, 0x0129
    138c:	21 e0       	ldi	r18, 0x01	; 1
    138e:	8c 32       	cpi	r24, 0x2C	; 44
    1390:	92 07       	cpc	r25, r18
    1392:	08 f0       	brcs	.+2      	; 0x1396 <checkSide+0x252>
    1394:	f6 c0       	rjmp	.+492    	; 0x1582 <checkSide+0x43e>
				Servo_enu_SetAngle(OPEN_ANGLE);
    1396:	8a e5       	ldi	r24, 0x5A	; 90
    1398:	0e 94 d8 0e 	call	0x1db0	; 0x1db0 <Servo_enu_SetAngle>
				LCD_enu_Clear();
    139c:	0e 94 ed 16 	call	0x2dda	; 0x2dda <LCD_enu_Clear>
				LCD_enu_SendString("Opening Door..");
    13a0:	8b ec       	ldi	r24, 0xCB	; 203
    13a2:	90 e0       	ldi	r25, 0x00	; 0
    13a4:	0e 94 23 13 	call	0x2646	; 0x2646 <LCD_enu_SendString>
    13a8:	80 e0       	ldi	r24, 0x00	; 0
    13aa:	90 e8       	ldi	r25, 0x80	; 128
    13ac:	ab eb       	ldi	r26, 0xBB	; 187
    13ae:	b4 e4       	ldi	r27, 0x44	; 68
    13b0:	89 8f       	std	Y+25, r24	; 0x19
    13b2:	9a 8f       	std	Y+26, r25	; 0x1a
    13b4:	ab 8f       	std	Y+27, r26	; 0x1b
    13b6:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    13b8:	69 8d       	ldd	r22, Y+25	; 0x19
    13ba:	7a 8d       	ldd	r23, Y+26	; 0x1a
    13bc:	8b 8d       	ldd	r24, Y+27	; 0x1b
    13be:	9c 8d       	ldd	r25, Y+28	; 0x1c
    13c0:	20 e0       	ldi	r18, 0x00	; 0
    13c2:	30 e0       	ldi	r19, 0x00	; 0
    13c4:	4a e7       	ldi	r20, 0x7A	; 122
    13c6:	55 e4       	ldi	r21, 0x45	; 69
    13c8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    13cc:	dc 01       	movw	r26, r24
    13ce:	cb 01       	movw	r24, r22
    13d0:	8d 8b       	std	Y+21, r24	; 0x15
    13d2:	9e 8b       	std	Y+22, r25	; 0x16
    13d4:	af 8b       	std	Y+23, r26	; 0x17
    13d6:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    13d8:	6d 89       	ldd	r22, Y+21	; 0x15
    13da:	7e 89       	ldd	r23, Y+22	; 0x16
    13dc:	8f 89       	ldd	r24, Y+23	; 0x17
    13de:	98 8d       	ldd	r25, Y+24	; 0x18
    13e0:	20 e0       	ldi	r18, 0x00	; 0
    13e2:	30 e0       	ldi	r19, 0x00	; 0
    13e4:	40 e8       	ldi	r20, 0x80	; 128
    13e6:	5f e3       	ldi	r21, 0x3F	; 63
    13e8:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    13ec:	88 23       	and	r24, r24
    13ee:	2c f4       	brge	.+10     	; 0x13fa <checkSide+0x2b6>
		__ticks = 1;
    13f0:	81 e0       	ldi	r24, 0x01	; 1
    13f2:	90 e0       	ldi	r25, 0x00	; 0
    13f4:	9c 8b       	std	Y+20, r25	; 0x14
    13f6:	8b 8b       	std	Y+19, r24	; 0x13
    13f8:	3f c0       	rjmp	.+126    	; 0x1478 <checkSide+0x334>
	else if (__tmp > 65535)
    13fa:	6d 89       	ldd	r22, Y+21	; 0x15
    13fc:	7e 89       	ldd	r23, Y+22	; 0x16
    13fe:	8f 89       	ldd	r24, Y+23	; 0x17
    1400:	98 8d       	ldd	r25, Y+24	; 0x18
    1402:	20 e0       	ldi	r18, 0x00	; 0
    1404:	3f ef       	ldi	r19, 0xFF	; 255
    1406:	4f e7       	ldi	r20, 0x7F	; 127
    1408:	57 e4       	ldi	r21, 0x47	; 71
    140a:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    140e:	18 16       	cp	r1, r24
    1410:	4c f5       	brge	.+82     	; 0x1464 <checkSide+0x320>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1412:	69 8d       	ldd	r22, Y+25	; 0x19
    1414:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1416:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1418:	9c 8d       	ldd	r25, Y+28	; 0x1c
    141a:	20 e0       	ldi	r18, 0x00	; 0
    141c:	30 e0       	ldi	r19, 0x00	; 0
    141e:	40 e2       	ldi	r20, 0x20	; 32
    1420:	51 e4       	ldi	r21, 0x41	; 65
    1422:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1426:	dc 01       	movw	r26, r24
    1428:	cb 01       	movw	r24, r22
    142a:	bc 01       	movw	r22, r24
    142c:	cd 01       	movw	r24, r26
    142e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1432:	dc 01       	movw	r26, r24
    1434:	cb 01       	movw	r24, r22
    1436:	9c 8b       	std	Y+20, r25	; 0x14
    1438:	8b 8b       	std	Y+19, r24	; 0x13
    143a:	0f c0       	rjmp	.+30     	; 0x145a <checkSide+0x316>
    143c:	80 e9       	ldi	r24, 0x90	; 144
    143e:	91 e0       	ldi	r25, 0x01	; 1
    1440:	9a 8b       	std	Y+18, r25	; 0x12
    1442:	89 8b       	std	Y+17, r24	; 0x11
    1444:	89 89       	ldd	r24, Y+17	; 0x11
    1446:	9a 89       	ldd	r25, Y+18	; 0x12
    1448:	01 97       	sbiw	r24, 0x01	; 1
    144a:	f1 f7       	brne	.-4      	; 0x1448 <checkSide+0x304>
    144c:	9a 8b       	std	Y+18, r25	; 0x12
    144e:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1450:	8b 89       	ldd	r24, Y+19	; 0x13
    1452:	9c 89       	ldd	r25, Y+20	; 0x14
    1454:	01 97       	sbiw	r24, 0x01	; 1
    1456:	9c 8b       	std	Y+20, r25	; 0x14
    1458:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    145a:	8b 89       	ldd	r24, Y+19	; 0x13
    145c:	9c 89       	ldd	r25, Y+20	; 0x14
    145e:	00 97       	sbiw	r24, 0x00	; 0
    1460:	69 f7       	brne	.-38     	; 0x143c <checkSide+0x2f8>
    1462:	14 c0       	rjmp	.+40     	; 0x148c <checkSide+0x348>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1464:	6d 89       	ldd	r22, Y+21	; 0x15
    1466:	7e 89       	ldd	r23, Y+22	; 0x16
    1468:	8f 89       	ldd	r24, Y+23	; 0x17
    146a:	98 8d       	ldd	r25, Y+24	; 0x18
    146c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1470:	dc 01       	movw	r26, r24
    1472:	cb 01       	movw	r24, r22
    1474:	9c 8b       	std	Y+20, r25	; 0x14
    1476:	8b 8b       	std	Y+19, r24	; 0x13
    1478:	8b 89       	ldd	r24, Y+19	; 0x13
    147a:	9c 89       	ldd	r25, Y+20	; 0x14
    147c:	98 8b       	std	Y+16, r25	; 0x10
    147e:	8f 87       	std	Y+15, r24	; 0x0f
    1480:	8f 85       	ldd	r24, Y+15	; 0x0f
    1482:	98 89       	ldd	r25, Y+16	; 0x10
    1484:	01 97       	sbiw	r24, 0x01	; 1
    1486:	f1 f7       	brne	.-4      	; 0x1484 <checkSide+0x340>
    1488:	98 8b       	std	Y+16, r25	; 0x10
    148a:	8f 87       	std	Y+15, r24	; 0x0f
				_delay_ms(OPEN_DELAY);
				Servo_enu_SetAngle(CLOSE_ANGLE);
    148c:	80 e0       	ldi	r24, 0x00	; 0
    148e:	0e 94 d8 0e 	call	0x1db0	; 0x1db0 <Servo_enu_SetAngle>
				LCD_enu_Clear();
    1492:	0e 94 ed 16 	call	0x2dda	; 0x2dda <LCD_enu_Clear>
				LCD_enu_SendString("Closing Door..");
    1496:	8a ed       	ldi	r24, 0xDA	; 218
    1498:	90 e0       	ldi	r25, 0x00	; 0
    149a:	0e 94 23 13 	call	0x2646	; 0x2646 <LCD_enu_SendString>
    149e:	80 e0       	ldi	r24, 0x00	; 0
    14a0:	90 e0       	ldi	r25, 0x00	; 0
    14a2:	aa e7       	ldi	r26, 0x7A	; 122
    14a4:	b4 e4       	ldi	r27, 0x44	; 68
    14a6:	8b 87       	std	Y+11, r24	; 0x0b
    14a8:	9c 87       	std	Y+12, r25	; 0x0c
    14aa:	ad 87       	std	Y+13, r26	; 0x0d
    14ac:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    14ae:	6b 85       	ldd	r22, Y+11	; 0x0b
    14b0:	7c 85       	ldd	r23, Y+12	; 0x0c
    14b2:	8d 85       	ldd	r24, Y+13	; 0x0d
    14b4:	9e 85       	ldd	r25, Y+14	; 0x0e
    14b6:	20 e0       	ldi	r18, 0x00	; 0
    14b8:	30 e0       	ldi	r19, 0x00	; 0
    14ba:	4a e7       	ldi	r20, 0x7A	; 122
    14bc:	55 e4       	ldi	r21, 0x45	; 69
    14be:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    14c2:	dc 01       	movw	r26, r24
    14c4:	cb 01       	movw	r24, r22
    14c6:	8f 83       	std	Y+7, r24	; 0x07
    14c8:	98 87       	std	Y+8, r25	; 0x08
    14ca:	a9 87       	std	Y+9, r26	; 0x09
    14cc:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    14ce:	6f 81       	ldd	r22, Y+7	; 0x07
    14d0:	78 85       	ldd	r23, Y+8	; 0x08
    14d2:	89 85       	ldd	r24, Y+9	; 0x09
    14d4:	9a 85       	ldd	r25, Y+10	; 0x0a
    14d6:	20 e0       	ldi	r18, 0x00	; 0
    14d8:	30 e0       	ldi	r19, 0x00	; 0
    14da:	40 e8       	ldi	r20, 0x80	; 128
    14dc:	5f e3       	ldi	r21, 0x3F	; 63
    14de:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    14e2:	88 23       	and	r24, r24
    14e4:	2c f4       	brge	.+10     	; 0x14f0 <checkSide+0x3ac>
		__ticks = 1;
    14e6:	81 e0       	ldi	r24, 0x01	; 1
    14e8:	90 e0       	ldi	r25, 0x00	; 0
    14ea:	9e 83       	std	Y+6, r25	; 0x06
    14ec:	8d 83       	std	Y+5, r24	; 0x05
    14ee:	3f c0       	rjmp	.+126    	; 0x156e <checkSide+0x42a>
	else if (__tmp > 65535)
    14f0:	6f 81       	ldd	r22, Y+7	; 0x07
    14f2:	78 85       	ldd	r23, Y+8	; 0x08
    14f4:	89 85       	ldd	r24, Y+9	; 0x09
    14f6:	9a 85       	ldd	r25, Y+10	; 0x0a
    14f8:	20 e0       	ldi	r18, 0x00	; 0
    14fa:	3f ef       	ldi	r19, 0xFF	; 255
    14fc:	4f e7       	ldi	r20, 0x7F	; 127
    14fe:	57 e4       	ldi	r21, 0x47	; 71
    1500:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1504:	18 16       	cp	r1, r24
    1506:	4c f5       	brge	.+82     	; 0x155a <checkSide+0x416>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1508:	6b 85       	ldd	r22, Y+11	; 0x0b
    150a:	7c 85       	ldd	r23, Y+12	; 0x0c
    150c:	8d 85       	ldd	r24, Y+13	; 0x0d
    150e:	9e 85       	ldd	r25, Y+14	; 0x0e
    1510:	20 e0       	ldi	r18, 0x00	; 0
    1512:	30 e0       	ldi	r19, 0x00	; 0
    1514:	40 e2       	ldi	r20, 0x20	; 32
    1516:	51 e4       	ldi	r21, 0x41	; 65
    1518:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    151c:	dc 01       	movw	r26, r24
    151e:	cb 01       	movw	r24, r22
    1520:	bc 01       	movw	r22, r24
    1522:	cd 01       	movw	r24, r26
    1524:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1528:	dc 01       	movw	r26, r24
    152a:	cb 01       	movw	r24, r22
    152c:	9e 83       	std	Y+6, r25	; 0x06
    152e:	8d 83       	std	Y+5, r24	; 0x05
    1530:	0f c0       	rjmp	.+30     	; 0x1550 <checkSide+0x40c>
    1532:	80 e9       	ldi	r24, 0x90	; 144
    1534:	91 e0       	ldi	r25, 0x01	; 1
    1536:	9c 83       	std	Y+4, r25	; 0x04
    1538:	8b 83       	std	Y+3, r24	; 0x03
    153a:	8b 81       	ldd	r24, Y+3	; 0x03
    153c:	9c 81       	ldd	r25, Y+4	; 0x04
    153e:	01 97       	sbiw	r24, 0x01	; 1
    1540:	f1 f7       	brne	.-4      	; 0x153e <checkSide+0x3fa>
    1542:	9c 83       	std	Y+4, r25	; 0x04
    1544:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1546:	8d 81       	ldd	r24, Y+5	; 0x05
    1548:	9e 81       	ldd	r25, Y+6	; 0x06
    154a:	01 97       	sbiw	r24, 0x01	; 1
    154c:	9e 83       	std	Y+6, r25	; 0x06
    154e:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1550:	8d 81       	ldd	r24, Y+5	; 0x05
    1552:	9e 81       	ldd	r25, Y+6	; 0x06
    1554:	00 97       	sbiw	r24, 0x00	; 0
    1556:	69 f7       	brne	.-38     	; 0x1532 <checkSide+0x3ee>
    1558:	14 c0       	rjmp	.+40     	; 0x1582 <checkSide+0x43e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    155a:	6f 81       	ldd	r22, Y+7	; 0x07
    155c:	78 85       	ldd	r23, Y+8	; 0x08
    155e:	89 85       	ldd	r24, Y+9	; 0x09
    1560:	9a 85       	ldd	r25, Y+10	; 0x0a
    1562:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1566:	dc 01       	movw	r26, r24
    1568:	cb 01       	movw	r24, r22
    156a:	9e 83       	std	Y+6, r25	; 0x06
    156c:	8d 83       	std	Y+5, r24	; 0x05
    156e:	8d 81       	ldd	r24, Y+5	; 0x05
    1570:	9e 81       	ldd	r25, Y+6	; 0x06
    1572:	9a 83       	std	Y+2, r25	; 0x02
    1574:	89 83       	std	Y+1, r24	; 0x01
    1576:	89 81       	ldd	r24, Y+1	; 0x01
    1578:	9a 81       	ldd	r25, Y+2	; 0x02
    157a:	01 97       	sbiw	r24, 0x01	; 1
    157c:	f1 f7       	brne	.-4      	; 0x157a <checkSide+0x436>
    157e:	9a 83       	std	Y+2, r25	; 0x02
    1580:	89 83       	std	Y+1, r24	; 0x01
				_delay_ms(CLOSE_DELAY);
			}
			Keypad_enu_getKey(&option);
    1582:	85 e2       	ldi	r24, 0x25	; 37
    1584:	91 e0       	ldi	r25, 0x01	; 1
    1586:	0e 94 08 18 	call	0x3010	; 0x3010 <Keypad_enu_getKey>
    158a:	02 c0       	rjmp	.+4      	; 0x1590 <checkSide+0x44c>
		}
		else{
			displayOptionsAndGetUserOption();
    158c:	0e 94 7e 08 	call	0x10fc	; 0x10fc <displayOptionsAndGetUserOption>
	while((option!= '1') && (option!= '2')){Keypad_enu_getKey(&option);}
	getUserPassword();
}
void checkSide(void){
	Keypad_enu_getKey(&option);
	while(option == KEYPAD_U8_NO_KEY_PRESSED){
    1590:	80 91 25 01 	lds	r24, 0x0125
    1594:	8f 3f       	cpi	r24, 0xFF	; 255
    1596:	09 f4       	brne	.+2      	; 0x159a <checkSide+0x456>
    1598:	e4 cd       	rjmp	.-1080   	; 0x1162 <checkSide+0x1e>
		}
		else{
			displayOptionsAndGetUserOption();
		}
	}
	if(option == 'C')
    159a:	80 91 25 01 	lds	r24, 0x0125
    159e:	83 34       	cpi	r24, 0x43	; 67
    15a0:	11 f4       	brne	.+4      	; 0x15a6 <checkSide+0x462>
		displayOptionsAndGetUserOption();
    15a2:	0e 94 7e 08 	call	0x10fc	; 0x10fc <displayOptionsAndGetUserOption>
}
    15a6:	e8 96       	adiw	r28, 0x38	; 56
    15a8:	0f b6       	in	r0, 0x3f	; 63
    15aa:	f8 94       	cli
    15ac:	de bf       	out	0x3e, r29	; 62
    15ae:	0f be       	out	0x3f, r0	; 63
    15b0:	cd bf       	out	0x3d, r28	; 61
    15b2:	cf 91       	pop	r28
    15b4:	df 91       	pop	r29
    15b6:	08 95       	ret

000015b8 <SW_enu_Init>:
#include "Switch_Config.h"
#include "Switch_Private.h"


ES_t SW_enu_Init(SW_t * Copy_Au8_Switchs)
{
    15b8:	df 93       	push	r29
    15ba:	cf 93       	push	r28
    15bc:	00 d0       	rcall	.+0      	; 0x15be <SW_enu_Init+0x6>
    15be:	00 d0       	rcall	.+0      	; 0x15c0 <SW_enu_Init+0x8>
    15c0:	cd b7       	in	r28, 0x3d	; 61
    15c2:	de b7       	in	r29, 0x3e	; 62
    15c4:	9b 83       	std	Y+3, r25	; 0x03
    15c6:	8a 83       	std	Y+2, r24	; 0x02

    for(u8 i = 0 ; i < NUM_OF_SWITCHS;i++ ){
    15c8:	19 82       	std	Y+1, r1	; 0x01
    15ca:	53 c0       	rjmp	.+166    	; 0x1672 <SW_enu_Init+0xba>
    DIO_enu_SetPinDirection(Copy_Au8_Switchs[i].SW_Port, Copy_Au8_Switchs[i].SW_Pin, DIO_U8_INPUT);
    15cc:	89 81       	ldd	r24, Y+1	; 0x01
    15ce:	28 2f       	mov	r18, r24
    15d0:	30 e0       	ldi	r19, 0x00	; 0
    15d2:	c9 01       	movw	r24, r18
    15d4:	88 0f       	add	r24, r24
    15d6:	99 1f       	adc	r25, r25
    15d8:	28 0f       	add	r18, r24
    15da:	39 1f       	adc	r19, r25
    15dc:	8a 81       	ldd	r24, Y+2	; 0x02
    15de:	9b 81       	ldd	r25, Y+3	; 0x03
    15e0:	fc 01       	movw	r30, r24
    15e2:	e2 0f       	add	r30, r18
    15e4:	f3 1f       	adc	r31, r19
    15e6:	40 81       	ld	r20, Z
    15e8:	89 81       	ldd	r24, Y+1	; 0x01
    15ea:	28 2f       	mov	r18, r24
    15ec:	30 e0       	ldi	r19, 0x00	; 0
    15ee:	c9 01       	movw	r24, r18
    15f0:	88 0f       	add	r24, r24
    15f2:	99 1f       	adc	r25, r25
    15f4:	28 0f       	add	r18, r24
    15f6:	39 1f       	adc	r19, r25
    15f8:	8a 81       	ldd	r24, Y+2	; 0x02
    15fa:	9b 81       	ldd	r25, Y+3	; 0x03
    15fc:	fc 01       	movw	r30, r24
    15fe:	e2 0f       	add	r30, r18
    1600:	f3 1f       	adc	r31, r19
    1602:	91 81       	ldd	r25, Z+1	; 0x01
    1604:	84 2f       	mov	r24, r20
    1606:	69 2f       	mov	r22, r25
    1608:	40 e0       	ldi	r20, 0x00	; 0
    160a:	0e 94 cd 1e 	call	0x3d9a	; 0x3d9a <DIO_enu_SetPinDirection>
    DIO_enu_SetPinValue(Copy_Au8_Switchs[i].SW_Port, Copy_Au8_Switchs[i].SW_Pin, Copy_Au8_Switchs[i].SW_Initial_State);
    160e:	89 81       	ldd	r24, Y+1	; 0x01
    1610:	28 2f       	mov	r18, r24
    1612:	30 e0       	ldi	r19, 0x00	; 0
    1614:	c9 01       	movw	r24, r18
    1616:	88 0f       	add	r24, r24
    1618:	99 1f       	adc	r25, r25
    161a:	28 0f       	add	r18, r24
    161c:	39 1f       	adc	r19, r25
    161e:	8a 81       	ldd	r24, Y+2	; 0x02
    1620:	9b 81       	ldd	r25, Y+3	; 0x03
    1622:	fc 01       	movw	r30, r24
    1624:	e2 0f       	add	r30, r18
    1626:	f3 1f       	adc	r31, r19
    1628:	50 81       	ld	r21, Z
    162a:	89 81       	ldd	r24, Y+1	; 0x01
    162c:	28 2f       	mov	r18, r24
    162e:	30 e0       	ldi	r19, 0x00	; 0
    1630:	c9 01       	movw	r24, r18
    1632:	88 0f       	add	r24, r24
    1634:	99 1f       	adc	r25, r25
    1636:	28 0f       	add	r18, r24
    1638:	39 1f       	adc	r19, r25
    163a:	8a 81       	ldd	r24, Y+2	; 0x02
    163c:	9b 81       	ldd	r25, Y+3	; 0x03
    163e:	fc 01       	movw	r30, r24
    1640:	e2 0f       	add	r30, r18
    1642:	f3 1f       	adc	r31, r19
    1644:	41 81       	ldd	r20, Z+1	; 0x01
    1646:	89 81       	ldd	r24, Y+1	; 0x01
    1648:	28 2f       	mov	r18, r24
    164a:	30 e0       	ldi	r19, 0x00	; 0
    164c:	c9 01       	movw	r24, r18
    164e:	88 0f       	add	r24, r24
    1650:	99 1f       	adc	r25, r25
    1652:	28 0f       	add	r18, r24
    1654:	39 1f       	adc	r19, r25
    1656:	8a 81       	ldd	r24, Y+2	; 0x02
    1658:	9b 81       	ldd	r25, Y+3	; 0x03
    165a:	fc 01       	movw	r30, r24
    165c:	e2 0f       	add	r30, r18
    165e:	f3 1f       	adc	r31, r19
    1660:	92 81       	ldd	r25, Z+2	; 0x02
    1662:	85 2f       	mov	r24, r21
    1664:	64 2f       	mov	r22, r20
    1666:	49 2f       	mov	r20, r25
    1668:	0e 94 f7 1f 	call	0x3fee	; 0x3fee <DIO_enu_SetPinValue>


ES_t SW_enu_Init(SW_t * Copy_Au8_Switchs)
{

    for(u8 i = 0 ; i < NUM_OF_SWITCHS;i++ ){
    166c:	89 81       	ldd	r24, Y+1	; 0x01
    166e:	8f 5f       	subi	r24, 0xFF	; 255
    1670:	89 83       	std	Y+1, r24	; 0x01
    1672:	89 81       	ldd	r24, Y+1	; 0x01
    1674:	82 30       	cpi	r24, 0x02	; 2
    1676:	08 f4       	brcc	.+2      	; 0x167a <SW_enu_Init+0xc2>
    1678:	a9 cf       	rjmp	.-174    	; 0x15cc <SW_enu_Init+0x14>
    DIO_enu_SetPinDirection(Copy_Au8_Switchs[i].SW_Port, Copy_Au8_Switchs[i].SW_Pin, DIO_U8_INPUT);
    DIO_enu_SetPinValue(Copy_Au8_Switchs[i].SW_Port, Copy_Au8_Switchs[i].SW_Pin, Copy_Au8_Switchs[i].SW_Initial_State);
    }

}
    167a:	0f 90       	pop	r0
    167c:	0f 90       	pop	r0
    167e:	0f 90       	pop	r0
    1680:	0f 90       	pop	r0
    1682:	cf 91       	pop	r28
    1684:	df 91       	pop	r29
    1686:	08 95       	ret

00001688 <SW_enu_getValue>:

ES_t SW_enu_getValue(u8 * Copy_u8_Value,SW_t * Copy_Au8_Switchs)
{
    1688:	df 93       	push	r29
    168a:	cf 93       	push	r28
    168c:	cd b7       	in	r28, 0x3d	; 61
    168e:	de b7       	in	r29, 0x3e	; 62
    1690:	63 97       	sbiw	r28, 0x13	; 19
    1692:	0f b6       	in	r0, 0x3f	; 63
    1694:	f8 94       	cli
    1696:	de bf       	out	0x3e, r29	; 62
    1698:	0f be       	out	0x3f, r0	; 63
    169a:	cd bf       	out	0x3d, r28	; 61
    169c:	98 8b       	std	Y+16, r25	; 0x10
    169e:	8f 87       	std	Y+15, r24	; 0x0f
    16a0:	7a 8b       	std	Y+18, r23	; 0x12
    16a2:	69 8b       	std	Y+17, r22	; 0x11

    DIO_enu_GetPinValue(Copy_Au8_Switchs->SW_Port, Copy_Au8_Switchs->SW_Pin,Copy_u8_Value);
    16a4:	e9 89       	ldd	r30, Y+17	; 0x11
    16a6:	fa 89       	ldd	r31, Y+18	; 0x12
    16a8:	80 81       	ld	r24, Z
    16aa:	e9 89       	ldd	r30, Y+17	; 0x11
    16ac:	fa 89       	ldd	r31, Y+18	; 0x12
    16ae:	91 81       	ldd	r25, Z+1	; 0x01
    16b0:	2f 85       	ldd	r18, Y+15	; 0x0f
    16b2:	38 89       	ldd	r19, Y+16	; 0x10
    16b4:	69 2f       	mov	r22, r25
    16b6:	a9 01       	movw	r20, r18
    16b8:	0e 94 21 21 	call	0x4242	; 0x4242 <DIO_enu_GetPinValue>
    16bc:	80 e0       	ldi	r24, 0x00	; 0
    16be:	90 e0       	ldi	r25, 0x00	; 0
    16c0:	a8 ec       	ldi	r26, 0xC8	; 200
    16c2:	b1 e4       	ldi	r27, 0x41	; 65
    16c4:	8b 87       	std	Y+11, r24	; 0x0b
    16c6:	9c 87       	std	Y+12, r25	; 0x0c
    16c8:	ad 87       	std	Y+13, r26	; 0x0d
    16ca:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    16cc:	6b 85       	ldd	r22, Y+11	; 0x0b
    16ce:	7c 85       	ldd	r23, Y+12	; 0x0c
    16d0:	8d 85       	ldd	r24, Y+13	; 0x0d
    16d2:	9e 85       	ldd	r25, Y+14	; 0x0e
    16d4:	20 e0       	ldi	r18, 0x00	; 0
    16d6:	30 e0       	ldi	r19, 0x00	; 0
    16d8:	4a e7       	ldi	r20, 0x7A	; 122
    16da:	55 e4       	ldi	r21, 0x45	; 69
    16dc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    16e0:	dc 01       	movw	r26, r24
    16e2:	cb 01       	movw	r24, r22
    16e4:	8f 83       	std	Y+7, r24	; 0x07
    16e6:	98 87       	std	Y+8, r25	; 0x08
    16e8:	a9 87       	std	Y+9, r26	; 0x09
    16ea:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    16ec:	6f 81       	ldd	r22, Y+7	; 0x07
    16ee:	78 85       	ldd	r23, Y+8	; 0x08
    16f0:	89 85       	ldd	r24, Y+9	; 0x09
    16f2:	9a 85       	ldd	r25, Y+10	; 0x0a
    16f4:	20 e0       	ldi	r18, 0x00	; 0
    16f6:	30 e0       	ldi	r19, 0x00	; 0
    16f8:	40 e8       	ldi	r20, 0x80	; 128
    16fa:	5f e3       	ldi	r21, 0x3F	; 63
    16fc:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1700:	88 23       	and	r24, r24
    1702:	2c f4       	brge	.+10     	; 0x170e <SW_enu_getValue+0x86>
		__ticks = 1;
    1704:	81 e0       	ldi	r24, 0x01	; 1
    1706:	90 e0       	ldi	r25, 0x00	; 0
    1708:	9e 83       	std	Y+6, r25	; 0x06
    170a:	8d 83       	std	Y+5, r24	; 0x05
    170c:	3f c0       	rjmp	.+126    	; 0x178c <SW_enu_getValue+0x104>
	else if (__tmp > 65535)
    170e:	6f 81       	ldd	r22, Y+7	; 0x07
    1710:	78 85       	ldd	r23, Y+8	; 0x08
    1712:	89 85       	ldd	r24, Y+9	; 0x09
    1714:	9a 85       	ldd	r25, Y+10	; 0x0a
    1716:	20 e0       	ldi	r18, 0x00	; 0
    1718:	3f ef       	ldi	r19, 0xFF	; 255
    171a:	4f e7       	ldi	r20, 0x7F	; 127
    171c:	57 e4       	ldi	r21, 0x47	; 71
    171e:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1722:	18 16       	cp	r1, r24
    1724:	4c f5       	brge	.+82     	; 0x1778 <SW_enu_getValue+0xf0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1726:	6b 85       	ldd	r22, Y+11	; 0x0b
    1728:	7c 85       	ldd	r23, Y+12	; 0x0c
    172a:	8d 85       	ldd	r24, Y+13	; 0x0d
    172c:	9e 85       	ldd	r25, Y+14	; 0x0e
    172e:	20 e0       	ldi	r18, 0x00	; 0
    1730:	30 e0       	ldi	r19, 0x00	; 0
    1732:	40 e2       	ldi	r20, 0x20	; 32
    1734:	51 e4       	ldi	r21, 0x41	; 65
    1736:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    173a:	dc 01       	movw	r26, r24
    173c:	cb 01       	movw	r24, r22
    173e:	bc 01       	movw	r22, r24
    1740:	cd 01       	movw	r24, r26
    1742:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1746:	dc 01       	movw	r26, r24
    1748:	cb 01       	movw	r24, r22
    174a:	9e 83       	std	Y+6, r25	; 0x06
    174c:	8d 83       	std	Y+5, r24	; 0x05
    174e:	0f c0       	rjmp	.+30     	; 0x176e <SW_enu_getValue+0xe6>
    1750:	80 e9       	ldi	r24, 0x90	; 144
    1752:	91 e0       	ldi	r25, 0x01	; 1
    1754:	9c 83       	std	Y+4, r25	; 0x04
    1756:	8b 83       	std	Y+3, r24	; 0x03
    1758:	8b 81       	ldd	r24, Y+3	; 0x03
    175a:	9c 81       	ldd	r25, Y+4	; 0x04
    175c:	01 97       	sbiw	r24, 0x01	; 1
    175e:	f1 f7       	brne	.-4      	; 0x175c <SW_enu_getValue+0xd4>
    1760:	9c 83       	std	Y+4, r25	; 0x04
    1762:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1764:	8d 81       	ldd	r24, Y+5	; 0x05
    1766:	9e 81       	ldd	r25, Y+6	; 0x06
    1768:	01 97       	sbiw	r24, 0x01	; 1
    176a:	9e 83       	std	Y+6, r25	; 0x06
    176c:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    176e:	8d 81       	ldd	r24, Y+5	; 0x05
    1770:	9e 81       	ldd	r25, Y+6	; 0x06
    1772:	00 97       	sbiw	r24, 0x00	; 0
    1774:	69 f7       	brne	.-38     	; 0x1750 <SW_enu_getValue+0xc8>
    1776:	14 c0       	rjmp	.+40     	; 0x17a0 <SW_enu_getValue+0x118>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1778:	6f 81       	ldd	r22, Y+7	; 0x07
    177a:	78 85       	ldd	r23, Y+8	; 0x08
    177c:	89 85       	ldd	r24, Y+9	; 0x09
    177e:	9a 85       	ldd	r25, Y+10	; 0x0a
    1780:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1784:	dc 01       	movw	r26, r24
    1786:	cb 01       	movw	r24, r22
    1788:	9e 83       	std	Y+6, r25	; 0x06
    178a:	8d 83       	std	Y+5, r24	; 0x05
    178c:	8d 81       	ldd	r24, Y+5	; 0x05
    178e:	9e 81       	ldd	r25, Y+6	; 0x06
    1790:	9a 83       	std	Y+2, r25	; 0x02
    1792:	89 83       	std	Y+1, r24	; 0x01
    1794:	89 81       	ldd	r24, Y+1	; 0x01
    1796:	9a 81       	ldd	r25, Y+2	; 0x02
    1798:	01 97       	sbiw	r24, 0x01	; 1
    179a:	f1 f7       	brne	.-4      	; 0x1798 <SW_enu_getValue+0x110>
    179c:	9a 83       	std	Y+2, r25	; 0x02
    179e:	89 83       	std	Y+1, r24	; 0x01
    _delay_ms(25);
    DIO_enu_GetPinValue(Copy_Au8_Switchs->SW_Port, Copy_Au8_Switchs->SW_Pin,Copy_u8_Value);
    17a0:	e9 89       	ldd	r30, Y+17	; 0x11
    17a2:	fa 89       	ldd	r31, Y+18	; 0x12
    17a4:	80 81       	ld	r24, Z
    17a6:	e9 89       	ldd	r30, Y+17	; 0x11
    17a8:	fa 89       	ldd	r31, Y+18	; 0x12
    17aa:	91 81       	ldd	r25, Z+1	; 0x01
    17ac:	2f 85       	ldd	r18, Y+15	; 0x0f
    17ae:	38 89       	ldd	r19, Y+16	; 0x10
    17b0:	69 2f       	mov	r22, r25
    17b2:	a9 01       	movw	r20, r18
    17b4:	0e 94 21 21 	call	0x4242	; 0x4242 <DIO_enu_GetPinValue>
    
}
    17b8:	63 96       	adiw	r28, 0x13	; 19
    17ba:	0f b6       	in	r0, 0x3f	; 63
    17bc:	f8 94       	cli
    17be:	de bf       	out	0x3e, r29	; 62
    17c0:	0f be       	out	0x3f, r0	; 63
    17c2:	cd bf       	out	0x3d, r28	; 61
    17c4:	cf 91       	pop	r28
    17c6:	df 91       	pop	r29
    17c8:	08 95       	ret

000017ca <STEP_Motor_enu_Init>:


#define  delay   125

ES_t STEP_Motor_enu_Init()
{
    17ca:	df 93       	push	r29
    17cc:	cf 93       	push	r28
    17ce:	cd b7       	in	r28, 0x3d	; 61
    17d0:	de b7       	in	r29, 0x3e	; 62
    DIO_enu_SetPinDirection(STEPPER_MOTOR_PORT, STEPPER_MOTOR_PIN1, DIO_U8_OUTPUT);
    17d2:	81 e0       	ldi	r24, 0x01	; 1
    17d4:	60 e0       	ldi	r22, 0x00	; 0
    17d6:	41 e0       	ldi	r20, 0x01	; 1
    17d8:	0e 94 cd 1e 	call	0x3d9a	; 0x3d9a <DIO_enu_SetPinDirection>
    DIO_enu_SetPinDirection(STEPPER_MOTOR_PORT, STEPPER_MOTOR_PIN2, DIO_U8_OUTPUT);
    17dc:	81 e0       	ldi	r24, 0x01	; 1
    17de:	61 e0       	ldi	r22, 0x01	; 1
    17e0:	41 e0       	ldi	r20, 0x01	; 1
    17e2:	0e 94 cd 1e 	call	0x3d9a	; 0x3d9a <DIO_enu_SetPinDirection>
    DIO_enu_SetPinDirection(STEPPER_MOTOR_PORT, STEPPER_MOTOR_PIN3, DIO_U8_OUTPUT);
    17e6:	81 e0       	ldi	r24, 0x01	; 1
    17e8:	62 e0       	ldi	r22, 0x02	; 2
    17ea:	41 e0       	ldi	r20, 0x01	; 1
    17ec:	0e 94 cd 1e 	call	0x3d9a	; 0x3d9a <DIO_enu_SetPinDirection>
    DIO_enu_SetPinDirection(STEPPER_MOTOR_PORT, STEPPER_MOTOR_PIN4, DIO_U8_OUTPUT);
    17f0:	81 e0       	ldi	r24, 0x01	; 1
    17f2:	63 e0       	ldi	r22, 0x03	; 3
    17f4:	41 e0       	ldi	r20, 0x01	; 1
    17f6:	0e 94 cd 1e 	call	0x3d9a	; 0x3d9a <DIO_enu_SetPinDirection>
    DIO_enu_SetPinValue(STEPPER_MOTOR_PORT, STEPPER_MOTOR_PIN1, DIO_U8_LOW);
    17fa:	81 e0       	ldi	r24, 0x01	; 1
    17fc:	60 e0       	ldi	r22, 0x00	; 0
    17fe:	40 e0       	ldi	r20, 0x00	; 0
    1800:	0e 94 f7 1f 	call	0x3fee	; 0x3fee <DIO_enu_SetPinValue>
    DIO_enu_SetPinValue(STEPPER_MOTOR_PORT, STEPPER_MOTOR_PIN2, DIO_U8_LOW);
    1804:	81 e0       	ldi	r24, 0x01	; 1
    1806:	61 e0       	ldi	r22, 0x01	; 1
    1808:	40 e0       	ldi	r20, 0x00	; 0
    180a:	0e 94 f7 1f 	call	0x3fee	; 0x3fee <DIO_enu_SetPinValue>
    DIO_enu_SetPinValue(STEPPER_MOTOR_PORT, STEPPER_MOTOR_PIN3, DIO_U8_LOW);
    180e:	81 e0       	ldi	r24, 0x01	; 1
    1810:	62 e0       	ldi	r22, 0x02	; 2
    1812:	40 e0       	ldi	r20, 0x00	; 0
    1814:	0e 94 f7 1f 	call	0x3fee	; 0x3fee <DIO_enu_SetPinValue>
    DIO_enu_SetPinValue(STEPPER_MOTOR_PORT, STEPPER_MOTOR_PIN4, DIO_U8_LOW);
    1818:	81 e0       	ldi	r24, 0x01	; 1
    181a:	63 e0       	ldi	r22, 0x03	; 3
    181c:	40 e0       	ldi	r20, 0x00	; 0
    181e:	0e 94 f7 1f 	call	0x3fee	; 0x3fee <DIO_enu_SetPinValue>

    return STATE_OK;
    1822:	81 e0       	ldi	r24, 0x01	; 1
}
    1824:	cf 91       	pop	r28
    1826:	df 91       	pop	r29
    1828:	08 95       	ret

0000182a <STEP_Motor_enu_Rotate>:
ES_t STEP_Motor_enu_Rotate(u8 Copy_u8_Direction, u16 Copy_u16_Angle)
{
    182a:	df 93       	push	r29
    182c:	cf 93       	push	r28
    182e:	cd b7       	in	r28, 0x3d	; 61
    1830:	de b7       	in	r29, 0x3e	; 62
    1832:	a5 97       	sbiw	r28, 0x25	; 37
    1834:	0f b6       	in	r0, 0x3f	; 63
    1836:	f8 94       	cli
    1838:	de bf       	out	0x3e, r29	; 62
    183a:	0f be       	out	0x3f, r0	; 63
    183c:	cd bf       	out	0x3d, r28	; 61
    183e:	8b a3       	std	Y+35, r24	; 0x23
    1840:	7d a3       	std	Y+37, r23	; 0x25
    1842:	6c a3       	std	Y+36, r22	; 0x24
    u8 Local_u8_errorState = STATE_OK;
    1844:	81 e0       	ldi	r24, 0x01	; 1
    1846:	8a a3       	std	Y+34, r24	; 0x22
    if ((Copy_u8_Direction == CW || Copy_u8_Direction == CCW) && (Copy_u16_Angle >= 0 && Copy_u16_Angle <= 360))
    1848:	8b a1       	ldd	r24, Y+35	; 0x23
    184a:	81 30       	cpi	r24, 0x01	; 1
    184c:	21 f0       	breq	.+8      	; 0x1856 <STEP_Motor_enu_Rotate+0x2c>
    184e:	8b a1       	ldd	r24, Y+35	; 0x23
    1850:	88 23       	and	r24, r24
    1852:	09 f0       	breq	.+2      	; 0x1856 <STEP_Motor_enu_Rotate+0x2c>
    1854:	a5 c1       	rjmp	.+842    	; 0x1ba0 <STEP_Motor_enu_Rotate+0x376>
    1856:	8c a1       	ldd	r24, Y+36	; 0x24
    1858:	9d a1       	ldd	r25, Y+37	; 0x25
    185a:	21 e0       	ldi	r18, 0x01	; 1
    185c:	89 36       	cpi	r24, 0x69	; 105
    185e:	92 07       	cpc	r25, r18
    1860:	08 f0       	brcs	.+2      	; 0x1864 <STEP_Motor_enu_Rotate+0x3a>
    1862:	9e c1       	rjmp	.+828    	; 0x1ba0 <STEP_Motor_enu_Rotate+0x376>
    {
        u8 state = MOTOR_PINS_STATE; // 0000 1111
    1864:	8f e0       	ldi	r24, 0x0F	; 15
    1866:	89 a3       	std	Y+33, r24	; 0x21
        u16 Local_u16_numOFSteps = Copy_u16_Angle / STEP_ANGLE;
    1868:	8c a1       	ldd	r24, Y+36	; 0x24
    186a:	9d a1       	ldd	r25, Y+37	; 0x25
    186c:	2a e5       	ldi	r18, 0x5A	; 90
    186e:	30 e0       	ldi	r19, 0x00	; 0
    1870:	b9 01       	movw	r22, r18
    1872:	0e 94 eb 24 	call	0x49d6	; 0x49d6 <__udivmodhi4>
    1876:	cb 01       	movw	r24, r22
    1878:	98 a3       	std	Y+32, r25	; 0x20
    187a:	8f 8f       	std	Y+31, r24	; 0x1f
        if (Copy_u8_Direction == CW)
    187c:	8b a1       	ldd	r24, Y+35	; 0x23
    187e:	81 30       	cpi	r24, 0x01	; 1
    1880:	09 f0       	breq	.+2      	; 0x1884 <STEP_Motor_enu_Rotate+0x5a>
    1882:	c5 c0       	rjmp	.+394    	; 0x1a0e <STEP_Motor_enu_Rotate+0x1e4>
        {
            for (u8 Local_u8_Iterator = 0; Local_u8_Iterator < Local_u16_numOFSteps; Local_u8_Iterator++)
    1884:	1e 8e       	std	Y+30, r1	; 0x1e
    1886:	b9 c0       	rjmp	.+370    	; 0x19fa <STEP_Motor_enu_Rotate+0x1d0>
            {
                state &=  3<<(Local_u8_Iterator%4);
    1888:	8e 8d       	ldd	r24, Y+30	; 0x1e
    188a:	88 2f       	mov	r24, r24
    188c:	90 e0       	ldi	r25, 0x00	; 0
    188e:	9c 01       	movw	r18, r24
    1890:	23 70       	andi	r18, 0x03	; 3
    1892:	30 70       	andi	r19, 0x00	; 0
    1894:	83 e0       	ldi	r24, 0x03	; 3
    1896:	90 e0       	ldi	r25, 0x00	; 0
    1898:	02 2e       	mov	r0, r18
    189a:	02 c0       	rjmp	.+4      	; 0x18a0 <STEP_Motor_enu_Rotate+0x76>
    189c:	88 0f       	add	r24, r24
    189e:	99 1f       	adc	r25, r25
    18a0:	0a 94       	dec	r0
    18a2:	e2 f7       	brpl	.-8      	; 0x189c <STEP_Motor_enu_Rotate+0x72>
    18a4:	98 2f       	mov	r25, r24
    18a6:	89 a1       	ldd	r24, Y+33	; 0x21
    18a8:	89 23       	and	r24, r25
    18aa:	89 a3       	std	Y+33, r24	; 0x21
                if((Local_u8_Iterator%4) == 3) state = EDGE_STATE;
    18ac:	8e 8d       	ldd	r24, Y+30	; 0x1e
    18ae:	88 2f       	mov	r24, r24
    18b0:	90 e0       	ldi	r25, 0x00	; 0
    18b2:	83 70       	andi	r24, 0x03	; 3
    18b4:	90 70       	andi	r25, 0x00	; 0
    18b6:	83 30       	cpi	r24, 0x03	; 3
    18b8:	91 05       	cpc	r25, r1
    18ba:	11 f4       	brne	.+4      	; 0x18c0 <STEP_Motor_enu_Rotate+0x96>
    18bc:	89 e0       	ldi	r24, 0x09	; 9
    18be:	89 a3       	std	Y+33, r24	; 0x21
                DIO_enu_SetPinValue(STEPPER_MOTOR_PORT, STEPPER_MOTOR_PIN4, (state>>SHIFT_0BIT)&MASK_BIT);
    18c0:	89 a1       	ldd	r24, Y+33	; 0x21
    18c2:	98 2f       	mov	r25, r24
    18c4:	91 70       	andi	r25, 0x01	; 1
    18c6:	81 e0       	ldi	r24, 0x01	; 1
    18c8:	63 e0       	ldi	r22, 0x03	; 3
    18ca:	49 2f       	mov	r20, r25
    18cc:	0e 94 f7 1f 	call	0x3fee	; 0x3fee <DIO_enu_SetPinValue>
                DIO_enu_SetPinValue(STEPPER_MOTOR_PORT, STEPPER_MOTOR_PIN3, (state>>SHIFT_1BIT)&MASK_BIT);
    18d0:	89 a1       	ldd	r24, Y+33	; 0x21
    18d2:	86 95       	lsr	r24
    18d4:	98 2f       	mov	r25, r24
    18d6:	91 70       	andi	r25, 0x01	; 1
    18d8:	81 e0       	ldi	r24, 0x01	; 1
    18da:	62 e0       	ldi	r22, 0x02	; 2
    18dc:	49 2f       	mov	r20, r25
    18de:	0e 94 f7 1f 	call	0x3fee	; 0x3fee <DIO_enu_SetPinValue>
                DIO_enu_SetPinValue(STEPPER_MOTOR_PORT, STEPPER_MOTOR_PIN2, (state>>SHIFT_2BIT)&MASK_BIT);
    18e2:	89 a1       	ldd	r24, Y+33	; 0x21
    18e4:	86 95       	lsr	r24
    18e6:	86 95       	lsr	r24
    18e8:	98 2f       	mov	r25, r24
    18ea:	91 70       	andi	r25, 0x01	; 1
    18ec:	81 e0       	ldi	r24, 0x01	; 1
    18ee:	61 e0       	ldi	r22, 0x01	; 1
    18f0:	49 2f       	mov	r20, r25
    18f2:	0e 94 f7 1f 	call	0x3fee	; 0x3fee <DIO_enu_SetPinValue>
                DIO_enu_SetPinValue(STEPPER_MOTOR_PORT, STEPPER_MOTOR_PIN1, (state>>SHIFT_3BIT)&MASK_BIT);
    18f6:	89 a1       	ldd	r24, Y+33	; 0x21
    18f8:	86 95       	lsr	r24
    18fa:	86 95       	lsr	r24
    18fc:	86 95       	lsr	r24
    18fe:	98 2f       	mov	r25, r24
    1900:	91 70       	andi	r25, 0x01	; 1
    1902:	81 e0       	ldi	r24, 0x01	; 1
    1904:	60 e0       	ldi	r22, 0x00	; 0
    1906:	49 2f       	mov	r20, r25
    1908:	0e 94 f7 1f 	call	0x3fee	; 0x3fee <DIO_enu_SetPinValue>
    190c:	80 e0       	ldi	r24, 0x00	; 0
    190e:	90 e0       	ldi	r25, 0x00	; 0
    1910:	aa ef       	ldi	r26, 0xFA	; 250
    1912:	b2 e4       	ldi	r27, 0x42	; 66
    1914:	89 8f       	std	Y+25, r24	; 0x19
    1916:	9a 8f       	std	Y+26, r25	; 0x1a
    1918:	ab 8f       	std	Y+27, r26	; 0x1b
    191a:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    191c:	69 8d       	ldd	r22, Y+25	; 0x19
    191e:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1920:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1922:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1924:	20 e0       	ldi	r18, 0x00	; 0
    1926:	30 e0       	ldi	r19, 0x00	; 0
    1928:	4a e7       	ldi	r20, 0x7A	; 122
    192a:	55 e4       	ldi	r21, 0x45	; 69
    192c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1930:	dc 01       	movw	r26, r24
    1932:	cb 01       	movw	r24, r22
    1934:	8d 8b       	std	Y+21, r24	; 0x15
    1936:	9e 8b       	std	Y+22, r25	; 0x16
    1938:	af 8b       	std	Y+23, r26	; 0x17
    193a:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    193c:	6d 89       	ldd	r22, Y+21	; 0x15
    193e:	7e 89       	ldd	r23, Y+22	; 0x16
    1940:	8f 89       	ldd	r24, Y+23	; 0x17
    1942:	98 8d       	ldd	r25, Y+24	; 0x18
    1944:	20 e0       	ldi	r18, 0x00	; 0
    1946:	30 e0       	ldi	r19, 0x00	; 0
    1948:	40 e8       	ldi	r20, 0x80	; 128
    194a:	5f e3       	ldi	r21, 0x3F	; 63
    194c:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1950:	88 23       	and	r24, r24
    1952:	2c f4       	brge	.+10     	; 0x195e <STEP_Motor_enu_Rotate+0x134>
		__ticks = 1;
    1954:	81 e0       	ldi	r24, 0x01	; 1
    1956:	90 e0       	ldi	r25, 0x00	; 0
    1958:	9c 8b       	std	Y+20, r25	; 0x14
    195a:	8b 8b       	std	Y+19, r24	; 0x13
    195c:	3f c0       	rjmp	.+126    	; 0x19dc <STEP_Motor_enu_Rotate+0x1b2>
	else if (__tmp > 65535)
    195e:	6d 89       	ldd	r22, Y+21	; 0x15
    1960:	7e 89       	ldd	r23, Y+22	; 0x16
    1962:	8f 89       	ldd	r24, Y+23	; 0x17
    1964:	98 8d       	ldd	r25, Y+24	; 0x18
    1966:	20 e0       	ldi	r18, 0x00	; 0
    1968:	3f ef       	ldi	r19, 0xFF	; 255
    196a:	4f e7       	ldi	r20, 0x7F	; 127
    196c:	57 e4       	ldi	r21, 0x47	; 71
    196e:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1972:	18 16       	cp	r1, r24
    1974:	4c f5       	brge	.+82     	; 0x19c8 <STEP_Motor_enu_Rotate+0x19e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1976:	69 8d       	ldd	r22, Y+25	; 0x19
    1978:	7a 8d       	ldd	r23, Y+26	; 0x1a
    197a:	8b 8d       	ldd	r24, Y+27	; 0x1b
    197c:	9c 8d       	ldd	r25, Y+28	; 0x1c
    197e:	20 e0       	ldi	r18, 0x00	; 0
    1980:	30 e0       	ldi	r19, 0x00	; 0
    1982:	40 e2       	ldi	r20, 0x20	; 32
    1984:	51 e4       	ldi	r21, 0x41	; 65
    1986:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    198a:	dc 01       	movw	r26, r24
    198c:	cb 01       	movw	r24, r22
    198e:	bc 01       	movw	r22, r24
    1990:	cd 01       	movw	r24, r26
    1992:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1996:	dc 01       	movw	r26, r24
    1998:	cb 01       	movw	r24, r22
    199a:	9c 8b       	std	Y+20, r25	; 0x14
    199c:	8b 8b       	std	Y+19, r24	; 0x13
    199e:	0f c0       	rjmp	.+30     	; 0x19be <STEP_Motor_enu_Rotate+0x194>
    19a0:	80 e9       	ldi	r24, 0x90	; 144
    19a2:	91 e0       	ldi	r25, 0x01	; 1
    19a4:	9a 8b       	std	Y+18, r25	; 0x12
    19a6:	89 8b       	std	Y+17, r24	; 0x11
    19a8:	89 89       	ldd	r24, Y+17	; 0x11
    19aa:	9a 89       	ldd	r25, Y+18	; 0x12
    19ac:	01 97       	sbiw	r24, 0x01	; 1
    19ae:	f1 f7       	brne	.-4      	; 0x19ac <STEP_Motor_enu_Rotate+0x182>
    19b0:	9a 8b       	std	Y+18, r25	; 0x12
    19b2:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    19b4:	8b 89       	ldd	r24, Y+19	; 0x13
    19b6:	9c 89       	ldd	r25, Y+20	; 0x14
    19b8:	01 97       	sbiw	r24, 0x01	; 1
    19ba:	9c 8b       	std	Y+20, r25	; 0x14
    19bc:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    19be:	8b 89       	ldd	r24, Y+19	; 0x13
    19c0:	9c 89       	ldd	r25, Y+20	; 0x14
    19c2:	00 97       	sbiw	r24, 0x00	; 0
    19c4:	69 f7       	brne	.-38     	; 0x19a0 <STEP_Motor_enu_Rotate+0x176>
    19c6:	14 c0       	rjmp	.+40     	; 0x19f0 <STEP_Motor_enu_Rotate+0x1c6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    19c8:	6d 89       	ldd	r22, Y+21	; 0x15
    19ca:	7e 89       	ldd	r23, Y+22	; 0x16
    19cc:	8f 89       	ldd	r24, Y+23	; 0x17
    19ce:	98 8d       	ldd	r25, Y+24	; 0x18
    19d0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    19d4:	dc 01       	movw	r26, r24
    19d6:	cb 01       	movw	r24, r22
    19d8:	9c 8b       	std	Y+20, r25	; 0x14
    19da:	8b 8b       	std	Y+19, r24	; 0x13
    19dc:	8b 89       	ldd	r24, Y+19	; 0x13
    19de:	9c 89       	ldd	r25, Y+20	; 0x14
    19e0:	98 8b       	std	Y+16, r25	; 0x10
    19e2:	8f 87       	std	Y+15, r24	; 0x0f
    19e4:	8f 85       	ldd	r24, Y+15	; 0x0f
    19e6:	98 89       	ldd	r25, Y+16	; 0x10
    19e8:	01 97       	sbiw	r24, 0x01	; 1
    19ea:	f1 f7       	brne	.-4      	; 0x19e8 <STEP_Motor_enu_Rotate+0x1be>
    19ec:	98 8b       	std	Y+16, r25	; 0x10
    19ee:	8f 87       	std	Y+15, r24	; 0x0f
                _delay_ms(delay);
                state = 0x0F;
    19f0:	8f e0       	ldi	r24, 0x0F	; 15
    19f2:	89 a3       	std	Y+33, r24	; 0x21
    {
        u8 state = MOTOR_PINS_STATE; // 0000 1111
        u16 Local_u16_numOFSteps = Copy_u16_Angle / STEP_ANGLE;
        if (Copy_u8_Direction == CW)
        {
            for (u8 Local_u8_Iterator = 0; Local_u8_Iterator < Local_u16_numOFSteps; Local_u8_Iterator++)
    19f4:	8e 8d       	ldd	r24, Y+30	; 0x1e
    19f6:	8f 5f       	subi	r24, 0xFF	; 255
    19f8:	8e 8f       	std	Y+30, r24	; 0x1e
    19fa:	8e 8d       	ldd	r24, Y+30	; 0x1e
    19fc:	28 2f       	mov	r18, r24
    19fe:	30 e0       	ldi	r19, 0x00	; 0
    1a00:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1a02:	98 a1       	ldd	r25, Y+32	; 0x20
    1a04:	28 17       	cp	r18, r24
    1a06:	39 07       	cpc	r19, r25
    1a08:	08 f4       	brcc	.+2      	; 0x1a0c <STEP_Motor_enu_Rotate+0x1e2>
    1a0a:	3e cf       	rjmp	.-388    	; 0x1888 <STEP_Motor_enu_Rotate+0x5e>
    1a0c:	ca c0       	rjmp	.+404    	; 0x1ba2 <STEP_Motor_enu_Rotate+0x378>
                DIO_enu_SetPinValue(STEPPER_MOTOR_PORT, STEPPER_MOTOR_PIN1, (state>>SHIFT_3BIT)&MASK_BIT);
                _delay_ms(delay);
                state = 0x0F;
            }
        }
        else if (Copy_u8_Direction == CCW)
    1a0e:	8b a1       	ldd	r24, Y+35	; 0x23
    1a10:	88 23       	and	r24, r24
    1a12:	09 f0       	breq	.+2      	; 0x1a16 <STEP_Motor_enu_Rotate+0x1ec>
    1a14:	c6 c0       	rjmp	.+396    	; 0x1ba2 <STEP_Motor_enu_Rotate+0x378>
        {
            for (u8 Local_u8_Iterator = 0; Local_u8_Iterator < Local_u16_numOFSteps; Local_u8_Iterator++)
    1a16:	1d 8e       	std	Y+29, r1	; 0x1d
    1a18:	b9 c0       	rjmp	.+370    	; 0x1b8c <STEP_Motor_enu_Rotate+0x362>
            {
                state &=  3<<(Local_u8_Iterator%4);
    1a1a:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1a1c:	88 2f       	mov	r24, r24
    1a1e:	90 e0       	ldi	r25, 0x00	; 0
    1a20:	9c 01       	movw	r18, r24
    1a22:	23 70       	andi	r18, 0x03	; 3
    1a24:	30 70       	andi	r19, 0x00	; 0
    1a26:	83 e0       	ldi	r24, 0x03	; 3
    1a28:	90 e0       	ldi	r25, 0x00	; 0
    1a2a:	02 2e       	mov	r0, r18
    1a2c:	02 c0       	rjmp	.+4      	; 0x1a32 <STEP_Motor_enu_Rotate+0x208>
    1a2e:	88 0f       	add	r24, r24
    1a30:	99 1f       	adc	r25, r25
    1a32:	0a 94       	dec	r0
    1a34:	e2 f7       	brpl	.-8      	; 0x1a2e <STEP_Motor_enu_Rotate+0x204>
    1a36:	98 2f       	mov	r25, r24
    1a38:	89 a1       	ldd	r24, Y+33	; 0x21
    1a3a:	89 23       	and	r24, r25
    1a3c:	89 a3       	std	Y+33, r24	; 0x21
                if((Local_u8_Iterator%4) == 3) state = EDGE_STATE;
    1a3e:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1a40:	88 2f       	mov	r24, r24
    1a42:	90 e0       	ldi	r25, 0x00	; 0
    1a44:	83 70       	andi	r24, 0x03	; 3
    1a46:	90 70       	andi	r25, 0x00	; 0
    1a48:	83 30       	cpi	r24, 0x03	; 3
    1a4a:	91 05       	cpc	r25, r1
    1a4c:	11 f4       	brne	.+4      	; 0x1a52 <STEP_Motor_enu_Rotate+0x228>
    1a4e:	89 e0       	ldi	r24, 0x09	; 9
    1a50:	89 a3       	std	Y+33, r24	; 0x21
                DIO_enu_SetPinValue(STEPPER_MOTOR_PORT, STEPPER_MOTOR_PIN1, (state>>SHIFT_0BIT)&MASK_BIT);
    1a52:	89 a1       	ldd	r24, Y+33	; 0x21
    1a54:	98 2f       	mov	r25, r24
    1a56:	91 70       	andi	r25, 0x01	; 1
    1a58:	81 e0       	ldi	r24, 0x01	; 1
    1a5a:	60 e0       	ldi	r22, 0x00	; 0
    1a5c:	49 2f       	mov	r20, r25
    1a5e:	0e 94 f7 1f 	call	0x3fee	; 0x3fee <DIO_enu_SetPinValue>
                DIO_enu_SetPinValue(STEPPER_MOTOR_PORT, STEPPER_MOTOR_PIN2, (state>>SHIFT_1BIT)&MASK_BIT);
    1a62:	89 a1       	ldd	r24, Y+33	; 0x21
    1a64:	86 95       	lsr	r24
    1a66:	98 2f       	mov	r25, r24
    1a68:	91 70       	andi	r25, 0x01	; 1
    1a6a:	81 e0       	ldi	r24, 0x01	; 1
    1a6c:	61 e0       	ldi	r22, 0x01	; 1
    1a6e:	49 2f       	mov	r20, r25
    1a70:	0e 94 f7 1f 	call	0x3fee	; 0x3fee <DIO_enu_SetPinValue>
                DIO_enu_SetPinValue(STEPPER_MOTOR_PORT, STEPPER_MOTOR_PIN3, (state>>SHIFT_2BIT)&MASK_BIT);
    1a74:	89 a1       	ldd	r24, Y+33	; 0x21
    1a76:	86 95       	lsr	r24
    1a78:	86 95       	lsr	r24
    1a7a:	98 2f       	mov	r25, r24
    1a7c:	91 70       	andi	r25, 0x01	; 1
    1a7e:	81 e0       	ldi	r24, 0x01	; 1
    1a80:	62 e0       	ldi	r22, 0x02	; 2
    1a82:	49 2f       	mov	r20, r25
    1a84:	0e 94 f7 1f 	call	0x3fee	; 0x3fee <DIO_enu_SetPinValue>
                DIO_enu_SetPinValue(STEPPER_MOTOR_PORT, STEPPER_MOTOR_PIN4, (state>>SHIFT_3BIT)&MASK_BIT);
    1a88:	89 a1       	ldd	r24, Y+33	; 0x21
    1a8a:	86 95       	lsr	r24
    1a8c:	86 95       	lsr	r24
    1a8e:	86 95       	lsr	r24
    1a90:	98 2f       	mov	r25, r24
    1a92:	91 70       	andi	r25, 0x01	; 1
    1a94:	81 e0       	ldi	r24, 0x01	; 1
    1a96:	63 e0       	ldi	r22, 0x03	; 3
    1a98:	49 2f       	mov	r20, r25
    1a9a:	0e 94 f7 1f 	call	0x3fee	; 0x3fee <DIO_enu_SetPinValue>
    1a9e:	80 e0       	ldi	r24, 0x00	; 0
    1aa0:	90 e0       	ldi	r25, 0x00	; 0
    1aa2:	aa ef       	ldi	r26, 0xFA	; 250
    1aa4:	b2 e4       	ldi	r27, 0x42	; 66
    1aa6:	8b 87       	std	Y+11, r24	; 0x0b
    1aa8:	9c 87       	std	Y+12, r25	; 0x0c
    1aaa:	ad 87       	std	Y+13, r26	; 0x0d
    1aac:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1aae:	6b 85       	ldd	r22, Y+11	; 0x0b
    1ab0:	7c 85       	ldd	r23, Y+12	; 0x0c
    1ab2:	8d 85       	ldd	r24, Y+13	; 0x0d
    1ab4:	9e 85       	ldd	r25, Y+14	; 0x0e
    1ab6:	20 e0       	ldi	r18, 0x00	; 0
    1ab8:	30 e0       	ldi	r19, 0x00	; 0
    1aba:	4a e7       	ldi	r20, 0x7A	; 122
    1abc:	55 e4       	ldi	r21, 0x45	; 69
    1abe:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1ac2:	dc 01       	movw	r26, r24
    1ac4:	cb 01       	movw	r24, r22
    1ac6:	8f 83       	std	Y+7, r24	; 0x07
    1ac8:	98 87       	std	Y+8, r25	; 0x08
    1aca:	a9 87       	std	Y+9, r26	; 0x09
    1acc:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1ace:	6f 81       	ldd	r22, Y+7	; 0x07
    1ad0:	78 85       	ldd	r23, Y+8	; 0x08
    1ad2:	89 85       	ldd	r24, Y+9	; 0x09
    1ad4:	9a 85       	ldd	r25, Y+10	; 0x0a
    1ad6:	20 e0       	ldi	r18, 0x00	; 0
    1ad8:	30 e0       	ldi	r19, 0x00	; 0
    1ada:	40 e8       	ldi	r20, 0x80	; 128
    1adc:	5f e3       	ldi	r21, 0x3F	; 63
    1ade:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1ae2:	88 23       	and	r24, r24
    1ae4:	2c f4       	brge	.+10     	; 0x1af0 <STEP_Motor_enu_Rotate+0x2c6>
		__ticks = 1;
    1ae6:	81 e0       	ldi	r24, 0x01	; 1
    1ae8:	90 e0       	ldi	r25, 0x00	; 0
    1aea:	9e 83       	std	Y+6, r25	; 0x06
    1aec:	8d 83       	std	Y+5, r24	; 0x05
    1aee:	3f c0       	rjmp	.+126    	; 0x1b6e <STEP_Motor_enu_Rotate+0x344>
	else if (__tmp > 65535)
    1af0:	6f 81       	ldd	r22, Y+7	; 0x07
    1af2:	78 85       	ldd	r23, Y+8	; 0x08
    1af4:	89 85       	ldd	r24, Y+9	; 0x09
    1af6:	9a 85       	ldd	r25, Y+10	; 0x0a
    1af8:	20 e0       	ldi	r18, 0x00	; 0
    1afa:	3f ef       	ldi	r19, 0xFF	; 255
    1afc:	4f e7       	ldi	r20, 0x7F	; 127
    1afe:	57 e4       	ldi	r21, 0x47	; 71
    1b00:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1b04:	18 16       	cp	r1, r24
    1b06:	4c f5       	brge	.+82     	; 0x1b5a <STEP_Motor_enu_Rotate+0x330>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1b08:	6b 85       	ldd	r22, Y+11	; 0x0b
    1b0a:	7c 85       	ldd	r23, Y+12	; 0x0c
    1b0c:	8d 85       	ldd	r24, Y+13	; 0x0d
    1b0e:	9e 85       	ldd	r25, Y+14	; 0x0e
    1b10:	20 e0       	ldi	r18, 0x00	; 0
    1b12:	30 e0       	ldi	r19, 0x00	; 0
    1b14:	40 e2       	ldi	r20, 0x20	; 32
    1b16:	51 e4       	ldi	r21, 0x41	; 65
    1b18:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1b1c:	dc 01       	movw	r26, r24
    1b1e:	cb 01       	movw	r24, r22
    1b20:	bc 01       	movw	r22, r24
    1b22:	cd 01       	movw	r24, r26
    1b24:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1b28:	dc 01       	movw	r26, r24
    1b2a:	cb 01       	movw	r24, r22
    1b2c:	9e 83       	std	Y+6, r25	; 0x06
    1b2e:	8d 83       	std	Y+5, r24	; 0x05
    1b30:	0f c0       	rjmp	.+30     	; 0x1b50 <STEP_Motor_enu_Rotate+0x326>
    1b32:	80 e9       	ldi	r24, 0x90	; 144
    1b34:	91 e0       	ldi	r25, 0x01	; 1
    1b36:	9c 83       	std	Y+4, r25	; 0x04
    1b38:	8b 83       	std	Y+3, r24	; 0x03
    1b3a:	8b 81       	ldd	r24, Y+3	; 0x03
    1b3c:	9c 81       	ldd	r25, Y+4	; 0x04
    1b3e:	01 97       	sbiw	r24, 0x01	; 1
    1b40:	f1 f7       	brne	.-4      	; 0x1b3e <STEP_Motor_enu_Rotate+0x314>
    1b42:	9c 83       	std	Y+4, r25	; 0x04
    1b44:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1b46:	8d 81       	ldd	r24, Y+5	; 0x05
    1b48:	9e 81       	ldd	r25, Y+6	; 0x06
    1b4a:	01 97       	sbiw	r24, 0x01	; 1
    1b4c:	9e 83       	std	Y+6, r25	; 0x06
    1b4e:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1b50:	8d 81       	ldd	r24, Y+5	; 0x05
    1b52:	9e 81       	ldd	r25, Y+6	; 0x06
    1b54:	00 97       	sbiw	r24, 0x00	; 0
    1b56:	69 f7       	brne	.-38     	; 0x1b32 <STEP_Motor_enu_Rotate+0x308>
    1b58:	14 c0       	rjmp	.+40     	; 0x1b82 <STEP_Motor_enu_Rotate+0x358>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1b5a:	6f 81       	ldd	r22, Y+7	; 0x07
    1b5c:	78 85       	ldd	r23, Y+8	; 0x08
    1b5e:	89 85       	ldd	r24, Y+9	; 0x09
    1b60:	9a 85       	ldd	r25, Y+10	; 0x0a
    1b62:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1b66:	dc 01       	movw	r26, r24
    1b68:	cb 01       	movw	r24, r22
    1b6a:	9e 83       	std	Y+6, r25	; 0x06
    1b6c:	8d 83       	std	Y+5, r24	; 0x05
    1b6e:	8d 81       	ldd	r24, Y+5	; 0x05
    1b70:	9e 81       	ldd	r25, Y+6	; 0x06
    1b72:	9a 83       	std	Y+2, r25	; 0x02
    1b74:	89 83       	std	Y+1, r24	; 0x01
    1b76:	89 81       	ldd	r24, Y+1	; 0x01
    1b78:	9a 81       	ldd	r25, Y+2	; 0x02
    1b7a:	01 97       	sbiw	r24, 0x01	; 1
    1b7c:	f1 f7       	brne	.-4      	; 0x1b7a <STEP_Motor_enu_Rotate+0x350>
    1b7e:	9a 83       	std	Y+2, r25	; 0x02
    1b80:	89 83       	std	Y+1, r24	; 0x01
                _delay_ms(delay);
                state = 0x0F;
    1b82:	8f e0       	ldi	r24, 0x0F	; 15
    1b84:	89 a3       	std	Y+33, r24	; 0x21
                state = 0x0F;
            }
        }
        else if (Copy_u8_Direction == CCW)
        {
            for (u8 Local_u8_Iterator = 0; Local_u8_Iterator < Local_u16_numOFSteps; Local_u8_Iterator++)
    1b86:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1b88:	8f 5f       	subi	r24, 0xFF	; 255
    1b8a:	8d 8f       	std	Y+29, r24	; 0x1d
    1b8c:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1b8e:	28 2f       	mov	r18, r24
    1b90:	30 e0       	ldi	r19, 0x00	; 0
    1b92:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1b94:	98 a1       	ldd	r25, Y+32	; 0x20
    1b96:	28 17       	cp	r18, r24
    1b98:	39 07       	cpc	r19, r25
    1b9a:	08 f4       	brcc	.+2      	; 0x1b9e <STEP_Motor_enu_Rotate+0x374>
    1b9c:	3e cf       	rjmp	.-388    	; 0x1a1a <STEP_Motor_enu_Rotate+0x1f0>
    1b9e:	01 c0       	rjmp	.+2      	; 0x1ba2 <STEP_Motor_enu_Rotate+0x378>
                state = 0x0F;
            }
        }
    }else
    {
        Local_u8_errorState = STATE_NOT_OK;
    1ba0:	1a a2       	std	Y+34, r1	; 0x22
    }
    return Local_u8_errorState;
    1ba2:	8a a1       	ldd	r24, Y+34	; 0x22
}
    1ba4:	a5 96       	adiw	r28, 0x25	; 37
    1ba6:	0f b6       	in	r0, 0x3f	; 63
    1ba8:	f8 94       	cli
    1baa:	de bf       	out	0x3e, r29	; 62
    1bac:	0f be       	out	0x3f, r0	; 63
    1bae:	cd bf       	out	0x3d, r28	; 61
    1bb0:	cf 91       	pop	r28
    1bb2:	df 91       	pop	r29
    1bb4:	08 95       	ret

00001bb6 <STEP_Motor_enu_Stop>:

ES_t STEP_Motor_enu_Stop()
{
    1bb6:	df 93       	push	r29
    1bb8:	cf 93       	push	r28
    1bba:	cd b7       	in	r28, 0x3d	; 61
    1bbc:	de b7       	in	r29, 0x3e	; 62
    1bbe:	2e 97       	sbiw	r28, 0x0e	; 14
    1bc0:	0f b6       	in	r0, 0x3f	; 63
    1bc2:	f8 94       	cli
    1bc4:	de bf       	out	0x3e, r29	; 62
    1bc6:	0f be       	out	0x3f, r0	; 63
    1bc8:	cd bf       	out	0x3d, r28	; 61
    DIO_enu_SetPinValue(STEPPER_MOTOR_PORT, STEPPER_MOTOR_PIN1, DIO_U8_LOW);
    1bca:	81 e0       	ldi	r24, 0x01	; 1
    1bcc:	60 e0       	ldi	r22, 0x00	; 0
    1bce:	40 e0       	ldi	r20, 0x00	; 0
    1bd0:	0e 94 f7 1f 	call	0x3fee	; 0x3fee <DIO_enu_SetPinValue>
    DIO_enu_SetPinValue(STEPPER_MOTOR_PORT, STEPPER_MOTOR_PIN2, DIO_U8_LOW);
    1bd4:	81 e0       	ldi	r24, 0x01	; 1
    1bd6:	61 e0       	ldi	r22, 0x01	; 1
    1bd8:	40 e0       	ldi	r20, 0x00	; 0
    1bda:	0e 94 f7 1f 	call	0x3fee	; 0x3fee <DIO_enu_SetPinValue>
    DIO_enu_SetPinValue(STEPPER_MOTOR_PORT, STEPPER_MOTOR_PIN3, DIO_U8_LOW);
    1bde:	81 e0       	ldi	r24, 0x01	; 1
    1be0:	62 e0       	ldi	r22, 0x02	; 2
    1be2:	40 e0       	ldi	r20, 0x00	; 0
    1be4:	0e 94 f7 1f 	call	0x3fee	; 0x3fee <DIO_enu_SetPinValue>
    DIO_enu_SetPinValue(STEPPER_MOTOR_PORT, STEPPER_MOTOR_PIN4, DIO_U8_LOW);
    1be8:	81 e0       	ldi	r24, 0x01	; 1
    1bea:	63 e0       	ldi	r22, 0x03	; 3
    1bec:	40 e0       	ldi	r20, 0x00	; 0
    1bee:	0e 94 f7 1f 	call	0x3fee	; 0x3fee <DIO_enu_SetPinValue>
    1bf2:	80 e0       	ldi	r24, 0x00	; 0
    1bf4:	90 e0       	ldi	r25, 0x00	; 0
    1bf6:	aa ef       	ldi	r26, 0xFA	; 250
    1bf8:	b2 e4       	ldi	r27, 0x42	; 66
    1bfa:	8b 87       	std	Y+11, r24	; 0x0b
    1bfc:	9c 87       	std	Y+12, r25	; 0x0c
    1bfe:	ad 87       	std	Y+13, r26	; 0x0d
    1c00:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1c02:	6b 85       	ldd	r22, Y+11	; 0x0b
    1c04:	7c 85       	ldd	r23, Y+12	; 0x0c
    1c06:	8d 85       	ldd	r24, Y+13	; 0x0d
    1c08:	9e 85       	ldd	r25, Y+14	; 0x0e
    1c0a:	20 e0       	ldi	r18, 0x00	; 0
    1c0c:	30 e0       	ldi	r19, 0x00	; 0
    1c0e:	4a e7       	ldi	r20, 0x7A	; 122
    1c10:	55 e4       	ldi	r21, 0x45	; 69
    1c12:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1c16:	dc 01       	movw	r26, r24
    1c18:	cb 01       	movw	r24, r22
    1c1a:	8f 83       	std	Y+7, r24	; 0x07
    1c1c:	98 87       	std	Y+8, r25	; 0x08
    1c1e:	a9 87       	std	Y+9, r26	; 0x09
    1c20:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1c22:	6f 81       	ldd	r22, Y+7	; 0x07
    1c24:	78 85       	ldd	r23, Y+8	; 0x08
    1c26:	89 85       	ldd	r24, Y+9	; 0x09
    1c28:	9a 85       	ldd	r25, Y+10	; 0x0a
    1c2a:	20 e0       	ldi	r18, 0x00	; 0
    1c2c:	30 e0       	ldi	r19, 0x00	; 0
    1c2e:	40 e8       	ldi	r20, 0x80	; 128
    1c30:	5f e3       	ldi	r21, 0x3F	; 63
    1c32:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1c36:	88 23       	and	r24, r24
    1c38:	2c f4       	brge	.+10     	; 0x1c44 <STEP_Motor_enu_Stop+0x8e>
		__ticks = 1;
    1c3a:	81 e0       	ldi	r24, 0x01	; 1
    1c3c:	90 e0       	ldi	r25, 0x00	; 0
    1c3e:	9e 83       	std	Y+6, r25	; 0x06
    1c40:	8d 83       	std	Y+5, r24	; 0x05
    1c42:	3f c0       	rjmp	.+126    	; 0x1cc2 <STEP_Motor_enu_Stop+0x10c>
	else if (__tmp > 65535)
    1c44:	6f 81       	ldd	r22, Y+7	; 0x07
    1c46:	78 85       	ldd	r23, Y+8	; 0x08
    1c48:	89 85       	ldd	r24, Y+9	; 0x09
    1c4a:	9a 85       	ldd	r25, Y+10	; 0x0a
    1c4c:	20 e0       	ldi	r18, 0x00	; 0
    1c4e:	3f ef       	ldi	r19, 0xFF	; 255
    1c50:	4f e7       	ldi	r20, 0x7F	; 127
    1c52:	57 e4       	ldi	r21, 0x47	; 71
    1c54:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1c58:	18 16       	cp	r1, r24
    1c5a:	4c f5       	brge	.+82     	; 0x1cae <STEP_Motor_enu_Stop+0xf8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1c5c:	6b 85       	ldd	r22, Y+11	; 0x0b
    1c5e:	7c 85       	ldd	r23, Y+12	; 0x0c
    1c60:	8d 85       	ldd	r24, Y+13	; 0x0d
    1c62:	9e 85       	ldd	r25, Y+14	; 0x0e
    1c64:	20 e0       	ldi	r18, 0x00	; 0
    1c66:	30 e0       	ldi	r19, 0x00	; 0
    1c68:	40 e2       	ldi	r20, 0x20	; 32
    1c6a:	51 e4       	ldi	r21, 0x41	; 65
    1c6c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1c70:	dc 01       	movw	r26, r24
    1c72:	cb 01       	movw	r24, r22
    1c74:	bc 01       	movw	r22, r24
    1c76:	cd 01       	movw	r24, r26
    1c78:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1c7c:	dc 01       	movw	r26, r24
    1c7e:	cb 01       	movw	r24, r22
    1c80:	9e 83       	std	Y+6, r25	; 0x06
    1c82:	8d 83       	std	Y+5, r24	; 0x05
    1c84:	0f c0       	rjmp	.+30     	; 0x1ca4 <STEP_Motor_enu_Stop+0xee>
    1c86:	80 e9       	ldi	r24, 0x90	; 144
    1c88:	91 e0       	ldi	r25, 0x01	; 1
    1c8a:	9c 83       	std	Y+4, r25	; 0x04
    1c8c:	8b 83       	std	Y+3, r24	; 0x03
    1c8e:	8b 81       	ldd	r24, Y+3	; 0x03
    1c90:	9c 81       	ldd	r25, Y+4	; 0x04
    1c92:	01 97       	sbiw	r24, 0x01	; 1
    1c94:	f1 f7       	brne	.-4      	; 0x1c92 <STEP_Motor_enu_Stop+0xdc>
    1c96:	9c 83       	std	Y+4, r25	; 0x04
    1c98:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1c9a:	8d 81       	ldd	r24, Y+5	; 0x05
    1c9c:	9e 81       	ldd	r25, Y+6	; 0x06
    1c9e:	01 97       	sbiw	r24, 0x01	; 1
    1ca0:	9e 83       	std	Y+6, r25	; 0x06
    1ca2:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1ca4:	8d 81       	ldd	r24, Y+5	; 0x05
    1ca6:	9e 81       	ldd	r25, Y+6	; 0x06
    1ca8:	00 97       	sbiw	r24, 0x00	; 0
    1caa:	69 f7       	brne	.-38     	; 0x1c86 <STEP_Motor_enu_Stop+0xd0>
    1cac:	14 c0       	rjmp	.+40     	; 0x1cd6 <STEP_Motor_enu_Stop+0x120>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1cae:	6f 81       	ldd	r22, Y+7	; 0x07
    1cb0:	78 85       	ldd	r23, Y+8	; 0x08
    1cb2:	89 85       	ldd	r24, Y+9	; 0x09
    1cb4:	9a 85       	ldd	r25, Y+10	; 0x0a
    1cb6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1cba:	dc 01       	movw	r26, r24
    1cbc:	cb 01       	movw	r24, r22
    1cbe:	9e 83       	std	Y+6, r25	; 0x06
    1cc0:	8d 83       	std	Y+5, r24	; 0x05
    1cc2:	8d 81       	ldd	r24, Y+5	; 0x05
    1cc4:	9e 81       	ldd	r25, Y+6	; 0x06
    1cc6:	9a 83       	std	Y+2, r25	; 0x02
    1cc8:	89 83       	std	Y+1, r24	; 0x01
    1cca:	89 81       	ldd	r24, Y+1	; 0x01
    1ccc:	9a 81       	ldd	r25, Y+2	; 0x02
    1cce:	01 97       	sbiw	r24, 0x01	; 1
    1cd0:	f1 f7       	brne	.-4      	; 0x1cce <STEP_Motor_enu_Stop+0x118>
    1cd2:	9a 83       	std	Y+2, r25	; 0x02
    1cd4:	89 83       	std	Y+1, r24	; 0x01
    _delay_ms(delay);
    return STATE_OK;
    1cd6:	81 e0       	ldi	r24, 0x01	; 1
}
    1cd8:	2e 96       	adiw	r28, 0x0e	; 14
    1cda:	0f b6       	in	r0, 0x3f	; 63
    1cdc:	f8 94       	cli
    1cde:	de bf       	out	0x3e, r29	; 62
    1ce0:	0f be       	out	0x3f, r0	; 63
    1ce2:	cd bf       	out	0x3d, r28	; 61
    1ce4:	cf 91       	pop	r28
    1ce6:	df 91       	pop	r29
    1ce8:	08 95       	ret

00001cea <sevenSeg_enu_displayNum>:

u8 SevenSeg_au8_Numbers[10] = {0b00111111,0b00000110,0b01011011,0b01001111,0b01100110,
                              0b01101101,0b01111101,0b00000111,0b01111111,0b01101111};
u8 SevenSeg_au8_Pins[7] = {PIN_U8_A,PIN_U8_B,PIN_U8_C,PIN_U8_D,PIN_U8_E,PIN_U8_F,PIN_U8_G};   
ES_t sevenSeg_enu_displayNum(u8 Copy_u8_Num)
{
    1cea:	df 93       	push	r29
    1cec:	cf 93       	push	r28
    1cee:	00 d0       	rcall	.+0      	; 0x1cf0 <sevenSeg_enu_displayNum+0x6>
    1cf0:	0f 92       	push	r0
    1cf2:	cd b7       	in	r28, 0x3d	; 61
    1cf4:	de b7       	in	r29, 0x3e	; 62
    1cf6:	8b 83       	std	Y+3, r24	; 0x03
    DIO_enu_SetPinDirection(SEVEN_SEGMENT_U8_E_PORT, SEVEN_SEGMENT_U8_E_PIN, DIO_U8_OUTPUT);
    1cf8:	82 e0       	ldi	r24, 0x02	; 2
    1cfa:	66 e0       	ldi	r22, 0x06	; 6
    1cfc:	41 e0       	ldi	r20, 0x01	; 1
    1cfe:	0e 94 cd 1e 	call	0x3d9a	; 0x3d9a <DIO_enu_SetPinDirection>
    DIO_enu_SetPortDirection(SEVEN_SEGMENT_U8_PORT,DIO_U8_OUTPUT);
    1d02:	80 e0       	ldi	r24, 0x00	; 0
    1d04:	61 e0       	ldi	r22, 0x01	; 1
    1d06:	0e 94 ba 21 	call	0x4374	; 0x4374 <DIO_enu_SetPortDirection>
    u8 Local_u8_errorState = STATE_OK;
    1d0a:	81 e0       	ldi	r24, 0x01	; 1
    1d0c:	8a 83       	std	Y+2, r24	; 0x02
    if(Copy_u8_Num>= 0 && Copy_u8_Num<=9){
    1d0e:	8b 81       	ldd	r24, Y+3	; 0x03
    1d10:	8a 30       	cpi	r24, 0x0A	; 10
    1d12:	78 f5       	brcc	.+94     	; 0x1d72 <sevenSeg_enu_displayNum+0x88>
        for (u8 Local_u8_iterator = 0; Local_u8_iterator < 7; Local_u8_iterator++)
        {
           DIO_enu_SetPinValue(SEVEN_SEGMENT_U8_PORT,SevenSeg_au8_Pins[Local_u8_iterator],(~SevenSeg_au8_Numbers[Copy_u8_Num]>>Local_u8_iterator) & MASK_BIT);
        }
        #elif SEVEN_SEGMENT_TYPE == FARES_KIT
        DIO_enu_SetPinValue(SEVEN_SEGMENT_U8_E_PORT, SEVEN_SEGMENT_U8_E_PIN, DIO_U8_HIGH);
    1d14:	82 e0       	ldi	r24, 0x02	; 2
    1d16:	66 e0       	ldi	r22, 0x06	; 6
    1d18:	41 e0       	ldi	r20, 0x01	; 1
    1d1a:	0e 94 f7 1f 	call	0x3fee	; 0x3fee <DIO_enu_SetPinValue>
        for (u8 Local_u8_iterator = 0; Local_u8_iterator < 7; Local_u8_iterator++)
    1d1e:	19 82       	std	Y+1, r1	; 0x01
    1d20:	24 c0       	rjmp	.+72     	; 0x1d6a <sevenSeg_enu_displayNum+0x80>
        {
           DIO_enu_SetPinValue(SEVEN_SEGMENT_U8_PORT,SevenSeg_au8_Pins[Local_u8_iterator],(SevenSeg_au8_Numbers[Copy_u8_Num]>>Local_u8_iterator) & MASK_BIT);
    1d22:	89 81       	ldd	r24, Y+1	; 0x01
    1d24:	88 2f       	mov	r24, r24
    1d26:	90 e0       	ldi	r25, 0x00	; 0
    1d28:	fc 01       	movw	r30, r24
    1d2a:	e9 5f       	subi	r30, 0xF9	; 249
    1d2c:	fe 4f       	sbci	r31, 0xFE	; 254
    1d2e:	40 81       	ld	r20, Z
    1d30:	8b 81       	ldd	r24, Y+3	; 0x03
    1d32:	88 2f       	mov	r24, r24
    1d34:	90 e0       	ldi	r25, 0x00	; 0
    1d36:	fc 01       	movw	r30, r24
    1d38:	e3 50       	subi	r30, 0x03	; 3
    1d3a:	ff 4f       	sbci	r31, 0xFF	; 255
    1d3c:	80 81       	ld	r24, Z
    1d3e:	28 2f       	mov	r18, r24
    1d40:	30 e0       	ldi	r19, 0x00	; 0
    1d42:	89 81       	ldd	r24, Y+1	; 0x01
    1d44:	88 2f       	mov	r24, r24
    1d46:	90 e0       	ldi	r25, 0x00	; 0
    1d48:	b9 01       	movw	r22, r18
    1d4a:	02 c0       	rjmp	.+4      	; 0x1d50 <sevenSeg_enu_displayNum+0x66>
    1d4c:	75 95       	asr	r23
    1d4e:	67 95       	ror	r22
    1d50:	8a 95       	dec	r24
    1d52:	e2 f7       	brpl	.-8      	; 0x1d4c <sevenSeg_enu_displayNum+0x62>
    1d54:	cb 01       	movw	r24, r22
    1d56:	98 2f       	mov	r25, r24
    1d58:	91 70       	andi	r25, 0x01	; 1
    1d5a:	80 e0       	ldi	r24, 0x00	; 0
    1d5c:	64 2f       	mov	r22, r20
    1d5e:	49 2f       	mov	r20, r25
    1d60:	0e 94 f7 1f 	call	0x3fee	; 0x3fee <DIO_enu_SetPinValue>
        {
           DIO_enu_SetPinValue(SEVEN_SEGMENT_U8_PORT,SevenSeg_au8_Pins[Local_u8_iterator],(~SevenSeg_au8_Numbers[Copy_u8_Num]>>Local_u8_iterator) & MASK_BIT);
        }
        #elif SEVEN_SEGMENT_TYPE == FARES_KIT
        DIO_enu_SetPinValue(SEVEN_SEGMENT_U8_E_PORT, SEVEN_SEGMENT_U8_E_PIN, DIO_U8_HIGH);
        for (u8 Local_u8_iterator = 0; Local_u8_iterator < 7; Local_u8_iterator++)
    1d64:	89 81       	ldd	r24, Y+1	; 0x01
    1d66:	8f 5f       	subi	r24, 0xFF	; 255
    1d68:	89 83       	std	Y+1, r24	; 0x01
    1d6a:	89 81       	ldd	r24, Y+1	; 0x01
    1d6c:	87 30       	cpi	r24, 0x07	; 7
    1d6e:	c8 f2       	brcs	.-78     	; 0x1d22 <sevenSeg_enu_displayNum+0x38>
    1d70:	01 c0       	rjmp	.+2      	; 0x1d74 <sevenSeg_enu_displayNum+0x8a>
        
        #endif


    }else{
        Local_u8_errorState = STATE_NOT_OK;
    1d72:	1a 82       	std	Y+2, r1	; 0x02
    }
    return Local_u8_errorState;
    1d74:	8a 81       	ldd	r24, Y+2	; 0x02
}
    1d76:	0f 90       	pop	r0
    1d78:	0f 90       	pop	r0
    1d7a:	0f 90       	pop	r0
    1d7c:	cf 91       	pop	r28
    1d7e:	df 91       	pop	r29
    1d80:	08 95       	ret

00001d82 <Servo_enu_Init>:
#include"../../1-MCAL/Timers/Timer_Interface.h"

#include"Servo_Config.h"
#include"Servo_Private.h"

ES_t Servo_enu_Init(void){
    1d82:	df 93       	push	r29
    1d84:	cf 93       	push	r28
    1d86:	0f 92       	push	r0
    1d88:	cd b7       	in	r28, 0x3d	; 61
    1d8a:	de b7       	in	r29, 0x3e	; 62
    DIO_enu_SetPinDirection(DIO_U8_PORTD,DIO_U8_PIN5,DIO_U8_OUTPUT);
    1d8c:	83 e0       	ldi	r24, 0x03	; 3
    1d8e:	65 e0       	ldi	r22, 0x05	; 5
    1d90:	41 e0       	ldi	r20, 0x01	; 1
    1d92:	0e 94 cd 1e 	call	0x3d9a	; 0x3d9a <DIO_enu_SetPinDirection>
    Timers_enu_Init(TIMER1,FAST_PWM_NON_INVERTING,CLK_8);
    1d96:	81 e0       	ldi	r24, 0x01	; 1
    1d98:	64 e0       	ldi	r22, 0x04	; 4
    1d9a:	42 e0       	ldi	r20, 0x02	; 2
    1d9c:	0e 94 18 19 	call	0x3230	; 0x3230 <Timers_enu_Init>
    Timers_enu_Timer1_setTopValue(SERVO_COMPLETE_CYCLE_TICKS-1);
    1da0:	8f e3       	ldi	r24, 0x3F	; 63
    1da2:	9c e9       	ldi	r25, 0x9C	; 156
    1da4:	0e 94 10 1d 	call	0x3a20	; 0x3a20 <Timers_enu_Timer1_setTopValue>
}
    1da8:	0f 90       	pop	r0
    1daa:	cf 91       	pop	r28
    1dac:	df 91       	pop	r29
    1dae:	08 95       	ret

00001db0 <Servo_enu_SetAngle>:
ES_t Servo_enu_SetAngle(u8 Copy_u8_Angle){
    1db0:	df 93       	push	r29
    1db2:	cf 93       	push	r28
    1db4:	00 d0       	rcall	.+0      	; 0x1db6 <Servo_enu_SetAngle+0x6>
    1db6:	00 d0       	rcall	.+0      	; 0x1db8 <Servo_enu_SetAngle+0x8>
    1db8:	cd b7       	in	r28, 0x3d	; 61
    1dba:	de b7       	in	r29, 0x3e	; 62
    1dbc:	8c 83       	std	Y+4, r24	; 0x04
    ES_t Local_u8_errorState = STATE_OK;
    1dbe:	81 e0       	ldi	r24, 0x01	; 1
    1dc0:	8b 83       	std	Y+3, r24	; 0x03
    if(Copy_u8_Angle<=SERVO_MAX_ANGLE){
    1dc2:	8c 81       	ldd	r24, Y+4	; 0x04
    1dc4:	85 3b       	cpi	r24, 0xB5	; 181
    1dc6:	58 f5       	brcc	.+86     	; 0x1e1e <Servo_enu_SetAngle+0x6e>
        u16 Servo_u16_OCR1A_Value = ((350+(Copy_u8_Angle*1950UL)/SERVO_MAX_ANGLE)*2)-1;
    1dc8:	8c 81       	ldd	r24, Y+4	; 0x04
    1dca:	88 2f       	mov	r24, r24
    1dcc:	90 e0       	ldi	r25, 0x00	; 0
    1dce:	a0 e0       	ldi	r26, 0x00	; 0
    1dd0:	b0 e0       	ldi	r27, 0x00	; 0
    1dd2:	2e e9       	ldi	r18, 0x9E	; 158
    1dd4:	37 e0       	ldi	r19, 0x07	; 7
    1dd6:	40 e0       	ldi	r20, 0x00	; 0
    1dd8:	50 e0       	ldi	r21, 0x00	; 0
    1dda:	bc 01       	movw	r22, r24
    1ddc:	cd 01       	movw	r24, r26
    1dde:	0e 94 cc 24 	call	0x4998	; 0x4998 <__mulsi3>
    1de2:	dc 01       	movw	r26, r24
    1de4:	cb 01       	movw	r24, r22
    1de6:	24 eb       	ldi	r18, 0xB4	; 180
    1de8:	30 e0       	ldi	r19, 0x00	; 0
    1dea:	40 e0       	ldi	r20, 0x00	; 0
    1dec:	50 e0       	ldi	r21, 0x00	; 0
    1dee:	bc 01       	movw	r22, r24
    1df0:	cd 01       	movw	r24, r26
    1df2:	0e 94 ff 24 	call	0x49fe	; 0x49fe <__udivmodsi4>
    1df6:	da 01       	movw	r26, r20
    1df8:	c9 01       	movw	r24, r18
    1dfa:	82 5a       	subi	r24, 0xA2	; 162
    1dfc:	9e 4f       	sbci	r25, 0xFE	; 254
    1dfe:	af 4f       	sbci	r26, 0xFF	; 255
    1e00:	bf 4f       	sbci	r27, 0xFF	; 255
    1e02:	88 0f       	add	r24, r24
    1e04:	99 1f       	adc	r25, r25
    1e06:	aa 1f       	adc	r26, r26
    1e08:	bb 1f       	adc	r27, r27
    1e0a:	01 97       	sbiw	r24, 0x01	; 1
    1e0c:	9a 83       	std	Y+2, r25	; 0x02
    1e0e:	89 83       	std	Y+1, r24	; 0x01
        Timers_enu_Timer1SetCompareValue(COMPARE_UNIT_A,Servo_u16_OCR1A_Value);
    1e10:	29 81       	ldd	r18, Y+1	; 0x01
    1e12:	3a 81       	ldd	r19, Y+2	; 0x02
    1e14:	80 e0       	ldi	r24, 0x00	; 0
    1e16:	b9 01       	movw	r22, r18
    1e18:	0e 94 24 1d 	call	0x3a48	; 0x3a48 <Timers_enu_Timer1SetCompareValue>
    1e1c:	01 c0       	rjmp	.+2      	; 0x1e20 <Servo_enu_SetAngle+0x70>
    }else{
        Local_u8_errorState = STATE_NOT_OK;
    1e1e:	1b 82       	std	Y+3, r1	; 0x03
    }
    return Local_u8_errorState;
    1e20:	8b 81       	ldd	r24, Y+3	; 0x03
}
    1e22:	0f 90       	pop	r0
    1e24:	0f 90       	pop	r0
    1e26:	0f 90       	pop	r0
    1e28:	0f 90       	pop	r0
    1e2a:	cf 91       	pop	r28
    1e2c:	df 91       	pop	r29
    1e2e:	08 95       	ret

00001e30 <Servo_enu_Stop>:
ES_t Servo_enu_Stop(void){
    1e30:	df 93       	push	r29
    1e32:	cf 93       	push	r28
    1e34:	cd b7       	in	r28, 0x3d	; 61
    1e36:	de b7       	in	r29, 0x3e	; 62
    Timers_enu_Stop(TIMER1);
    1e38:	81 e0       	ldi	r24, 0x01	; 1
    1e3a:	0e 94 5b 1d 	call	0x3ab6	; 0x3ab6 <Timers_enu_Stop>
    return STATE_OK;
    1e3e:	81 e0       	ldi	r24, 0x01	; 1
}
    1e40:	cf 91       	pop	r28
    1e42:	df 91       	pop	r29
    1e44:	08 95       	ret

00001e46 <LCD_enu_SendCmnd>:
#include "../../1-MCAL/DIO/DIO_interface.h"
/*HAL*/
#include "../../2-HAL/LCD/LCD_Private.h"
#include "../../2-HAL/LCD/LCD_Config.h"
ES_t LCD_enu_SendCmnd(u8 Copy_u8_Cmdn)
{
    1e46:	df 93       	push	r29
    1e48:	cf 93       	push	r28
    1e4a:	cd b7       	in	r28, 0x3d	; 61
    1e4c:	de b7       	in	r29, 0x3e	; 62
    1e4e:	e1 97       	sbiw	r28, 0x31	; 49
    1e50:	0f b6       	in	r0, 0x3f	; 63
    1e52:	f8 94       	cli
    1e54:	de bf       	out	0x3e, r29	; 62
    1e56:	0f be       	out	0x3f, r0	; 63
    1e58:	cd bf       	out	0x3d, r28	; 61
    1e5a:	89 ab       	std	Y+49, r24	; 0x31
    DIO_enu_SetPinValue(LCD_U8_E_PORT, LCD_U8_E_PIN, DIO_U8_LOW);
    return STATE_OK;
#elif LCD_U8_MODE == LCD_U8_MODE_4BIT
    /*Send Command at 4-bit mode*/
    /* RS = 0 */
    DIO_enu_SetPinValue(LCD_U8_RS_PORT, LCD_U8_RS_PIN, DIO_U8_LOW);
    1e5c:	80 e0       	ldi	r24, 0x00	; 0
    1e5e:	61 e0       	ldi	r22, 0x01	; 1
    1e60:	40 e0       	ldi	r20, 0x00	; 0
    1e62:	0e 94 f7 1f 	call	0x3fee	; 0x3fee <DIO_enu_SetPinValue>
    /* RW = 0 */
    DIO_enu_SetPinValue(LCD_U8_RW_PORT, LCD_U8_RW_PIN, DIO_U8_LOW);
    1e66:	81 e0       	ldi	r24, 0x01	; 1
    1e68:	60 e0       	ldi	r22, 0x00	; 0
    1e6a:	40 e0       	ldi	r20, 0x00	; 0
    1e6c:	0e 94 f7 1f 	call	0x3fee	; 0x3fee <DIO_enu_SetPinValue>
    /*Write Command*/
    DIO_enu_SetPinValue(LCD_U8_DATA_PORT, D7, (Copy_u8_Cmdn >> SHIFT_7BIT) & MASK_BIT);
    1e70:	89 a9       	ldd	r24, Y+49	; 0x31
    1e72:	98 2f       	mov	r25, r24
    1e74:	99 1f       	adc	r25, r25
    1e76:	99 27       	eor	r25, r25
    1e78:	99 1f       	adc	r25, r25
    1e7a:	80 e0       	ldi	r24, 0x00	; 0
    1e7c:	66 e0       	ldi	r22, 0x06	; 6
    1e7e:	49 2f       	mov	r20, r25
    1e80:	0e 94 f7 1f 	call	0x3fee	; 0x3fee <DIO_enu_SetPinValue>
    DIO_enu_SetPinValue(LCD_U8_DATA_PORT, D6, (Copy_u8_Cmdn >> SHIFT_6BIT) & MASK_BIT);
    1e84:	89 a9       	ldd	r24, Y+49	; 0x31
    1e86:	82 95       	swap	r24
    1e88:	86 95       	lsr	r24
    1e8a:	86 95       	lsr	r24
    1e8c:	83 70       	andi	r24, 0x03	; 3
    1e8e:	98 2f       	mov	r25, r24
    1e90:	91 70       	andi	r25, 0x01	; 1
    1e92:	80 e0       	ldi	r24, 0x00	; 0
    1e94:	65 e0       	ldi	r22, 0x05	; 5
    1e96:	49 2f       	mov	r20, r25
    1e98:	0e 94 f7 1f 	call	0x3fee	; 0x3fee <DIO_enu_SetPinValue>
    DIO_enu_SetPinValue(LCD_U8_DATA_PORT, D5, (Copy_u8_Cmdn >> SHIFT_5BIT) & MASK_BIT);
    1e9c:	89 a9       	ldd	r24, Y+49	; 0x31
    1e9e:	82 95       	swap	r24
    1ea0:	86 95       	lsr	r24
    1ea2:	87 70       	andi	r24, 0x07	; 7
    1ea4:	98 2f       	mov	r25, r24
    1ea6:	91 70       	andi	r25, 0x01	; 1
    1ea8:	80 e0       	ldi	r24, 0x00	; 0
    1eaa:	64 e0       	ldi	r22, 0x04	; 4
    1eac:	49 2f       	mov	r20, r25
    1eae:	0e 94 f7 1f 	call	0x3fee	; 0x3fee <DIO_enu_SetPinValue>
    DIO_enu_SetPinValue(LCD_U8_DATA_PORT, D4, (Copy_u8_Cmdn >> SHIFT_4BIT) & MASK_BIT);
    1eb2:	89 a9       	ldd	r24, Y+49	; 0x31
    1eb4:	82 95       	swap	r24
    1eb6:	8f 70       	andi	r24, 0x0F	; 15
    1eb8:	98 2f       	mov	r25, r24
    1eba:	91 70       	andi	r25, 0x01	; 1
    1ebc:	80 e0       	ldi	r24, 0x00	; 0
    1ebe:	63 e0       	ldi	r22, 0x03	; 3
    1ec0:	49 2f       	mov	r20, r25
    1ec2:	0e 94 f7 1f 	call	0x3fee	; 0x3fee <DIO_enu_SetPinValue>
    /* E = 1 */
    DIO_enu_SetPinValue(LCD_U8_E_PORT, LCD_U8_E_PIN, DIO_U8_HIGH);
    1ec6:	80 e0       	ldi	r24, 0x00	; 0
    1ec8:	62 e0       	ldi	r22, 0x02	; 2
    1eca:	41 e0       	ldi	r20, 0x01	; 1
    1ecc:	0e 94 f7 1f 	call	0x3fee	; 0x3fee <DIO_enu_SetPinValue>
    1ed0:	80 e0       	ldi	r24, 0x00	; 0
    1ed2:	90 e0       	ldi	r25, 0x00	; 0
    1ed4:	a0 e8       	ldi	r26, 0x80	; 128
    1ed6:	bf e3       	ldi	r27, 0x3F	; 63
    1ed8:	8d a7       	std	Y+45, r24	; 0x2d
    1eda:	9e a7       	std	Y+46, r25	; 0x2e
    1edc:	af a7       	std	Y+47, r26	; 0x2f
    1ede:	b8 ab       	std	Y+48, r27	; 0x30
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    1ee0:	6d a5       	ldd	r22, Y+45	; 0x2d
    1ee2:	7e a5       	ldd	r23, Y+46	; 0x2e
    1ee4:	8f a5       	ldd	r24, Y+47	; 0x2f
    1ee6:	98 a9       	ldd	r25, Y+48	; 0x30
    1ee8:	2b ea       	ldi	r18, 0xAB	; 171
    1eea:	3a ea       	ldi	r19, 0xAA	; 170
    1eec:	4a ea       	ldi	r20, 0xAA	; 170
    1eee:	50 e4       	ldi	r21, 0x40	; 64
    1ef0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1ef4:	dc 01       	movw	r26, r24
    1ef6:	cb 01       	movw	r24, r22
    1ef8:	89 a7       	std	Y+41, r24	; 0x29
    1efa:	9a a7       	std	Y+42, r25	; 0x2a
    1efc:	ab a7       	std	Y+43, r26	; 0x2b
    1efe:	bc a7       	std	Y+44, r27	; 0x2c
	if (__tmp < 1.0)
    1f00:	69 a5       	ldd	r22, Y+41	; 0x29
    1f02:	7a a5       	ldd	r23, Y+42	; 0x2a
    1f04:	8b a5       	ldd	r24, Y+43	; 0x2b
    1f06:	9c a5       	ldd	r25, Y+44	; 0x2c
    1f08:	20 e0       	ldi	r18, 0x00	; 0
    1f0a:	30 e0       	ldi	r19, 0x00	; 0
    1f0c:	40 e8       	ldi	r20, 0x80	; 128
    1f0e:	5f e3       	ldi	r21, 0x3F	; 63
    1f10:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1f14:	88 23       	and	r24, r24
    1f16:	1c f4       	brge	.+6      	; 0x1f1e <LCD_enu_SendCmnd+0xd8>
		__ticks = 1;
    1f18:	81 e0       	ldi	r24, 0x01	; 1
    1f1a:	88 a7       	std	Y+40, r24	; 0x28
    1f1c:	91 c0       	rjmp	.+290    	; 0x2040 <LCD_enu_SendCmnd+0x1fa>
	else if (__tmp > 255)
    1f1e:	69 a5       	ldd	r22, Y+41	; 0x29
    1f20:	7a a5       	ldd	r23, Y+42	; 0x2a
    1f22:	8b a5       	ldd	r24, Y+43	; 0x2b
    1f24:	9c a5       	ldd	r25, Y+44	; 0x2c
    1f26:	20 e0       	ldi	r18, 0x00	; 0
    1f28:	30 e0       	ldi	r19, 0x00	; 0
    1f2a:	4f e7       	ldi	r20, 0x7F	; 127
    1f2c:	53 e4       	ldi	r21, 0x43	; 67
    1f2e:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1f32:	18 16       	cp	r1, r24
    1f34:	0c f0       	brlt	.+2      	; 0x1f38 <LCD_enu_SendCmnd+0xf2>
    1f36:	7b c0       	rjmp	.+246    	; 0x202e <LCD_enu_SendCmnd+0x1e8>
	{
		_delay_ms(__us / 1000.0);
    1f38:	6d a5       	ldd	r22, Y+45	; 0x2d
    1f3a:	7e a5       	ldd	r23, Y+46	; 0x2e
    1f3c:	8f a5       	ldd	r24, Y+47	; 0x2f
    1f3e:	98 a9       	ldd	r25, Y+48	; 0x30
    1f40:	20 e0       	ldi	r18, 0x00	; 0
    1f42:	30 e0       	ldi	r19, 0x00	; 0
    1f44:	4a e7       	ldi	r20, 0x7A	; 122
    1f46:	54 e4       	ldi	r21, 0x44	; 68
    1f48:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    1f4c:	dc 01       	movw	r26, r24
    1f4e:	cb 01       	movw	r24, r22
    1f50:	8c a3       	std	Y+36, r24	; 0x24
    1f52:	9d a3       	std	Y+37, r25	; 0x25
    1f54:	ae a3       	std	Y+38, r26	; 0x26
    1f56:	bf a3       	std	Y+39, r27	; 0x27
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1f58:	6c a1       	ldd	r22, Y+36	; 0x24
    1f5a:	7d a1       	ldd	r23, Y+37	; 0x25
    1f5c:	8e a1       	ldd	r24, Y+38	; 0x26
    1f5e:	9f a1       	ldd	r25, Y+39	; 0x27
    1f60:	20 e0       	ldi	r18, 0x00	; 0
    1f62:	30 e0       	ldi	r19, 0x00	; 0
    1f64:	4a e7       	ldi	r20, 0x7A	; 122
    1f66:	55 e4       	ldi	r21, 0x45	; 69
    1f68:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1f6c:	dc 01       	movw	r26, r24
    1f6e:	cb 01       	movw	r24, r22
    1f70:	88 a3       	std	Y+32, r24	; 0x20
    1f72:	99 a3       	std	Y+33, r25	; 0x21
    1f74:	aa a3       	std	Y+34, r26	; 0x22
    1f76:	bb a3       	std	Y+35, r27	; 0x23
	if (__tmp < 1.0)
    1f78:	68 a1       	ldd	r22, Y+32	; 0x20
    1f7a:	79 a1       	ldd	r23, Y+33	; 0x21
    1f7c:	8a a1       	ldd	r24, Y+34	; 0x22
    1f7e:	9b a1       	ldd	r25, Y+35	; 0x23
    1f80:	20 e0       	ldi	r18, 0x00	; 0
    1f82:	30 e0       	ldi	r19, 0x00	; 0
    1f84:	40 e8       	ldi	r20, 0x80	; 128
    1f86:	5f e3       	ldi	r21, 0x3F	; 63
    1f88:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1f8c:	88 23       	and	r24, r24
    1f8e:	2c f4       	brge	.+10     	; 0x1f9a <LCD_enu_SendCmnd+0x154>
		__ticks = 1;
    1f90:	81 e0       	ldi	r24, 0x01	; 1
    1f92:	90 e0       	ldi	r25, 0x00	; 0
    1f94:	9f 8f       	std	Y+31, r25	; 0x1f
    1f96:	8e 8f       	std	Y+30, r24	; 0x1e
    1f98:	3f c0       	rjmp	.+126    	; 0x2018 <LCD_enu_SendCmnd+0x1d2>
	else if (__tmp > 65535)
    1f9a:	68 a1       	ldd	r22, Y+32	; 0x20
    1f9c:	79 a1       	ldd	r23, Y+33	; 0x21
    1f9e:	8a a1       	ldd	r24, Y+34	; 0x22
    1fa0:	9b a1       	ldd	r25, Y+35	; 0x23
    1fa2:	20 e0       	ldi	r18, 0x00	; 0
    1fa4:	3f ef       	ldi	r19, 0xFF	; 255
    1fa6:	4f e7       	ldi	r20, 0x7F	; 127
    1fa8:	57 e4       	ldi	r21, 0x47	; 71
    1faa:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1fae:	18 16       	cp	r1, r24
    1fb0:	4c f5       	brge	.+82     	; 0x2004 <LCD_enu_SendCmnd+0x1be>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1fb2:	6c a1       	ldd	r22, Y+36	; 0x24
    1fb4:	7d a1       	ldd	r23, Y+37	; 0x25
    1fb6:	8e a1       	ldd	r24, Y+38	; 0x26
    1fb8:	9f a1       	ldd	r25, Y+39	; 0x27
    1fba:	20 e0       	ldi	r18, 0x00	; 0
    1fbc:	30 e0       	ldi	r19, 0x00	; 0
    1fbe:	40 e2       	ldi	r20, 0x20	; 32
    1fc0:	51 e4       	ldi	r21, 0x41	; 65
    1fc2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1fc6:	dc 01       	movw	r26, r24
    1fc8:	cb 01       	movw	r24, r22
    1fca:	bc 01       	movw	r22, r24
    1fcc:	cd 01       	movw	r24, r26
    1fce:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1fd2:	dc 01       	movw	r26, r24
    1fd4:	cb 01       	movw	r24, r22
    1fd6:	9f 8f       	std	Y+31, r25	; 0x1f
    1fd8:	8e 8f       	std	Y+30, r24	; 0x1e
    1fda:	0f c0       	rjmp	.+30     	; 0x1ffa <LCD_enu_SendCmnd+0x1b4>
    1fdc:	80 e9       	ldi	r24, 0x90	; 144
    1fde:	91 e0       	ldi	r25, 0x01	; 1
    1fe0:	9d 8f       	std	Y+29, r25	; 0x1d
    1fe2:	8c 8f       	std	Y+28, r24	; 0x1c
    1fe4:	8c 8d       	ldd	r24, Y+28	; 0x1c
    1fe6:	9d 8d       	ldd	r25, Y+29	; 0x1d
    1fe8:	01 97       	sbiw	r24, 0x01	; 1
    1fea:	f1 f7       	brne	.-4      	; 0x1fe8 <LCD_enu_SendCmnd+0x1a2>
    1fec:	9d 8f       	std	Y+29, r25	; 0x1d
    1fee:	8c 8f       	std	Y+28, r24	; 0x1c
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1ff0:	8e 8d       	ldd	r24, Y+30	; 0x1e
    1ff2:	9f 8d       	ldd	r25, Y+31	; 0x1f
    1ff4:	01 97       	sbiw	r24, 0x01	; 1
    1ff6:	9f 8f       	std	Y+31, r25	; 0x1f
    1ff8:	8e 8f       	std	Y+30, r24	; 0x1e
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1ffa:	8e 8d       	ldd	r24, Y+30	; 0x1e
    1ffc:	9f 8d       	ldd	r25, Y+31	; 0x1f
    1ffe:	00 97       	sbiw	r24, 0x00	; 0
    2000:	69 f7       	brne	.-38     	; 0x1fdc <LCD_enu_SendCmnd+0x196>
    2002:	24 c0       	rjmp	.+72     	; 0x204c <LCD_enu_SendCmnd+0x206>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2004:	68 a1       	ldd	r22, Y+32	; 0x20
    2006:	79 a1       	ldd	r23, Y+33	; 0x21
    2008:	8a a1       	ldd	r24, Y+34	; 0x22
    200a:	9b a1       	ldd	r25, Y+35	; 0x23
    200c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2010:	dc 01       	movw	r26, r24
    2012:	cb 01       	movw	r24, r22
    2014:	9f 8f       	std	Y+31, r25	; 0x1f
    2016:	8e 8f       	std	Y+30, r24	; 0x1e
    2018:	8e 8d       	ldd	r24, Y+30	; 0x1e
    201a:	9f 8d       	ldd	r25, Y+31	; 0x1f
    201c:	9b 8f       	std	Y+27, r25	; 0x1b
    201e:	8a 8f       	std	Y+26, r24	; 0x1a
    2020:	8a 8d       	ldd	r24, Y+26	; 0x1a
    2022:	9b 8d       	ldd	r25, Y+27	; 0x1b
    2024:	01 97       	sbiw	r24, 0x01	; 1
    2026:	f1 f7       	brne	.-4      	; 0x2024 <LCD_enu_SendCmnd+0x1de>
    2028:	9b 8f       	std	Y+27, r25	; 0x1b
    202a:	8a 8f       	std	Y+26, r24	; 0x1a
    202c:	0f c0       	rjmp	.+30     	; 0x204c <LCD_enu_SendCmnd+0x206>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    202e:	69 a5       	ldd	r22, Y+41	; 0x29
    2030:	7a a5       	ldd	r23, Y+42	; 0x2a
    2032:	8b a5       	ldd	r24, Y+43	; 0x2b
    2034:	9c a5       	ldd	r25, Y+44	; 0x2c
    2036:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    203a:	dc 01       	movw	r26, r24
    203c:	cb 01       	movw	r24, r22
    203e:	88 a7       	std	Y+40, r24	; 0x28
    2040:	88 a5       	ldd	r24, Y+40	; 0x28
    2042:	89 8f       	std	Y+25, r24	; 0x19
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    2044:	89 8d       	ldd	r24, Y+25	; 0x19
    2046:	8a 95       	dec	r24
    2048:	f1 f7       	brne	.-4      	; 0x2046 <LCD_enu_SendCmnd+0x200>
    204a:	89 8f       	std	Y+25, r24	; 0x19
    _delay_us(1);
    /* E = 0 */
    DIO_enu_SetPinValue(LCD_U8_E_PORT, LCD_U8_E_PIN, DIO_U8_LOW);
    204c:	80 e0       	ldi	r24, 0x00	; 0
    204e:	62 e0       	ldi	r22, 0x02	; 2
    2050:	40 e0       	ldi	r20, 0x00	; 0
    2052:	0e 94 f7 1f 	call	0x3fee	; 0x3fee <DIO_enu_SetPinValue>
    /*Write the rest of the cmnd*/
    DIO_enu_SetPinValue(LCD_U8_DATA_PORT, D7, (Copy_u8_Cmdn >> SHIFT_3BIT) & MASK_BIT);
    2056:	89 a9       	ldd	r24, Y+49	; 0x31
    2058:	86 95       	lsr	r24
    205a:	86 95       	lsr	r24
    205c:	86 95       	lsr	r24
    205e:	98 2f       	mov	r25, r24
    2060:	91 70       	andi	r25, 0x01	; 1
    2062:	80 e0       	ldi	r24, 0x00	; 0
    2064:	66 e0       	ldi	r22, 0x06	; 6
    2066:	49 2f       	mov	r20, r25
    2068:	0e 94 f7 1f 	call	0x3fee	; 0x3fee <DIO_enu_SetPinValue>
    DIO_enu_SetPinValue(LCD_U8_DATA_PORT, D6, (Copy_u8_Cmdn >> SHIFT_2BIT) & MASK_BIT);
    206c:	89 a9       	ldd	r24, Y+49	; 0x31
    206e:	86 95       	lsr	r24
    2070:	86 95       	lsr	r24
    2072:	98 2f       	mov	r25, r24
    2074:	91 70       	andi	r25, 0x01	; 1
    2076:	80 e0       	ldi	r24, 0x00	; 0
    2078:	65 e0       	ldi	r22, 0x05	; 5
    207a:	49 2f       	mov	r20, r25
    207c:	0e 94 f7 1f 	call	0x3fee	; 0x3fee <DIO_enu_SetPinValue>
    DIO_enu_SetPinValue(LCD_U8_DATA_PORT, D5, (Copy_u8_Cmdn >> SHIFT_1BIT) & MASK_BIT);
    2080:	89 a9       	ldd	r24, Y+49	; 0x31
    2082:	86 95       	lsr	r24
    2084:	98 2f       	mov	r25, r24
    2086:	91 70       	andi	r25, 0x01	; 1
    2088:	80 e0       	ldi	r24, 0x00	; 0
    208a:	64 e0       	ldi	r22, 0x04	; 4
    208c:	49 2f       	mov	r20, r25
    208e:	0e 94 f7 1f 	call	0x3fee	; 0x3fee <DIO_enu_SetPinValue>
    DIO_enu_SetPinValue(LCD_U8_DATA_PORT, D4, (Copy_u8_Cmdn >> SHIFT_0BIT) & MASK_BIT);
    2092:	89 a9       	ldd	r24, Y+49	; 0x31
    2094:	98 2f       	mov	r25, r24
    2096:	91 70       	andi	r25, 0x01	; 1
    2098:	80 e0       	ldi	r24, 0x00	; 0
    209a:	63 e0       	ldi	r22, 0x03	; 3
    209c:	49 2f       	mov	r20, r25
    209e:	0e 94 f7 1f 	call	0x3fee	; 0x3fee <DIO_enu_SetPinValue>
    /* E = 1 */
    DIO_enu_SetPinValue(LCD_U8_E_PORT, LCD_U8_E_PIN, DIO_U8_HIGH);
    20a2:	80 e0       	ldi	r24, 0x00	; 0
    20a4:	62 e0       	ldi	r22, 0x02	; 2
    20a6:	41 e0       	ldi	r20, 0x01	; 1
    20a8:	0e 94 f7 1f 	call	0x3fee	; 0x3fee <DIO_enu_SetPinValue>
    20ac:	80 e0       	ldi	r24, 0x00	; 0
    20ae:	90 e0       	ldi	r25, 0x00	; 0
    20b0:	a0 e8       	ldi	r26, 0x80	; 128
    20b2:	bf e3       	ldi	r27, 0x3F	; 63
    20b4:	8d 8b       	std	Y+21, r24	; 0x15
    20b6:	9e 8b       	std	Y+22, r25	; 0x16
    20b8:	af 8b       	std	Y+23, r26	; 0x17
    20ba:	b8 8f       	std	Y+24, r27	; 0x18
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    20bc:	6d 89       	ldd	r22, Y+21	; 0x15
    20be:	7e 89       	ldd	r23, Y+22	; 0x16
    20c0:	8f 89       	ldd	r24, Y+23	; 0x17
    20c2:	98 8d       	ldd	r25, Y+24	; 0x18
    20c4:	2b ea       	ldi	r18, 0xAB	; 171
    20c6:	3a ea       	ldi	r19, 0xAA	; 170
    20c8:	4a ea       	ldi	r20, 0xAA	; 170
    20ca:	50 e4       	ldi	r21, 0x40	; 64
    20cc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    20d0:	dc 01       	movw	r26, r24
    20d2:	cb 01       	movw	r24, r22
    20d4:	89 8b       	std	Y+17, r24	; 0x11
    20d6:	9a 8b       	std	Y+18, r25	; 0x12
    20d8:	ab 8b       	std	Y+19, r26	; 0x13
    20da:	bc 8b       	std	Y+20, r27	; 0x14
	if (__tmp < 1.0)
    20dc:	69 89       	ldd	r22, Y+17	; 0x11
    20de:	7a 89       	ldd	r23, Y+18	; 0x12
    20e0:	8b 89       	ldd	r24, Y+19	; 0x13
    20e2:	9c 89       	ldd	r25, Y+20	; 0x14
    20e4:	20 e0       	ldi	r18, 0x00	; 0
    20e6:	30 e0       	ldi	r19, 0x00	; 0
    20e8:	40 e8       	ldi	r20, 0x80	; 128
    20ea:	5f e3       	ldi	r21, 0x3F	; 63
    20ec:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    20f0:	88 23       	and	r24, r24
    20f2:	1c f4       	brge	.+6      	; 0x20fa <LCD_enu_SendCmnd+0x2b4>
		__ticks = 1;
    20f4:	81 e0       	ldi	r24, 0x01	; 1
    20f6:	88 8b       	std	Y+16, r24	; 0x10
    20f8:	91 c0       	rjmp	.+290    	; 0x221c <LCD_enu_SendCmnd+0x3d6>
	else if (__tmp > 255)
    20fa:	69 89       	ldd	r22, Y+17	; 0x11
    20fc:	7a 89       	ldd	r23, Y+18	; 0x12
    20fe:	8b 89       	ldd	r24, Y+19	; 0x13
    2100:	9c 89       	ldd	r25, Y+20	; 0x14
    2102:	20 e0       	ldi	r18, 0x00	; 0
    2104:	30 e0       	ldi	r19, 0x00	; 0
    2106:	4f e7       	ldi	r20, 0x7F	; 127
    2108:	53 e4       	ldi	r21, 0x43	; 67
    210a:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    210e:	18 16       	cp	r1, r24
    2110:	0c f0       	brlt	.+2      	; 0x2114 <LCD_enu_SendCmnd+0x2ce>
    2112:	7b c0       	rjmp	.+246    	; 0x220a <LCD_enu_SendCmnd+0x3c4>
	{
		_delay_ms(__us / 1000.0);
    2114:	6d 89       	ldd	r22, Y+21	; 0x15
    2116:	7e 89       	ldd	r23, Y+22	; 0x16
    2118:	8f 89       	ldd	r24, Y+23	; 0x17
    211a:	98 8d       	ldd	r25, Y+24	; 0x18
    211c:	20 e0       	ldi	r18, 0x00	; 0
    211e:	30 e0       	ldi	r19, 0x00	; 0
    2120:	4a e7       	ldi	r20, 0x7A	; 122
    2122:	54 e4       	ldi	r21, 0x44	; 68
    2124:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    2128:	dc 01       	movw	r26, r24
    212a:	cb 01       	movw	r24, r22
    212c:	8c 87       	std	Y+12, r24	; 0x0c
    212e:	9d 87       	std	Y+13, r25	; 0x0d
    2130:	ae 87       	std	Y+14, r26	; 0x0e
    2132:	bf 87       	std	Y+15, r27	; 0x0f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2134:	6c 85       	ldd	r22, Y+12	; 0x0c
    2136:	7d 85       	ldd	r23, Y+13	; 0x0d
    2138:	8e 85       	ldd	r24, Y+14	; 0x0e
    213a:	9f 85       	ldd	r25, Y+15	; 0x0f
    213c:	20 e0       	ldi	r18, 0x00	; 0
    213e:	30 e0       	ldi	r19, 0x00	; 0
    2140:	4a e7       	ldi	r20, 0x7A	; 122
    2142:	55 e4       	ldi	r21, 0x45	; 69
    2144:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2148:	dc 01       	movw	r26, r24
    214a:	cb 01       	movw	r24, r22
    214c:	88 87       	std	Y+8, r24	; 0x08
    214e:	99 87       	std	Y+9, r25	; 0x09
    2150:	aa 87       	std	Y+10, r26	; 0x0a
    2152:	bb 87       	std	Y+11, r27	; 0x0b
	if (__tmp < 1.0)
    2154:	68 85       	ldd	r22, Y+8	; 0x08
    2156:	79 85       	ldd	r23, Y+9	; 0x09
    2158:	8a 85       	ldd	r24, Y+10	; 0x0a
    215a:	9b 85       	ldd	r25, Y+11	; 0x0b
    215c:	20 e0       	ldi	r18, 0x00	; 0
    215e:	30 e0       	ldi	r19, 0x00	; 0
    2160:	40 e8       	ldi	r20, 0x80	; 128
    2162:	5f e3       	ldi	r21, 0x3F	; 63
    2164:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2168:	88 23       	and	r24, r24
    216a:	2c f4       	brge	.+10     	; 0x2176 <LCD_enu_SendCmnd+0x330>
		__ticks = 1;
    216c:	81 e0       	ldi	r24, 0x01	; 1
    216e:	90 e0       	ldi	r25, 0x00	; 0
    2170:	9f 83       	std	Y+7, r25	; 0x07
    2172:	8e 83       	std	Y+6, r24	; 0x06
    2174:	3f c0       	rjmp	.+126    	; 0x21f4 <LCD_enu_SendCmnd+0x3ae>
	else if (__tmp > 65535)
    2176:	68 85       	ldd	r22, Y+8	; 0x08
    2178:	79 85       	ldd	r23, Y+9	; 0x09
    217a:	8a 85       	ldd	r24, Y+10	; 0x0a
    217c:	9b 85       	ldd	r25, Y+11	; 0x0b
    217e:	20 e0       	ldi	r18, 0x00	; 0
    2180:	3f ef       	ldi	r19, 0xFF	; 255
    2182:	4f e7       	ldi	r20, 0x7F	; 127
    2184:	57 e4       	ldi	r21, 0x47	; 71
    2186:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    218a:	18 16       	cp	r1, r24
    218c:	4c f5       	brge	.+82     	; 0x21e0 <LCD_enu_SendCmnd+0x39a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    218e:	6c 85       	ldd	r22, Y+12	; 0x0c
    2190:	7d 85       	ldd	r23, Y+13	; 0x0d
    2192:	8e 85       	ldd	r24, Y+14	; 0x0e
    2194:	9f 85       	ldd	r25, Y+15	; 0x0f
    2196:	20 e0       	ldi	r18, 0x00	; 0
    2198:	30 e0       	ldi	r19, 0x00	; 0
    219a:	40 e2       	ldi	r20, 0x20	; 32
    219c:	51 e4       	ldi	r21, 0x41	; 65
    219e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    21a2:	dc 01       	movw	r26, r24
    21a4:	cb 01       	movw	r24, r22
    21a6:	bc 01       	movw	r22, r24
    21a8:	cd 01       	movw	r24, r26
    21aa:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    21ae:	dc 01       	movw	r26, r24
    21b0:	cb 01       	movw	r24, r22
    21b2:	9f 83       	std	Y+7, r25	; 0x07
    21b4:	8e 83       	std	Y+6, r24	; 0x06
    21b6:	0f c0       	rjmp	.+30     	; 0x21d6 <LCD_enu_SendCmnd+0x390>
    21b8:	80 e9       	ldi	r24, 0x90	; 144
    21ba:	91 e0       	ldi	r25, 0x01	; 1
    21bc:	9d 83       	std	Y+5, r25	; 0x05
    21be:	8c 83       	std	Y+4, r24	; 0x04
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    21c0:	8c 81       	ldd	r24, Y+4	; 0x04
    21c2:	9d 81       	ldd	r25, Y+5	; 0x05
    21c4:	01 97       	sbiw	r24, 0x01	; 1
    21c6:	f1 f7       	brne	.-4      	; 0x21c4 <LCD_enu_SendCmnd+0x37e>
    21c8:	9d 83       	std	Y+5, r25	; 0x05
    21ca:	8c 83       	std	Y+4, r24	; 0x04
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    21cc:	8e 81       	ldd	r24, Y+6	; 0x06
    21ce:	9f 81       	ldd	r25, Y+7	; 0x07
    21d0:	01 97       	sbiw	r24, 0x01	; 1
    21d2:	9f 83       	std	Y+7, r25	; 0x07
    21d4:	8e 83       	std	Y+6, r24	; 0x06
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    21d6:	8e 81       	ldd	r24, Y+6	; 0x06
    21d8:	9f 81       	ldd	r25, Y+7	; 0x07
    21da:	00 97       	sbiw	r24, 0x00	; 0
    21dc:	69 f7       	brne	.-38     	; 0x21b8 <LCD_enu_SendCmnd+0x372>
    21de:	24 c0       	rjmp	.+72     	; 0x2228 <LCD_enu_SendCmnd+0x3e2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    21e0:	68 85       	ldd	r22, Y+8	; 0x08
    21e2:	79 85       	ldd	r23, Y+9	; 0x09
    21e4:	8a 85       	ldd	r24, Y+10	; 0x0a
    21e6:	9b 85       	ldd	r25, Y+11	; 0x0b
    21e8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    21ec:	dc 01       	movw	r26, r24
    21ee:	cb 01       	movw	r24, r22
    21f0:	9f 83       	std	Y+7, r25	; 0x07
    21f2:	8e 83       	std	Y+6, r24	; 0x06
    21f4:	8e 81       	ldd	r24, Y+6	; 0x06
    21f6:	9f 81       	ldd	r25, Y+7	; 0x07
    21f8:	9b 83       	std	Y+3, r25	; 0x03
    21fa:	8a 83       	std	Y+2, r24	; 0x02
    21fc:	8a 81       	ldd	r24, Y+2	; 0x02
    21fe:	9b 81       	ldd	r25, Y+3	; 0x03
    2200:	01 97       	sbiw	r24, 0x01	; 1
    2202:	f1 f7       	brne	.-4      	; 0x2200 <LCD_enu_SendCmnd+0x3ba>
    2204:	9b 83       	std	Y+3, r25	; 0x03
    2206:	8a 83       	std	Y+2, r24	; 0x02
    2208:	0f c0       	rjmp	.+30     	; 0x2228 <LCD_enu_SendCmnd+0x3e2>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    220a:	69 89       	ldd	r22, Y+17	; 0x11
    220c:	7a 89       	ldd	r23, Y+18	; 0x12
    220e:	8b 89       	ldd	r24, Y+19	; 0x13
    2210:	9c 89       	ldd	r25, Y+20	; 0x14
    2212:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2216:	dc 01       	movw	r26, r24
    2218:	cb 01       	movw	r24, r22
    221a:	88 8b       	std	Y+16, r24	; 0x10
    221c:	88 89       	ldd	r24, Y+16	; 0x10
    221e:	89 83       	std	Y+1, r24	; 0x01
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    2220:	89 81       	ldd	r24, Y+1	; 0x01
    2222:	8a 95       	dec	r24
    2224:	f1 f7       	brne	.-4      	; 0x2222 <LCD_enu_SendCmnd+0x3dc>
    2226:	89 83       	std	Y+1, r24	; 0x01
    _delay_us(1);
    /* E = 0 */
    DIO_enu_SetPinValue(LCD_U8_E_PORT, LCD_U8_E_PIN, DIO_U8_LOW);
    2228:	80 e0       	ldi	r24, 0x00	; 0
    222a:	62 e0       	ldi	r22, 0x02	; 2
    222c:	40 e0       	ldi	r20, 0x00	; 0
    222e:	0e 94 f7 1f 	call	0x3fee	; 0x3fee <DIO_enu_SetPinValue>
    return STATE_OK;
    2232:	81 e0       	ldi	r24, 0x01	; 1
#endif
}
    2234:	e1 96       	adiw	r28, 0x31	; 49
    2236:	0f b6       	in	r0, 0x3f	; 63
    2238:	f8 94       	cli
    223a:	de bf       	out	0x3e, r29	; 62
    223c:	0f be       	out	0x3f, r0	; 63
    223e:	cd bf       	out	0x3d, r28	; 61
    2240:	cf 91       	pop	r28
    2242:	df 91       	pop	r29
    2244:	08 95       	ret

00002246 <LCD_enu_SendChar>:
ES_t LCD_enu_SendChar(u8 Copy_u8_Char)
{
    2246:	df 93       	push	r29
    2248:	cf 93       	push	r28
    224a:	cd b7       	in	r28, 0x3d	; 61
    224c:	de b7       	in	r29, 0x3e	; 62
    224e:	e1 97       	sbiw	r28, 0x31	; 49
    2250:	0f b6       	in	r0, 0x3f	; 63
    2252:	f8 94       	cli
    2254:	de bf       	out	0x3e, r29	; 62
    2256:	0f be       	out	0x3f, r0	; 63
    2258:	cd bf       	out	0x3d, r28	; 61
    225a:	89 ab       	std	Y+49, r24	; 0x31
    /* E = 0 */
    DIO_enu_SetPinValue(LCD_U8_E_PORT, LCD_U8_E_PIN, DIO_U8_LOW);
    return STATE_OK;
#elif LCD_U8_MODE == LCD_U8_MODE_4BIT
    /* RS = 1 */
    DIO_enu_SetPinValue(LCD_U8_RS_PORT, LCD_U8_RS_PIN, DIO_U8_HIGH);
    225c:	80 e0       	ldi	r24, 0x00	; 0
    225e:	61 e0       	ldi	r22, 0x01	; 1
    2260:	41 e0       	ldi	r20, 0x01	; 1
    2262:	0e 94 f7 1f 	call	0x3fee	; 0x3fee <DIO_enu_SetPinValue>
    /* RW = 0 */
    DIO_enu_SetPinValue(LCD_U8_RW_PORT, LCD_U8_RW_PIN, DIO_U8_LOW);
    2266:	81 e0       	ldi	r24, 0x01	; 1
    2268:	60 e0       	ldi	r22, 0x00	; 0
    226a:	40 e0       	ldi	r20, 0x00	; 0
    226c:	0e 94 f7 1f 	call	0x3fee	; 0x3fee <DIO_enu_SetPinValue>
    /*Write Char*/
    DIO_enu_SetPinValue(LCD_U8_DATA_PORT, D7, (Copy_u8_Char >> SHIFT_7BIT) & MASK_BIT);
    2270:	89 a9       	ldd	r24, Y+49	; 0x31
    2272:	98 2f       	mov	r25, r24
    2274:	99 1f       	adc	r25, r25
    2276:	99 27       	eor	r25, r25
    2278:	99 1f       	adc	r25, r25
    227a:	80 e0       	ldi	r24, 0x00	; 0
    227c:	66 e0       	ldi	r22, 0x06	; 6
    227e:	49 2f       	mov	r20, r25
    2280:	0e 94 f7 1f 	call	0x3fee	; 0x3fee <DIO_enu_SetPinValue>
    DIO_enu_SetPinValue(LCD_U8_DATA_PORT, D6, (Copy_u8_Char >> SHIFT_6BIT) & MASK_BIT);
    2284:	89 a9       	ldd	r24, Y+49	; 0x31
    2286:	82 95       	swap	r24
    2288:	86 95       	lsr	r24
    228a:	86 95       	lsr	r24
    228c:	83 70       	andi	r24, 0x03	; 3
    228e:	98 2f       	mov	r25, r24
    2290:	91 70       	andi	r25, 0x01	; 1
    2292:	80 e0       	ldi	r24, 0x00	; 0
    2294:	65 e0       	ldi	r22, 0x05	; 5
    2296:	49 2f       	mov	r20, r25
    2298:	0e 94 f7 1f 	call	0x3fee	; 0x3fee <DIO_enu_SetPinValue>
    DIO_enu_SetPinValue(LCD_U8_DATA_PORT, D5, (Copy_u8_Char >> SHIFT_5BIT) & MASK_BIT);
    229c:	89 a9       	ldd	r24, Y+49	; 0x31
    229e:	82 95       	swap	r24
    22a0:	86 95       	lsr	r24
    22a2:	87 70       	andi	r24, 0x07	; 7
    22a4:	98 2f       	mov	r25, r24
    22a6:	91 70       	andi	r25, 0x01	; 1
    22a8:	80 e0       	ldi	r24, 0x00	; 0
    22aa:	64 e0       	ldi	r22, 0x04	; 4
    22ac:	49 2f       	mov	r20, r25
    22ae:	0e 94 f7 1f 	call	0x3fee	; 0x3fee <DIO_enu_SetPinValue>
    DIO_enu_SetPinValue(LCD_U8_DATA_PORT, D4, (Copy_u8_Char >> SHIFT_4BIT) & MASK_BIT);
    22b2:	89 a9       	ldd	r24, Y+49	; 0x31
    22b4:	82 95       	swap	r24
    22b6:	8f 70       	andi	r24, 0x0F	; 15
    22b8:	98 2f       	mov	r25, r24
    22ba:	91 70       	andi	r25, 0x01	; 1
    22bc:	80 e0       	ldi	r24, 0x00	; 0
    22be:	63 e0       	ldi	r22, 0x03	; 3
    22c0:	49 2f       	mov	r20, r25
    22c2:	0e 94 f7 1f 	call	0x3fee	; 0x3fee <DIO_enu_SetPinValue>
    /* E = 1 */
    DIO_enu_SetPinValue(LCD_U8_E_PORT, LCD_U8_E_PIN, DIO_U8_HIGH);
    22c6:	80 e0       	ldi	r24, 0x00	; 0
    22c8:	62 e0       	ldi	r22, 0x02	; 2
    22ca:	41 e0       	ldi	r20, 0x01	; 1
    22cc:	0e 94 f7 1f 	call	0x3fee	; 0x3fee <DIO_enu_SetPinValue>
    22d0:	80 e0       	ldi	r24, 0x00	; 0
    22d2:	90 e0       	ldi	r25, 0x00	; 0
    22d4:	a0 e8       	ldi	r26, 0x80	; 128
    22d6:	bf e3       	ldi	r27, 0x3F	; 63
    22d8:	8d a7       	std	Y+45, r24	; 0x2d
    22da:	9e a7       	std	Y+46, r25	; 0x2e
    22dc:	af a7       	std	Y+47, r26	; 0x2f
    22de:	b8 ab       	std	Y+48, r27	; 0x30
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    22e0:	6d a5       	ldd	r22, Y+45	; 0x2d
    22e2:	7e a5       	ldd	r23, Y+46	; 0x2e
    22e4:	8f a5       	ldd	r24, Y+47	; 0x2f
    22e6:	98 a9       	ldd	r25, Y+48	; 0x30
    22e8:	2b ea       	ldi	r18, 0xAB	; 171
    22ea:	3a ea       	ldi	r19, 0xAA	; 170
    22ec:	4a ea       	ldi	r20, 0xAA	; 170
    22ee:	50 e4       	ldi	r21, 0x40	; 64
    22f0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    22f4:	dc 01       	movw	r26, r24
    22f6:	cb 01       	movw	r24, r22
    22f8:	89 a7       	std	Y+41, r24	; 0x29
    22fa:	9a a7       	std	Y+42, r25	; 0x2a
    22fc:	ab a7       	std	Y+43, r26	; 0x2b
    22fe:	bc a7       	std	Y+44, r27	; 0x2c
	if (__tmp < 1.0)
    2300:	69 a5       	ldd	r22, Y+41	; 0x29
    2302:	7a a5       	ldd	r23, Y+42	; 0x2a
    2304:	8b a5       	ldd	r24, Y+43	; 0x2b
    2306:	9c a5       	ldd	r25, Y+44	; 0x2c
    2308:	20 e0       	ldi	r18, 0x00	; 0
    230a:	30 e0       	ldi	r19, 0x00	; 0
    230c:	40 e8       	ldi	r20, 0x80	; 128
    230e:	5f e3       	ldi	r21, 0x3F	; 63
    2310:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2314:	88 23       	and	r24, r24
    2316:	1c f4       	brge	.+6      	; 0x231e <LCD_enu_SendChar+0xd8>
		__ticks = 1;
    2318:	81 e0       	ldi	r24, 0x01	; 1
    231a:	88 a7       	std	Y+40, r24	; 0x28
    231c:	91 c0       	rjmp	.+290    	; 0x2440 <LCD_enu_SendChar+0x1fa>
	else if (__tmp > 255)
    231e:	69 a5       	ldd	r22, Y+41	; 0x29
    2320:	7a a5       	ldd	r23, Y+42	; 0x2a
    2322:	8b a5       	ldd	r24, Y+43	; 0x2b
    2324:	9c a5       	ldd	r25, Y+44	; 0x2c
    2326:	20 e0       	ldi	r18, 0x00	; 0
    2328:	30 e0       	ldi	r19, 0x00	; 0
    232a:	4f e7       	ldi	r20, 0x7F	; 127
    232c:	53 e4       	ldi	r21, 0x43	; 67
    232e:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2332:	18 16       	cp	r1, r24
    2334:	0c f0       	brlt	.+2      	; 0x2338 <LCD_enu_SendChar+0xf2>
    2336:	7b c0       	rjmp	.+246    	; 0x242e <LCD_enu_SendChar+0x1e8>
	{
		_delay_ms(__us / 1000.0);
    2338:	6d a5       	ldd	r22, Y+45	; 0x2d
    233a:	7e a5       	ldd	r23, Y+46	; 0x2e
    233c:	8f a5       	ldd	r24, Y+47	; 0x2f
    233e:	98 a9       	ldd	r25, Y+48	; 0x30
    2340:	20 e0       	ldi	r18, 0x00	; 0
    2342:	30 e0       	ldi	r19, 0x00	; 0
    2344:	4a e7       	ldi	r20, 0x7A	; 122
    2346:	54 e4       	ldi	r21, 0x44	; 68
    2348:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    234c:	dc 01       	movw	r26, r24
    234e:	cb 01       	movw	r24, r22
    2350:	8c a3       	std	Y+36, r24	; 0x24
    2352:	9d a3       	std	Y+37, r25	; 0x25
    2354:	ae a3       	std	Y+38, r26	; 0x26
    2356:	bf a3       	std	Y+39, r27	; 0x27
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2358:	6c a1       	ldd	r22, Y+36	; 0x24
    235a:	7d a1       	ldd	r23, Y+37	; 0x25
    235c:	8e a1       	ldd	r24, Y+38	; 0x26
    235e:	9f a1       	ldd	r25, Y+39	; 0x27
    2360:	20 e0       	ldi	r18, 0x00	; 0
    2362:	30 e0       	ldi	r19, 0x00	; 0
    2364:	4a e7       	ldi	r20, 0x7A	; 122
    2366:	55 e4       	ldi	r21, 0x45	; 69
    2368:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    236c:	dc 01       	movw	r26, r24
    236e:	cb 01       	movw	r24, r22
    2370:	88 a3       	std	Y+32, r24	; 0x20
    2372:	99 a3       	std	Y+33, r25	; 0x21
    2374:	aa a3       	std	Y+34, r26	; 0x22
    2376:	bb a3       	std	Y+35, r27	; 0x23
	if (__tmp < 1.0)
    2378:	68 a1       	ldd	r22, Y+32	; 0x20
    237a:	79 a1       	ldd	r23, Y+33	; 0x21
    237c:	8a a1       	ldd	r24, Y+34	; 0x22
    237e:	9b a1       	ldd	r25, Y+35	; 0x23
    2380:	20 e0       	ldi	r18, 0x00	; 0
    2382:	30 e0       	ldi	r19, 0x00	; 0
    2384:	40 e8       	ldi	r20, 0x80	; 128
    2386:	5f e3       	ldi	r21, 0x3F	; 63
    2388:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    238c:	88 23       	and	r24, r24
    238e:	2c f4       	brge	.+10     	; 0x239a <LCD_enu_SendChar+0x154>
		__ticks = 1;
    2390:	81 e0       	ldi	r24, 0x01	; 1
    2392:	90 e0       	ldi	r25, 0x00	; 0
    2394:	9f 8f       	std	Y+31, r25	; 0x1f
    2396:	8e 8f       	std	Y+30, r24	; 0x1e
    2398:	3f c0       	rjmp	.+126    	; 0x2418 <LCD_enu_SendChar+0x1d2>
	else if (__tmp > 65535)
    239a:	68 a1       	ldd	r22, Y+32	; 0x20
    239c:	79 a1       	ldd	r23, Y+33	; 0x21
    239e:	8a a1       	ldd	r24, Y+34	; 0x22
    23a0:	9b a1       	ldd	r25, Y+35	; 0x23
    23a2:	20 e0       	ldi	r18, 0x00	; 0
    23a4:	3f ef       	ldi	r19, 0xFF	; 255
    23a6:	4f e7       	ldi	r20, 0x7F	; 127
    23a8:	57 e4       	ldi	r21, 0x47	; 71
    23aa:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    23ae:	18 16       	cp	r1, r24
    23b0:	4c f5       	brge	.+82     	; 0x2404 <LCD_enu_SendChar+0x1be>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    23b2:	6c a1       	ldd	r22, Y+36	; 0x24
    23b4:	7d a1       	ldd	r23, Y+37	; 0x25
    23b6:	8e a1       	ldd	r24, Y+38	; 0x26
    23b8:	9f a1       	ldd	r25, Y+39	; 0x27
    23ba:	20 e0       	ldi	r18, 0x00	; 0
    23bc:	30 e0       	ldi	r19, 0x00	; 0
    23be:	40 e2       	ldi	r20, 0x20	; 32
    23c0:	51 e4       	ldi	r21, 0x41	; 65
    23c2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    23c6:	dc 01       	movw	r26, r24
    23c8:	cb 01       	movw	r24, r22
    23ca:	bc 01       	movw	r22, r24
    23cc:	cd 01       	movw	r24, r26
    23ce:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    23d2:	dc 01       	movw	r26, r24
    23d4:	cb 01       	movw	r24, r22
    23d6:	9f 8f       	std	Y+31, r25	; 0x1f
    23d8:	8e 8f       	std	Y+30, r24	; 0x1e
    23da:	0f c0       	rjmp	.+30     	; 0x23fa <LCD_enu_SendChar+0x1b4>
    23dc:	80 e9       	ldi	r24, 0x90	; 144
    23de:	91 e0       	ldi	r25, 0x01	; 1
    23e0:	9d 8f       	std	Y+29, r25	; 0x1d
    23e2:	8c 8f       	std	Y+28, r24	; 0x1c
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    23e4:	8c 8d       	ldd	r24, Y+28	; 0x1c
    23e6:	9d 8d       	ldd	r25, Y+29	; 0x1d
    23e8:	01 97       	sbiw	r24, 0x01	; 1
    23ea:	f1 f7       	brne	.-4      	; 0x23e8 <LCD_enu_SendChar+0x1a2>
    23ec:	9d 8f       	std	Y+29, r25	; 0x1d
    23ee:	8c 8f       	std	Y+28, r24	; 0x1c
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    23f0:	8e 8d       	ldd	r24, Y+30	; 0x1e
    23f2:	9f 8d       	ldd	r25, Y+31	; 0x1f
    23f4:	01 97       	sbiw	r24, 0x01	; 1
    23f6:	9f 8f       	std	Y+31, r25	; 0x1f
    23f8:	8e 8f       	std	Y+30, r24	; 0x1e
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    23fa:	8e 8d       	ldd	r24, Y+30	; 0x1e
    23fc:	9f 8d       	ldd	r25, Y+31	; 0x1f
    23fe:	00 97       	sbiw	r24, 0x00	; 0
    2400:	69 f7       	brne	.-38     	; 0x23dc <LCD_enu_SendChar+0x196>
    2402:	24 c0       	rjmp	.+72     	; 0x244c <LCD_enu_SendChar+0x206>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2404:	68 a1       	ldd	r22, Y+32	; 0x20
    2406:	79 a1       	ldd	r23, Y+33	; 0x21
    2408:	8a a1       	ldd	r24, Y+34	; 0x22
    240a:	9b a1       	ldd	r25, Y+35	; 0x23
    240c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2410:	dc 01       	movw	r26, r24
    2412:	cb 01       	movw	r24, r22
    2414:	9f 8f       	std	Y+31, r25	; 0x1f
    2416:	8e 8f       	std	Y+30, r24	; 0x1e
    2418:	8e 8d       	ldd	r24, Y+30	; 0x1e
    241a:	9f 8d       	ldd	r25, Y+31	; 0x1f
    241c:	9b 8f       	std	Y+27, r25	; 0x1b
    241e:	8a 8f       	std	Y+26, r24	; 0x1a
    2420:	8a 8d       	ldd	r24, Y+26	; 0x1a
    2422:	9b 8d       	ldd	r25, Y+27	; 0x1b
    2424:	01 97       	sbiw	r24, 0x01	; 1
    2426:	f1 f7       	brne	.-4      	; 0x2424 <LCD_enu_SendChar+0x1de>
    2428:	9b 8f       	std	Y+27, r25	; 0x1b
    242a:	8a 8f       	std	Y+26, r24	; 0x1a
    242c:	0f c0       	rjmp	.+30     	; 0x244c <LCD_enu_SendChar+0x206>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    242e:	69 a5       	ldd	r22, Y+41	; 0x29
    2430:	7a a5       	ldd	r23, Y+42	; 0x2a
    2432:	8b a5       	ldd	r24, Y+43	; 0x2b
    2434:	9c a5       	ldd	r25, Y+44	; 0x2c
    2436:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    243a:	dc 01       	movw	r26, r24
    243c:	cb 01       	movw	r24, r22
    243e:	88 a7       	std	Y+40, r24	; 0x28
    2440:	88 a5       	ldd	r24, Y+40	; 0x28
    2442:	89 8f       	std	Y+25, r24	; 0x19
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    2444:	89 8d       	ldd	r24, Y+25	; 0x19
    2446:	8a 95       	dec	r24
    2448:	f1 f7       	brne	.-4      	; 0x2446 <LCD_enu_SendChar+0x200>
    244a:	89 8f       	std	Y+25, r24	; 0x19
    _delay_us(1);
    /* E = 0 */
    DIO_enu_SetPinValue(LCD_U8_E_PORT, LCD_U8_E_PIN, DIO_U8_LOW);
    244c:	80 e0       	ldi	r24, 0x00	; 0
    244e:	62 e0       	ldi	r22, 0x02	; 2
    2450:	40 e0       	ldi	r20, 0x00	; 0
    2452:	0e 94 f7 1f 	call	0x3fee	; 0x3fee <DIO_enu_SetPinValue>
    /*Write Char*/
    DIO_enu_SetPinValue(LCD_U8_DATA_PORT, D7, (Copy_u8_Char >> SHIFT_3BIT) & MASK_BIT);
    2456:	89 a9       	ldd	r24, Y+49	; 0x31
    2458:	86 95       	lsr	r24
    245a:	86 95       	lsr	r24
    245c:	86 95       	lsr	r24
    245e:	98 2f       	mov	r25, r24
    2460:	91 70       	andi	r25, 0x01	; 1
    2462:	80 e0       	ldi	r24, 0x00	; 0
    2464:	66 e0       	ldi	r22, 0x06	; 6
    2466:	49 2f       	mov	r20, r25
    2468:	0e 94 f7 1f 	call	0x3fee	; 0x3fee <DIO_enu_SetPinValue>
    DIO_enu_SetPinValue(LCD_U8_DATA_PORT, D6, (Copy_u8_Char >> SHIFT_2BIT) & MASK_BIT);
    246c:	89 a9       	ldd	r24, Y+49	; 0x31
    246e:	86 95       	lsr	r24
    2470:	86 95       	lsr	r24
    2472:	98 2f       	mov	r25, r24
    2474:	91 70       	andi	r25, 0x01	; 1
    2476:	80 e0       	ldi	r24, 0x00	; 0
    2478:	65 e0       	ldi	r22, 0x05	; 5
    247a:	49 2f       	mov	r20, r25
    247c:	0e 94 f7 1f 	call	0x3fee	; 0x3fee <DIO_enu_SetPinValue>
    DIO_enu_SetPinValue(LCD_U8_DATA_PORT, D5, (Copy_u8_Char >> SHIFT_1BIT) & MASK_BIT);
    2480:	89 a9       	ldd	r24, Y+49	; 0x31
    2482:	86 95       	lsr	r24
    2484:	98 2f       	mov	r25, r24
    2486:	91 70       	andi	r25, 0x01	; 1
    2488:	80 e0       	ldi	r24, 0x00	; 0
    248a:	64 e0       	ldi	r22, 0x04	; 4
    248c:	49 2f       	mov	r20, r25
    248e:	0e 94 f7 1f 	call	0x3fee	; 0x3fee <DIO_enu_SetPinValue>
    DIO_enu_SetPinValue(LCD_U8_DATA_PORT, D4, (Copy_u8_Char >> SHIFT_0BIT) & MASK_BIT);
    2492:	89 a9       	ldd	r24, Y+49	; 0x31
    2494:	98 2f       	mov	r25, r24
    2496:	91 70       	andi	r25, 0x01	; 1
    2498:	80 e0       	ldi	r24, 0x00	; 0
    249a:	63 e0       	ldi	r22, 0x03	; 3
    249c:	49 2f       	mov	r20, r25
    249e:	0e 94 f7 1f 	call	0x3fee	; 0x3fee <DIO_enu_SetPinValue>
    /* E = 1 */
    DIO_enu_SetPinValue(LCD_U8_E_PORT, LCD_U8_E_PIN, DIO_U8_HIGH);
    24a2:	80 e0       	ldi	r24, 0x00	; 0
    24a4:	62 e0       	ldi	r22, 0x02	; 2
    24a6:	41 e0       	ldi	r20, 0x01	; 1
    24a8:	0e 94 f7 1f 	call	0x3fee	; 0x3fee <DIO_enu_SetPinValue>
    24ac:	80 e0       	ldi	r24, 0x00	; 0
    24ae:	90 e0       	ldi	r25, 0x00	; 0
    24b0:	a0 e8       	ldi	r26, 0x80	; 128
    24b2:	bf e3       	ldi	r27, 0x3F	; 63
    24b4:	8d 8b       	std	Y+21, r24	; 0x15
    24b6:	9e 8b       	std	Y+22, r25	; 0x16
    24b8:	af 8b       	std	Y+23, r26	; 0x17
    24ba:	b8 8f       	std	Y+24, r27	; 0x18
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    24bc:	6d 89       	ldd	r22, Y+21	; 0x15
    24be:	7e 89       	ldd	r23, Y+22	; 0x16
    24c0:	8f 89       	ldd	r24, Y+23	; 0x17
    24c2:	98 8d       	ldd	r25, Y+24	; 0x18
    24c4:	2b ea       	ldi	r18, 0xAB	; 171
    24c6:	3a ea       	ldi	r19, 0xAA	; 170
    24c8:	4a ea       	ldi	r20, 0xAA	; 170
    24ca:	50 e4       	ldi	r21, 0x40	; 64
    24cc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    24d0:	dc 01       	movw	r26, r24
    24d2:	cb 01       	movw	r24, r22
    24d4:	89 8b       	std	Y+17, r24	; 0x11
    24d6:	9a 8b       	std	Y+18, r25	; 0x12
    24d8:	ab 8b       	std	Y+19, r26	; 0x13
    24da:	bc 8b       	std	Y+20, r27	; 0x14
	if (__tmp < 1.0)
    24dc:	69 89       	ldd	r22, Y+17	; 0x11
    24de:	7a 89       	ldd	r23, Y+18	; 0x12
    24e0:	8b 89       	ldd	r24, Y+19	; 0x13
    24e2:	9c 89       	ldd	r25, Y+20	; 0x14
    24e4:	20 e0       	ldi	r18, 0x00	; 0
    24e6:	30 e0       	ldi	r19, 0x00	; 0
    24e8:	40 e8       	ldi	r20, 0x80	; 128
    24ea:	5f e3       	ldi	r21, 0x3F	; 63
    24ec:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    24f0:	88 23       	and	r24, r24
    24f2:	1c f4       	brge	.+6      	; 0x24fa <LCD_enu_SendChar+0x2b4>
		__ticks = 1;
    24f4:	81 e0       	ldi	r24, 0x01	; 1
    24f6:	88 8b       	std	Y+16, r24	; 0x10
    24f8:	91 c0       	rjmp	.+290    	; 0x261c <LCD_enu_SendChar+0x3d6>
	else if (__tmp > 255)
    24fa:	69 89       	ldd	r22, Y+17	; 0x11
    24fc:	7a 89       	ldd	r23, Y+18	; 0x12
    24fe:	8b 89       	ldd	r24, Y+19	; 0x13
    2500:	9c 89       	ldd	r25, Y+20	; 0x14
    2502:	20 e0       	ldi	r18, 0x00	; 0
    2504:	30 e0       	ldi	r19, 0x00	; 0
    2506:	4f e7       	ldi	r20, 0x7F	; 127
    2508:	53 e4       	ldi	r21, 0x43	; 67
    250a:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    250e:	18 16       	cp	r1, r24
    2510:	0c f0       	brlt	.+2      	; 0x2514 <LCD_enu_SendChar+0x2ce>
    2512:	7b c0       	rjmp	.+246    	; 0x260a <LCD_enu_SendChar+0x3c4>
	{
		_delay_ms(__us / 1000.0);
    2514:	6d 89       	ldd	r22, Y+21	; 0x15
    2516:	7e 89       	ldd	r23, Y+22	; 0x16
    2518:	8f 89       	ldd	r24, Y+23	; 0x17
    251a:	98 8d       	ldd	r25, Y+24	; 0x18
    251c:	20 e0       	ldi	r18, 0x00	; 0
    251e:	30 e0       	ldi	r19, 0x00	; 0
    2520:	4a e7       	ldi	r20, 0x7A	; 122
    2522:	54 e4       	ldi	r21, 0x44	; 68
    2524:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    2528:	dc 01       	movw	r26, r24
    252a:	cb 01       	movw	r24, r22
    252c:	8c 87       	std	Y+12, r24	; 0x0c
    252e:	9d 87       	std	Y+13, r25	; 0x0d
    2530:	ae 87       	std	Y+14, r26	; 0x0e
    2532:	bf 87       	std	Y+15, r27	; 0x0f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2534:	6c 85       	ldd	r22, Y+12	; 0x0c
    2536:	7d 85       	ldd	r23, Y+13	; 0x0d
    2538:	8e 85       	ldd	r24, Y+14	; 0x0e
    253a:	9f 85       	ldd	r25, Y+15	; 0x0f
    253c:	20 e0       	ldi	r18, 0x00	; 0
    253e:	30 e0       	ldi	r19, 0x00	; 0
    2540:	4a e7       	ldi	r20, 0x7A	; 122
    2542:	55 e4       	ldi	r21, 0x45	; 69
    2544:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2548:	dc 01       	movw	r26, r24
    254a:	cb 01       	movw	r24, r22
    254c:	88 87       	std	Y+8, r24	; 0x08
    254e:	99 87       	std	Y+9, r25	; 0x09
    2550:	aa 87       	std	Y+10, r26	; 0x0a
    2552:	bb 87       	std	Y+11, r27	; 0x0b
	if (__tmp < 1.0)
    2554:	68 85       	ldd	r22, Y+8	; 0x08
    2556:	79 85       	ldd	r23, Y+9	; 0x09
    2558:	8a 85       	ldd	r24, Y+10	; 0x0a
    255a:	9b 85       	ldd	r25, Y+11	; 0x0b
    255c:	20 e0       	ldi	r18, 0x00	; 0
    255e:	30 e0       	ldi	r19, 0x00	; 0
    2560:	40 e8       	ldi	r20, 0x80	; 128
    2562:	5f e3       	ldi	r21, 0x3F	; 63
    2564:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2568:	88 23       	and	r24, r24
    256a:	2c f4       	brge	.+10     	; 0x2576 <LCD_enu_SendChar+0x330>
		__ticks = 1;
    256c:	81 e0       	ldi	r24, 0x01	; 1
    256e:	90 e0       	ldi	r25, 0x00	; 0
    2570:	9f 83       	std	Y+7, r25	; 0x07
    2572:	8e 83       	std	Y+6, r24	; 0x06
    2574:	3f c0       	rjmp	.+126    	; 0x25f4 <LCD_enu_SendChar+0x3ae>
	else if (__tmp > 65535)
    2576:	68 85       	ldd	r22, Y+8	; 0x08
    2578:	79 85       	ldd	r23, Y+9	; 0x09
    257a:	8a 85       	ldd	r24, Y+10	; 0x0a
    257c:	9b 85       	ldd	r25, Y+11	; 0x0b
    257e:	20 e0       	ldi	r18, 0x00	; 0
    2580:	3f ef       	ldi	r19, 0xFF	; 255
    2582:	4f e7       	ldi	r20, 0x7F	; 127
    2584:	57 e4       	ldi	r21, 0x47	; 71
    2586:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    258a:	18 16       	cp	r1, r24
    258c:	4c f5       	brge	.+82     	; 0x25e0 <LCD_enu_SendChar+0x39a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    258e:	6c 85       	ldd	r22, Y+12	; 0x0c
    2590:	7d 85       	ldd	r23, Y+13	; 0x0d
    2592:	8e 85       	ldd	r24, Y+14	; 0x0e
    2594:	9f 85       	ldd	r25, Y+15	; 0x0f
    2596:	20 e0       	ldi	r18, 0x00	; 0
    2598:	30 e0       	ldi	r19, 0x00	; 0
    259a:	40 e2       	ldi	r20, 0x20	; 32
    259c:	51 e4       	ldi	r21, 0x41	; 65
    259e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    25a2:	dc 01       	movw	r26, r24
    25a4:	cb 01       	movw	r24, r22
    25a6:	bc 01       	movw	r22, r24
    25a8:	cd 01       	movw	r24, r26
    25aa:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    25ae:	dc 01       	movw	r26, r24
    25b0:	cb 01       	movw	r24, r22
    25b2:	9f 83       	std	Y+7, r25	; 0x07
    25b4:	8e 83       	std	Y+6, r24	; 0x06
    25b6:	0f c0       	rjmp	.+30     	; 0x25d6 <LCD_enu_SendChar+0x390>
    25b8:	80 e9       	ldi	r24, 0x90	; 144
    25ba:	91 e0       	ldi	r25, 0x01	; 1
    25bc:	9d 83       	std	Y+5, r25	; 0x05
    25be:	8c 83       	std	Y+4, r24	; 0x04
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    25c0:	8c 81       	ldd	r24, Y+4	; 0x04
    25c2:	9d 81       	ldd	r25, Y+5	; 0x05
    25c4:	01 97       	sbiw	r24, 0x01	; 1
    25c6:	f1 f7       	brne	.-4      	; 0x25c4 <LCD_enu_SendChar+0x37e>
    25c8:	9d 83       	std	Y+5, r25	; 0x05
    25ca:	8c 83       	std	Y+4, r24	; 0x04
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    25cc:	8e 81       	ldd	r24, Y+6	; 0x06
    25ce:	9f 81       	ldd	r25, Y+7	; 0x07
    25d0:	01 97       	sbiw	r24, 0x01	; 1
    25d2:	9f 83       	std	Y+7, r25	; 0x07
    25d4:	8e 83       	std	Y+6, r24	; 0x06
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    25d6:	8e 81       	ldd	r24, Y+6	; 0x06
    25d8:	9f 81       	ldd	r25, Y+7	; 0x07
    25da:	00 97       	sbiw	r24, 0x00	; 0
    25dc:	69 f7       	brne	.-38     	; 0x25b8 <LCD_enu_SendChar+0x372>
    25de:	24 c0       	rjmp	.+72     	; 0x2628 <LCD_enu_SendChar+0x3e2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    25e0:	68 85       	ldd	r22, Y+8	; 0x08
    25e2:	79 85       	ldd	r23, Y+9	; 0x09
    25e4:	8a 85       	ldd	r24, Y+10	; 0x0a
    25e6:	9b 85       	ldd	r25, Y+11	; 0x0b
    25e8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    25ec:	dc 01       	movw	r26, r24
    25ee:	cb 01       	movw	r24, r22
    25f0:	9f 83       	std	Y+7, r25	; 0x07
    25f2:	8e 83       	std	Y+6, r24	; 0x06
    25f4:	8e 81       	ldd	r24, Y+6	; 0x06
    25f6:	9f 81       	ldd	r25, Y+7	; 0x07
    25f8:	9b 83       	std	Y+3, r25	; 0x03
    25fa:	8a 83       	std	Y+2, r24	; 0x02
    25fc:	8a 81       	ldd	r24, Y+2	; 0x02
    25fe:	9b 81       	ldd	r25, Y+3	; 0x03
    2600:	01 97       	sbiw	r24, 0x01	; 1
    2602:	f1 f7       	brne	.-4      	; 0x2600 <LCD_enu_SendChar+0x3ba>
    2604:	9b 83       	std	Y+3, r25	; 0x03
    2606:	8a 83       	std	Y+2, r24	; 0x02
    2608:	0f c0       	rjmp	.+30     	; 0x2628 <LCD_enu_SendChar+0x3e2>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    260a:	69 89       	ldd	r22, Y+17	; 0x11
    260c:	7a 89       	ldd	r23, Y+18	; 0x12
    260e:	8b 89       	ldd	r24, Y+19	; 0x13
    2610:	9c 89       	ldd	r25, Y+20	; 0x14
    2612:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2616:	dc 01       	movw	r26, r24
    2618:	cb 01       	movw	r24, r22
    261a:	88 8b       	std	Y+16, r24	; 0x10
    261c:	88 89       	ldd	r24, Y+16	; 0x10
    261e:	89 83       	std	Y+1, r24	; 0x01
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    2620:	89 81       	ldd	r24, Y+1	; 0x01
    2622:	8a 95       	dec	r24
    2624:	f1 f7       	brne	.-4      	; 0x2622 <LCD_enu_SendChar+0x3dc>
    2626:	89 83       	std	Y+1, r24	; 0x01
    _delay_us(1);
    /* E = 0 */
    DIO_enu_SetPinValue(LCD_U8_E_PORT, LCD_U8_E_PIN, DIO_U8_LOW);
    2628:	80 e0       	ldi	r24, 0x00	; 0
    262a:	62 e0       	ldi	r22, 0x02	; 2
    262c:	40 e0       	ldi	r20, 0x00	; 0
    262e:	0e 94 f7 1f 	call	0x3fee	; 0x3fee <DIO_enu_SetPinValue>
    return STATE_OK;
    2632:	81 e0       	ldi	r24, 0x01	; 1
#endif
}
    2634:	e1 96       	adiw	r28, 0x31	; 49
    2636:	0f b6       	in	r0, 0x3f	; 63
    2638:	f8 94       	cli
    263a:	de bf       	out	0x3e, r29	; 62
    263c:	0f be       	out	0x3f, r0	; 63
    263e:	cd bf       	out	0x3d, r28	; 61
    2640:	cf 91       	pop	r28
    2642:	df 91       	pop	r29
    2644:	08 95       	ret

00002646 <LCD_enu_SendString>:
ES_t LCD_enu_SendString(u8 *Copy_pu8_String)
{
    2646:	df 93       	push	r29
    2648:	cf 93       	push	r28
    264a:	00 d0       	rcall	.+0      	; 0x264c <LCD_enu_SendString+0x6>
    264c:	00 d0       	rcall	.+0      	; 0x264e <LCD_enu_SendString+0x8>
    264e:	cd b7       	in	r28, 0x3d	; 61
    2650:	de b7       	in	r29, 0x3e	; 62
    2652:	9c 83       	std	Y+4, r25	; 0x04
    2654:	8b 83       	std	Y+3, r24	; 0x03
    u8 Local_u8_errorState = STATE_OK;
    2656:	81 e0       	ldi	r24, 0x01	; 1
    2658:	8a 83       	std	Y+2, r24	; 0x02
    if (Copy_pu8_String != NULL)
    265a:	8b 81       	ldd	r24, Y+3	; 0x03
    265c:	9c 81       	ldd	r25, Y+4	; 0x04
    265e:	00 97       	sbiw	r24, 0x00	; 0
    2660:	e1 f0       	breq	.+56     	; 0x269a <LCD_enu_SendString+0x54>
    {
        for (u8 i = 0; Copy_pu8_String[i] != '\0'; i++)
    2662:	19 82       	std	Y+1, r1	; 0x01
    2664:	0e c0       	rjmp	.+28     	; 0x2682 <LCD_enu_SendString+0x3c>
        {
            LCD_enu_SendChar(Copy_pu8_String[i]);
    2666:	89 81       	ldd	r24, Y+1	; 0x01
    2668:	28 2f       	mov	r18, r24
    266a:	30 e0       	ldi	r19, 0x00	; 0
    266c:	8b 81       	ldd	r24, Y+3	; 0x03
    266e:	9c 81       	ldd	r25, Y+4	; 0x04
    2670:	fc 01       	movw	r30, r24
    2672:	e2 0f       	add	r30, r18
    2674:	f3 1f       	adc	r31, r19
    2676:	80 81       	ld	r24, Z
    2678:	0e 94 23 11 	call	0x2246	; 0x2246 <LCD_enu_SendChar>
ES_t LCD_enu_SendString(u8 *Copy_pu8_String)
{
    u8 Local_u8_errorState = STATE_OK;
    if (Copy_pu8_String != NULL)
    {
        for (u8 i = 0; Copy_pu8_String[i] != '\0'; i++)
    267c:	89 81       	ldd	r24, Y+1	; 0x01
    267e:	8f 5f       	subi	r24, 0xFF	; 255
    2680:	89 83       	std	Y+1, r24	; 0x01
    2682:	89 81       	ldd	r24, Y+1	; 0x01
    2684:	28 2f       	mov	r18, r24
    2686:	30 e0       	ldi	r19, 0x00	; 0
    2688:	8b 81       	ldd	r24, Y+3	; 0x03
    268a:	9c 81       	ldd	r25, Y+4	; 0x04
    268c:	fc 01       	movw	r30, r24
    268e:	e2 0f       	add	r30, r18
    2690:	f3 1f       	adc	r31, r19
    2692:	80 81       	ld	r24, Z
    2694:	88 23       	and	r24, r24
    2696:	39 f7       	brne	.-50     	; 0x2666 <LCD_enu_SendString+0x20>
    2698:	01 c0       	rjmp	.+2      	; 0x269c <LCD_enu_SendString+0x56>
            LCD_enu_SendChar(Copy_pu8_String[i]);
        }
    }
    else
    {
        Local_u8_errorState = STATE_NOT_OK;
    269a:	1a 82       	std	Y+2, r1	; 0x02
    }
    return Local_u8_errorState;
    269c:	8a 81       	ldd	r24, Y+2	; 0x02
}
    269e:	0f 90       	pop	r0
    26a0:	0f 90       	pop	r0
    26a2:	0f 90       	pop	r0
    26a4:	0f 90       	pop	r0
    26a6:	cf 91       	pop	r28
    26a8:	df 91       	pop	r29
    26aa:	08 95       	ret

000026ac <LCD_enu_SendNum>:
ES_t LCD_enu_SendNum(u32 Copy_u32_Num)
{
    26ac:	0f 93       	push	r16
    26ae:	1f 93       	push	r17
    26b0:	df 93       	push	r29
    26b2:	cf 93       	push	r28
    26b4:	cd b7       	in	r28, 0x3d	; 61
    26b6:	de b7       	in	r29, 0x3e	; 62
    26b8:	60 97       	sbiw	r28, 0x10	; 16
    26ba:	0f b6       	in	r0, 0x3f	; 63
    26bc:	f8 94       	cli
    26be:	de bf       	out	0x3e, r29	; 62
    26c0:	0f be       	out	0x3f, r0	; 63
    26c2:	cd bf       	out	0x3d, r28	; 61
    26c4:	6d 87       	std	Y+13, r22	; 0x0d
    26c6:	7e 87       	std	Y+14, r23	; 0x0e
    26c8:	8f 87       	std	Y+15, r24	; 0x0f
    26ca:	98 8b       	std	Y+16, r25	; 0x10
    u8 Local_u8_numArr[10], Local_u8_iterator1 = 0;
    26cc:	1a 82       	std	Y+2, r1	; 0x02
    s8 Local_u8_iterator2 = 0;
    26ce:	19 82       	std	Y+1, r1	; 0x01
    if (Copy_u32_Num == 0)
    26d0:	8d 85       	ldd	r24, Y+13	; 0x0d
    26d2:	9e 85       	ldd	r25, Y+14	; 0x0e
    26d4:	af 85       	ldd	r26, Y+15	; 0x0f
    26d6:	b8 89       	ldd	r27, Y+16	; 0x10
    26d8:	00 97       	sbiw	r24, 0x00	; 0
    26da:	a1 05       	cpc	r26, r1
    26dc:	b1 05       	cpc	r27, r1
    26de:	89 f5       	brne	.+98     	; 0x2742 <LCD_enu_SendNum+0x96>
        LCD_enu_SendChar('0');
    26e0:	80 e3       	ldi	r24, 0x30	; 48
    26e2:	0e 94 23 11 	call	0x2246	; 0x2246 <LCD_enu_SendChar>
    26e6:	4d c0       	rjmp	.+154    	; 0x2782 <LCD_enu_SendNum+0xd6>
    else
    {
        while (Copy_u32_Num != 0)
        {
            Local_u8_numArr[Local_u8_iterator1] = Copy_u32_Num % 10;
    26e8:	8a 81       	ldd	r24, Y+2	; 0x02
    26ea:	08 2f       	mov	r16, r24
    26ec:	10 e0       	ldi	r17, 0x00	; 0
    26ee:	8d 85       	ldd	r24, Y+13	; 0x0d
    26f0:	9e 85       	ldd	r25, Y+14	; 0x0e
    26f2:	af 85       	ldd	r26, Y+15	; 0x0f
    26f4:	b8 89       	ldd	r27, Y+16	; 0x10
    26f6:	2a e0       	ldi	r18, 0x0A	; 10
    26f8:	30 e0       	ldi	r19, 0x00	; 0
    26fa:	40 e0       	ldi	r20, 0x00	; 0
    26fc:	50 e0       	ldi	r21, 0x00	; 0
    26fe:	bc 01       	movw	r22, r24
    2700:	cd 01       	movw	r24, r26
    2702:	0e 94 ff 24 	call	0x49fe	; 0x49fe <__udivmodsi4>
    2706:	dc 01       	movw	r26, r24
    2708:	cb 01       	movw	r24, r22
    270a:	28 2f       	mov	r18, r24
    270c:	ce 01       	movw	r24, r28
    270e:	03 96       	adiw	r24, 0x03	; 3
    2710:	fc 01       	movw	r30, r24
    2712:	e0 0f       	add	r30, r16
    2714:	f1 1f       	adc	r31, r17
    2716:	20 83       	st	Z, r18
            Copy_u32_Num /= 10;
    2718:	8d 85       	ldd	r24, Y+13	; 0x0d
    271a:	9e 85       	ldd	r25, Y+14	; 0x0e
    271c:	af 85       	ldd	r26, Y+15	; 0x0f
    271e:	b8 89       	ldd	r27, Y+16	; 0x10
    2720:	2a e0       	ldi	r18, 0x0A	; 10
    2722:	30 e0       	ldi	r19, 0x00	; 0
    2724:	40 e0       	ldi	r20, 0x00	; 0
    2726:	50 e0       	ldi	r21, 0x00	; 0
    2728:	bc 01       	movw	r22, r24
    272a:	cd 01       	movw	r24, r26
    272c:	0e 94 ff 24 	call	0x49fe	; 0x49fe <__udivmodsi4>
    2730:	da 01       	movw	r26, r20
    2732:	c9 01       	movw	r24, r18
    2734:	8d 87       	std	Y+13, r24	; 0x0d
    2736:	9e 87       	std	Y+14, r25	; 0x0e
    2738:	af 87       	std	Y+15, r26	; 0x0f
    273a:	b8 8b       	std	Y+16, r27	; 0x10
            Local_u8_iterator1++;
    273c:	8a 81       	ldd	r24, Y+2	; 0x02
    273e:	8f 5f       	subi	r24, 0xFF	; 255
    2740:	8a 83       	std	Y+2, r24	; 0x02
    s8 Local_u8_iterator2 = 0;
    if (Copy_u32_Num == 0)
        LCD_enu_SendChar('0');
    else
    {
        while (Copy_u32_Num != 0)
    2742:	8d 85       	ldd	r24, Y+13	; 0x0d
    2744:	9e 85       	ldd	r25, Y+14	; 0x0e
    2746:	af 85       	ldd	r26, Y+15	; 0x0f
    2748:	b8 89       	ldd	r27, Y+16	; 0x10
    274a:	00 97       	sbiw	r24, 0x00	; 0
    274c:	a1 05       	cpc	r26, r1
    274e:	b1 05       	cpc	r27, r1
    2750:	59 f6       	brne	.-106    	; 0x26e8 <LCD_enu_SendNum+0x3c>
        {
            Local_u8_numArr[Local_u8_iterator1] = Copy_u32_Num % 10;
            Copy_u32_Num /= 10;
            Local_u8_iterator1++;
        }
        for (Local_u8_iterator2 = Local_u8_iterator1 - 1; Local_u8_iterator2 >= 0; Local_u8_iterator2--)
    2752:	8a 81       	ldd	r24, Y+2	; 0x02
    2754:	81 50       	subi	r24, 0x01	; 1
    2756:	89 83       	std	Y+1, r24	; 0x01
    2758:	11 c0       	rjmp	.+34     	; 0x277c <LCD_enu_SendNum+0xd0>
        {
            LCD_enu_SendChar(Local_u8_numArr[Local_u8_iterator2] + '0');
    275a:	89 81       	ldd	r24, Y+1	; 0x01
    275c:	28 2f       	mov	r18, r24
    275e:	33 27       	eor	r19, r19
    2760:	27 fd       	sbrc	r18, 7
    2762:	30 95       	com	r19
    2764:	ce 01       	movw	r24, r28
    2766:	03 96       	adiw	r24, 0x03	; 3
    2768:	fc 01       	movw	r30, r24
    276a:	e2 0f       	add	r30, r18
    276c:	f3 1f       	adc	r31, r19
    276e:	80 81       	ld	r24, Z
    2770:	80 5d       	subi	r24, 0xD0	; 208
    2772:	0e 94 23 11 	call	0x2246	; 0x2246 <LCD_enu_SendChar>
        {
            Local_u8_numArr[Local_u8_iterator1] = Copy_u32_Num % 10;
            Copy_u32_Num /= 10;
            Local_u8_iterator1++;
        }
        for (Local_u8_iterator2 = Local_u8_iterator1 - 1; Local_u8_iterator2 >= 0; Local_u8_iterator2--)
    2776:	89 81       	ldd	r24, Y+1	; 0x01
    2778:	81 50       	subi	r24, 0x01	; 1
    277a:	89 83       	std	Y+1, r24	; 0x01
    277c:	89 81       	ldd	r24, Y+1	; 0x01
    277e:	88 23       	and	r24, r24
    2780:	64 f7       	brge	.-40     	; 0x275a <LCD_enu_SendNum+0xae>
        {
            LCD_enu_SendChar(Local_u8_numArr[Local_u8_iterator2] + '0');
        }
    }
    return STATE_OK;
    2782:	81 e0       	ldi	r24, 0x01	; 1
}
    2784:	60 96       	adiw	r28, 0x10	; 16
    2786:	0f b6       	in	r0, 0x3f	; 63
    2788:	f8 94       	cli
    278a:	de bf       	out	0x3e, r29	; 62
    278c:	0f be       	out	0x3f, r0	; 63
    278e:	cd bf       	out	0x3d, r28	; 61
    2790:	cf 91       	pop	r28
    2792:	df 91       	pop	r29
    2794:	1f 91       	pop	r17
    2796:	0f 91       	pop	r16
    2798:	08 95       	ret

0000279a <LCD_enu_SetCursor>:
ES_t LCD_enu_SetCursor(u8 Copy_u8_lineNum, u8 Copy_u8_Location)
{
    279a:	df 93       	push	r29
    279c:	cf 93       	push	r28
    279e:	00 d0       	rcall	.+0      	; 0x27a0 <LCD_enu_SetCursor+0x6>
    27a0:	00 d0       	rcall	.+0      	; 0x27a2 <LCD_enu_SetCursor+0x8>
    27a2:	0f 92       	push	r0
    27a4:	cd b7       	in	r28, 0x3d	; 61
    27a6:	de b7       	in	r29, 0x3e	; 62
    27a8:	8a 83       	std	Y+2, r24	; 0x02
    27aa:	6b 83       	std	Y+3, r22	; 0x03
    u8 Local_u8_errorState = STATE_OK;
    27ac:	81 e0       	ldi	r24, 0x01	; 1
    27ae:	89 83       	std	Y+1, r24	; 0x01
    if (Copy_u8_Location < MAX_NUM_OF_LOCATIONS)
    27b0:	8b 81       	ldd	r24, Y+3	; 0x03
    27b2:	88 32       	cpi	r24, 0x28	; 40
    27b4:	d8 f4       	brcc	.+54     	; 0x27ec <LCD_enu_SetCursor+0x52>
    {
        switch (Copy_u8_lineNum)
    27b6:	8a 81       	ldd	r24, Y+2	; 0x02
    27b8:	28 2f       	mov	r18, r24
    27ba:	30 e0       	ldi	r19, 0x00	; 0
    27bc:	3d 83       	std	Y+5, r19	; 0x05
    27be:	2c 83       	std	Y+4, r18	; 0x04
    27c0:	8c 81       	ldd	r24, Y+4	; 0x04
    27c2:	9d 81       	ldd	r25, Y+5	; 0x05
    27c4:	00 97       	sbiw	r24, 0x00	; 0
    27c6:	31 f0       	breq	.+12     	; 0x27d4 <LCD_enu_SetCursor+0x3a>
    27c8:	2c 81       	ldd	r18, Y+4	; 0x04
    27ca:	3d 81       	ldd	r19, Y+5	; 0x05
    27cc:	21 30       	cpi	r18, 0x01	; 1
    27ce:	31 05       	cpc	r19, r1
    27d0:	31 f0       	breq	.+12     	; 0x27de <LCD_enu_SetCursor+0x44>
    27d2:	0a c0       	rjmp	.+20     	; 0x27e8 <LCD_enu_SetCursor+0x4e>
        {
        case LINE1:LCD_enu_SendCmnd(ADDRESS_OF_LINE1 + Copy_u8_Location);break;
    27d4:	8b 81       	ldd	r24, Y+3	; 0x03
    27d6:	80 58       	subi	r24, 0x80	; 128
    27d8:	0e 94 23 0f 	call	0x1e46	; 0x1e46 <LCD_enu_SendCmnd>
    27dc:	08 c0       	rjmp	.+16     	; 0x27ee <LCD_enu_SetCursor+0x54>
        case LINE2:LCD_enu_SendCmnd(ADDRESS_OF_LINE2 + Copy_u8_Location);break;
    27de:	8b 81       	ldd	r24, Y+3	; 0x03
    27e0:	80 54       	subi	r24, 0x40	; 64
    27e2:	0e 94 23 0f 	call	0x1e46	; 0x1e46 <LCD_enu_SendCmnd>
    27e6:	03 c0       	rjmp	.+6      	; 0x27ee <LCD_enu_SetCursor+0x54>
        default:Local_u8_errorState = STATE_NOT_OK;break;
    27e8:	19 82       	std	Y+1, r1	; 0x01
    27ea:	01 c0       	rjmp	.+2      	; 0x27ee <LCD_enu_SetCursor+0x54>
        }
    }
    else
    {
        Local_u8_errorState = STATE_NOT_OK;
    27ec:	19 82       	std	Y+1, r1	; 0x01
    }
    return Local_u8_errorState;
    27ee:	89 81       	ldd	r24, Y+1	; 0x01
}
    27f0:	0f 90       	pop	r0
    27f2:	0f 90       	pop	r0
    27f4:	0f 90       	pop	r0
    27f6:	0f 90       	pop	r0
    27f8:	0f 90       	pop	r0
    27fa:	cf 91       	pop	r28
    27fc:	df 91       	pop	r29
    27fe:	08 95       	ret

00002800 <LCD_enu_Init>:
ES_t LCD_enu_Init(void)
{
    2800:	0f 93       	push	r16
    2802:	1f 93       	push	r17
    2804:	df 93       	push	r29
    2806:	cf 93       	push	r28
    2808:	cd b7       	in	r28, 0x3d	; 61
    280a:	de b7       	in	r29, 0x3e	; 62
    280c:	cc 54       	subi	r28, 0x4C	; 76
    280e:	d0 40       	sbci	r29, 0x00	; 0
    2810:	0f b6       	in	r0, 0x3f	; 63
    2812:	f8 94       	cli
    2814:	de bf       	out	0x3e, r29	; 62
    2816:	0f be       	out	0x3f, r0	; 63
    2818:	cd bf       	out	0x3d, r28	; 61
    DIO_enu_SetPinDirection(LCD_U8_RS_PORT, LCD_U8_RS_PIN, DIO_U8_OUTPUT);
    281a:	80 e0       	ldi	r24, 0x00	; 0
    281c:	61 e0       	ldi	r22, 0x01	; 1
    281e:	41 e0       	ldi	r20, 0x01	; 1
    2820:	0e 94 cd 1e 	call	0x3d9a	; 0x3d9a <DIO_enu_SetPinDirection>
    DIO_enu_SetPinDirection(LCD_U8_RW_PORT, LCD_U8_RW_PIN, DIO_U8_OUTPUT);
    2824:	81 e0       	ldi	r24, 0x01	; 1
    2826:	60 e0       	ldi	r22, 0x00	; 0
    2828:	41 e0       	ldi	r20, 0x01	; 1
    282a:	0e 94 cd 1e 	call	0x3d9a	; 0x3d9a <DIO_enu_SetPinDirection>
    DIO_enu_SetPinDirection(LCD_U8_E_PORT, LCD_U8_E_PIN, DIO_U8_OUTPUT);
    282e:	80 e0       	ldi	r24, 0x00	; 0
    2830:	62 e0       	ldi	r22, 0x02	; 2
    2832:	41 e0       	ldi	r20, 0x01	; 1
    2834:	0e 94 cd 1e 	call	0x3d9a	; 0x3d9a <DIO_enu_SetPinDirection>
    DIO_enu_SetPinDirection(LCD_U8_DATA_PORT, D7, DIO_U8_OUTPUT);
    2838:	80 e0       	ldi	r24, 0x00	; 0
    283a:	66 e0       	ldi	r22, 0x06	; 6
    283c:	41 e0       	ldi	r20, 0x01	; 1
    283e:	0e 94 cd 1e 	call	0x3d9a	; 0x3d9a <DIO_enu_SetPinDirection>
    DIO_enu_SetPinDirection(LCD_U8_DATA_PORT, D6, DIO_U8_OUTPUT);
    2842:	80 e0       	ldi	r24, 0x00	; 0
    2844:	65 e0       	ldi	r22, 0x05	; 5
    2846:	41 e0       	ldi	r20, 0x01	; 1
    2848:	0e 94 cd 1e 	call	0x3d9a	; 0x3d9a <DIO_enu_SetPinDirection>
    DIO_enu_SetPinDirection(LCD_U8_DATA_PORT, D5, DIO_U8_OUTPUT);
    284c:	80 e0       	ldi	r24, 0x00	; 0
    284e:	64 e0       	ldi	r22, 0x04	; 4
    2850:	41 e0       	ldi	r20, 0x01	; 1
    2852:	0e 94 cd 1e 	call	0x3d9a	; 0x3d9a <DIO_enu_SetPinDirection>
    DIO_enu_SetPinDirection(LCD_U8_DATA_PORT, D4, DIO_U8_OUTPUT);
    2856:	80 e0       	ldi	r24, 0x00	; 0
    2858:	63 e0       	ldi	r22, 0x03	; 3
    285a:	41 e0       	ldi	r20, 0x01	; 1
    285c:	0e 94 cd 1e 	call	0x3d9a	; 0x3d9a <DIO_enu_SetPinDirection>
    2860:	fe 01       	movw	r30, r28
    2862:	e7 5b       	subi	r30, 0xB7	; 183
    2864:	ff 4f       	sbci	r31, 0xFF	; 255
    2866:	80 e0       	ldi	r24, 0x00	; 0
    2868:	90 e0       	ldi	r25, 0x00	; 0
    286a:	ac e0       	ldi	r26, 0x0C	; 12
    286c:	b2 e4       	ldi	r27, 0x42	; 66
    286e:	80 83       	st	Z, r24
    2870:	91 83       	std	Z+1, r25	; 0x01
    2872:	a2 83       	std	Z+2, r26	; 0x02
    2874:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2876:	8e 01       	movw	r16, r28
    2878:	0b 5b       	subi	r16, 0xBB	; 187
    287a:	1f 4f       	sbci	r17, 0xFF	; 255
    287c:	fe 01       	movw	r30, r28
    287e:	e7 5b       	subi	r30, 0xB7	; 183
    2880:	ff 4f       	sbci	r31, 0xFF	; 255
    2882:	60 81       	ld	r22, Z
    2884:	71 81       	ldd	r23, Z+1	; 0x01
    2886:	82 81       	ldd	r24, Z+2	; 0x02
    2888:	93 81       	ldd	r25, Z+3	; 0x03
    288a:	20 e0       	ldi	r18, 0x00	; 0
    288c:	30 e0       	ldi	r19, 0x00	; 0
    288e:	4a e7       	ldi	r20, 0x7A	; 122
    2890:	55 e4       	ldi	r21, 0x45	; 69
    2892:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2896:	dc 01       	movw	r26, r24
    2898:	cb 01       	movw	r24, r22
    289a:	f8 01       	movw	r30, r16
    289c:	80 83       	st	Z, r24
    289e:	91 83       	std	Z+1, r25	; 0x01
    28a0:	a2 83       	std	Z+2, r26	; 0x02
    28a2:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    28a4:	fe 01       	movw	r30, r28
    28a6:	eb 5b       	subi	r30, 0xBB	; 187
    28a8:	ff 4f       	sbci	r31, 0xFF	; 255
    28aa:	60 81       	ld	r22, Z
    28ac:	71 81       	ldd	r23, Z+1	; 0x01
    28ae:	82 81       	ldd	r24, Z+2	; 0x02
    28b0:	93 81       	ldd	r25, Z+3	; 0x03
    28b2:	20 e0       	ldi	r18, 0x00	; 0
    28b4:	30 e0       	ldi	r19, 0x00	; 0
    28b6:	40 e8       	ldi	r20, 0x80	; 128
    28b8:	5f e3       	ldi	r21, 0x3F	; 63
    28ba:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    28be:	88 23       	and	r24, r24
    28c0:	44 f4       	brge	.+16     	; 0x28d2 <LCD_enu_Init+0xd2>
		__ticks = 1;
    28c2:	fe 01       	movw	r30, r28
    28c4:	ed 5b       	subi	r30, 0xBD	; 189
    28c6:	ff 4f       	sbci	r31, 0xFF	; 255
    28c8:	81 e0       	ldi	r24, 0x01	; 1
    28ca:	90 e0       	ldi	r25, 0x00	; 0
    28cc:	91 83       	std	Z+1, r25	; 0x01
    28ce:	80 83       	st	Z, r24
    28d0:	64 c0       	rjmp	.+200    	; 0x299a <LCD_enu_Init+0x19a>
	else if (__tmp > 65535)
    28d2:	fe 01       	movw	r30, r28
    28d4:	eb 5b       	subi	r30, 0xBB	; 187
    28d6:	ff 4f       	sbci	r31, 0xFF	; 255
    28d8:	60 81       	ld	r22, Z
    28da:	71 81       	ldd	r23, Z+1	; 0x01
    28dc:	82 81       	ldd	r24, Z+2	; 0x02
    28de:	93 81       	ldd	r25, Z+3	; 0x03
    28e0:	20 e0       	ldi	r18, 0x00	; 0
    28e2:	3f ef       	ldi	r19, 0xFF	; 255
    28e4:	4f e7       	ldi	r20, 0x7F	; 127
    28e6:	57 e4       	ldi	r21, 0x47	; 71
    28e8:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    28ec:	18 16       	cp	r1, r24
    28ee:	0c f0       	brlt	.+2      	; 0x28f2 <LCD_enu_Init+0xf2>
    28f0:	43 c0       	rjmp	.+134    	; 0x2978 <LCD_enu_Init+0x178>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    28f2:	fe 01       	movw	r30, r28
    28f4:	e7 5b       	subi	r30, 0xB7	; 183
    28f6:	ff 4f       	sbci	r31, 0xFF	; 255
    28f8:	60 81       	ld	r22, Z
    28fa:	71 81       	ldd	r23, Z+1	; 0x01
    28fc:	82 81       	ldd	r24, Z+2	; 0x02
    28fe:	93 81       	ldd	r25, Z+3	; 0x03
    2900:	20 e0       	ldi	r18, 0x00	; 0
    2902:	30 e0       	ldi	r19, 0x00	; 0
    2904:	40 e2       	ldi	r20, 0x20	; 32
    2906:	51 e4       	ldi	r21, 0x41	; 65
    2908:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    290c:	dc 01       	movw	r26, r24
    290e:	cb 01       	movw	r24, r22
    2910:	8e 01       	movw	r16, r28
    2912:	0d 5b       	subi	r16, 0xBD	; 189
    2914:	1f 4f       	sbci	r17, 0xFF	; 255
    2916:	bc 01       	movw	r22, r24
    2918:	cd 01       	movw	r24, r26
    291a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    291e:	dc 01       	movw	r26, r24
    2920:	cb 01       	movw	r24, r22
    2922:	f8 01       	movw	r30, r16
    2924:	91 83       	std	Z+1, r25	; 0x01
    2926:	80 83       	st	Z, r24
    2928:	1f c0       	rjmp	.+62     	; 0x2968 <LCD_enu_Init+0x168>
    292a:	fe 01       	movw	r30, r28
    292c:	ef 5b       	subi	r30, 0xBF	; 191
    292e:	ff 4f       	sbci	r31, 0xFF	; 255
    2930:	80 e9       	ldi	r24, 0x90	; 144
    2932:	91 e0       	ldi	r25, 0x01	; 1
    2934:	91 83       	std	Z+1, r25	; 0x01
    2936:	80 83       	st	Z, r24
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    2938:	fe 01       	movw	r30, r28
    293a:	ef 5b       	subi	r30, 0xBF	; 191
    293c:	ff 4f       	sbci	r31, 0xFF	; 255
    293e:	80 81       	ld	r24, Z
    2940:	91 81       	ldd	r25, Z+1	; 0x01
    2942:	01 97       	sbiw	r24, 0x01	; 1
    2944:	f1 f7       	brne	.-4      	; 0x2942 <LCD_enu_Init+0x142>
    2946:	fe 01       	movw	r30, r28
    2948:	ef 5b       	subi	r30, 0xBF	; 191
    294a:	ff 4f       	sbci	r31, 0xFF	; 255
    294c:	91 83       	std	Z+1, r25	; 0x01
    294e:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2950:	de 01       	movw	r26, r28
    2952:	ad 5b       	subi	r26, 0xBD	; 189
    2954:	bf 4f       	sbci	r27, 0xFF	; 255
    2956:	fe 01       	movw	r30, r28
    2958:	ed 5b       	subi	r30, 0xBD	; 189
    295a:	ff 4f       	sbci	r31, 0xFF	; 255
    295c:	80 81       	ld	r24, Z
    295e:	91 81       	ldd	r25, Z+1	; 0x01
    2960:	01 97       	sbiw	r24, 0x01	; 1
    2962:	11 96       	adiw	r26, 0x01	; 1
    2964:	9c 93       	st	X, r25
    2966:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2968:	fe 01       	movw	r30, r28
    296a:	ed 5b       	subi	r30, 0xBD	; 189
    296c:	ff 4f       	sbci	r31, 0xFF	; 255
    296e:	80 81       	ld	r24, Z
    2970:	91 81       	ldd	r25, Z+1	; 0x01
    2972:	00 97       	sbiw	r24, 0x00	; 0
    2974:	d1 f6       	brne	.-76     	; 0x292a <LCD_enu_Init+0x12a>
    2976:	24 c0       	rjmp	.+72     	; 0x29c0 <LCD_enu_Init+0x1c0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2978:	8e 01       	movw	r16, r28
    297a:	0d 5b       	subi	r16, 0xBD	; 189
    297c:	1f 4f       	sbci	r17, 0xFF	; 255
    297e:	fe 01       	movw	r30, r28
    2980:	eb 5b       	subi	r30, 0xBB	; 187
    2982:	ff 4f       	sbci	r31, 0xFF	; 255
    2984:	60 81       	ld	r22, Z
    2986:	71 81       	ldd	r23, Z+1	; 0x01
    2988:	82 81       	ldd	r24, Z+2	; 0x02
    298a:	93 81       	ldd	r25, Z+3	; 0x03
    298c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2990:	dc 01       	movw	r26, r24
    2992:	cb 01       	movw	r24, r22
    2994:	f8 01       	movw	r30, r16
    2996:	91 83       	std	Z+1, r25	; 0x01
    2998:	80 83       	st	Z, r24
    299a:	fe 01       	movw	r30, r28
    299c:	ed 5b       	subi	r30, 0xBD	; 189
    299e:	ff 4f       	sbci	r31, 0xFF	; 255
    29a0:	80 81       	ld	r24, Z
    29a2:	91 81       	ldd	r25, Z+1	; 0x01
    29a4:	fe 01       	movw	r30, r28
    29a6:	ff 96       	adiw	r30, 0x3f	; 63
    29a8:	91 83       	std	Z+1, r25	; 0x01
    29aa:	80 83       	st	Z, r24
    29ac:	fe 01       	movw	r30, r28
    29ae:	ff 96       	adiw	r30, 0x3f	; 63
    29b0:	80 81       	ld	r24, Z
    29b2:	91 81       	ldd	r25, Z+1	; 0x01
    29b4:	01 97       	sbiw	r24, 0x01	; 1
    29b6:	f1 f7       	brne	.-4      	; 0x29b4 <LCD_enu_Init+0x1b4>
    29b8:	fe 01       	movw	r30, r28
    29ba:	ff 96       	adiw	r30, 0x3f	; 63
    29bc:	91 83       	std	Z+1, r25	; 0x01
    29be:	80 83       	st	Z, r24
    _delay_ms(2);
    LCD_enu_SendCmnd(ENTRY_MOOD);
    return STATE_OK;
#elif LCD_U8_MODE == LCD_U8_MODE_4BIT
    _delay_ms(35);
    LCD_enu_SendCmnd(FOURBIT_INIT1);
    29c0:	83 e3       	ldi	r24, 0x33	; 51
    29c2:	0e 94 23 0f 	call	0x1e46	; 0x1e46 <LCD_enu_SendCmnd>
    LCD_enu_SendCmnd(FOURBIT_INIT2);
    29c6:	82 e3       	ldi	r24, 0x32	; 50
    29c8:	0e 94 23 0f 	call	0x1e46	; 0x1e46 <LCD_enu_SendCmnd>
    LCD_enu_SendCmnd(FUN_SET_4BIT_2LINES_5X7);
    29cc:	88 e2       	ldi	r24, 0x28	; 40
    29ce:	0e 94 23 0f 	call	0x1e46	; 0x1e46 <LCD_enu_SendCmnd>
    29d2:	80 e0       	ldi	r24, 0x00	; 0
    29d4:	90 e0       	ldi	r25, 0x00	; 0
    29d6:	a0 e2       	ldi	r26, 0x20	; 32
    29d8:	b2 e4       	ldi	r27, 0x42	; 66
    29da:	8b af       	std	Y+59, r24	; 0x3b
    29dc:	9c af       	std	Y+60, r25	; 0x3c
    29de:	ad af       	std	Y+61, r26	; 0x3d
    29e0:	be af       	std	Y+62, r27	; 0x3e
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    29e2:	6b ad       	ldd	r22, Y+59	; 0x3b
    29e4:	7c ad       	ldd	r23, Y+60	; 0x3c
    29e6:	8d ad       	ldd	r24, Y+61	; 0x3d
    29e8:	9e ad       	ldd	r25, Y+62	; 0x3e
    29ea:	2b ea       	ldi	r18, 0xAB	; 171
    29ec:	3a ea       	ldi	r19, 0xAA	; 170
    29ee:	4a ea       	ldi	r20, 0xAA	; 170
    29f0:	50 e4       	ldi	r21, 0x40	; 64
    29f2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    29f6:	dc 01       	movw	r26, r24
    29f8:	cb 01       	movw	r24, r22
    29fa:	8f ab       	std	Y+55, r24	; 0x37
    29fc:	98 af       	std	Y+56, r25	; 0x38
    29fe:	a9 af       	std	Y+57, r26	; 0x39
    2a00:	ba af       	std	Y+58, r27	; 0x3a
	if (__tmp < 1.0)
    2a02:	6f a9       	ldd	r22, Y+55	; 0x37
    2a04:	78 ad       	ldd	r23, Y+56	; 0x38
    2a06:	89 ad       	ldd	r24, Y+57	; 0x39
    2a08:	9a ad       	ldd	r25, Y+58	; 0x3a
    2a0a:	20 e0       	ldi	r18, 0x00	; 0
    2a0c:	30 e0       	ldi	r19, 0x00	; 0
    2a0e:	40 e8       	ldi	r20, 0x80	; 128
    2a10:	5f e3       	ldi	r21, 0x3F	; 63
    2a12:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2a16:	88 23       	and	r24, r24
    2a18:	1c f4       	brge	.+6      	; 0x2a20 <LCD_enu_Init+0x220>
		__ticks = 1;
    2a1a:	81 e0       	ldi	r24, 0x01	; 1
    2a1c:	8e ab       	std	Y+54, r24	; 0x36
    2a1e:	91 c0       	rjmp	.+290    	; 0x2b42 <LCD_enu_Init+0x342>
	else if (__tmp > 255)
    2a20:	6f a9       	ldd	r22, Y+55	; 0x37
    2a22:	78 ad       	ldd	r23, Y+56	; 0x38
    2a24:	89 ad       	ldd	r24, Y+57	; 0x39
    2a26:	9a ad       	ldd	r25, Y+58	; 0x3a
    2a28:	20 e0       	ldi	r18, 0x00	; 0
    2a2a:	30 e0       	ldi	r19, 0x00	; 0
    2a2c:	4f e7       	ldi	r20, 0x7F	; 127
    2a2e:	53 e4       	ldi	r21, 0x43	; 67
    2a30:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2a34:	18 16       	cp	r1, r24
    2a36:	0c f0       	brlt	.+2      	; 0x2a3a <LCD_enu_Init+0x23a>
    2a38:	7b c0       	rjmp	.+246    	; 0x2b30 <LCD_enu_Init+0x330>
	{
		_delay_ms(__us / 1000.0);
    2a3a:	6b ad       	ldd	r22, Y+59	; 0x3b
    2a3c:	7c ad       	ldd	r23, Y+60	; 0x3c
    2a3e:	8d ad       	ldd	r24, Y+61	; 0x3d
    2a40:	9e ad       	ldd	r25, Y+62	; 0x3e
    2a42:	20 e0       	ldi	r18, 0x00	; 0
    2a44:	30 e0       	ldi	r19, 0x00	; 0
    2a46:	4a e7       	ldi	r20, 0x7A	; 122
    2a48:	54 e4       	ldi	r21, 0x44	; 68
    2a4a:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    2a4e:	dc 01       	movw	r26, r24
    2a50:	cb 01       	movw	r24, r22
    2a52:	8a ab       	std	Y+50, r24	; 0x32
    2a54:	9b ab       	std	Y+51, r25	; 0x33
    2a56:	ac ab       	std	Y+52, r26	; 0x34
    2a58:	bd ab       	std	Y+53, r27	; 0x35
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2a5a:	6a a9       	ldd	r22, Y+50	; 0x32
    2a5c:	7b a9       	ldd	r23, Y+51	; 0x33
    2a5e:	8c a9       	ldd	r24, Y+52	; 0x34
    2a60:	9d a9       	ldd	r25, Y+53	; 0x35
    2a62:	20 e0       	ldi	r18, 0x00	; 0
    2a64:	30 e0       	ldi	r19, 0x00	; 0
    2a66:	4a e7       	ldi	r20, 0x7A	; 122
    2a68:	55 e4       	ldi	r21, 0x45	; 69
    2a6a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2a6e:	dc 01       	movw	r26, r24
    2a70:	cb 01       	movw	r24, r22
    2a72:	8e a7       	std	Y+46, r24	; 0x2e
    2a74:	9f a7       	std	Y+47, r25	; 0x2f
    2a76:	a8 ab       	std	Y+48, r26	; 0x30
    2a78:	b9 ab       	std	Y+49, r27	; 0x31
	if (__tmp < 1.0)
    2a7a:	6e a5       	ldd	r22, Y+46	; 0x2e
    2a7c:	7f a5       	ldd	r23, Y+47	; 0x2f
    2a7e:	88 a9       	ldd	r24, Y+48	; 0x30
    2a80:	99 a9       	ldd	r25, Y+49	; 0x31
    2a82:	20 e0       	ldi	r18, 0x00	; 0
    2a84:	30 e0       	ldi	r19, 0x00	; 0
    2a86:	40 e8       	ldi	r20, 0x80	; 128
    2a88:	5f e3       	ldi	r21, 0x3F	; 63
    2a8a:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2a8e:	88 23       	and	r24, r24
    2a90:	2c f4       	brge	.+10     	; 0x2a9c <LCD_enu_Init+0x29c>
		__ticks = 1;
    2a92:	81 e0       	ldi	r24, 0x01	; 1
    2a94:	90 e0       	ldi	r25, 0x00	; 0
    2a96:	9d a7       	std	Y+45, r25	; 0x2d
    2a98:	8c a7       	std	Y+44, r24	; 0x2c
    2a9a:	3f c0       	rjmp	.+126    	; 0x2b1a <LCD_enu_Init+0x31a>
	else if (__tmp > 65535)
    2a9c:	6e a5       	ldd	r22, Y+46	; 0x2e
    2a9e:	7f a5       	ldd	r23, Y+47	; 0x2f
    2aa0:	88 a9       	ldd	r24, Y+48	; 0x30
    2aa2:	99 a9       	ldd	r25, Y+49	; 0x31
    2aa4:	20 e0       	ldi	r18, 0x00	; 0
    2aa6:	3f ef       	ldi	r19, 0xFF	; 255
    2aa8:	4f e7       	ldi	r20, 0x7F	; 127
    2aaa:	57 e4       	ldi	r21, 0x47	; 71
    2aac:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2ab0:	18 16       	cp	r1, r24
    2ab2:	4c f5       	brge	.+82     	; 0x2b06 <LCD_enu_Init+0x306>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2ab4:	6a a9       	ldd	r22, Y+50	; 0x32
    2ab6:	7b a9       	ldd	r23, Y+51	; 0x33
    2ab8:	8c a9       	ldd	r24, Y+52	; 0x34
    2aba:	9d a9       	ldd	r25, Y+53	; 0x35
    2abc:	20 e0       	ldi	r18, 0x00	; 0
    2abe:	30 e0       	ldi	r19, 0x00	; 0
    2ac0:	40 e2       	ldi	r20, 0x20	; 32
    2ac2:	51 e4       	ldi	r21, 0x41	; 65
    2ac4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2ac8:	dc 01       	movw	r26, r24
    2aca:	cb 01       	movw	r24, r22
    2acc:	bc 01       	movw	r22, r24
    2ace:	cd 01       	movw	r24, r26
    2ad0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2ad4:	dc 01       	movw	r26, r24
    2ad6:	cb 01       	movw	r24, r22
    2ad8:	9d a7       	std	Y+45, r25	; 0x2d
    2ada:	8c a7       	std	Y+44, r24	; 0x2c
    2adc:	0f c0       	rjmp	.+30     	; 0x2afc <LCD_enu_Init+0x2fc>
    2ade:	80 e9       	ldi	r24, 0x90	; 144
    2ae0:	91 e0       	ldi	r25, 0x01	; 1
    2ae2:	9b a7       	std	Y+43, r25	; 0x2b
    2ae4:	8a a7       	std	Y+42, r24	; 0x2a
    2ae6:	8a a5       	ldd	r24, Y+42	; 0x2a
    2ae8:	9b a5       	ldd	r25, Y+43	; 0x2b
    2aea:	01 97       	sbiw	r24, 0x01	; 1
    2aec:	f1 f7       	brne	.-4      	; 0x2aea <LCD_enu_Init+0x2ea>
    2aee:	9b a7       	std	Y+43, r25	; 0x2b
    2af0:	8a a7       	std	Y+42, r24	; 0x2a
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2af2:	8c a5       	ldd	r24, Y+44	; 0x2c
    2af4:	9d a5       	ldd	r25, Y+45	; 0x2d
    2af6:	01 97       	sbiw	r24, 0x01	; 1
    2af8:	9d a7       	std	Y+45, r25	; 0x2d
    2afa:	8c a7       	std	Y+44, r24	; 0x2c
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2afc:	8c a5       	ldd	r24, Y+44	; 0x2c
    2afe:	9d a5       	ldd	r25, Y+45	; 0x2d
    2b00:	00 97       	sbiw	r24, 0x00	; 0
    2b02:	69 f7       	brne	.-38     	; 0x2ade <LCD_enu_Init+0x2de>
    2b04:	24 c0       	rjmp	.+72     	; 0x2b4e <LCD_enu_Init+0x34e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2b06:	6e a5       	ldd	r22, Y+46	; 0x2e
    2b08:	7f a5       	ldd	r23, Y+47	; 0x2f
    2b0a:	88 a9       	ldd	r24, Y+48	; 0x30
    2b0c:	99 a9       	ldd	r25, Y+49	; 0x31
    2b0e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2b12:	dc 01       	movw	r26, r24
    2b14:	cb 01       	movw	r24, r22
    2b16:	9d a7       	std	Y+45, r25	; 0x2d
    2b18:	8c a7       	std	Y+44, r24	; 0x2c
    2b1a:	8c a5       	ldd	r24, Y+44	; 0x2c
    2b1c:	9d a5       	ldd	r25, Y+45	; 0x2d
    2b1e:	99 a7       	std	Y+41, r25	; 0x29
    2b20:	88 a7       	std	Y+40, r24	; 0x28
    2b22:	88 a5       	ldd	r24, Y+40	; 0x28
    2b24:	99 a5       	ldd	r25, Y+41	; 0x29
    2b26:	01 97       	sbiw	r24, 0x01	; 1
    2b28:	f1 f7       	brne	.-4      	; 0x2b26 <LCD_enu_Init+0x326>
    2b2a:	99 a7       	std	Y+41, r25	; 0x29
    2b2c:	88 a7       	std	Y+40, r24	; 0x28
    2b2e:	0f c0       	rjmp	.+30     	; 0x2b4e <LCD_enu_Init+0x34e>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    2b30:	6f a9       	ldd	r22, Y+55	; 0x37
    2b32:	78 ad       	ldd	r23, Y+56	; 0x38
    2b34:	89 ad       	ldd	r24, Y+57	; 0x39
    2b36:	9a ad       	ldd	r25, Y+58	; 0x3a
    2b38:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2b3c:	dc 01       	movw	r26, r24
    2b3e:	cb 01       	movw	r24, r22
    2b40:	8e ab       	std	Y+54, r24	; 0x36
    2b42:	8e a9       	ldd	r24, Y+54	; 0x36
    2b44:	8f a3       	std	Y+39, r24	; 0x27
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    2b46:	8f a1       	ldd	r24, Y+39	; 0x27
    2b48:	8a 95       	dec	r24
    2b4a:	f1 f7       	brne	.-4      	; 0x2b48 <LCD_enu_Init+0x348>
    2b4c:	8f a3       	std	Y+39, r24	; 0x27
    _delay_us(40);
    LCD_enu_SendCmnd(LCD_U8_CURSOR);
    2b4e:	8c e0       	ldi	r24, 0x0C	; 12
    2b50:	0e 94 23 0f 	call	0x1e46	; 0x1e46 <LCD_enu_SendCmnd>
    2b54:	80 e0       	ldi	r24, 0x00	; 0
    2b56:	90 e0       	ldi	r25, 0x00	; 0
    2b58:	a0 e2       	ldi	r26, 0x20	; 32
    2b5a:	b2 e4       	ldi	r27, 0x42	; 66
    2b5c:	8b a3       	std	Y+35, r24	; 0x23
    2b5e:	9c a3       	std	Y+36, r25	; 0x24
    2b60:	ad a3       	std	Y+37, r26	; 0x25
    2b62:	be a3       	std	Y+38, r27	; 0x26
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    2b64:	6b a1       	ldd	r22, Y+35	; 0x23
    2b66:	7c a1       	ldd	r23, Y+36	; 0x24
    2b68:	8d a1       	ldd	r24, Y+37	; 0x25
    2b6a:	9e a1       	ldd	r25, Y+38	; 0x26
    2b6c:	2b ea       	ldi	r18, 0xAB	; 171
    2b6e:	3a ea       	ldi	r19, 0xAA	; 170
    2b70:	4a ea       	ldi	r20, 0xAA	; 170
    2b72:	50 e4       	ldi	r21, 0x40	; 64
    2b74:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2b78:	dc 01       	movw	r26, r24
    2b7a:	cb 01       	movw	r24, r22
    2b7c:	8f 8f       	std	Y+31, r24	; 0x1f
    2b7e:	98 a3       	std	Y+32, r25	; 0x20
    2b80:	a9 a3       	std	Y+33, r26	; 0x21
    2b82:	ba a3       	std	Y+34, r27	; 0x22
	if (__tmp < 1.0)
    2b84:	6f 8d       	ldd	r22, Y+31	; 0x1f
    2b86:	78 a1       	ldd	r23, Y+32	; 0x20
    2b88:	89 a1       	ldd	r24, Y+33	; 0x21
    2b8a:	9a a1       	ldd	r25, Y+34	; 0x22
    2b8c:	20 e0       	ldi	r18, 0x00	; 0
    2b8e:	30 e0       	ldi	r19, 0x00	; 0
    2b90:	40 e8       	ldi	r20, 0x80	; 128
    2b92:	5f e3       	ldi	r21, 0x3F	; 63
    2b94:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2b98:	88 23       	and	r24, r24
    2b9a:	1c f4       	brge	.+6      	; 0x2ba2 <LCD_enu_Init+0x3a2>
		__ticks = 1;
    2b9c:	81 e0       	ldi	r24, 0x01	; 1
    2b9e:	8e 8f       	std	Y+30, r24	; 0x1e
    2ba0:	91 c0       	rjmp	.+290    	; 0x2cc4 <LCD_enu_Init+0x4c4>
	else if (__tmp > 255)
    2ba2:	6f 8d       	ldd	r22, Y+31	; 0x1f
    2ba4:	78 a1       	ldd	r23, Y+32	; 0x20
    2ba6:	89 a1       	ldd	r24, Y+33	; 0x21
    2ba8:	9a a1       	ldd	r25, Y+34	; 0x22
    2baa:	20 e0       	ldi	r18, 0x00	; 0
    2bac:	30 e0       	ldi	r19, 0x00	; 0
    2bae:	4f e7       	ldi	r20, 0x7F	; 127
    2bb0:	53 e4       	ldi	r21, 0x43	; 67
    2bb2:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2bb6:	18 16       	cp	r1, r24
    2bb8:	0c f0       	brlt	.+2      	; 0x2bbc <LCD_enu_Init+0x3bc>
    2bba:	7b c0       	rjmp	.+246    	; 0x2cb2 <LCD_enu_Init+0x4b2>
	{
		_delay_ms(__us / 1000.0);
    2bbc:	6b a1       	ldd	r22, Y+35	; 0x23
    2bbe:	7c a1       	ldd	r23, Y+36	; 0x24
    2bc0:	8d a1       	ldd	r24, Y+37	; 0x25
    2bc2:	9e a1       	ldd	r25, Y+38	; 0x26
    2bc4:	20 e0       	ldi	r18, 0x00	; 0
    2bc6:	30 e0       	ldi	r19, 0x00	; 0
    2bc8:	4a e7       	ldi	r20, 0x7A	; 122
    2bca:	54 e4       	ldi	r21, 0x44	; 68
    2bcc:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    2bd0:	dc 01       	movw	r26, r24
    2bd2:	cb 01       	movw	r24, r22
    2bd4:	8a 8f       	std	Y+26, r24	; 0x1a
    2bd6:	9b 8f       	std	Y+27, r25	; 0x1b
    2bd8:	ac 8f       	std	Y+28, r26	; 0x1c
    2bda:	bd 8f       	std	Y+29, r27	; 0x1d
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2bdc:	6a 8d       	ldd	r22, Y+26	; 0x1a
    2bde:	7b 8d       	ldd	r23, Y+27	; 0x1b
    2be0:	8c 8d       	ldd	r24, Y+28	; 0x1c
    2be2:	9d 8d       	ldd	r25, Y+29	; 0x1d
    2be4:	20 e0       	ldi	r18, 0x00	; 0
    2be6:	30 e0       	ldi	r19, 0x00	; 0
    2be8:	4a e7       	ldi	r20, 0x7A	; 122
    2bea:	55 e4       	ldi	r21, 0x45	; 69
    2bec:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2bf0:	dc 01       	movw	r26, r24
    2bf2:	cb 01       	movw	r24, r22
    2bf4:	8e 8b       	std	Y+22, r24	; 0x16
    2bf6:	9f 8b       	std	Y+23, r25	; 0x17
    2bf8:	a8 8f       	std	Y+24, r26	; 0x18
    2bfa:	b9 8f       	std	Y+25, r27	; 0x19
	if (__tmp < 1.0)
    2bfc:	6e 89       	ldd	r22, Y+22	; 0x16
    2bfe:	7f 89       	ldd	r23, Y+23	; 0x17
    2c00:	88 8d       	ldd	r24, Y+24	; 0x18
    2c02:	99 8d       	ldd	r25, Y+25	; 0x19
    2c04:	20 e0       	ldi	r18, 0x00	; 0
    2c06:	30 e0       	ldi	r19, 0x00	; 0
    2c08:	40 e8       	ldi	r20, 0x80	; 128
    2c0a:	5f e3       	ldi	r21, 0x3F	; 63
    2c0c:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2c10:	88 23       	and	r24, r24
    2c12:	2c f4       	brge	.+10     	; 0x2c1e <LCD_enu_Init+0x41e>
		__ticks = 1;
    2c14:	81 e0       	ldi	r24, 0x01	; 1
    2c16:	90 e0       	ldi	r25, 0x00	; 0
    2c18:	9d 8b       	std	Y+21, r25	; 0x15
    2c1a:	8c 8b       	std	Y+20, r24	; 0x14
    2c1c:	3f c0       	rjmp	.+126    	; 0x2c9c <LCD_enu_Init+0x49c>
	else if (__tmp > 65535)
    2c1e:	6e 89       	ldd	r22, Y+22	; 0x16
    2c20:	7f 89       	ldd	r23, Y+23	; 0x17
    2c22:	88 8d       	ldd	r24, Y+24	; 0x18
    2c24:	99 8d       	ldd	r25, Y+25	; 0x19
    2c26:	20 e0       	ldi	r18, 0x00	; 0
    2c28:	3f ef       	ldi	r19, 0xFF	; 255
    2c2a:	4f e7       	ldi	r20, 0x7F	; 127
    2c2c:	57 e4       	ldi	r21, 0x47	; 71
    2c2e:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2c32:	18 16       	cp	r1, r24
    2c34:	4c f5       	brge	.+82     	; 0x2c88 <LCD_enu_Init+0x488>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2c36:	6a 8d       	ldd	r22, Y+26	; 0x1a
    2c38:	7b 8d       	ldd	r23, Y+27	; 0x1b
    2c3a:	8c 8d       	ldd	r24, Y+28	; 0x1c
    2c3c:	9d 8d       	ldd	r25, Y+29	; 0x1d
    2c3e:	20 e0       	ldi	r18, 0x00	; 0
    2c40:	30 e0       	ldi	r19, 0x00	; 0
    2c42:	40 e2       	ldi	r20, 0x20	; 32
    2c44:	51 e4       	ldi	r21, 0x41	; 65
    2c46:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2c4a:	dc 01       	movw	r26, r24
    2c4c:	cb 01       	movw	r24, r22
    2c4e:	bc 01       	movw	r22, r24
    2c50:	cd 01       	movw	r24, r26
    2c52:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2c56:	dc 01       	movw	r26, r24
    2c58:	cb 01       	movw	r24, r22
    2c5a:	9d 8b       	std	Y+21, r25	; 0x15
    2c5c:	8c 8b       	std	Y+20, r24	; 0x14
    2c5e:	0f c0       	rjmp	.+30     	; 0x2c7e <LCD_enu_Init+0x47e>
    2c60:	80 e9       	ldi	r24, 0x90	; 144
    2c62:	91 e0       	ldi	r25, 0x01	; 1
    2c64:	9b 8b       	std	Y+19, r25	; 0x13
    2c66:	8a 8b       	std	Y+18, r24	; 0x12
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    2c68:	8a 89       	ldd	r24, Y+18	; 0x12
    2c6a:	9b 89       	ldd	r25, Y+19	; 0x13
    2c6c:	01 97       	sbiw	r24, 0x01	; 1
    2c6e:	f1 f7       	brne	.-4      	; 0x2c6c <LCD_enu_Init+0x46c>
    2c70:	9b 8b       	std	Y+19, r25	; 0x13
    2c72:	8a 8b       	std	Y+18, r24	; 0x12
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2c74:	8c 89       	ldd	r24, Y+20	; 0x14
    2c76:	9d 89       	ldd	r25, Y+21	; 0x15
    2c78:	01 97       	sbiw	r24, 0x01	; 1
    2c7a:	9d 8b       	std	Y+21, r25	; 0x15
    2c7c:	8c 8b       	std	Y+20, r24	; 0x14
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2c7e:	8c 89       	ldd	r24, Y+20	; 0x14
    2c80:	9d 89       	ldd	r25, Y+21	; 0x15
    2c82:	00 97       	sbiw	r24, 0x00	; 0
    2c84:	69 f7       	brne	.-38     	; 0x2c60 <LCD_enu_Init+0x460>
    2c86:	24 c0       	rjmp	.+72     	; 0x2cd0 <LCD_enu_Init+0x4d0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2c88:	6e 89       	ldd	r22, Y+22	; 0x16
    2c8a:	7f 89       	ldd	r23, Y+23	; 0x17
    2c8c:	88 8d       	ldd	r24, Y+24	; 0x18
    2c8e:	99 8d       	ldd	r25, Y+25	; 0x19
    2c90:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2c94:	dc 01       	movw	r26, r24
    2c96:	cb 01       	movw	r24, r22
    2c98:	9d 8b       	std	Y+21, r25	; 0x15
    2c9a:	8c 8b       	std	Y+20, r24	; 0x14
    2c9c:	8c 89       	ldd	r24, Y+20	; 0x14
    2c9e:	9d 89       	ldd	r25, Y+21	; 0x15
    2ca0:	99 8b       	std	Y+17, r25	; 0x11
    2ca2:	88 8b       	std	Y+16, r24	; 0x10
    2ca4:	88 89       	ldd	r24, Y+16	; 0x10
    2ca6:	99 89       	ldd	r25, Y+17	; 0x11
    2ca8:	01 97       	sbiw	r24, 0x01	; 1
    2caa:	f1 f7       	brne	.-4      	; 0x2ca8 <LCD_enu_Init+0x4a8>
    2cac:	99 8b       	std	Y+17, r25	; 0x11
    2cae:	88 8b       	std	Y+16, r24	; 0x10
    2cb0:	0f c0       	rjmp	.+30     	; 0x2cd0 <LCD_enu_Init+0x4d0>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    2cb2:	6f 8d       	ldd	r22, Y+31	; 0x1f
    2cb4:	78 a1       	ldd	r23, Y+32	; 0x20
    2cb6:	89 a1       	ldd	r24, Y+33	; 0x21
    2cb8:	9a a1       	ldd	r25, Y+34	; 0x22
    2cba:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2cbe:	dc 01       	movw	r26, r24
    2cc0:	cb 01       	movw	r24, r22
    2cc2:	8e 8f       	std	Y+30, r24	; 0x1e
    2cc4:	8e 8d       	ldd	r24, Y+30	; 0x1e
    2cc6:	8f 87       	std	Y+15, r24	; 0x0f
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    2cc8:	8f 85       	ldd	r24, Y+15	; 0x0f
    2cca:	8a 95       	dec	r24
    2ccc:	f1 f7       	brne	.-4      	; 0x2cca <LCD_enu_Init+0x4ca>
    2cce:	8f 87       	std	Y+15, r24	; 0x0f
    _delay_us(40);
    LCD_enu_SendCmnd(DISPLAY_CLEAR);
    2cd0:	81 e0       	ldi	r24, 0x01	; 1
    2cd2:	0e 94 23 0f 	call	0x1e46	; 0x1e46 <LCD_enu_SendCmnd>
    2cd6:	80 e0       	ldi	r24, 0x00	; 0
    2cd8:	90 e0       	ldi	r25, 0x00	; 0
    2cda:	a0 e0       	ldi	r26, 0x00	; 0
    2cdc:	b0 e4       	ldi	r27, 0x40	; 64
    2cde:	8b 87       	std	Y+11, r24	; 0x0b
    2ce0:	9c 87       	std	Y+12, r25	; 0x0c
    2ce2:	ad 87       	std	Y+13, r26	; 0x0d
    2ce4:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2ce6:	6b 85       	ldd	r22, Y+11	; 0x0b
    2ce8:	7c 85       	ldd	r23, Y+12	; 0x0c
    2cea:	8d 85       	ldd	r24, Y+13	; 0x0d
    2cec:	9e 85       	ldd	r25, Y+14	; 0x0e
    2cee:	20 e0       	ldi	r18, 0x00	; 0
    2cf0:	30 e0       	ldi	r19, 0x00	; 0
    2cf2:	4a e7       	ldi	r20, 0x7A	; 122
    2cf4:	55 e4       	ldi	r21, 0x45	; 69
    2cf6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2cfa:	dc 01       	movw	r26, r24
    2cfc:	cb 01       	movw	r24, r22
    2cfe:	8f 83       	std	Y+7, r24	; 0x07
    2d00:	98 87       	std	Y+8, r25	; 0x08
    2d02:	a9 87       	std	Y+9, r26	; 0x09
    2d04:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2d06:	6f 81       	ldd	r22, Y+7	; 0x07
    2d08:	78 85       	ldd	r23, Y+8	; 0x08
    2d0a:	89 85       	ldd	r24, Y+9	; 0x09
    2d0c:	9a 85       	ldd	r25, Y+10	; 0x0a
    2d0e:	20 e0       	ldi	r18, 0x00	; 0
    2d10:	30 e0       	ldi	r19, 0x00	; 0
    2d12:	40 e8       	ldi	r20, 0x80	; 128
    2d14:	5f e3       	ldi	r21, 0x3F	; 63
    2d16:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2d1a:	88 23       	and	r24, r24
    2d1c:	2c f4       	brge	.+10     	; 0x2d28 <LCD_enu_Init+0x528>
		__ticks = 1;
    2d1e:	81 e0       	ldi	r24, 0x01	; 1
    2d20:	90 e0       	ldi	r25, 0x00	; 0
    2d22:	9e 83       	std	Y+6, r25	; 0x06
    2d24:	8d 83       	std	Y+5, r24	; 0x05
    2d26:	3f c0       	rjmp	.+126    	; 0x2da6 <LCD_enu_Init+0x5a6>
	else if (__tmp > 65535)
    2d28:	6f 81       	ldd	r22, Y+7	; 0x07
    2d2a:	78 85       	ldd	r23, Y+8	; 0x08
    2d2c:	89 85       	ldd	r24, Y+9	; 0x09
    2d2e:	9a 85       	ldd	r25, Y+10	; 0x0a
    2d30:	20 e0       	ldi	r18, 0x00	; 0
    2d32:	3f ef       	ldi	r19, 0xFF	; 255
    2d34:	4f e7       	ldi	r20, 0x7F	; 127
    2d36:	57 e4       	ldi	r21, 0x47	; 71
    2d38:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2d3c:	18 16       	cp	r1, r24
    2d3e:	4c f5       	brge	.+82     	; 0x2d92 <LCD_enu_Init+0x592>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2d40:	6b 85       	ldd	r22, Y+11	; 0x0b
    2d42:	7c 85       	ldd	r23, Y+12	; 0x0c
    2d44:	8d 85       	ldd	r24, Y+13	; 0x0d
    2d46:	9e 85       	ldd	r25, Y+14	; 0x0e
    2d48:	20 e0       	ldi	r18, 0x00	; 0
    2d4a:	30 e0       	ldi	r19, 0x00	; 0
    2d4c:	40 e2       	ldi	r20, 0x20	; 32
    2d4e:	51 e4       	ldi	r21, 0x41	; 65
    2d50:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2d54:	dc 01       	movw	r26, r24
    2d56:	cb 01       	movw	r24, r22
    2d58:	bc 01       	movw	r22, r24
    2d5a:	cd 01       	movw	r24, r26
    2d5c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2d60:	dc 01       	movw	r26, r24
    2d62:	cb 01       	movw	r24, r22
    2d64:	9e 83       	std	Y+6, r25	; 0x06
    2d66:	8d 83       	std	Y+5, r24	; 0x05
    2d68:	0f c0       	rjmp	.+30     	; 0x2d88 <LCD_enu_Init+0x588>
    2d6a:	80 e9       	ldi	r24, 0x90	; 144
    2d6c:	91 e0       	ldi	r25, 0x01	; 1
    2d6e:	9c 83       	std	Y+4, r25	; 0x04
    2d70:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    2d72:	8b 81       	ldd	r24, Y+3	; 0x03
    2d74:	9c 81       	ldd	r25, Y+4	; 0x04
    2d76:	01 97       	sbiw	r24, 0x01	; 1
    2d78:	f1 f7       	brne	.-4      	; 0x2d76 <LCD_enu_Init+0x576>
    2d7a:	9c 83       	std	Y+4, r25	; 0x04
    2d7c:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2d7e:	8d 81       	ldd	r24, Y+5	; 0x05
    2d80:	9e 81       	ldd	r25, Y+6	; 0x06
    2d82:	01 97       	sbiw	r24, 0x01	; 1
    2d84:	9e 83       	std	Y+6, r25	; 0x06
    2d86:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2d88:	8d 81       	ldd	r24, Y+5	; 0x05
    2d8a:	9e 81       	ldd	r25, Y+6	; 0x06
    2d8c:	00 97       	sbiw	r24, 0x00	; 0
    2d8e:	69 f7       	brne	.-38     	; 0x2d6a <LCD_enu_Init+0x56a>
    2d90:	14 c0       	rjmp	.+40     	; 0x2dba <LCD_enu_Init+0x5ba>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2d92:	6f 81       	ldd	r22, Y+7	; 0x07
    2d94:	78 85       	ldd	r23, Y+8	; 0x08
    2d96:	89 85       	ldd	r24, Y+9	; 0x09
    2d98:	9a 85       	ldd	r25, Y+10	; 0x0a
    2d9a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2d9e:	dc 01       	movw	r26, r24
    2da0:	cb 01       	movw	r24, r22
    2da2:	9e 83       	std	Y+6, r25	; 0x06
    2da4:	8d 83       	std	Y+5, r24	; 0x05
    2da6:	8d 81       	ldd	r24, Y+5	; 0x05
    2da8:	9e 81       	ldd	r25, Y+6	; 0x06
    2daa:	9a 83       	std	Y+2, r25	; 0x02
    2dac:	89 83       	std	Y+1, r24	; 0x01
    2dae:	89 81       	ldd	r24, Y+1	; 0x01
    2db0:	9a 81       	ldd	r25, Y+2	; 0x02
    2db2:	01 97       	sbiw	r24, 0x01	; 1
    2db4:	f1 f7       	brne	.-4      	; 0x2db2 <LCD_enu_Init+0x5b2>
    2db6:	9a 83       	std	Y+2, r25	; 0x02
    2db8:	89 83       	std	Y+1, r24	; 0x01
    _delay_ms(2);
    LCD_enu_SendCmnd(ENTRY_MOOD);
    2dba:	86 e0       	ldi	r24, 0x06	; 6
    2dbc:	0e 94 23 0f 	call	0x1e46	; 0x1e46 <LCD_enu_SendCmnd>
    return STATE_OK;
    2dc0:	81 e0       	ldi	r24, 0x01	; 1
#endif
}
    2dc2:	c4 5b       	subi	r28, 0xB4	; 180
    2dc4:	df 4f       	sbci	r29, 0xFF	; 255
    2dc6:	0f b6       	in	r0, 0x3f	; 63
    2dc8:	f8 94       	cli
    2dca:	de bf       	out	0x3e, r29	; 62
    2dcc:	0f be       	out	0x3f, r0	; 63
    2dce:	cd bf       	out	0x3d, r28	; 61
    2dd0:	cf 91       	pop	r28
    2dd2:	df 91       	pop	r29
    2dd4:	1f 91       	pop	r17
    2dd6:	0f 91       	pop	r16
    2dd8:	08 95       	ret

00002dda <LCD_enu_Clear>:
ES_t LCD_enu_Clear(void)
{
    2dda:	df 93       	push	r29
    2ddc:	cf 93       	push	r28
    2dde:	cd b7       	in	r28, 0x3d	; 61
    2de0:	de b7       	in	r29, 0x3e	; 62
    2de2:	2e 97       	sbiw	r28, 0x0e	; 14
    2de4:	0f b6       	in	r0, 0x3f	; 63
    2de6:	f8 94       	cli
    2de8:	de bf       	out	0x3e, r29	; 62
    2dea:	0f be       	out	0x3f, r0	; 63
    2dec:	cd bf       	out	0x3d, r28	; 61
    LCD_enu_SendCmnd(DISPLAY_CLEAR);
    2dee:	81 e0       	ldi	r24, 0x01	; 1
    2df0:	0e 94 23 0f 	call	0x1e46	; 0x1e46 <LCD_enu_SendCmnd>
    2df4:	80 e0       	ldi	r24, 0x00	; 0
    2df6:	90 e0       	ldi	r25, 0x00	; 0
    2df8:	a0 e0       	ldi	r26, 0x00	; 0
    2dfa:	b0 e4       	ldi	r27, 0x40	; 64
    2dfc:	8b 87       	std	Y+11, r24	; 0x0b
    2dfe:	9c 87       	std	Y+12, r25	; 0x0c
    2e00:	ad 87       	std	Y+13, r26	; 0x0d
    2e02:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2e04:	6b 85       	ldd	r22, Y+11	; 0x0b
    2e06:	7c 85       	ldd	r23, Y+12	; 0x0c
    2e08:	8d 85       	ldd	r24, Y+13	; 0x0d
    2e0a:	9e 85       	ldd	r25, Y+14	; 0x0e
    2e0c:	20 e0       	ldi	r18, 0x00	; 0
    2e0e:	30 e0       	ldi	r19, 0x00	; 0
    2e10:	4a e7       	ldi	r20, 0x7A	; 122
    2e12:	55 e4       	ldi	r21, 0x45	; 69
    2e14:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2e18:	dc 01       	movw	r26, r24
    2e1a:	cb 01       	movw	r24, r22
    2e1c:	8f 83       	std	Y+7, r24	; 0x07
    2e1e:	98 87       	std	Y+8, r25	; 0x08
    2e20:	a9 87       	std	Y+9, r26	; 0x09
    2e22:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2e24:	6f 81       	ldd	r22, Y+7	; 0x07
    2e26:	78 85       	ldd	r23, Y+8	; 0x08
    2e28:	89 85       	ldd	r24, Y+9	; 0x09
    2e2a:	9a 85       	ldd	r25, Y+10	; 0x0a
    2e2c:	20 e0       	ldi	r18, 0x00	; 0
    2e2e:	30 e0       	ldi	r19, 0x00	; 0
    2e30:	40 e8       	ldi	r20, 0x80	; 128
    2e32:	5f e3       	ldi	r21, 0x3F	; 63
    2e34:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2e38:	88 23       	and	r24, r24
    2e3a:	2c f4       	brge	.+10     	; 0x2e46 <LCD_enu_Clear+0x6c>
		__ticks = 1;
    2e3c:	81 e0       	ldi	r24, 0x01	; 1
    2e3e:	90 e0       	ldi	r25, 0x00	; 0
    2e40:	9e 83       	std	Y+6, r25	; 0x06
    2e42:	8d 83       	std	Y+5, r24	; 0x05
    2e44:	3f c0       	rjmp	.+126    	; 0x2ec4 <LCD_enu_Clear+0xea>
	else if (__tmp > 65535)
    2e46:	6f 81       	ldd	r22, Y+7	; 0x07
    2e48:	78 85       	ldd	r23, Y+8	; 0x08
    2e4a:	89 85       	ldd	r24, Y+9	; 0x09
    2e4c:	9a 85       	ldd	r25, Y+10	; 0x0a
    2e4e:	20 e0       	ldi	r18, 0x00	; 0
    2e50:	3f ef       	ldi	r19, 0xFF	; 255
    2e52:	4f e7       	ldi	r20, 0x7F	; 127
    2e54:	57 e4       	ldi	r21, 0x47	; 71
    2e56:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2e5a:	18 16       	cp	r1, r24
    2e5c:	4c f5       	brge	.+82     	; 0x2eb0 <LCD_enu_Clear+0xd6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2e5e:	6b 85       	ldd	r22, Y+11	; 0x0b
    2e60:	7c 85       	ldd	r23, Y+12	; 0x0c
    2e62:	8d 85       	ldd	r24, Y+13	; 0x0d
    2e64:	9e 85       	ldd	r25, Y+14	; 0x0e
    2e66:	20 e0       	ldi	r18, 0x00	; 0
    2e68:	30 e0       	ldi	r19, 0x00	; 0
    2e6a:	40 e2       	ldi	r20, 0x20	; 32
    2e6c:	51 e4       	ldi	r21, 0x41	; 65
    2e6e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2e72:	dc 01       	movw	r26, r24
    2e74:	cb 01       	movw	r24, r22
    2e76:	bc 01       	movw	r22, r24
    2e78:	cd 01       	movw	r24, r26
    2e7a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2e7e:	dc 01       	movw	r26, r24
    2e80:	cb 01       	movw	r24, r22
    2e82:	9e 83       	std	Y+6, r25	; 0x06
    2e84:	8d 83       	std	Y+5, r24	; 0x05
    2e86:	0f c0       	rjmp	.+30     	; 0x2ea6 <LCD_enu_Clear+0xcc>
    2e88:	80 e9       	ldi	r24, 0x90	; 144
    2e8a:	91 e0       	ldi	r25, 0x01	; 1
    2e8c:	9c 83       	std	Y+4, r25	; 0x04
    2e8e:	8b 83       	std	Y+3, r24	; 0x03
    2e90:	8b 81       	ldd	r24, Y+3	; 0x03
    2e92:	9c 81       	ldd	r25, Y+4	; 0x04
    2e94:	01 97       	sbiw	r24, 0x01	; 1
    2e96:	f1 f7       	brne	.-4      	; 0x2e94 <LCD_enu_Clear+0xba>
    2e98:	9c 83       	std	Y+4, r25	; 0x04
    2e9a:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2e9c:	8d 81       	ldd	r24, Y+5	; 0x05
    2e9e:	9e 81       	ldd	r25, Y+6	; 0x06
    2ea0:	01 97       	sbiw	r24, 0x01	; 1
    2ea2:	9e 83       	std	Y+6, r25	; 0x06
    2ea4:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2ea6:	8d 81       	ldd	r24, Y+5	; 0x05
    2ea8:	9e 81       	ldd	r25, Y+6	; 0x06
    2eaa:	00 97       	sbiw	r24, 0x00	; 0
    2eac:	69 f7       	brne	.-38     	; 0x2e88 <LCD_enu_Clear+0xae>
    2eae:	14 c0       	rjmp	.+40     	; 0x2ed8 <LCD_enu_Clear+0xfe>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2eb0:	6f 81       	ldd	r22, Y+7	; 0x07
    2eb2:	78 85       	ldd	r23, Y+8	; 0x08
    2eb4:	89 85       	ldd	r24, Y+9	; 0x09
    2eb6:	9a 85       	ldd	r25, Y+10	; 0x0a
    2eb8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2ebc:	dc 01       	movw	r26, r24
    2ebe:	cb 01       	movw	r24, r22
    2ec0:	9e 83       	std	Y+6, r25	; 0x06
    2ec2:	8d 83       	std	Y+5, r24	; 0x05
    2ec4:	8d 81       	ldd	r24, Y+5	; 0x05
    2ec6:	9e 81       	ldd	r25, Y+6	; 0x06
    2ec8:	9a 83       	std	Y+2, r25	; 0x02
    2eca:	89 83       	std	Y+1, r24	; 0x01
    2ecc:	89 81       	ldd	r24, Y+1	; 0x01
    2ece:	9a 81       	ldd	r25, Y+2	; 0x02
    2ed0:	01 97       	sbiw	r24, 0x01	; 1
    2ed2:	f1 f7       	brne	.-4      	; 0x2ed0 <LCD_enu_Clear+0xf6>
    2ed4:	9a 83       	std	Y+2, r25	; 0x02
    2ed6:	89 83       	std	Y+1, r24	; 0x01
    _delay_ms(2);
    return STATE_OK;
    2ed8:	81 e0       	ldi	r24, 0x01	; 1
}
    2eda:	2e 96       	adiw	r28, 0x0e	; 14
    2edc:	0f b6       	in	r0, 0x3f	; 63
    2ede:	f8 94       	cli
    2ee0:	de bf       	out	0x3e, r29	; 62
    2ee2:	0f be       	out	0x3f, r0	; 63
    2ee4:	cd bf       	out	0x3d, r28	; 61
    2ee6:	cf 91       	pop	r28
    2ee8:	df 91       	pop	r29
    2eea:	08 95       	ret

00002eec <LCD_enu_sendCustomChar>:
ES_t LCD_enu_sendCustomChar(u8 Copy_u8_charNum, u8 *Copy_pu8_charArray, u8 Copy_u8_lineNum, u8 Copy_u8_Location)
{
    2eec:	df 93       	push	r29
    2eee:	cf 93       	push	r28
    2ef0:	cd b7       	in	r28, 0x3d	; 61
    2ef2:	de b7       	in	r29, 0x3e	; 62
    2ef4:	27 97       	sbiw	r28, 0x07	; 7
    2ef6:	0f b6       	in	r0, 0x3f	; 63
    2ef8:	f8 94       	cli
    2efa:	de bf       	out	0x3e, r29	; 62
    2efc:	0f be       	out	0x3f, r0	; 63
    2efe:	cd bf       	out	0x3d, r28	; 61
    2f00:	8b 83       	std	Y+3, r24	; 0x03
    2f02:	7d 83       	std	Y+5, r23	; 0x05
    2f04:	6c 83       	std	Y+4, r22	; 0x04
    2f06:	4e 83       	std	Y+6, r20	; 0x06
    2f08:	2f 83       	std	Y+7, r18	; 0x07
    u8 Local_u8_errorState = STATE_OK;
    2f0a:	81 e0       	ldi	r24, 0x01	; 1
    2f0c:	8a 83       	std	Y+2, r24	; 0x02
    if ((Copy_pu8_charArray != NULL) && (Copy_u8_charNum < MAX_CHARACTERS) && (Copy_u8_lineNum < NUM_OF_LINES) && (Copy_u8_Location < MAX_NUM_OF_LOCATIONS))
    2f0e:	8c 81       	ldd	r24, Y+4	; 0x04
    2f10:	9d 81       	ldd	r25, Y+5	; 0x05
    2f12:	00 97       	sbiw	r24, 0x00	; 0
    2f14:	81 f1       	breq	.+96     	; 0x2f76 <LCD_enu_sendCustomChar+0x8a>
    2f16:	8b 81       	ldd	r24, Y+3	; 0x03
    2f18:	88 30       	cpi	r24, 0x08	; 8
    2f1a:	68 f5       	brcc	.+90     	; 0x2f76 <LCD_enu_sendCustomChar+0x8a>
    2f1c:	8e 81       	ldd	r24, Y+6	; 0x06
    2f1e:	82 30       	cpi	r24, 0x02	; 2
    2f20:	50 f5       	brcc	.+84     	; 0x2f76 <LCD_enu_sendCustomChar+0x8a>
    2f22:	8f 81       	ldd	r24, Y+7	; 0x07
    2f24:	88 32       	cpi	r24, 0x28	; 40
    2f26:	38 f5       	brcc	.+78     	; 0x2f76 <LCD_enu_sendCustomChar+0x8a>
    {
        LCD_enu_SendCmnd(ADDRESS_OF_CGRAM + (Copy_u8_charNum * MAX_CHARACTERS));
    2f28:	8b 81       	ldd	r24, Y+3	; 0x03
    2f2a:	88 2f       	mov	r24, r24
    2f2c:	90 e0       	ldi	r25, 0x00	; 0
    2f2e:	08 96       	adiw	r24, 0x08	; 8
    2f30:	88 0f       	add	r24, r24
    2f32:	99 1f       	adc	r25, r25
    2f34:	88 0f       	add	r24, r24
    2f36:	99 1f       	adc	r25, r25
    2f38:	88 0f       	add	r24, r24
    2f3a:	99 1f       	adc	r25, r25
    2f3c:	0e 94 23 0f 	call	0x1e46	; 0x1e46 <LCD_enu_SendCmnd>
        for (u8 Local_u8_Counter = 0; Local_u8_Counter < MAX_CHARACTERS; Local_u8_Counter++)
    2f40:	19 82       	std	Y+1, r1	; 0x01
    2f42:	0e c0       	rjmp	.+28     	; 0x2f60 <LCD_enu_sendCustomChar+0x74>
        {
            LCD_enu_SendChar(Copy_pu8_charArray[Local_u8_Counter]);
    2f44:	89 81       	ldd	r24, Y+1	; 0x01
    2f46:	28 2f       	mov	r18, r24
    2f48:	30 e0       	ldi	r19, 0x00	; 0
    2f4a:	8c 81       	ldd	r24, Y+4	; 0x04
    2f4c:	9d 81       	ldd	r25, Y+5	; 0x05
    2f4e:	fc 01       	movw	r30, r24
    2f50:	e2 0f       	add	r30, r18
    2f52:	f3 1f       	adc	r31, r19
    2f54:	80 81       	ld	r24, Z
    2f56:	0e 94 23 11 	call	0x2246	; 0x2246 <LCD_enu_SendChar>
{
    u8 Local_u8_errorState = STATE_OK;
    if ((Copy_pu8_charArray != NULL) && (Copy_u8_charNum < MAX_CHARACTERS) && (Copy_u8_lineNum < NUM_OF_LINES) && (Copy_u8_Location < MAX_NUM_OF_LOCATIONS))
    {
        LCD_enu_SendCmnd(ADDRESS_OF_CGRAM + (Copy_u8_charNum * MAX_CHARACTERS));
        for (u8 Local_u8_Counter = 0; Local_u8_Counter < MAX_CHARACTERS; Local_u8_Counter++)
    2f5a:	89 81       	ldd	r24, Y+1	; 0x01
    2f5c:	8f 5f       	subi	r24, 0xFF	; 255
    2f5e:	89 83       	std	Y+1, r24	; 0x01
    2f60:	89 81       	ldd	r24, Y+1	; 0x01
    2f62:	88 30       	cpi	r24, 0x08	; 8
    2f64:	78 f3       	brcs	.-34     	; 0x2f44 <LCD_enu_sendCustomChar+0x58>
        {
            LCD_enu_SendChar(Copy_pu8_charArray[Local_u8_Counter]);
        }
        LCD_enu_SetCursor(Copy_u8_lineNum, Copy_u8_Location);
    2f66:	8e 81       	ldd	r24, Y+6	; 0x06
    2f68:	6f 81       	ldd	r22, Y+7	; 0x07
    2f6a:	0e 94 cd 13 	call	0x279a	; 0x279a <LCD_enu_SetCursor>
        LCD_enu_SendChar(Copy_u8_charNum);
    2f6e:	8b 81       	ldd	r24, Y+3	; 0x03
    2f70:	0e 94 23 11 	call	0x2246	; 0x2246 <LCD_enu_SendChar>
    2f74:	01 c0       	rjmp	.+2      	; 0x2f78 <LCD_enu_sendCustomChar+0x8c>
    }
    else
    {
        Local_u8_errorState = STATE_NOT_OK;
    2f76:	1a 82       	std	Y+2, r1	; 0x02
    }
    return Local_u8_errorState;
    2f78:	8a 81       	ldd	r24, Y+2	; 0x02
}
    2f7a:	27 96       	adiw	r28, 0x07	; 7
    2f7c:	0f b6       	in	r0, 0x3f	; 63
    2f7e:	f8 94       	cli
    2f80:	de bf       	out	0x3e, r29	; 62
    2f82:	0f be       	out	0x3f, r0	; 63
    2f84:	cd bf       	out	0x3d, r28	; 61
    2f86:	cf 91       	pop	r28
    2f88:	df 91       	pop	r29
    2f8a:	08 95       	ret

00002f8c <Keypad_enu_Init>:
const u8 Keypad_Au8_Keys[4][3] = KEYPAD_KEYS;
const u8 Keypad_Au8_RowsPins[4] = {KEYPAD_U8_ROW1_PIN, KEYPAD_U8_ROW2_PIN, KEYPAD_U8_ROW3_PIN, KEYPAD_U8_ROW4_PIN};
const u8 Keypad_Au8_ColsPins[3] = {KEYPAD_U8_COLUMN1_PIN, KEYPAD_U8_COLUMN2_PIN, KEYPAD_U8_COLUMN3_PIN};

ES_t Keypad_enu_Init()
{
    2f8c:	df 93       	push	r29
    2f8e:	cf 93       	push	r28
    2f90:	0f 92       	push	r0
    2f92:	cd b7       	in	r28, 0x3d	; 61
    2f94:	de b7       	in	r29, 0x3e	; 62
    /*Configure Rows And Columns Pins*/
    for (u8 Local_u8_iterator = 0; Local_u8_iterator < 4; Local_u8_iterator++)
    2f96:	19 82       	std	Y+1, r1	; 0x01
    2f98:	33 c0       	rjmp	.+102    	; 0x3000 <Keypad_enu_Init+0x74>
    {
        DIO_enu_SetPinDirection(KEYPAD_U8_ROWS_PORT, Keypad_Au8_RowsPins[Local_u8_iterator], DIO_U8_OUTPUT);
    2f9a:	89 81       	ldd	r24, Y+1	; 0x01
    2f9c:	88 2f       	mov	r24, r24
    2f9e:	90 e0       	ldi	r25, 0x00	; 0
    2fa0:	fc 01       	movw	r30, r24
    2fa2:	e6 5e       	subi	r30, 0xE6	; 230
    2fa4:	fe 4f       	sbci	r31, 0xFE	; 254
    2fa6:	90 81       	ld	r25, Z
    2fa8:	81 e0       	ldi	r24, 0x01	; 1
    2faa:	69 2f       	mov	r22, r25
    2fac:	41 e0       	ldi	r20, 0x01	; 1
    2fae:	0e 94 cd 1e 	call	0x3d9a	; 0x3d9a <DIO_enu_SetPinDirection>
        DIO_enu_SetPinValue(KEYPAD_U8_ROWS_PORT, Keypad_Au8_RowsPins[Local_u8_iterator], DIO_U8_HIGH);
    2fb2:	89 81       	ldd	r24, Y+1	; 0x01
    2fb4:	88 2f       	mov	r24, r24
    2fb6:	90 e0       	ldi	r25, 0x00	; 0
    2fb8:	fc 01       	movw	r30, r24
    2fba:	e6 5e       	subi	r30, 0xE6	; 230
    2fbc:	fe 4f       	sbci	r31, 0xFE	; 254
    2fbe:	90 81       	ld	r25, Z
    2fc0:	81 e0       	ldi	r24, 0x01	; 1
    2fc2:	69 2f       	mov	r22, r25
    2fc4:	41 e0       	ldi	r20, 0x01	; 1
    2fc6:	0e 94 f7 1f 	call	0x3fee	; 0x3fee <DIO_enu_SetPinValue>
        DIO_enu_SetPinDirection(KEYPAD_U8_COLUMNS_PORT, Keypad_Au8_ColsPins[Local_u8_iterator], DIO_U8_INPUT);
    2fca:	89 81       	ldd	r24, Y+1	; 0x01
    2fcc:	88 2f       	mov	r24, r24
    2fce:	90 e0       	ldi	r25, 0x00	; 0
    2fd0:	fc 01       	movw	r30, r24
    2fd2:	e2 5e       	subi	r30, 0xE2	; 226
    2fd4:	fe 4f       	sbci	r31, 0xFE	; 254
    2fd6:	90 81       	ld	r25, Z
    2fd8:	83 e0       	ldi	r24, 0x03	; 3
    2fda:	69 2f       	mov	r22, r25
    2fdc:	40 e0       	ldi	r20, 0x00	; 0
    2fde:	0e 94 cd 1e 	call	0x3d9a	; 0x3d9a <DIO_enu_SetPinDirection>
        DIO_enu_SetPinValue(KEYPAD_U8_COLUMNS_PORT, Keypad_Au8_ColsPins[Local_u8_iterator], DIO_U8_HIGH);
    2fe2:	89 81       	ldd	r24, Y+1	; 0x01
    2fe4:	88 2f       	mov	r24, r24
    2fe6:	90 e0       	ldi	r25, 0x00	; 0
    2fe8:	fc 01       	movw	r30, r24
    2fea:	e2 5e       	subi	r30, 0xE2	; 226
    2fec:	fe 4f       	sbci	r31, 0xFE	; 254
    2fee:	90 81       	ld	r25, Z
    2ff0:	83 e0       	ldi	r24, 0x03	; 3
    2ff2:	69 2f       	mov	r22, r25
    2ff4:	41 e0       	ldi	r20, 0x01	; 1
    2ff6:	0e 94 f7 1f 	call	0x3fee	; 0x3fee <DIO_enu_SetPinValue>
const u8 Keypad_Au8_ColsPins[3] = {KEYPAD_U8_COLUMN1_PIN, KEYPAD_U8_COLUMN2_PIN, KEYPAD_U8_COLUMN3_PIN};

ES_t Keypad_enu_Init()
{
    /*Configure Rows And Columns Pins*/
    for (u8 Local_u8_iterator = 0; Local_u8_iterator < 4; Local_u8_iterator++)
    2ffa:	89 81       	ldd	r24, Y+1	; 0x01
    2ffc:	8f 5f       	subi	r24, 0xFF	; 255
    2ffe:	89 83       	std	Y+1, r24	; 0x01
    3000:	89 81       	ldd	r24, Y+1	; 0x01
    3002:	84 30       	cpi	r24, 0x04	; 4
    3004:	50 f2       	brcs	.-108    	; 0x2f9a <Keypad_enu_Init+0xe>
        DIO_enu_SetPinDirection(KEYPAD_U8_ROWS_PORT, Keypad_Au8_RowsPins[Local_u8_iterator], DIO_U8_OUTPUT);
        DIO_enu_SetPinValue(KEYPAD_U8_ROWS_PORT, Keypad_Au8_RowsPins[Local_u8_iterator], DIO_U8_HIGH);
        DIO_enu_SetPinDirection(KEYPAD_U8_COLUMNS_PORT, Keypad_Au8_ColsPins[Local_u8_iterator], DIO_U8_INPUT);
        DIO_enu_SetPinValue(KEYPAD_U8_COLUMNS_PORT, Keypad_Au8_ColsPins[Local_u8_iterator], DIO_U8_HIGH);
    }
    return STATE_OK;
    3006:	81 e0       	ldi	r24, 0x01	; 1
}
    3008:	0f 90       	pop	r0
    300a:	cf 91       	pop	r28
    300c:	df 91       	pop	r29
    300e:	08 95       	ret

00003010 <Keypad_enu_getKey>:

ES_t Keypad_enu_getKey(u8 *Copy_pu8_ReturnedKey)
{
    3010:	df 93       	push	r29
    3012:	cf 93       	push	r28
    3014:	cd b7       	in	r28, 0x3d	; 61
    3016:	de b7       	in	r29, 0x3e	; 62
    3018:	65 97       	sbiw	r28, 0x15	; 21
    301a:	0f b6       	in	r0, 0x3f	; 63
    301c:	f8 94       	cli
    301e:	de bf       	out	0x3e, r29	; 62
    3020:	0f be       	out	0x3f, r0	; 63
    3022:	cd bf       	out	0x3d, r28	; 61
    3024:	9d 8b       	std	Y+21, r25	; 0x15
    3026:	8c 8b       	std	Y+20, r24	; 0x14
    u8 Local_u8_errorState = STATE_OK, Local_u8_rowsCounter, Local_u8_colsCounter, Local_u8_ReturnedState = 0, Local_u8_Flag = 0;
    3028:	81 e0       	ldi	r24, 0x01	; 1
    302a:	8a 8b       	std	Y+18, r24	; 0x12
    302c:	1b 8a       	std	Y+19, r1	; 0x13
    302e:	1f 86       	std	Y+15, r1	; 0x0f
    if (Copy_pu8_ReturnedKey != NULL)
    3030:	8c 89       	ldd	r24, Y+20	; 0x14
    3032:	9d 89       	ldd	r25, Y+21	; 0x15
    3034:	00 97       	sbiw	r24, 0x00	; 0
    3036:	09 f4       	brne	.+2      	; 0x303a <Keypad_enu_getKey+0x2a>
    3038:	f0 c0       	rjmp	.+480    	; 0x321a <Keypad_enu_getKey+0x20a>
    {
        *Copy_pu8_ReturnedKey = NO_KEY_PRESSED;
    303a:	ec 89       	ldd	r30, Y+20	; 0x14
    303c:	fd 89       	ldd	r31, Y+21	; 0x15
    303e:	8f ef       	ldi	r24, 0xFF	; 255
    3040:	80 83       	st	Z, r24
        /*Activate Each Row*/
        for (Local_u8_rowsCounter = 0; Local_u8_rowsCounter < 4; Local_u8_rowsCounter++)
    3042:	19 8a       	std	Y+17, r1	; 0x11
    3044:	e5 c0       	rjmp	.+458    	; 0x3210 <Keypad_enu_getKey+0x200>
        {
            DIO_enu_SetPinValue(KEYPAD_U8_ROWS_PORT, Keypad_Au8_RowsPins[Local_u8_rowsCounter], DIO_U8_LOW);
    3046:	89 89       	ldd	r24, Y+17	; 0x11
    3048:	88 2f       	mov	r24, r24
    304a:	90 e0       	ldi	r25, 0x00	; 0
    304c:	fc 01       	movw	r30, r24
    304e:	e6 5e       	subi	r30, 0xE6	; 230
    3050:	fe 4f       	sbci	r31, 0xFE	; 254
    3052:	90 81       	ld	r25, Z
    3054:	81 e0       	ldi	r24, 0x01	; 1
    3056:	69 2f       	mov	r22, r25
    3058:	40 e0       	ldi	r20, 0x00	; 0
    305a:	0e 94 f7 1f 	call	0x3fee	; 0x3fee <DIO_enu_SetPinValue>
            /*Check Which Input Pin Has Zero*/
            for (Local_u8_colsCounter = 0; Local_u8_colsCounter < 3; Local_u8_colsCounter++)
    305e:	18 8a       	std	Y+16, r1	; 0x10
    3060:	c1 c0       	rjmp	.+386    	; 0x31e4 <Keypad_enu_getKey+0x1d4>
            {
                DIO_enu_GetPinValue(KEYPAD_U8_COLUMNS_PORT, Keypad_Au8_ColsPins[Local_u8_colsCounter], &Local_u8_ReturnedState);
    3062:	88 89       	ldd	r24, Y+16	; 0x10
    3064:	88 2f       	mov	r24, r24
    3066:	90 e0       	ldi	r25, 0x00	; 0
    3068:	fc 01       	movw	r30, r24
    306a:	e2 5e       	subi	r30, 0xE2	; 226
    306c:	fe 4f       	sbci	r31, 0xFE	; 254
    306e:	90 81       	ld	r25, Z
    3070:	9e 01       	movw	r18, r28
    3072:	2d 5e       	subi	r18, 0xED	; 237
    3074:	3f 4f       	sbci	r19, 0xFF	; 255
    3076:	83 e0       	ldi	r24, 0x03	; 3
    3078:	69 2f       	mov	r22, r25
    307a:	a9 01       	movw	r20, r18
    307c:	0e 94 21 21 	call	0x4242	; 0x4242 <DIO_enu_GetPinValue>
                if (!Local_u8_ReturnedState) // Switch is Pressed
    3080:	8b 89       	ldd	r24, Y+19	; 0x13
    3082:	88 23       	and	r24, r24
    3084:	09 f0       	breq	.+2      	; 0x3088 <Keypad_enu_getKey+0x78>
    3086:	ab c0       	rjmp	.+342    	; 0x31de <Keypad_enu_getKey+0x1ce>
    3088:	80 e0       	ldi	r24, 0x00	; 0
    308a:	90 e0       	ldi	r25, 0x00	; 0
    308c:	a0 ea       	ldi	r26, 0xA0	; 160
    308e:	b1 e4       	ldi	r27, 0x41	; 65
    3090:	8b 87       	std	Y+11, r24	; 0x0b
    3092:	9c 87       	std	Y+12, r25	; 0x0c
    3094:	ad 87       	std	Y+13, r26	; 0x0d
    3096:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3098:	6b 85       	ldd	r22, Y+11	; 0x0b
    309a:	7c 85       	ldd	r23, Y+12	; 0x0c
    309c:	8d 85       	ldd	r24, Y+13	; 0x0d
    309e:	9e 85       	ldd	r25, Y+14	; 0x0e
    30a0:	20 e0       	ldi	r18, 0x00	; 0
    30a2:	30 e0       	ldi	r19, 0x00	; 0
    30a4:	4a e7       	ldi	r20, 0x7A	; 122
    30a6:	55 e4       	ldi	r21, 0x45	; 69
    30a8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    30ac:	dc 01       	movw	r26, r24
    30ae:	cb 01       	movw	r24, r22
    30b0:	8f 83       	std	Y+7, r24	; 0x07
    30b2:	98 87       	std	Y+8, r25	; 0x08
    30b4:	a9 87       	std	Y+9, r26	; 0x09
    30b6:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    30b8:	6f 81       	ldd	r22, Y+7	; 0x07
    30ba:	78 85       	ldd	r23, Y+8	; 0x08
    30bc:	89 85       	ldd	r24, Y+9	; 0x09
    30be:	9a 85       	ldd	r25, Y+10	; 0x0a
    30c0:	20 e0       	ldi	r18, 0x00	; 0
    30c2:	30 e0       	ldi	r19, 0x00	; 0
    30c4:	40 e8       	ldi	r20, 0x80	; 128
    30c6:	5f e3       	ldi	r21, 0x3F	; 63
    30c8:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    30cc:	88 23       	and	r24, r24
    30ce:	2c f4       	brge	.+10     	; 0x30da <Keypad_enu_getKey+0xca>
		__ticks = 1;
    30d0:	81 e0       	ldi	r24, 0x01	; 1
    30d2:	90 e0       	ldi	r25, 0x00	; 0
    30d4:	9e 83       	std	Y+6, r25	; 0x06
    30d6:	8d 83       	std	Y+5, r24	; 0x05
    30d8:	3f c0       	rjmp	.+126    	; 0x3158 <Keypad_enu_getKey+0x148>
	else if (__tmp > 65535)
    30da:	6f 81       	ldd	r22, Y+7	; 0x07
    30dc:	78 85       	ldd	r23, Y+8	; 0x08
    30de:	89 85       	ldd	r24, Y+9	; 0x09
    30e0:	9a 85       	ldd	r25, Y+10	; 0x0a
    30e2:	20 e0       	ldi	r18, 0x00	; 0
    30e4:	3f ef       	ldi	r19, 0xFF	; 255
    30e6:	4f e7       	ldi	r20, 0x7F	; 127
    30e8:	57 e4       	ldi	r21, 0x47	; 71
    30ea:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    30ee:	18 16       	cp	r1, r24
    30f0:	4c f5       	brge	.+82     	; 0x3144 <Keypad_enu_getKey+0x134>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    30f2:	6b 85       	ldd	r22, Y+11	; 0x0b
    30f4:	7c 85       	ldd	r23, Y+12	; 0x0c
    30f6:	8d 85       	ldd	r24, Y+13	; 0x0d
    30f8:	9e 85       	ldd	r25, Y+14	; 0x0e
    30fa:	20 e0       	ldi	r18, 0x00	; 0
    30fc:	30 e0       	ldi	r19, 0x00	; 0
    30fe:	40 e2       	ldi	r20, 0x20	; 32
    3100:	51 e4       	ldi	r21, 0x41	; 65
    3102:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3106:	dc 01       	movw	r26, r24
    3108:	cb 01       	movw	r24, r22
    310a:	bc 01       	movw	r22, r24
    310c:	cd 01       	movw	r24, r26
    310e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3112:	dc 01       	movw	r26, r24
    3114:	cb 01       	movw	r24, r22
    3116:	9e 83       	std	Y+6, r25	; 0x06
    3118:	8d 83       	std	Y+5, r24	; 0x05
    311a:	0f c0       	rjmp	.+30     	; 0x313a <Keypad_enu_getKey+0x12a>
    311c:	80 e9       	ldi	r24, 0x90	; 144
    311e:	91 e0       	ldi	r25, 0x01	; 1
    3120:	9c 83       	std	Y+4, r25	; 0x04
    3122:	8b 83       	std	Y+3, r24	; 0x03
    3124:	8b 81       	ldd	r24, Y+3	; 0x03
    3126:	9c 81       	ldd	r25, Y+4	; 0x04
    3128:	01 97       	sbiw	r24, 0x01	; 1
    312a:	f1 f7       	brne	.-4      	; 0x3128 <Keypad_enu_getKey+0x118>
    312c:	9c 83       	std	Y+4, r25	; 0x04
    312e:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3130:	8d 81       	ldd	r24, Y+5	; 0x05
    3132:	9e 81       	ldd	r25, Y+6	; 0x06
    3134:	01 97       	sbiw	r24, 0x01	; 1
    3136:	9e 83       	std	Y+6, r25	; 0x06
    3138:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    313a:	8d 81       	ldd	r24, Y+5	; 0x05
    313c:	9e 81       	ldd	r25, Y+6	; 0x06
    313e:	00 97       	sbiw	r24, 0x00	; 0
    3140:	69 f7       	brne	.-38     	; 0x311c <Keypad_enu_getKey+0x10c>
    3142:	14 c0       	rjmp	.+40     	; 0x316c <Keypad_enu_getKey+0x15c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3144:	6f 81       	ldd	r22, Y+7	; 0x07
    3146:	78 85       	ldd	r23, Y+8	; 0x08
    3148:	89 85       	ldd	r24, Y+9	; 0x09
    314a:	9a 85       	ldd	r25, Y+10	; 0x0a
    314c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3150:	dc 01       	movw	r26, r24
    3152:	cb 01       	movw	r24, r22
    3154:	9e 83       	std	Y+6, r25	; 0x06
    3156:	8d 83       	std	Y+5, r24	; 0x05
    3158:	8d 81       	ldd	r24, Y+5	; 0x05
    315a:	9e 81       	ldd	r25, Y+6	; 0x06
    315c:	9a 83       	std	Y+2, r25	; 0x02
    315e:	89 83       	std	Y+1, r24	; 0x01
    3160:	89 81       	ldd	r24, Y+1	; 0x01
    3162:	9a 81       	ldd	r25, Y+2	; 0x02
    3164:	01 97       	sbiw	r24, 0x01	; 1
    3166:	f1 f7       	brne	.-4      	; 0x3164 <Keypad_enu_getKey+0x154>
    3168:	9a 83       	std	Y+2, r25	; 0x02
    316a:	89 83       	std	Y+1, r24	; 0x01
                {
                    // Bouncing Handling
                    _delay_ms(20);
                    DIO_enu_GetPinValue(KEYPAD_U8_COLUMNS_PORT, Keypad_Au8_ColsPins[Local_u8_colsCounter], &Local_u8_ReturnedState);
    316c:	88 89       	ldd	r24, Y+16	; 0x10
    316e:	88 2f       	mov	r24, r24
    3170:	90 e0       	ldi	r25, 0x00	; 0
    3172:	fc 01       	movw	r30, r24
    3174:	e2 5e       	subi	r30, 0xE2	; 226
    3176:	fe 4f       	sbci	r31, 0xFE	; 254
    3178:	90 81       	ld	r25, Z
    317a:	9e 01       	movw	r18, r28
    317c:	2d 5e       	subi	r18, 0xED	; 237
    317e:	3f 4f       	sbci	r19, 0xFF	; 255
    3180:	83 e0       	ldi	r24, 0x03	; 3
    3182:	69 2f       	mov	r22, r25
    3184:	a9 01       	movw	r20, r18
    3186:	0e 94 21 21 	call	0x4242	; 0x4242 <DIO_enu_GetPinValue>
    318a:	0f c0       	rjmp	.+30     	; 0x31aa <Keypad_enu_getKey+0x19a>
                    // Check if pin still low
                    while (!Local_u8_ReturnedState)
                    {
                        DIO_enu_GetPinValue(KEYPAD_U8_COLUMNS_PORT, Keypad_Au8_ColsPins[Local_u8_colsCounter], &Local_u8_ReturnedState);
    318c:	88 89       	ldd	r24, Y+16	; 0x10
    318e:	88 2f       	mov	r24, r24
    3190:	90 e0       	ldi	r25, 0x00	; 0
    3192:	fc 01       	movw	r30, r24
    3194:	e2 5e       	subi	r30, 0xE2	; 226
    3196:	fe 4f       	sbci	r31, 0xFE	; 254
    3198:	90 81       	ld	r25, Z
    319a:	9e 01       	movw	r18, r28
    319c:	2d 5e       	subi	r18, 0xED	; 237
    319e:	3f 4f       	sbci	r19, 0xFF	; 255
    31a0:	83 e0       	ldi	r24, 0x03	; 3
    31a2:	69 2f       	mov	r22, r25
    31a4:	a9 01       	movw	r20, r18
    31a6:	0e 94 21 21 	call	0x4242	; 0x4242 <DIO_enu_GetPinValue>
                {
                    // Bouncing Handling
                    _delay_ms(20);
                    DIO_enu_GetPinValue(KEYPAD_U8_COLUMNS_PORT, Keypad_Au8_ColsPins[Local_u8_colsCounter], &Local_u8_ReturnedState);
                    // Check if pin still low
                    while (!Local_u8_ReturnedState)
    31aa:	8b 89       	ldd	r24, Y+19	; 0x13
    31ac:	88 23       	and	r24, r24
    31ae:	71 f3       	breq	.-36     	; 0x318c <Keypad_enu_getKey+0x17c>
                    {
                        DIO_enu_GetPinValue(KEYPAD_U8_COLUMNS_PORT, Keypad_Au8_ColsPins[Local_u8_colsCounter], &Local_u8_ReturnedState);
                    }
                    *Copy_pu8_ReturnedKey = Keypad_Au8_Keys[Local_u8_rowsCounter][Local_u8_colsCounter];
    31b0:	89 89       	ldd	r24, Y+17	; 0x11
    31b2:	28 2f       	mov	r18, r24
    31b4:	30 e0       	ldi	r19, 0x00	; 0
    31b6:	88 89       	ldd	r24, Y+16	; 0x10
    31b8:	48 2f       	mov	r20, r24
    31ba:	50 e0       	ldi	r21, 0x00	; 0
    31bc:	c9 01       	movw	r24, r18
    31be:	88 0f       	add	r24, r24
    31c0:	99 1f       	adc	r25, r25
    31c2:	82 0f       	add	r24, r18
    31c4:	93 1f       	adc	r25, r19
    31c6:	84 0f       	add	r24, r20
    31c8:	95 1f       	adc	r25, r21
    31ca:	fc 01       	movw	r30, r24
    31cc:	e2 5f       	subi	r30, 0xF2	; 242
    31ce:	fe 4f       	sbci	r31, 0xFE	; 254
    31d0:	80 81       	ld	r24, Z
    31d2:	ec 89       	ldd	r30, Y+20	; 0x14
    31d4:	fd 89       	ldd	r31, Y+21	; 0x15
    31d6:	80 83       	st	Z, r24
                    Local_u8_Flag = 1;
    31d8:	81 e0       	ldi	r24, 0x01	; 1
    31da:	8f 87       	std	Y+15, r24	; 0x0f
    31dc:	07 c0       	rjmp	.+14     	; 0x31ec <Keypad_enu_getKey+0x1dc>
        /*Activate Each Row*/
        for (Local_u8_rowsCounter = 0; Local_u8_rowsCounter < 4; Local_u8_rowsCounter++)
        {
            DIO_enu_SetPinValue(KEYPAD_U8_ROWS_PORT, Keypad_Au8_RowsPins[Local_u8_rowsCounter], DIO_U8_LOW);
            /*Check Which Input Pin Has Zero*/
            for (Local_u8_colsCounter = 0; Local_u8_colsCounter < 3; Local_u8_colsCounter++)
    31de:	88 89       	ldd	r24, Y+16	; 0x10
    31e0:	8f 5f       	subi	r24, 0xFF	; 255
    31e2:	88 8b       	std	Y+16, r24	; 0x10
    31e4:	88 89       	ldd	r24, Y+16	; 0x10
    31e6:	83 30       	cpi	r24, 0x03	; 3
    31e8:	08 f4       	brcc	.+2      	; 0x31ec <Keypad_enu_getKey+0x1dc>
    31ea:	3b cf       	rjmp	.-394    	; 0x3062 <Keypad_enu_getKey+0x52>
                    Local_u8_Flag = 1;
                    break;
                }
            }
            // Deactivate the current Row
            DIO_enu_SetPinValue(KEYPAD_U8_ROWS_PORT, Keypad_Au8_RowsPins[Local_u8_rowsCounter], DIO_U8_HIGH);
    31ec:	89 89       	ldd	r24, Y+17	; 0x11
    31ee:	88 2f       	mov	r24, r24
    31f0:	90 e0       	ldi	r25, 0x00	; 0
    31f2:	fc 01       	movw	r30, r24
    31f4:	e6 5e       	subi	r30, 0xE6	; 230
    31f6:	fe 4f       	sbci	r31, 0xFE	; 254
    31f8:	90 81       	ld	r25, Z
    31fa:	81 e0       	ldi	r24, 0x01	; 1
    31fc:	69 2f       	mov	r22, r25
    31fe:	41 e0       	ldi	r20, 0x01	; 1
    3200:	0e 94 f7 1f 	call	0x3fee	; 0x3fee <DIO_enu_SetPinValue>
            if (Local_u8_Flag)
    3204:	8f 85       	ldd	r24, Y+15	; 0x0f
    3206:	88 23       	and	r24, r24
    3208:	49 f4       	brne	.+18     	; 0x321c <Keypad_enu_getKey+0x20c>
    u8 Local_u8_errorState = STATE_OK, Local_u8_rowsCounter, Local_u8_colsCounter, Local_u8_ReturnedState = 0, Local_u8_Flag = 0;
    if (Copy_pu8_ReturnedKey != NULL)
    {
        *Copy_pu8_ReturnedKey = NO_KEY_PRESSED;
        /*Activate Each Row*/
        for (Local_u8_rowsCounter = 0; Local_u8_rowsCounter < 4; Local_u8_rowsCounter++)
    320a:	89 89       	ldd	r24, Y+17	; 0x11
    320c:	8f 5f       	subi	r24, 0xFF	; 255
    320e:	89 8b       	std	Y+17, r24	; 0x11
    3210:	89 89       	ldd	r24, Y+17	; 0x11
    3212:	84 30       	cpi	r24, 0x04	; 4
    3214:	08 f4       	brcc	.+2      	; 0x3218 <Keypad_enu_getKey+0x208>
    3216:	17 cf       	rjmp	.-466    	; 0x3046 <Keypad_enu_getKey+0x36>
    3218:	01 c0       	rjmp	.+2      	; 0x321c <Keypad_enu_getKey+0x20c>
            }
        }
    }
    else
    {
        Local_u8_errorState = STATE_NOT_OK;
    321a:	1a 8a       	std	Y+18, r1	; 0x12
    }
    return Local_u8_errorState;
    321c:	8a 89       	ldd	r24, Y+18	; 0x12
}
    321e:	65 96       	adiw	r28, 0x15	; 21
    3220:	0f b6       	in	r0, 0x3f	; 63
    3222:	f8 94       	cli
    3224:	de bf       	out	0x3e, r29	; 62
    3226:	0f be       	out	0x3f, r0	; 63
    3228:	cd bf       	out	0x3d, r28	; 61
    322a:	cf 91       	pop	r28
    322c:	df 91       	pop	r29
    322e:	08 95       	ret

00003230 <Timers_enu_Init>:
#include"Timer_Config.h"
static u8 Timer0_u8_Prescaler , Timer1_u8_Prescaler;
/*Global Pointer To Function */
static  void(*Timers_pf_Timer0[2])(void) = {NULL};
static  void(*Timers_pf_Timer1[3])(void)= {NULL};
ES_t Timers_enu_Init(u8 Copy_u8_TimerNo,u8 Copy_u8_Mode,u8 Copy_u8_Prescaler){
    3230:	df 93       	push	r29
    3232:	cf 93       	push	r28
    3234:	cd b7       	in	r28, 0x3d	; 61
    3236:	de b7       	in	r29, 0x3e	; 62
    3238:	2a 97       	sbiw	r28, 0x0a	; 10
    323a:	0f b6       	in	r0, 0x3f	; 63
    323c:	f8 94       	cli
    323e:	de bf       	out	0x3e, r29	; 62
    3240:	0f be       	out	0x3f, r0	; 63
    3242:	cd bf       	out	0x3d, r28	; 61
    3244:	8a 83       	std	Y+2, r24	; 0x02
    3246:	6b 83       	std	Y+3, r22	; 0x03
    3248:	4c 83       	std	Y+4, r20	; 0x04
u8 Local_u8_errorState = STATE_OK;
    324a:	81 e0       	ldi	r24, 0x01	; 1
    324c:	89 83       	std	Y+1, r24	; 0x01
if((Copy_u8_TimerNo<2)&& (Copy_u8_Mode < 7)&&(Copy_u8_Prescaler<8)){
    324e:	8a 81       	ldd	r24, Y+2	; 0x02
    3250:	82 30       	cpi	r24, 0x02	; 2
    3252:	08 f0       	brcs	.+2      	; 0x3256 <Timers_enu_Init+0x26>
    3254:	c1 c1       	rjmp	.+898    	; 0x35d8 <Timers_enu_Init+0x3a8>
    3256:	8b 81       	ldd	r24, Y+3	; 0x03
    3258:	87 30       	cpi	r24, 0x07	; 7
    325a:	08 f0       	brcs	.+2      	; 0x325e <Timers_enu_Init+0x2e>
    325c:	bd c1       	rjmp	.+890    	; 0x35d8 <Timers_enu_Init+0x3a8>
    325e:	8c 81       	ldd	r24, Y+4	; 0x04
    3260:	88 30       	cpi	r24, 0x08	; 8
    3262:	08 f0       	brcs	.+2      	; 0x3266 <Timers_enu_Init+0x36>
    3264:	b9 c1       	rjmp	.+882    	; 0x35d8 <Timers_enu_Init+0x3a8>
    switch (Copy_u8_TimerNo)
    3266:	8a 81       	ldd	r24, Y+2	; 0x02
    3268:	28 2f       	mov	r18, r24
    326a:	30 e0       	ldi	r19, 0x00	; 0
    326c:	3a 87       	std	Y+10, r19	; 0x0a
    326e:	29 87       	std	Y+9, r18	; 0x09
    3270:	89 85       	ldd	r24, Y+9	; 0x09
    3272:	9a 85       	ldd	r25, Y+10	; 0x0a
    3274:	00 97       	sbiw	r24, 0x00	; 0
    3276:	39 f0       	breq	.+14     	; 0x3286 <Timers_enu_Init+0x56>
    3278:	29 85       	ldd	r18, Y+9	; 0x09
    327a:	3a 85       	ldd	r19, Y+10	; 0x0a
    327c:	21 30       	cpi	r18, 0x01	; 1
    327e:	31 05       	cpc	r19, r1
    3280:	09 f4       	brne	.+2      	; 0x3284 <Timers_enu_Init+0x54>
    3282:	cb c0       	rjmp	.+406    	; 0x341a <Timers_enu_Init+0x1ea>
    3284:	aa c1       	rjmp	.+852    	; 0x35da <Timers_enu_Init+0x3aa>
    {
    case TIMER0:
        switch (Copy_u8_Mode)
    3286:	8b 81       	ldd	r24, Y+3	; 0x03
    3288:	28 2f       	mov	r18, r24
    328a:	30 e0       	ldi	r19, 0x00	; 0
    328c:	38 87       	std	Y+8, r19	; 0x08
    328e:	2f 83       	std	Y+7, r18	; 0x07
    3290:	8f 81       	ldd	r24, Y+7	; 0x07
    3292:	98 85       	ldd	r25, Y+8	; 0x08
    3294:	83 30       	cpi	r24, 0x03	; 3
    3296:	91 05       	cpc	r25, r1
    3298:	09 f4       	brne	.+2      	; 0x329c <Timers_enu_Init+0x6c>
    329a:	40 c0       	rjmp	.+128    	; 0x331c <Timers_enu_Init+0xec>
    329c:	2f 81       	ldd	r18, Y+7	; 0x07
    329e:	38 85       	ldd	r19, Y+8	; 0x08
    32a0:	24 30       	cpi	r18, 0x04	; 4
    32a2:	31 05       	cpc	r19, r1
    32a4:	54 f4       	brge	.+20     	; 0x32ba <Timers_enu_Init+0x8a>
    32a6:	8f 81       	ldd	r24, Y+7	; 0x07
    32a8:	98 85       	ldd	r25, Y+8	; 0x08
    32aa:	00 97       	sbiw	r24, 0x00	; 0
    32ac:	c9 f0       	breq	.+50     	; 0x32e0 <Timers_enu_Init+0xb0>
    32ae:	2f 81       	ldd	r18, Y+7	; 0x07
    32b0:	38 85       	ldd	r19, Y+8	; 0x08
    32b2:	21 30       	cpi	r18, 0x01	; 1
    32b4:	31 05       	cpc	r19, r1
    32b6:	19 f1       	breq	.+70     	; 0x32fe <Timers_enu_Init+0xce>
    32b8:	a4 c0       	rjmp	.+328    	; 0x3402 <Timers_enu_Init+0x1d2>
    32ba:	8f 81       	ldd	r24, Y+7	; 0x07
    32bc:	98 85       	ldd	r25, Y+8	; 0x08
    32be:	85 30       	cpi	r24, 0x05	; 5
    32c0:	91 05       	cpc	r25, r1
    32c2:	09 f4       	brne	.+2      	; 0x32c6 <Timers_enu_Init+0x96>
    32c4:	65 c0       	rjmp	.+202    	; 0x3390 <Timers_enu_Init+0x160>
    32c6:	2f 81       	ldd	r18, Y+7	; 0x07
    32c8:	38 85       	ldd	r19, Y+8	; 0x08
    32ca:	25 30       	cpi	r18, 0x05	; 5
    32cc:	31 05       	cpc	r19, r1
    32ce:	0c f4       	brge	.+2      	; 0x32d2 <Timers_enu_Init+0xa2>
    32d0:	42 c0       	rjmp	.+132    	; 0x3356 <Timers_enu_Init+0x126>
    32d2:	8f 81       	ldd	r24, Y+7	; 0x07
    32d4:	98 85       	ldd	r25, Y+8	; 0x08
    32d6:	86 30       	cpi	r24, 0x06	; 6
    32d8:	91 05       	cpc	r25, r1
    32da:	09 f4       	brne	.+2      	; 0x32de <Timers_enu_Init+0xae>
    32dc:	76 c0       	rjmp	.+236    	; 0x33ca <Timers_enu_Init+0x19a>
    32de:	91 c0       	rjmp	.+290    	; 0x3402 <Timers_enu_Init+0x1d2>
        {
        case NORMAL_MODE:
            CLR_BIT(TIMER0_TCCR0_REG, WGM00);
    32e0:	a3 e5       	ldi	r26, 0x53	; 83
    32e2:	b0 e0       	ldi	r27, 0x00	; 0
    32e4:	e3 e5       	ldi	r30, 0x53	; 83
    32e6:	f0 e0       	ldi	r31, 0x00	; 0
    32e8:	80 81       	ld	r24, Z
    32ea:	8f 7b       	andi	r24, 0xBF	; 191
    32ec:	8c 93       	st	X, r24
            CLR_BIT(TIMER0_TCCR0_REG, WGM01);
    32ee:	a3 e5       	ldi	r26, 0x53	; 83
    32f0:	b0 e0       	ldi	r27, 0x00	; 0
    32f2:	e3 e5       	ldi	r30, 0x53	; 83
    32f4:	f0 e0       	ldi	r31, 0x00	; 0
    32f6:	80 81       	ld	r24, Z
    32f8:	87 7f       	andi	r24, 0xF7	; 247
    32fa:	8c 93       	st	X, r24
    32fc:	82 c0       	rjmp	.+260    	; 0x3402 <Timers_enu_Init+0x1d2>
        break;
        case CTC_MODE:
            CLR_BIT(TIMER0_TCCR0_REG, WGM00);
    32fe:	a3 e5       	ldi	r26, 0x53	; 83
    3300:	b0 e0       	ldi	r27, 0x00	; 0
    3302:	e3 e5       	ldi	r30, 0x53	; 83
    3304:	f0 e0       	ldi	r31, 0x00	; 0
    3306:	80 81       	ld	r24, Z
    3308:	8f 7b       	andi	r24, 0xBF	; 191
    330a:	8c 93       	st	X, r24
            SET_BIT(TIMER0_TCCR0_REG, WGM01);
    330c:	a3 e5       	ldi	r26, 0x53	; 83
    330e:	b0 e0       	ldi	r27, 0x00	; 0
    3310:	e3 e5       	ldi	r30, 0x53	; 83
    3312:	f0 e0       	ldi	r31, 0x00	; 0
    3314:	80 81       	ld	r24, Z
    3316:	88 60       	ori	r24, 0x08	; 8
    3318:	8c 93       	st	X, r24
    331a:	73 c0       	rjmp	.+230    	; 0x3402 <Timers_enu_Init+0x1d2>
        break;
        case FAST_PWM_INVERTING:
            // Fast
            SET_BIT(TIMER0_TCCR0_REG, WGM00);
    331c:	a3 e5       	ldi	r26, 0x53	; 83
    331e:	b0 e0       	ldi	r27, 0x00	; 0
    3320:	e3 e5       	ldi	r30, 0x53	; 83
    3322:	f0 e0       	ldi	r31, 0x00	; 0
    3324:	80 81       	ld	r24, Z
    3326:	80 64       	ori	r24, 0x40	; 64
    3328:	8c 93       	st	X, r24
            SET_BIT(TIMER0_TCCR0_REG, WGM01);
    332a:	a3 e5       	ldi	r26, 0x53	; 83
    332c:	b0 e0       	ldi	r27, 0x00	; 0
    332e:	e3 e5       	ldi	r30, 0x53	; 83
    3330:	f0 e0       	ldi	r31, 0x00	; 0
    3332:	80 81       	ld	r24, Z
    3334:	88 60       	ori	r24, 0x08	; 8
    3336:	8c 93       	st	X, r24
            // Inverting
            SET_BIT(TIMER0_TCCR0_REG, COM01);
    3338:	a3 e5       	ldi	r26, 0x53	; 83
    333a:	b0 e0       	ldi	r27, 0x00	; 0
    333c:	e3 e5       	ldi	r30, 0x53	; 83
    333e:	f0 e0       	ldi	r31, 0x00	; 0
    3340:	80 81       	ld	r24, Z
    3342:	80 62       	ori	r24, 0x20	; 32
    3344:	8c 93       	st	X, r24
            SET_BIT(TIMER0_TCCR0_REG, COM00);
    3346:	a3 e5       	ldi	r26, 0x53	; 83
    3348:	b0 e0       	ldi	r27, 0x00	; 0
    334a:	e3 e5       	ldi	r30, 0x53	; 83
    334c:	f0 e0       	ldi	r31, 0x00	; 0
    334e:	80 81       	ld	r24, Z
    3350:	80 61       	ori	r24, 0x10	; 16
    3352:	8c 93       	st	X, r24
    3354:	56 c0       	rjmp	.+172    	; 0x3402 <Timers_enu_Init+0x1d2>
        break;
        case FAST_PWM_NON_INVERTING:
            // Fast
            SET_BIT(TIMER0_TCCR0_REG, WGM00);
    3356:	a3 e5       	ldi	r26, 0x53	; 83
    3358:	b0 e0       	ldi	r27, 0x00	; 0
    335a:	e3 e5       	ldi	r30, 0x53	; 83
    335c:	f0 e0       	ldi	r31, 0x00	; 0
    335e:	80 81       	ld	r24, Z
    3360:	80 64       	ori	r24, 0x40	; 64
    3362:	8c 93       	st	X, r24
            SET_BIT(TIMER0_TCCR0_REG, WGM01);
    3364:	a3 e5       	ldi	r26, 0x53	; 83
    3366:	b0 e0       	ldi	r27, 0x00	; 0
    3368:	e3 e5       	ldi	r30, 0x53	; 83
    336a:	f0 e0       	ldi	r31, 0x00	; 0
    336c:	80 81       	ld	r24, Z
    336e:	88 60       	ori	r24, 0x08	; 8
    3370:	8c 93       	st	X, r24
            // Non Inverting
            SET_BIT(TIMER0_TCCR0_REG, COM01);
    3372:	a3 e5       	ldi	r26, 0x53	; 83
    3374:	b0 e0       	ldi	r27, 0x00	; 0
    3376:	e3 e5       	ldi	r30, 0x53	; 83
    3378:	f0 e0       	ldi	r31, 0x00	; 0
    337a:	80 81       	ld	r24, Z
    337c:	80 62       	ori	r24, 0x20	; 32
    337e:	8c 93       	st	X, r24
            CLR_BIT(TIMER0_TCCR0_REG, COM00);
    3380:	a3 e5       	ldi	r26, 0x53	; 83
    3382:	b0 e0       	ldi	r27, 0x00	; 0
    3384:	e3 e5       	ldi	r30, 0x53	; 83
    3386:	f0 e0       	ldi	r31, 0x00	; 0
    3388:	80 81       	ld	r24, Z
    338a:	8f 7e       	andi	r24, 0xEF	; 239
    338c:	8c 93       	st	X, r24
    338e:	39 c0       	rjmp	.+114    	; 0x3402 <Timers_enu_Init+0x1d2>
        break;
        case PHASE_CORRECT_PWM_INVERTING:
            // Phase Correct
            SET_BIT(TIMER0_TCCR0_REG, WGM00);
    3390:	a3 e5       	ldi	r26, 0x53	; 83
    3392:	b0 e0       	ldi	r27, 0x00	; 0
    3394:	e3 e5       	ldi	r30, 0x53	; 83
    3396:	f0 e0       	ldi	r31, 0x00	; 0
    3398:	80 81       	ld	r24, Z
    339a:	80 64       	ori	r24, 0x40	; 64
    339c:	8c 93       	st	X, r24
            CLR_BIT(TIMER0_TCCR0_REG, WGM01);
    339e:	a3 e5       	ldi	r26, 0x53	; 83
    33a0:	b0 e0       	ldi	r27, 0x00	; 0
    33a2:	e3 e5       	ldi	r30, 0x53	; 83
    33a4:	f0 e0       	ldi	r31, 0x00	; 0
    33a6:	80 81       	ld	r24, Z
    33a8:	87 7f       	andi	r24, 0xF7	; 247
    33aa:	8c 93       	st	X, r24
            // Inverting
            SET_BIT(TIMER0_TCCR0_REG, COM01);
    33ac:	a3 e5       	ldi	r26, 0x53	; 83
    33ae:	b0 e0       	ldi	r27, 0x00	; 0
    33b0:	e3 e5       	ldi	r30, 0x53	; 83
    33b2:	f0 e0       	ldi	r31, 0x00	; 0
    33b4:	80 81       	ld	r24, Z
    33b6:	80 62       	ori	r24, 0x20	; 32
    33b8:	8c 93       	st	X, r24
            SET_BIT(TIMER0_TCCR0_REG, COM00);
    33ba:	a3 e5       	ldi	r26, 0x53	; 83
    33bc:	b0 e0       	ldi	r27, 0x00	; 0
    33be:	e3 e5       	ldi	r30, 0x53	; 83
    33c0:	f0 e0       	ldi	r31, 0x00	; 0
    33c2:	80 81       	ld	r24, Z
    33c4:	80 61       	ori	r24, 0x10	; 16
    33c6:	8c 93       	st	X, r24
    33c8:	1c c0       	rjmp	.+56     	; 0x3402 <Timers_enu_Init+0x1d2>
        break;
        case PHASE_CORRECT_PWM_NON_INVERTING:
            // Phase Correct
            SET_BIT(TIMER0_TCCR0_REG, WGM00);
    33ca:	a3 e5       	ldi	r26, 0x53	; 83
    33cc:	b0 e0       	ldi	r27, 0x00	; 0
    33ce:	e3 e5       	ldi	r30, 0x53	; 83
    33d0:	f0 e0       	ldi	r31, 0x00	; 0
    33d2:	80 81       	ld	r24, Z
    33d4:	80 64       	ori	r24, 0x40	; 64
    33d6:	8c 93       	st	X, r24
            CLR_BIT(TIMER0_TCCR0_REG, WGM01);
    33d8:	a3 e5       	ldi	r26, 0x53	; 83
    33da:	b0 e0       	ldi	r27, 0x00	; 0
    33dc:	e3 e5       	ldi	r30, 0x53	; 83
    33de:	f0 e0       	ldi	r31, 0x00	; 0
    33e0:	80 81       	ld	r24, Z
    33e2:	87 7f       	andi	r24, 0xF7	; 247
    33e4:	8c 93       	st	X, r24
            // NON Inverting
            SET_BIT(TIMER0_TCCR0_REG, COM01);
    33e6:	a3 e5       	ldi	r26, 0x53	; 83
    33e8:	b0 e0       	ldi	r27, 0x00	; 0
    33ea:	e3 e5       	ldi	r30, 0x53	; 83
    33ec:	f0 e0       	ldi	r31, 0x00	; 0
    33ee:	80 81       	ld	r24, Z
    33f0:	80 62       	ori	r24, 0x20	; 32
    33f2:	8c 93       	st	X, r24
            CLR_BIT(TIMER0_TCCR0_REG, COM00);
    33f4:	a3 e5       	ldi	r26, 0x53	; 83
    33f6:	b0 e0       	ldi	r27, 0x00	; 0
    33f8:	e3 e5       	ldi	r30, 0x53	; 83
    33fa:	f0 e0       	ldi	r31, 0x00	; 0
    33fc:	80 81       	ld	r24, Z
    33fe:	8f 7e       	andi	r24, 0xEF	; 239
    3400:	8c 93       	st	X, r24
        break;
        }
    TIMER0_TCCR0_REG |= Copy_u8_Prescaler;
    3402:	a3 e5       	ldi	r26, 0x53	; 83
    3404:	b0 e0       	ldi	r27, 0x00	; 0
    3406:	e3 e5       	ldi	r30, 0x53	; 83
    3408:	f0 e0       	ldi	r31, 0x00	; 0
    340a:	90 81       	ld	r25, Z
    340c:	8c 81       	ldd	r24, Y+4	; 0x04
    340e:	89 2b       	or	r24, r25
    3410:	8c 93       	st	X, r24
    Timer0_u8_Prescaler = Copy_u8_Prescaler;
    3412:	8c 81       	ldd	r24, Y+4	; 0x04
    3414:	80 93 34 01 	sts	0x0134, r24
    3418:	e0 c0       	rjmp	.+448    	; 0x35da <Timers_enu_Init+0x3aa>
    break;
    case TIMER1:
        switch (Copy_u8_Mode)
    341a:	8b 81       	ldd	r24, Y+3	; 0x03
    341c:	28 2f       	mov	r18, r24
    341e:	30 e0       	ldi	r19, 0x00	; 0
    3420:	3e 83       	std	Y+6, r19	; 0x06
    3422:	2d 83       	std	Y+5, r18	; 0x05
    3424:	8d 81       	ldd	r24, Y+5	; 0x05
    3426:	9e 81       	ldd	r25, Y+6	; 0x06
    3428:	82 30       	cpi	r24, 0x02	; 2
    342a:	91 05       	cpc	r25, r1
    342c:	09 f4       	brne	.+2      	; 0x3430 <Timers_enu_Init+0x200>
    342e:	56 c0       	rjmp	.+172    	; 0x34dc <Timers_enu_Init+0x2ac>
    3430:	2d 81       	ldd	r18, Y+5	; 0x05
    3432:	3e 81       	ldd	r19, Y+6	; 0x06
    3434:	23 30       	cpi	r18, 0x03	; 3
    3436:	31 05       	cpc	r19, r1
    3438:	54 f4       	brge	.+20     	; 0x344e <Timers_enu_Init+0x21e>
    343a:	8d 81       	ldd	r24, Y+5	; 0x05
    343c:	9e 81       	ldd	r25, Y+6	; 0x06
    343e:	00 97       	sbiw	r24, 0x00	; 0
    3440:	99 f0       	breq	.+38     	; 0x3468 <Timers_enu_Init+0x238>
    3442:	2d 81       	ldd	r18, Y+5	; 0x05
    3444:	3e 81       	ldd	r19, Y+6	; 0x06
    3446:	21 30       	cpi	r18, 0x01	; 1
    3448:	31 05       	cpc	r19, r1
    344a:	59 f1       	breq	.+86     	; 0x34a2 <Timers_enu_Init+0x272>
    344c:	b9 c0       	rjmp	.+370    	; 0x35c0 <Timers_enu_Init+0x390>
    344e:	8d 81       	ldd	r24, Y+5	; 0x05
    3450:	9e 81       	ldd	r25, Y+6	; 0x06
    3452:	84 30       	cpi	r24, 0x04	; 4
    3454:	91 05       	cpc	r25, r1
    3456:	09 f4       	brne	.+2      	; 0x345a <Timers_enu_Init+0x22a>
    3458:	5e c0       	rjmp	.+188    	; 0x3516 <Timers_enu_Init+0x2e6>
    345a:	2d 81       	ldd	r18, Y+5	; 0x05
    345c:	3e 81       	ldd	r19, Y+6	; 0x06
    345e:	26 30       	cpi	r18, 0x06	; 6
    3460:	31 05       	cpc	r19, r1
    3462:	09 f4       	brne	.+2      	; 0x3466 <Timers_enu_Init+0x236>
    3464:	83 c0       	rjmp	.+262    	; 0x356c <Timers_enu_Init+0x33c>
    3466:	ac c0       	rjmp	.+344    	; 0x35c0 <Timers_enu_Init+0x390>
        {
        case NORMAL_MODE:
            CLR_BIT(TIMER1_TCCR1A_REG, WGM10);
    3468:	af e4       	ldi	r26, 0x4F	; 79
    346a:	b0 e0       	ldi	r27, 0x00	; 0
    346c:	ef e4       	ldi	r30, 0x4F	; 79
    346e:	f0 e0       	ldi	r31, 0x00	; 0
    3470:	80 81       	ld	r24, Z
    3472:	8e 7f       	andi	r24, 0xFE	; 254
    3474:	8c 93       	st	X, r24
            CLR_BIT(TIMER1_TCCR1A_REG, WGM11);
    3476:	af e4       	ldi	r26, 0x4F	; 79
    3478:	b0 e0       	ldi	r27, 0x00	; 0
    347a:	ef e4       	ldi	r30, 0x4F	; 79
    347c:	f0 e0       	ldi	r31, 0x00	; 0
    347e:	80 81       	ld	r24, Z
    3480:	8d 7f       	andi	r24, 0xFD	; 253
    3482:	8c 93       	st	X, r24
            CLR_BIT(TIMER1_TCCR1B_REG, WGM12);
    3484:	ae e4       	ldi	r26, 0x4E	; 78
    3486:	b0 e0       	ldi	r27, 0x00	; 0
    3488:	ee e4       	ldi	r30, 0x4E	; 78
    348a:	f0 e0       	ldi	r31, 0x00	; 0
    348c:	80 81       	ld	r24, Z
    348e:	87 7f       	andi	r24, 0xF7	; 247
    3490:	8c 93       	st	X, r24
            CLR_BIT(TIMER1_TCCR1B_REG, WGM13);
    3492:	ae e4       	ldi	r26, 0x4E	; 78
    3494:	b0 e0       	ldi	r27, 0x00	; 0
    3496:	ee e4       	ldi	r30, 0x4E	; 78
    3498:	f0 e0       	ldi	r31, 0x00	; 0
    349a:	80 81       	ld	r24, Z
    349c:	8f 7e       	andi	r24, 0xEF	; 239
    349e:	8c 93       	st	X, r24
    34a0:	8f c0       	rjmp	.+286    	; 0x35c0 <Timers_enu_Init+0x390>
        break;
        case CTC_MODE_A:
            CLR_BIT(TIMER1_TCCR1A_REG, WGM10);
    34a2:	af e4       	ldi	r26, 0x4F	; 79
    34a4:	b0 e0       	ldi	r27, 0x00	; 0
    34a6:	ef e4       	ldi	r30, 0x4F	; 79
    34a8:	f0 e0       	ldi	r31, 0x00	; 0
    34aa:	80 81       	ld	r24, Z
    34ac:	8e 7f       	andi	r24, 0xFE	; 254
    34ae:	8c 93       	st	X, r24
            CLR_BIT(TIMER1_TCCR1A_REG, WGM11);
    34b0:	af e4       	ldi	r26, 0x4F	; 79
    34b2:	b0 e0       	ldi	r27, 0x00	; 0
    34b4:	ef e4       	ldi	r30, 0x4F	; 79
    34b6:	f0 e0       	ldi	r31, 0x00	; 0
    34b8:	80 81       	ld	r24, Z
    34ba:	8d 7f       	andi	r24, 0xFD	; 253
    34bc:	8c 93       	st	X, r24
            SET_BIT(TIMER1_TCCR1B_REG, WGM12);
    34be:	ae e4       	ldi	r26, 0x4E	; 78
    34c0:	b0 e0       	ldi	r27, 0x00	; 0
    34c2:	ee e4       	ldi	r30, 0x4E	; 78
    34c4:	f0 e0       	ldi	r31, 0x00	; 0
    34c6:	80 81       	ld	r24, Z
    34c8:	88 60       	ori	r24, 0x08	; 8
    34ca:	8c 93       	st	X, r24
            CLR_BIT(TIMER1_TCCR1B_REG, WGM13);
    34cc:	ae e4       	ldi	r26, 0x4E	; 78
    34ce:	b0 e0       	ldi	r27, 0x00	; 0
    34d0:	ee e4       	ldi	r30, 0x4E	; 78
    34d2:	f0 e0       	ldi	r31, 0x00	; 0
    34d4:	80 81       	ld	r24, Z
    34d6:	8f 7e       	andi	r24, 0xEF	; 239
    34d8:	8c 93       	st	X, r24
    34da:	72 c0       	rjmp	.+228    	; 0x35c0 <Timers_enu_Init+0x390>
        break;
        case CTC_MODE_B:
            CLR_BIT(TIMER1_TCCR1A_REG, WGM10);
    34dc:	af e4       	ldi	r26, 0x4F	; 79
    34de:	b0 e0       	ldi	r27, 0x00	; 0
    34e0:	ef e4       	ldi	r30, 0x4F	; 79
    34e2:	f0 e0       	ldi	r31, 0x00	; 0
    34e4:	80 81       	ld	r24, Z
    34e6:	8e 7f       	andi	r24, 0xFE	; 254
    34e8:	8c 93       	st	X, r24
            CLR_BIT(TIMER1_TCCR1A_REG, WGM11);
    34ea:	af e4       	ldi	r26, 0x4F	; 79
    34ec:	b0 e0       	ldi	r27, 0x00	; 0
    34ee:	ef e4       	ldi	r30, 0x4F	; 79
    34f0:	f0 e0       	ldi	r31, 0x00	; 0
    34f2:	80 81       	ld	r24, Z
    34f4:	8d 7f       	andi	r24, 0xFD	; 253
    34f6:	8c 93       	st	X, r24
            CLR_BIT(TIMER1_TCCR1B_REG, WGM12);
    34f8:	ae e4       	ldi	r26, 0x4E	; 78
    34fa:	b0 e0       	ldi	r27, 0x00	; 0
    34fc:	ee e4       	ldi	r30, 0x4E	; 78
    34fe:	f0 e0       	ldi	r31, 0x00	; 0
    3500:	80 81       	ld	r24, Z
    3502:	87 7f       	andi	r24, 0xF7	; 247
    3504:	8c 93       	st	X, r24
            CLR_BIT(TIMER1_TCCR1B_REG, WGM13);
    3506:	ae e4       	ldi	r26, 0x4E	; 78
    3508:	b0 e0       	ldi	r27, 0x00	; 0
    350a:	ee e4       	ldi	r30, 0x4E	; 78
    350c:	f0 e0       	ldi	r31, 0x00	; 0
    350e:	80 81       	ld	r24, Z
    3510:	8f 7e       	andi	r24, 0xEF	; 239
    3512:	8c 93       	st	X, r24
    3514:	55 c0       	rjmp	.+170    	; 0x35c0 <Timers_enu_Init+0x390>
        break;
        case FAST_PWM_NON_INVERTING:
            CLR_BIT(TIMER1_TCCR1A_REG, WGM10);
    3516:	af e4       	ldi	r26, 0x4F	; 79
    3518:	b0 e0       	ldi	r27, 0x00	; 0
    351a:	ef e4       	ldi	r30, 0x4F	; 79
    351c:	f0 e0       	ldi	r31, 0x00	; 0
    351e:	80 81       	ld	r24, Z
    3520:	8e 7f       	andi	r24, 0xFE	; 254
    3522:	8c 93       	st	X, r24
            SET_BIT(TIMER1_TCCR1A_REG, WGM11);
    3524:	af e4       	ldi	r26, 0x4F	; 79
    3526:	b0 e0       	ldi	r27, 0x00	; 0
    3528:	ef e4       	ldi	r30, 0x4F	; 79
    352a:	f0 e0       	ldi	r31, 0x00	; 0
    352c:	80 81       	ld	r24, Z
    352e:	82 60       	ori	r24, 0x02	; 2
    3530:	8c 93       	st	X, r24
            SET_BIT(TIMER1_TCCR1B_REG, WGM12);
    3532:	ae e4       	ldi	r26, 0x4E	; 78
    3534:	b0 e0       	ldi	r27, 0x00	; 0
    3536:	ee e4       	ldi	r30, 0x4E	; 78
    3538:	f0 e0       	ldi	r31, 0x00	; 0
    353a:	80 81       	ld	r24, Z
    353c:	88 60       	ori	r24, 0x08	; 8
    353e:	8c 93       	st	X, r24
            SET_BIT(TIMER1_TCCR1B_REG, WGM13);
    3540:	ae e4       	ldi	r26, 0x4E	; 78
    3542:	b0 e0       	ldi	r27, 0x00	; 0
    3544:	ee e4       	ldi	r30, 0x4E	; 78
    3546:	f0 e0       	ldi	r31, 0x00	; 0
    3548:	80 81       	ld	r24, Z
    354a:	80 61       	ori	r24, 0x10	; 16
    354c:	8c 93       	st	X, r24
            SET_BIT(TIMER1_TCCR1A_REG, COM1A1);
    354e:	af e4       	ldi	r26, 0x4F	; 79
    3550:	b0 e0       	ldi	r27, 0x00	; 0
    3552:	ef e4       	ldi	r30, 0x4F	; 79
    3554:	f0 e0       	ldi	r31, 0x00	; 0
    3556:	80 81       	ld	r24, Z
    3558:	80 68       	ori	r24, 0x80	; 128
    355a:	8c 93       	st	X, r24
            CLR_BIT(TIMER1_TCCR1A_REG, COM1A0);
    355c:	af e4       	ldi	r26, 0x4F	; 79
    355e:	b0 e0       	ldi	r27, 0x00	; 0
    3560:	ef e4       	ldi	r30, 0x4F	; 79
    3562:	f0 e0       	ldi	r31, 0x00	; 0
    3564:	80 81       	ld	r24, Z
    3566:	8f 7b       	andi	r24, 0xBF	; 191
    3568:	8c 93       	st	X, r24
    356a:	2a c0       	rjmp	.+84     	; 0x35c0 <Timers_enu_Init+0x390>
        break;
        case PHASE_CORRECT_PWM_NON_INVERTING:
            SET_BIT(TIMER1_TCCR1A_REG, WGM10);
    356c:	af e4       	ldi	r26, 0x4F	; 79
    356e:	b0 e0       	ldi	r27, 0x00	; 0
    3570:	ef e4       	ldi	r30, 0x4F	; 79
    3572:	f0 e0       	ldi	r31, 0x00	; 0
    3574:	80 81       	ld	r24, Z
    3576:	81 60       	ori	r24, 0x01	; 1
    3578:	8c 93       	st	X, r24
            SET_BIT(TIMER1_TCCR1A_REG, WGM11);
    357a:	af e4       	ldi	r26, 0x4F	; 79
    357c:	b0 e0       	ldi	r27, 0x00	; 0
    357e:	ef e4       	ldi	r30, 0x4F	; 79
    3580:	f0 e0       	ldi	r31, 0x00	; 0
    3582:	80 81       	ld	r24, Z
    3584:	82 60       	ori	r24, 0x02	; 2
    3586:	8c 93       	st	X, r24
            CLR_BIT(TIMER1_TCCR1B_REG, WGM12);
    3588:	ae e4       	ldi	r26, 0x4E	; 78
    358a:	b0 e0       	ldi	r27, 0x00	; 0
    358c:	ee e4       	ldi	r30, 0x4E	; 78
    358e:	f0 e0       	ldi	r31, 0x00	; 0
    3590:	80 81       	ld	r24, Z
    3592:	87 7f       	andi	r24, 0xF7	; 247
    3594:	8c 93       	st	X, r24
            SET_BIT(TIMER1_TCCR1B_REG, WGM13);
    3596:	ae e4       	ldi	r26, 0x4E	; 78
    3598:	b0 e0       	ldi	r27, 0x00	; 0
    359a:	ee e4       	ldi	r30, 0x4E	; 78
    359c:	f0 e0       	ldi	r31, 0x00	; 0
    359e:	80 81       	ld	r24, Z
    35a0:	80 61       	ori	r24, 0x10	; 16
    35a2:	8c 93       	st	X, r24
            SET_BIT(TIMER1_TCCR1A_REG, COM1A1);
    35a4:	af e4       	ldi	r26, 0x4F	; 79
    35a6:	b0 e0       	ldi	r27, 0x00	; 0
    35a8:	ef e4       	ldi	r30, 0x4F	; 79
    35aa:	f0 e0       	ldi	r31, 0x00	; 0
    35ac:	80 81       	ld	r24, Z
    35ae:	80 68       	ori	r24, 0x80	; 128
    35b0:	8c 93       	st	X, r24
            CLR_BIT(TIMER1_TCCR1A_REG, COM1A0);
    35b2:	af e4       	ldi	r26, 0x4F	; 79
    35b4:	b0 e0       	ldi	r27, 0x00	; 0
    35b6:	ef e4       	ldi	r30, 0x4F	; 79
    35b8:	f0 e0       	ldi	r31, 0x00	; 0
    35ba:	80 81       	ld	r24, Z
    35bc:	8f 7b       	andi	r24, 0xBF	; 191
    35be:	8c 93       	st	X, r24
        break;
        }
    TIMER1_TCCR1B_REG |= Copy_u8_Prescaler;
    35c0:	ae e4       	ldi	r26, 0x4E	; 78
    35c2:	b0 e0       	ldi	r27, 0x00	; 0
    35c4:	ee e4       	ldi	r30, 0x4E	; 78
    35c6:	f0 e0       	ldi	r31, 0x00	; 0
    35c8:	90 81       	ld	r25, Z
    35ca:	8c 81       	ldd	r24, Y+4	; 0x04
    35cc:	89 2b       	or	r24, r25
    35ce:	8c 93       	st	X, r24
    Timer1_u8_Prescaler = Copy_u8_Prescaler;
    35d0:	8c 81       	ldd	r24, Y+4	; 0x04
    35d2:	80 93 35 01 	sts	0x0135, r24
    35d6:	01 c0       	rjmp	.+2      	; 0x35da <Timers_enu_Init+0x3aa>
    break;
    }
}else{
    Local_u8_errorState = STATE_NOT_OK;
    35d8:	19 82       	std	Y+1, r1	; 0x01
}
return Local_u8_errorState;
    35da:	89 81       	ldd	r24, Y+1	; 0x01
}
    35dc:	2a 96       	adiw	r28, 0x0a	; 10
    35de:	0f b6       	in	r0, 0x3f	; 63
    35e0:	f8 94       	cli
    35e2:	de bf       	out	0x3e, r29	; 62
    35e4:	0f be       	out	0x3f, r0	; 63
    35e6:	cd bf       	out	0x3d, r28	; 61
    35e8:	cf 91       	pop	r28
    35ea:	df 91       	pop	r29
    35ec:	08 95       	ret

000035ee <Timers_enu_SetCallBack>:
ES_t Timers_enu_SetCallBack(u8 Copy_u8_TimerNo,void(*Copy_pf)(void),u8 Copy_u8_Mode){
    35ee:	df 93       	push	r29
    35f0:	cf 93       	push	r28
    35f2:	cd b7       	in	r28, 0x3d	; 61
    35f4:	de b7       	in	r29, 0x3e	; 62
    35f6:	2d 97       	sbiw	r28, 0x0d	; 13
    35f8:	0f b6       	in	r0, 0x3f	; 63
    35fa:	f8 94       	cli
    35fc:	de bf       	out	0x3e, r29	; 62
    35fe:	0f be       	out	0x3f, r0	; 63
    3600:	cd bf       	out	0x3d, r28	; 61
    3602:	8a 83       	std	Y+2, r24	; 0x02
    3604:	7c 83       	std	Y+4, r23	; 0x04
    3606:	6b 83       	std	Y+3, r22	; 0x03
    3608:	4d 83       	std	Y+5, r20	; 0x05
    u8 Local_u8_errorState = STATE_OK;
    360a:	81 e0       	ldi	r24, 0x01	; 1
    360c:	89 83       	std	Y+1, r24	; 0x01
    if((Copy_u8_TimerNo<2)&(Copy_pf != NULL) && (Copy_u8_Mode<=2)){
    360e:	1d 86       	std	Y+13, r1	; 0x0d
    3610:	8a 81       	ldd	r24, Y+2	; 0x02
    3612:	82 30       	cpi	r24, 0x02	; 2
    3614:	10 f4       	brcc	.+4      	; 0x361a <Timers_enu_SetCallBack+0x2c>
    3616:	21 e0       	ldi	r18, 0x01	; 1
    3618:	2d 87       	std	Y+13, r18	; 0x0d
    361a:	1c 86       	std	Y+12, r1	; 0x0c
    361c:	8b 81       	ldd	r24, Y+3	; 0x03
    361e:	9c 81       	ldd	r25, Y+4	; 0x04
    3620:	00 97       	sbiw	r24, 0x00	; 0
    3622:	11 f0       	breq	.+4      	; 0x3628 <Timers_enu_SetCallBack+0x3a>
    3624:	31 e0       	ldi	r19, 0x01	; 1
    3626:	3c 87       	std	Y+12, r19	; 0x0c
    3628:	8d 85       	ldd	r24, Y+13	; 0x0d
    362a:	9c 85       	ldd	r25, Y+12	; 0x0c
    362c:	89 23       	and	r24, r25
    362e:	91 e0       	ldi	r25, 0x01	; 1
    3630:	89 27       	eor	r24, r25
    3632:	88 23       	and	r24, r24
    3634:	09 f0       	breq	.+2      	; 0x3638 <Timers_enu_SetCallBack+0x4a>
    3636:	75 c0       	rjmp	.+234    	; 0x3722 <Timers_enu_SetCallBack+0x134>
    3638:	8d 81       	ldd	r24, Y+5	; 0x05
    363a:	83 30       	cpi	r24, 0x03	; 3
    363c:	08 f0       	brcs	.+2      	; 0x3640 <Timers_enu_SetCallBack+0x52>
    363e:	71 c0       	rjmp	.+226    	; 0x3722 <Timers_enu_SetCallBack+0x134>
        switch (Copy_u8_TimerNo)
    3640:	8a 81       	ldd	r24, Y+2	; 0x02
    3642:	28 2f       	mov	r18, r24
    3644:	30 e0       	ldi	r19, 0x00	; 0
    3646:	3b 87       	std	Y+11, r19	; 0x0b
    3648:	2a 87       	std	Y+10, r18	; 0x0a
    364a:	8a 85       	ldd	r24, Y+10	; 0x0a
    364c:	9b 85       	ldd	r25, Y+11	; 0x0b
    364e:	00 97       	sbiw	r24, 0x00	; 0
    3650:	31 f0       	breq	.+12     	; 0x365e <Timers_enu_SetCallBack+0x70>
    3652:	2a 85       	ldd	r18, Y+10	; 0x0a
    3654:	3b 85       	ldd	r19, Y+11	; 0x0b
    3656:	21 30       	cpi	r18, 0x01	; 1
    3658:	31 05       	cpc	r19, r1
    365a:	61 f1       	breq	.+88     	; 0x36b4 <Timers_enu_SetCallBack+0xc6>
    365c:	63 c0       	rjmp	.+198    	; 0x3724 <Timers_enu_SetCallBack+0x136>
        {
        case TIMER0:
        switch (Copy_u8_Mode)
    365e:	8d 81       	ldd	r24, Y+5	; 0x05
    3660:	28 2f       	mov	r18, r24
    3662:	30 e0       	ldi	r19, 0x00	; 0
    3664:	39 87       	std	Y+9, r19	; 0x09
    3666:	28 87       	std	Y+8, r18	; 0x08
    3668:	88 85       	ldd	r24, Y+8	; 0x08
    366a:	99 85       	ldd	r25, Y+9	; 0x09
    366c:	00 97       	sbiw	r24, 0x00	; 0
    366e:	31 f0       	breq	.+12     	; 0x367c <Timers_enu_SetCallBack+0x8e>
    3670:	28 85       	ldd	r18, Y+8	; 0x08
    3672:	39 85       	ldd	r19, Y+9	; 0x09
    3674:	21 30       	cpi	r18, 0x01	; 1
    3676:	31 05       	cpc	r19, r1
    3678:	49 f0       	breq	.+18     	; 0x368c <Timers_enu_SetCallBack+0x9e>
    367a:	0f c0       	rjmp	.+30     	; 0x369a <Timers_enu_SetCallBack+0xac>
        {
        // Enable Interrupts
        case NORMAL_MODE:SET_BIT(TIMER_TIMSK_REG, TOIE0);break;
    367c:	a9 e5       	ldi	r26, 0x59	; 89
    367e:	b0 e0       	ldi	r27, 0x00	; 0
    3680:	e9 e5       	ldi	r30, 0x59	; 89
    3682:	f0 e0       	ldi	r31, 0x00	; 0
    3684:	80 81       	ld	r24, Z
    3686:	81 60       	ori	r24, 0x01	; 1
    3688:	8c 93       	st	X, r24
    368a:	07 c0       	rjmp	.+14     	; 0x369a <Timers_enu_SetCallBack+0xac>
        case CTC_MODE:SET_BIT(TIMER_TIMSK_REG, OCIE0);break;
    368c:	a9 e5       	ldi	r26, 0x59	; 89
    368e:	b0 e0       	ldi	r27, 0x00	; 0
    3690:	e9 e5       	ldi	r30, 0x59	; 89
    3692:	f0 e0       	ldi	r31, 0x00	; 0
    3694:	80 81       	ld	r24, Z
    3696:	82 60       	ori	r24, 0x02	; 2
    3698:	8c 93       	st	X, r24
        }
        Timers_pf_Timer0[Copy_u8_Mode] = Copy_pf;
    369a:	8d 81       	ldd	r24, Y+5	; 0x05
    369c:	88 2f       	mov	r24, r24
    369e:	90 e0       	ldi	r25, 0x00	; 0
    36a0:	88 0f       	add	r24, r24
    36a2:	99 1f       	adc	r25, r25
    36a4:	fc 01       	movw	r30, r24
    36a6:	e6 5d       	subi	r30, 0xD6	; 214
    36a8:	fe 4f       	sbci	r31, 0xFE	; 254
    36aa:	8b 81       	ldd	r24, Y+3	; 0x03
    36ac:	9c 81       	ldd	r25, Y+4	; 0x04
    36ae:	91 83       	std	Z+1, r25	; 0x01
    36b0:	80 83       	st	Z, r24
    36b2:	38 c0       	rjmp	.+112    	; 0x3724 <Timers_enu_SetCallBack+0x136>
        break;
        case TIMER1:
        switch (Copy_u8_Mode)
    36b4:	8d 81       	ldd	r24, Y+5	; 0x05
    36b6:	28 2f       	mov	r18, r24
    36b8:	30 e0       	ldi	r19, 0x00	; 0
    36ba:	3f 83       	std	Y+7, r19	; 0x07
    36bc:	2e 83       	std	Y+6, r18	; 0x06
    36be:	8e 81       	ldd	r24, Y+6	; 0x06
    36c0:	9f 81       	ldd	r25, Y+7	; 0x07
    36c2:	81 30       	cpi	r24, 0x01	; 1
    36c4:	91 05       	cpc	r25, r1
    36c6:	89 f0       	breq	.+34     	; 0x36ea <Timers_enu_SetCallBack+0xfc>
    36c8:	2e 81       	ldd	r18, Y+6	; 0x06
    36ca:	3f 81       	ldd	r19, Y+7	; 0x07
    36cc:	22 30       	cpi	r18, 0x02	; 2
    36ce:	31 05       	cpc	r19, r1
    36d0:	a1 f0       	breq	.+40     	; 0x36fa <Timers_enu_SetCallBack+0x10c>
    36d2:	8e 81       	ldd	r24, Y+6	; 0x06
    36d4:	9f 81       	ldd	r25, Y+7	; 0x07
    36d6:	00 97       	sbiw	r24, 0x00	; 0
    36d8:	b9 f4       	brne	.+46     	; 0x3708 <Timers_enu_SetCallBack+0x11a>
        {
        // Enable Interrupts
        case NORMAL_MODE:SET_BIT(TIMER_TIMSK_REG, TOIE1);break;
    36da:	a9 e5       	ldi	r26, 0x59	; 89
    36dc:	b0 e0       	ldi	r27, 0x00	; 0
    36de:	e9 e5       	ldi	r30, 0x59	; 89
    36e0:	f0 e0       	ldi	r31, 0x00	; 0
    36e2:	80 81       	ld	r24, Z
    36e4:	84 60       	ori	r24, 0x04	; 4
    36e6:	8c 93       	st	X, r24
    36e8:	0f c0       	rjmp	.+30     	; 0x3708 <Timers_enu_SetCallBack+0x11a>
        case CTC_MODE_A:SET_BIT(TIMER_TIMSK_REG, OCIE1A);break;
    36ea:	a9 e5       	ldi	r26, 0x59	; 89
    36ec:	b0 e0       	ldi	r27, 0x00	; 0
    36ee:	e9 e5       	ldi	r30, 0x59	; 89
    36f0:	f0 e0       	ldi	r31, 0x00	; 0
    36f2:	80 81       	ld	r24, Z
    36f4:	80 61       	ori	r24, 0x10	; 16
    36f6:	8c 93       	st	X, r24
    36f8:	07 c0       	rjmp	.+14     	; 0x3708 <Timers_enu_SetCallBack+0x11a>
        case CTC_MODE_B:SET_BIT(TIMER_TIMSK_REG, OCIE1B);break;
    36fa:	a9 e5       	ldi	r26, 0x59	; 89
    36fc:	b0 e0       	ldi	r27, 0x00	; 0
    36fe:	e9 e5       	ldi	r30, 0x59	; 89
    3700:	f0 e0       	ldi	r31, 0x00	; 0
    3702:	80 81       	ld	r24, Z
    3704:	88 60       	ori	r24, 0x08	; 8
    3706:	8c 93       	st	X, r24
        }
        Timers_pf_Timer1[Copy_u8_Mode] = Copy_pf;
    3708:	8d 81       	ldd	r24, Y+5	; 0x05
    370a:	88 2f       	mov	r24, r24
    370c:	90 e0       	ldi	r25, 0x00	; 0
    370e:	88 0f       	add	r24, r24
    3710:	99 1f       	adc	r25, r25
    3712:	fc 01       	movw	r30, r24
    3714:	e2 5d       	subi	r30, 0xD2	; 210
    3716:	fe 4f       	sbci	r31, 0xFE	; 254
    3718:	8b 81       	ldd	r24, Y+3	; 0x03
    371a:	9c 81       	ldd	r25, Y+4	; 0x04
    371c:	91 83       	std	Z+1, r25	; 0x01
    371e:	80 83       	st	Z, r24
    3720:	01 c0       	rjmp	.+2      	; 0x3724 <Timers_enu_SetCallBack+0x136>
        break;
        }
        
    }else{
        Local_u8_errorState = STATE_NOT_OK;
    3722:	19 82       	std	Y+1, r1	; 0x01
    }
    return Local_u8_errorState;
    3724:	89 81       	ldd	r24, Y+1	; 0x01
}
    3726:	2d 96       	adiw	r28, 0x0d	; 13
    3728:	0f b6       	in	r0, 0x3f	; 63
    372a:	f8 94       	cli
    372c:	de bf       	out	0x3e, r29	; 62
    372e:	0f be       	out	0x3f, r0	; 63
    3730:	cd bf       	out	0x3d, r28	; 61
    3732:	cf 91       	pop	r28
    3734:	df 91       	pop	r29
    3736:	08 95       	ret

00003738 <Timers_enu_SetCLKSource>:
ES_t Timers_enu_SetCLKSource(u8 Copy_u8_TimerNo,u8 Copy_u8_CLK_Source){
    3738:	df 93       	push	r29
    373a:	cf 93       	push	r28
    373c:	00 d0       	rcall	.+0      	; 0x373e <Timers_enu_SetCLKSource+0x6>
    373e:	00 d0       	rcall	.+0      	; 0x3740 <Timers_enu_SetCLKSource+0x8>
    3740:	0f 92       	push	r0
    3742:	cd b7       	in	r28, 0x3d	; 61
    3744:	de b7       	in	r29, 0x3e	; 62
    3746:	8a 83       	std	Y+2, r24	; 0x02
    3748:	6b 83       	std	Y+3, r22	; 0x03
    u8 Local_u8_errorState = STATE_OK;
    374a:	81 e0       	ldi	r24, 0x01	; 1
    374c:	89 83       	std	Y+1, r24	; 0x01
    if((Copy_u8_CLK_Source < 8) && (Copy_u8_TimerNo < 2)){
    374e:	8b 81       	ldd	r24, Y+3	; 0x03
    3750:	88 30       	cpi	r24, 0x08	; 8
    3752:	c0 f5       	brcc	.+112    	; 0x37c4 <Timers_enu_SetCLKSource+0x8c>
    3754:	8a 81       	ldd	r24, Y+2	; 0x02
    3756:	82 30       	cpi	r24, 0x02	; 2
    3758:	a8 f5       	brcc	.+106    	; 0x37c4 <Timers_enu_SetCLKSource+0x8c>
        switch (Copy_u8_TimerNo)
    375a:	8a 81       	ldd	r24, Y+2	; 0x02
    375c:	28 2f       	mov	r18, r24
    375e:	30 e0       	ldi	r19, 0x00	; 0
    3760:	3d 83       	std	Y+5, r19	; 0x05
    3762:	2c 83       	std	Y+4, r18	; 0x04
    3764:	8c 81       	ldd	r24, Y+4	; 0x04
    3766:	9d 81       	ldd	r25, Y+5	; 0x05
    3768:	00 97       	sbiw	r24, 0x00	; 0
    376a:	31 f0       	breq	.+12     	; 0x3778 <Timers_enu_SetCLKSource+0x40>
    376c:	2c 81       	ldd	r18, Y+4	; 0x04
    376e:	3d 81       	ldd	r19, Y+5	; 0x05
    3770:	21 30       	cpi	r18, 0x01	; 1
    3772:	31 05       	cpc	r19, r1
    3774:	a1 f0       	breq	.+40     	; 0x379e <Timers_enu_SetCLKSource+0x66>
    3776:	27 c0       	rjmp	.+78     	; 0x37c6 <Timers_enu_SetCLKSource+0x8e>
        {
        case TIMER0:
            // Clear Old Value of Prescaler
            TIMER0_TCCR0_REG &= CLEAR_CLK_SOURCE;
    3778:	a3 e5       	ldi	r26, 0x53	; 83
    377a:	b0 e0       	ldi	r27, 0x00	; 0
    377c:	e3 e5       	ldi	r30, 0x53	; 83
    377e:	f0 e0       	ldi	r31, 0x00	; 0
    3780:	80 81       	ld	r24, Z
    3782:	88 7f       	andi	r24, 0xF8	; 248
    3784:	8c 93       	st	X, r24
            TIMER0_TCCR0_REG |= Copy_u8_CLK_Source;
    3786:	a3 e5       	ldi	r26, 0x53	; 83
    3788:	b0 e0       	ldi	r27, 0x00	; 0
    378a:	e3 e5       	ldi	r30, 0x53	; 83
    378c:	f0 e0       	ldi	r31, 0x00	; 0
    378e:	90 81       	ld	r25, Z
    3790:	8b 81       	ldd	r24, Y+3	; 0x03
    3792:	89 2b       	or	r24, r25
    3794:	8c 93       	st	X, r24
            Timer0_u8_Prescaler = Copy_u8_CLK_Source;
    3796:	8b 81       	ldd	r24, Y+3	; 0x03
    3798:	80 93 34 01 	sts	0x0134, r24
    379c:	14 c0       	rjmp	.+40     	; 0x37c6 <Timers_enu_SetCLKSource+0x8e>
        break;
        case TIMER1:
            // Clear Old Value of Prescaler
            TIMER1_TCCR1B_REG &= CLEAR_CLK_SOURCE;
    379e:	ae e4       	ldi	r26, 0x4E	; 78
    37a0:	b0 e0       	ldi	r27, 0x00	; 0
    37a2:	ee e4       	ldi	r30, 0x4E	; 78
    37a4:	f0 e0       	ldi	r31, 0x00	; 0
    37a6:	80 81       	ld	r24, Z
    37a8:	88 7f       	andi	r24, 0xF8	; 248
    37aa:	8c 93       	st	X, r24
            TIMER1_TCCR1B_REG |= Copy_u8_CLK_Source;
    37ac:	ae e4       	ldi	r26, 0x4E	; 78
    37ae:	b0 e0       	ldi	r27, 0x00	; 0
    37b0:	ee e4       	ldi	r30, 0x4E	; 78
    37b2:	f0 e0       	ldi	r31, 0x00	; 0
    37b4:	90 81       	ld	r25, Z
    37b6:	8b 81       	ldd	r24, Y+3	; 0x03
    37b8:	89 2b       	or	r24, r25
    37ba:	8c 93       	st	X, r24
            Timer1_u8_Prescaler = Copy_u8_CLK_Source;
    37bc:	8b 81       	ldd	r24, Y+3	; 0x03
    37be:	80 93 35 01 	sts	0x0135, r24
    37c2:	01 c0       	rjmp	.+2      	; 0x37c6 <Timers_enu_SetCLKSource+0x8e>
        break;
        }
    }else{
        Local_u8_errorState = STATE_NOT_OK;
    37c4:	19 82       	std	Y+1, r1	; 0x01
    }
    return Local_u8_errorState;
    37c6:	89 81       	ldd	r24, Y+1	; 0x01
}
    37c8:	0f 90       	pop	r0
    37ca:	0f 90       	pop	r0
    37cc:	0f 90       	pop	r0
    37ce:	0f 90       	pop	r0
    37d0:	0f 90       	pop	r0
    37d2:	cf 91       	pop	r28
    37d4:	df 91       	pop	r29
    37d6:	08 95       	ret

000037d8 <Timers_enu_delay_ms>:
ES_t Timers_enu_delay_ms(u32 Copy_u32_Time)
{
    37d8:	ef 92       	push	r14
    37da:	ff 92       	push	r15
    37dc:	0f 93       	push	r16
    37de:	1f 93       	push	r17
    37e0:	df 93       	push	r29
    37e2:	cf 93       	push	r28
    37e4:	cd b7       	in	r28, 0x3d	; 61
    37e6:	de b7       	in	r29, 0x3e	; 62
    37e8:	2d 97       	sbiw	r28, 0x0d	; 13
    37ea:	0f b6       	in	r0, 0x3f	; 63
    37ec:	f8 94       	cli
    37ee:	de bf       	out	0x3e, r29	; 62
    37f0:	0f be       	out	0x3f, r0	; 63
    37f2:	cd bf       	out	0x3d, r28	; 61
    37f4:	69 87       	std	Y+9, r22	; 0x09
    37f6:	7a 87       	std	Y+10, r23	; 0x0a
    37f8:	8b 87       	std	Y+11, r24	; 0x0b
    37fa:	9c 87       	std	Y+12, r25	; 0x0c
    TIMER0_TCCR0_REG |= Timer0_u8_Prescaler;
    37fc:	a3 e5       	ldi	r26, 0x53	; 83
    37fe:	b0 e0       	ldi	r27, 0x00	; 0
    3800:	e3 e5       	ldi	r30, 0x53	; 83
    3802:	f0 e0       	ldi	r31, 0x00	; 0
    3804:	90 81       	ld	r25, Z
    3806:	80 91 34 01 	lds	r24, 0x0134
    380a:	89 2b       	or	r24, r25
    380c:	8c 93       	st	X, r24
    u16 local_u16_OVF_Time = (256 * PRESCALER) / F_CPU;
    380e:	80 e8       	ldi	r24, 0x80	; 128
    3810:	90 e0       	ldi	r25, 0x00	; 0
    3812:	98 87       	std	Y+8, r25	; 0x08
    3814:	8f 83       	std	Y+7, r24	; 0x07
    u16 local_u16_NumOfOVF = (Copy_u32_Time * 1000UL) / local_u16_OVF_Time;
    3816:	89 85       	ldd	r24, Y+9	; 0x09
    3818:	9a 85       	ldd	r25, Y+10	; 0x0a
    381a:	ab 85       	ldd	r26, Y+11	; 0x0b
    381c:	bc 85       	ldd	r27, Y+12	; 0x0c
    381e:	28 ee       	ldi	r18, 0xE8	; 232
    3820:	33 e0       	ldi	r19, 0x03	; 3
    3822:	40 e0       	ldi	r20, 0x00	; 0
    3824:	50 e0       	ldi	r21, 0x00	; 0
    3826:	bc 01       	movw	r22, r24
    3828:	cd 01       	movw	r24, r26
    382a:	0e 94 cc 24 	call	0x4998	; 0x4998 <__mulsi3>
    382e:	7b 01       	movw	r14, r22
    3830:	8c 01       	movw	r16, r24
    3832:	8f 81       	ldd	r24, Y+7	; 0x07
    3834:	98 85       	ldd	r25, Y+8	; 0x08
    3836:	9c 01       	movw	r18, r24
    3838:	40 e0       	ldi	r20, 0x00	; 0
    383a:	50 e0       	ldi	r21, 0x00	; 0
    383c:	c8 01       	movw	r24, r16
    383e:	b7 01       	movw	r22, r14
    3840:	0e 94 ff 24 	call	0x49fe	; 0x49fe <__udivmodsi4>
    3844:	da 01       	movw	r26, r20
    3846:	c9 01       	movw	r24, r18
    3848:	9e 83       	std	Y+6, r25	; 0x06
    384a:	8d 83       	std	Y+5, r24	; 0x05
    u16 local_u16_proLoad = (((Copy_u32_Time * 1000UL) % local_u16_OVF_Time) * F_CPU) / PRESCALER;
    384c:	89 85       	ldd	r24, Y+9	; 0x09
    384e:	9a 85       	ldd	r25, Y+10	; 0x0a
    3850:	ab 85       	ldd	r26, Y+11	; 0x0b
    3852:	bc 85       	ldd	r27, Y+12	; 0x0c
    3854:	28 ee       	ldi	r18, 0xE8	; 232
    3856:	33 e0       	ldi	r19, 0x03	; 3
    3858:	40 e0       	ldi	r20, 0x00	; 0
    385a:	50 e0       	ldi	r21, 0x00	; 0
    385c:	bc 01       	movw	r22, r24
    385e:	cd 01       	movw	r24, r26
    3860:	0e 94 cc 24 	call	0x4998	; 0x4998 <__mulsi3>
    3864:	7b 01       	movw	r14, r22
    3866:	8c 01       	movw	r16, r24
    3868:	8f 81       	ldd	r24, Y+7	; 0x07
    386a:	98 85       	ldd	r25, Y+8	; 0x08
    386c:	9c 01       	movw	r18, r24
    386e:	40 e0       	ldi	r20, 0x00	; 0
    3870:	50 e0       	ldi	r21, 0x00	; 0
    3872:	c8 01       	movw	r24, r16
    3874:	b7 01       	movw	r22, r14
    3876:	0e 94 ff 24 	call	0x49fe	; 0x49fe <__udivmodsi4>
    387a:	dc 01       	movw	r26, r24
    387c:	cb 01       	movw	r24, r22
    387e:	20 e0       	ldi	r18, 0x00	; 0
    3880:	34 e2       	ldi	r19, 0x24	; 36
    3882:	44 ef       	ldi	r20, 0xF4	; 244
    3884:	50 e0       	ldi	r21, 0x00	; 0
    3886:	bc 01       	movw	r22, r24
    3888:	cd 01       	movw	r24, r26
    388a:	0e 94 cc 24 	call	0x4998	; 0x4998 <__mulsi3>
    388e:	dc 01       	movw	r26, r24
    3890:	cb 01       	movw	r24, r22
    3892:	20 e0       	ldi	r18, 0x00	; 0
    3894:	32 e1       	ldi	r19, 0x12	; 18
    3896:	4a e7       	ldi	r20, 0x7A	; 122
    3898:	50 e0       	ldi	r21, 0x00	; 0
    389a:	bc 01       	movw	r22, r24
    389c:	cd 01       	movw	r24, r26
    389e:	0e 94 ff 24 	call	0x49fe	; 0x49fe <__udivmodsi4>
    38a2:	da 01       	movw	r26, r20
    38a4:	c9 01       	movw	r24, r18
    38a6:	9c 83       	std	Y+4, r25	; 0x04
    38a8:	8b 83       	std	Y+3, r24	; 0x03
    TIMER0_TCNT0_REG = 256 - local_u16_proLoad;
    38aa:	e2 e5       	ldi	r30, 0x52	; 82
    38ac:	f0 e0       	ldi	r31, 0x00	; 0
    38ae:	8b 81       	ldd	r24, Y+3	; 0x03
    38b0:	81 95       	neg	r24
    38b2:	80 83       	st	Z, r24
    u16 local_u16_counter = 0;
    38b4:	1a 82       	std	Y+2, r1	; 0x02
    38b6:	19 82       	std	Y+1, r1	; 0x01
    38b8:	15 c0       	rjmp	.+42     	; 0x38e4 <Timers_enu_delay_ms+0x10c>
    while (local_u16_counter != (local_u16_NumOfOVF + 1))
    {
        while (GET_BIT(TIMER_TIFR_REG, TOV0) != 0)
        {
        SET_BIT(TIMER_TIFR_REG, TOV0);
    38ba:	a8 e5       	ldi	r26, 0x58	; 88
    38bc:	b0 e0       	ldi	r27, 0x00	; 0
    38be:	e8 e5       	ldi	r30, 0x58	; 88
    38c0:	f0 e0       	ldi	r31, 0x00	; 0
    38c2:	80 81       	ld	r24, Z
    38c4:	81 60       	ori	r24, 0x01	; 1
    38c6:	8c 93       	st	X, r24
        local_u16_counter++;
    38c8:	89 81       	ldd	r24, Y+1	; 0x01
    38ca:	9a 81       	ldd	r25, Y+2	; 0x02
    38cc:	01 96       	adiw	r24, 0x01	; 1
    38ce:	9a 83       	std	Y+2, r25	; 0x02
    38d0:	89 83       	std	Y+1, r24	; 0x01
    u16 local_u16_proLoad = (((Copy_u32_Time * 1000UL) % local_u16_OVF_Time) * F_CPU) / PRESCALER;
    TIMER0_TCNT0_REG = 256 - local_u16_proLoad;
    u16 local_u16_counter = 0;
    while (local_u16_counter != (local_u16_NumOfOVF + 1))
    {
        while (GET_BIT(TIMER_TIFR_REG, TOV0) != 0)
    38d2:	e8 e5       	ldi	r30, 0x58	; 88
    38d4:	f0 e0       	ldi	r31, 0x00	; 0
    38d6:	80 81       	ld	r24, Z
    38d8:	88 2f       	mov	r24, r24
    38da:	90 e0       	ldi	r25, 0x00	; 0
    38dc:	81 70       	andi	r24, 0x01	; 1
    38de:	90 70       	andi	r25, 0x00	; 0
    38e0:	88 23       	and	r24, r24
    38e2:	59 f7       	brne	.-42     	; 0x38ba <Timers_enu_delay_ms+0xe2>
    u16 local_u16_OVF_Time = (256 * PRESCALER) / F_CPU;
    u16 local_u16_NumOfOVF = (Copy_u32_Time * 1000UL) / local_u16_OVF_Time;
    u16 local_u16_proLoad = (((Copy_u32_Time * 1000UL) % local_u16_OVF_Time) * F_CPU) / PRESCALER;
    TIMER0_TCNT0_REG = 256 - local_u16_proLoad;
    u16 local_u16_counter = 0;
    while (local_u16_counter != (local_u16_NumOfOVF + 1))
    38e4:	8d 81       	ldd	r24, Y+5	; 0x05
    38e6:	9e 81       	ldd	r25, Y+6	; 0x06
    38e8:	9c 01       	movw	r18, r24
    38ea:	2f 5f       	subi	r18, 0xFF	; 255
    38ec:	3f 4f       	sbci	r19, 0xFF	; 255
    38ee:	89 81       	ldd	r24, Y+1	; 0x01
    38f0:	9a 81       	ldd	r25, Y+2	; 0x02
    38f2:	28 17       	cp	r18, r24
    38f4:	39 07       	cpc	r19, r25
    38f6:	69 f7       	brne	.-38     	; 0x38d2 <Timers_enu_delay_ms+0xfa>
        {
        SET_BIT(TIMER_TIFR_REG, TOV0);
        local_u16_counter++;
        }
    }
    TIMER0_TCCR0_REG &= CLEAR_CLK_SOURCE;
    38f8:	a3 e5       	ldi	r26, 0x53	; 83
    38fa:	b0 e0       	ldi	r27, 0x00	; 0
    38fc:	e3 e5       	ldi	r30, 0x53	; 83
    38fe:	f0 e0       	ldi	r31, 0x00	; 0
    3900:	80 81       	ld	r24, Z
    3902:	88 7f       	andi	r24, 0xF8	; 248
    3904:	8c 93       	st	X, r24
}
    3906:	2d 96       	adiw	r28, 0x0d	; 13
    3908:	0f b6       	in	r0, 0x3f	; 63
    390a:	f8 94       	cli
    390c:	de bf       	out	0x3e, r29	; 62
    390e:	0f be       	out	0x3f, r0	; 63
    3910:	cd bf       	out	0x3d, r28	; 61
    3912:	cf 91       	pop	r28
    3914:	df 91       	pop	r29
    3916:	1f 91       	pop	r17
    3918:	0f 91       	pop	r16
    391a:	ff 90       	pop	r15
    391c:	ef 90       	pop	r14
    391e:	08 95       	ret

00003920 <Timers_enu_SetTimerValue>:
ES_t Timers_enu_SetTimerValue(u8 Copy_u8_TimerNo,u16 Copy_u8_Value){
    3920:	df 93       	push	r29
    3922:	cf 93       	push	r28
    3924:	00 d0       	rcall	.+0      	; 0x3926 <Timers_enu_SetTimerValue+0x6>
    3926:	00 d0       	rcall	.+0      	; 0x3928 <Timers_enu_SetTimerValue+0x8>
    3928:	00 d0       	rcall	.+0      	; 0x392a <Timers_enu_SetTimerValue+0xa>
    392a:	cd b7       	in	r28, 0x3d	; 61
    392c:	de b7       	in	r29, 0x3e	; 62
    392e:	8a 83       	std	Y+2, r24	; 0x02
    3930:	7c 83       	std	Y+4, r23	; 0x04
    3932:	6b 83       	std	Y+3, r22	; 0x03
    u8 Local_u8_errorState = STATE_OK;
    3934:	81 e0       	ldi	r24, 0x01	; 1
    3936:	89 83       	std	Y+1, r24	; 0x01
    if(Copy_u8_TimerNo < 3){
    3938:	8a 81       	ldd	r24, Y+2	; 0x02
    393a:	83 30       	cpi	r24, 0x03	; 3
    393c:	d8 f4       	brcc	.+54     	; 0x3974 <Timers_enu_SetTimerValue+0x54>
        switch (Copy_u8_TimerNo)
    393e:	8a 81       	ldd	r24, Y+2	; 0x02
    3940:	28 2f       	mov	r18, r24
    3942:	30 e0       	ldi	r19, 0x00	; 0
    3944:	3e 83       	std	Y+6, r19	; 0x06
    3946:	2d 83       	std	Y+5, r18	; 0x05
    3948:	8d 81       	ldd	r24, Y+5	; 0x05
    394a:	9e 81       	ldd	r25, Y+6	; 0x06
    394c:	00 97       	sbiw	r24, 0x00	; 0
    394e:	31 f0       	breq	.+12     	; 0x395c <Timers_enu_SetTimerValue+0x3c>
    3950:	2d 81       	ldd	r18, Y+5	; 0x05
    3952:	3e 81       	ldd	r19, Y+6	; 0x06
    3954:	21 30       	cpi	r18, 0x01	; 1
    3956:	31 05       	cpc	r19, r1
    3958:	31 f0       	breq	.+12     	; 0x3966 <Timers_enu_SetTimerValue+0x46>
    395a:	0d c0       	rjmp	.+26     	; 0x3976 <Timers_enu_SetTimerValue+0x56>
        {
        case TIMER0:
            TIMER0_TCNT0_REG = Copy_u8_Value;
    395c:	e2 e5       	ldi	r30, 0x52	; 82
    395e:	f0 e0       	ldi	r31, 0x00	; 0
    3960:	8b 81       	ldd	r24, Y+3	; 0x03
    3962:	80 83       	st	Z, r24
    3964:	08 c0       	rjmp	.+16     	; 0x3976 <Timers_enu_SetTimerValue+0x56>
        break;
        case TIMER1:
            TIMER1_TCNT1_REG = Copy_u8_Value;
    3966:	ec e4       	ldi	r30, 0x4C	; 76
    3968:	f0 e0       	ldi	r31, 0x00	; 0
    396a:	8b 81       	ldd	r24, Y+3	; 0x03
    396c:	9c 81       	ldd	r25, Y+4	; 0x04
    396e:	91 83       	std	Z+1, r25	; 0x01
    3970:	80 83       	st	Z, r24
    3972:	01 c0       	rjmp	.+2      	; 0x3976 <Timers_enu_SetTimerValue+0x56>
        break;
        }
    }else{
        Local_u8_errorState = STATE_NOT_OK;
    3974:	19 82       	std	Y+1, r1	; 0x01
    }
    return Local_u8_errorState;
    3976:	89 81       	ldd	r24, Y+1	; 0x01
}
    3978:	26 96       	adiw	r28, 0x06	; 6
    397a:	0f b6       	in	r0, 0x3f	; 63
    397c:	f8 94       	cli
    397e:	de bf       	out	0x3e, r29	; 62
    3980:	0f be       	out	0x3f, r0	; 63
    3982:	cd bf       	out	0x3d, r28	; 61
    3984:	cf 91       	pop	r28
    3986:	df 91       	pop	r29
    3988:	08 95       	ret

0000398a <Timers_enu_GetTimerValue>:
ES_t Timers_enu_GetTimerValue(u8 Copy_u8_TimerNo,u16 *Copy_u8_Value){
    398a:	df 93       	push	r29
    398c:	cf 93       	push	r28
    398e:	00 d0       	rcall	.+0      	; 0x3990 <Timers_enu_GetTimerValue+0x6>
    3990:	00 d0       	rcall	.+0      	; 0x3992 <Timers_enu_GetTimerValue+0x8>
    3992:	00 d0       	rcall	.+0      	; 0x3994 <Timers_enu_GetTimerValue+0xa>
    3994:	cd b7       	in	r28, 0x3d	; 61
    3996:	de b7       	in	r29, 0x3e	; 62
    3998:	8a 83       	std	Y+2, r24	; 0x02
    399a:	7c 83       	std	Y+4, r23	; 0x04
    399c:	6b 83       	std	Y+3, r22	; 0x03
    u8 Local_u8_errorState = STATE_OK;
    399e:	81 e0       	ldi	r24, 0x01	; 1
    39a0:	89 83       	std	Y+1, r24	; 0x01
    if(Copy_u8_TimerNo < 3){
    39a2:	8a 81       	ldd	r24, Y+2	; 0x02
    39a4:	83 30       	cpi	r24, 0x03	; 3
    39a6:	10 f5       	brcc	.+68     	; 0x39ec <Timers_enu_GetTimerValue+0x62>
        switch (Copy_u8_TimerNo)
    39a8:	8a 81       	ldd	r24, Y+2	; 0x02
    39aa:	28 2f       	mov	r18, r24
    39ac:	30 e0       	ldi	r19, 0x00	; 0
    39ae:	3e 83       	std	Y+6, r19	; 0x06
    39b0:	2d 83       	std	Y+5, r18	; 0x05
    39b2:	8d 81       	ldd	r24, Y+5	; 0x05
    39b4:	9e 81       	ldd	r25, Y+6	; 0x06
    39b6:	00 97       	sbiw	r24, 0x00	; 0
    39b8:	31 f0       	breq	.+12     	; 0x39c6 <Timers_enu_GetTimerValue+0x3c>
    39ba:	2d 81       	ldd	r18, Y+5	; 0x05
    39bc:	3e 81       	ldd	r19, Y+6	; 0x06
    39be:	21 30       	cpi	r18, 0x01	; 1
    39c0:	31 05       	cpc	r19, r1
    39c2:	59 f0       	breq	.+22     	; 0x39da <Timers_enu_GetTimerValue+0x50>
    39c4:	14 c0       	rjmp	.+40     	; 0x39ee <Timers_enu_GetTimerValue+0x64>
        {
        case TIMER0:
            *Copy_u8_Value = TIMER0_TCNT0_REG;
    39c6:	e2 e5       	ldi	r30, 0x52	; 82
    39c8:	f0 e0       	ldi	r31, 0x00	; 0
    39ca:	80 81       	ld	r24, Z
    39cc:	88 2f       	mov	r24, r24
    39ce:	90 e0       	ldi	r25, 0x00	; 0
    39d0:	eb 81       	ldd	r30, Y+3	; 0x03
    39d2:	fc 81       	ldd	r31, Y+4	; 0x04
    39d4:	91 83       	std	Z+1, r25	; 0x01
    39d6:	80 83       	st	Z, r24
    39d8:	0a c0       	rjmp	.+20     	; 0x39ee <Timers_enu_GetTimerValue+0x64>
        break;
        case TIMER1:
            *Copy_u8_Value = TIMER1_TCNT1_REG;
    39da:	ec e4       	ldi	r30, 0x4C	; 76
    39dc:	f0 e0       	ldi	r31, 0x00	; 0
    39de:	80 81       	ld	r24, Z
    39e0:	91 81       	ldd	r25, Z+1	; 0x01
    39e2:	eb 81       	ldd	r30, Y+3	; 0x03
    39e4:	fc 81       	ldd	r31, Y+4	; 0x04
    39e6:	91 83       	std	Z+1, r25	; 0x01
    39e8:	80 83       	st	Z, r24
    39ea:	01 c0       	rjmp	.+2      	; 0x39ee <Timers_enu_GetTimerValue+0x64>
        break;
        }
    }else{
        Local_u8_errorState = STATE_NOT_OK;
    39ec:	19 82       	std	Y+1, r1	; 0x01
    }
    return Local_u8_errorState;
    39ee:	89 81       	ldd	r24, Y+1	; 0x01

}
    39f0:	26 96       	adiw	r28, 0x06	; 6
    39f2:	0f b6       	in	r0, 0x3f	; 63
    39f4:	f8 94       	cli
    39f6:	de bf       	out	0x3e, r29	; 62
    39f8:	0f be       	out	0x3f, r0	; 63
    39fa:	cd bf       	out	0x3d, r28	; 61
    39fc:	cf 91       	pop	r28
    39fe:	df 91       	pop	r29
    3a00:	08 95       	ret

00003a02 <Timers_enu_Timer0SetCompareValue>:
ES_t Timers_enu_Timer0SetCompareValue(u8 Copy_u8_Value){
    3a02:	df 93       	push	r29
    3a04:	cf 93       	push	r28
    3a06:	0f 92       	push	r0
    3a08:	cd b7       	in	r28, 0x3d	; 61
    3a0a:	de b7       	in	r29, 0x3e	; 62
    3a0c:	89 83       	std	Y+1, r24	; 0x01
    TIMER0_OCR0_REG = Copy_u8_Value;
    3a0e:	ec e5       	ldi	r30, 0x5C	; 92
    3a10:	f0 e0       	ldi	r31, 0x00	; 0
    3a12:	89 81       	ldd	r24, Y+1	; 0x01
    3a14:	80 83       	st	Z, r24
    return STATE_OK;
    3a16:	81 e0       	ldi	r24, 0x01	; 1
}
    3a18:	0f 90       	pop	r0
    3a1a:	cf 91       	pop	r28
    3a1c:	df 91       	pop	r29
    3a1e:	08 95       	ret

00003a20 <Timers_enu_Timer1_setTopValue>:
ES_t Timers_enu_Timer1_setTopValue(u16 Copy_u16_Value){
    3a20:	df 93       	push	r29
    3a22:	cf 93       	push	r28
    3a24:	00 d0       	rcall	.+0      	; 0x3a26 <Timers_enu_Timer1_setTopValue+0x6>
    3a26:	0f 92       	push	r0
    3a28:	cd b7       	in	r28, 0x3d	; 61
    3a2a:	de b7       	in	r29, 0x3e	; 62
    3a2c:	9a 83       	std	Y+2, r25	; 0x02
    3a2e:	89 83       	std	Y+1, r24	; 0x01
        TIMER1_ICR1_REG = Copy_u16_Value;
    3a30:	e6 e4       	ldi	r30, 0x46	; 70
    3a32:	f0 e0       	ldi	r31, 0x00	; 0
    3a34:	89 81       	ldd	r24, Y+1	; 0x01
    3a36:	9a 81       	ldd	r25, Y+2	; 0x02
    3a38:	91 83       	std	Z+1, r25	; 0x01
    3a3a:	80 83       	st	Z, r24
}
    3a3c:	0f 90       	pop	r0
    3a3e:	0f 90       	pop	r0
    3a40:	0f 90       	pop	r0
    3a42:	cf 91       	pop	r28
    3a44:	df 91       	pop	r29
    3a46:	08 95       	ret

00003a48 <Timers_enu_Timer1SetCompareValue>:
ES_t Timers_enu_Timer1SetCompareValue(u8 Copy_u8_compareREG ,u16 Copy_u8_Value){
    3a48:	df 93       	push	r29
    3a4a:	cf 93       	push	r28
    3a4c:	00 d0       	rcall	.+0      	; 0x3a4e <Timers_enu_Timer1SetCompareValue+0x6>
    3a4e:	00 d0       	rcall	.+0      	; 0x3a50 <Timers_enu_Timer1SetCompareValue+0x8>
    3a50:	00 d0       	rcall	.+0      	; 0x3a52 <Timers_enu_Timer1SetCompareValue+0xa>
    3a52:	cd b7       	in	r28, 0x3d	; 61
    3a54:	de b7       	in	r29, 0x3e	; 62
    3a56:	8a 83       	std	Y+2, r24	; 0x02
    3a58:	7c 83       	std	Y+4, r23	; 0x04
    3a5a:	6b 83       	std	Y+3, r22	; 0x03
    u8 Local_u8_errorState = STATE_OK;
    3a5c:	81 e0       	ldi	r24, 0x01	; 1
    3a5e:	89 83       	std	Y+1, r24	; 0x01
    if(Copy_u8_compareREG < 2){
    3a60:	8a 81       	ldd	r24, Y+2	; 0x02
    3a62:	82 30       	cpi	r24, 0x02	; 2
    3a64:	e8 f4       	brcc	.+58     	; 0x3aa0 <Timers_enu_Timer1SetCompareValue+0x58>
        switch (Copy_u8_compareREG)
    3a66:	8a 81       	ldd	r24, Y+2	; 0x02
    3a68:	28 2f       	mov	r18, r24
    3a6a:	30 e0       	ldi	r19, 0x00	; 0
    3a6c:	3e 83       	std	Y+6, r19	; 0x06
    3a6e:	2d 83       	std	Y+5, r18	; 0x05
    3a70:	8d 81       	ldd	r24, Y+5	; 0x05
    3a72:	9e 81       	ldd	r25, Y+6	; 0x06
    3a74:	00 97       	sbiw	r24, 0x00	; 0
    3a76:	31 f0       	breq	.+12     	; 0x3a84 <Timers_enu_Timer1SetCompareValue+0x3c>
    3a78:	2d 81       	ldd	r18, Y+5	; 0x05
    3a7a:	3e 81       	ldd	r19, Y+6	; 0x06
    3a7c:	21 30       	cpi	r18, 0x01	; 1
    3a7e:	31 05       	cpc	r19, r1
    3a80:	41 f0       	breq	.+16     	; 0x3a92 <Timers_enu_Timer1SetCompareValue+0x4a>
    3a82:	0f c0       	rjmp	.+30     	; 0x3aa2 <Timers_enu_Timer1SetCompareValue+0x5a>
        {
        case COMPARE_UNIT_A:
            TIMER1_OCR1A_REG = Copy_u8_Value;
    3a84:	ea e4       	ldi	r30, 0x4A	; 74
    3a86:	f0 e0       	ldi	r31, 0x00	; 0
    3a88:	8b 81       	ldd	r24, Y+3	; 0x03
    3a8a:	9c 81       	ldd	r25, Y+4	; 0x04
    3a8c:	91 83       	std	Z+1, r25	; 0x01
    3a8e:	80 83       	st	Z, r24
    3a90:	08 c0       	rjmp	.+16     	; 0x3aa2 <Timers_enu_Timer1SetCompareValue+0x5a>
        break;
        case COMPARE_UNIT_B:
            TIMER1_OCR1B_REG = Copy_u8_Value;
    3a92:	e8 e4       	ldi	r30, 0x48	; 72
    3a94:	f0 e0       	ldi	r31, 0x00	; 0
    3a96:	8b 81       	ldd	r24, Y+3	; 0x03
    3a98:	9c 81       	ldd	r25, Y+4	; 0x04
    3a9a:	91 83       	std	Z+1, r25	; 0x01
    3a9c:	80 83       	st	Z, r24
    3a9e:	01 c0       	rjmp	.+2      	; 0x3aa2 <Timers_enu_Timer1SetCompareValue+0x5a>
        break;
        }
    }else{
        Local_u8_errorState = STATE_NOT_OK;
    3aa0:	19 82       	std	Y+1, r1	; 0x01
    }
    return Local_u8_errorState;
    3aa2:	89 81       	ldd	r24, Y+1	; 0x01
}
    3aa4:	26 96       	adiw	r28, 0x06	; 6
    3aa6:	0f b6       	in	r0, 0x3f	; 63
    3aa8:	f8 94       	cli
    3aaa:	de bf       	out	0x3e, r29	; 62
    3aac:	0f be       	out	0x3f, r0	; 63
    3aae:	cd bf       	out	0x3d, r28	; 61
    3ab0:	cf 91       	pop	r28
    3ab2:	df 91       	pop	r29
    3ab4:	08 95       	ret

00003ab6 <Timers_enu_Stop>:
ES_t Timers_enu_Stop(u8 Copy_u8_TimerNo){
    3ab6:	df 93       	push	r29
    3ab8:	cf 93       	push	r28
    3aba:	00 d0       	rcall	.+0      	; 0x3abc <Timers_enu_Stop+0x6>
    3abc:	00 d0       	rcall	.+0      	; 0x3abe <Timers_enu_Stop+0x8>
    3abe:	cd b7       	in	r28, 0x3d	; 61
    3ac0:	de b7       	in	r29, 0x3e	; 62
    3ac2:	8a 83       	std	Y+2, r24	; 0x02
    u8 Local_u8_errorState = STATE_OK;
    3ac4:	81 e0       	ldi	r24, 0x01	; 1
    3ac6:	89 83       	std	Y+1, r24	; 0x01
    if(Copy_u8_TimerNo<2){
    3ac8:	8a 81       	ldd	r24, Y+2	; 0x02
    3aca:	82 30       	cpi	r24, 0x02	; 2
    3acc:	c8 f5       	brcc	.+114    	; 0x3b40 <Timers_enu_Stop+0x8a>
        switch (Copy_u8_TimerNo)
    3ace:	8a 81       	ldd	r24, Y+2	; 0x02
    3ad0:	28 2f       	mov	r18, r24
    3ad2:	30 e0       	ldi	r19, 0x00	; 0
    3ad4:	3c 83       	std	Y+4, r19	; 0x04
    3ad6:	2b 83       	std	Y+3, r18	; 0x03
    3ad8:	8b 81       	ldd	r24, Y+3	; 0x03
    3ada:	9c 81       	ldd	r25, Y+4	; 0x04
    3adc:	00 97       	sbiw	r24, 0x00	; 0
    3ade:	31 f0       	breq	.+12     	; 0x3aec <Timers_enu_Stop+0x36>
    3ae0:	eb 81       	ldd	r30, Y+3	; 0x03
    3ae2:	fc 81       	ldd	r31, Y+4	; 0x04
    3ae4:	e1 30       	cpi	r30, 0x01	; 1
    3ae6:	f1 05       	cpc	r31, r1
    3ae8:	81 f0       	breq	.+32     	; 0x3b0a <Timers_enu_Stop+0x54>
    3aea:	2b c0       	rjmp	.+86     	; 0x3b42 <Timers_enu_Stop+0x8c>
        {
        case TIMER0:
        TIMER0_TCCR0_REG &= CLEAR_CLK_SOURCE;
    3aec:	a3 e5       	ldi	r26, 0x53	; 83
    3aee:	b0 e0       	ldi	r27, 0x00	; 0
    3af0:	e3 e5       	ldi	r30, 0x53	; 83
    3af2:	f0 e0       	ldi	r31, 0x00	; 0
    3af4:	80 81       	ld	r24, Z
    3af6:	88 7f       	andi	r24, 0xF8	; 248
    3af8:	8c 93       	st	X, r24
        TIMER0_TCNT0_REG = TIMER0_OCR0_REG = 0;
    3afa:	a2 e5       	ldi	r26, 0x52	; 82
    3afc:	b0 e0       	ldi	r27, 0x00	; 0
    3afe:	ec e5       	ldi	r30, 0x5C	; 92
    3b00:	f0 e0       	ldi	r31, 0x00	; 0
    3b02:	10 82       	st	Z, r1
    3b04:	80 81       	ld	r24, Z
    3b06:	8c 93       	st	X, r24
    3b08:	1c c0       	rjmp	.+56     	; 0x3b42 <Timers_enu_Stop+0x8c>
        break;
        case TIMER1:
        TIMER1_TCCR1B_REG &= CLEAR_CLK_SOURCE;
    3b0a:	ae e4       	ldi	r26, 0x4E	; 78
    3b0c:	b0 e0       	ldi	r27, 0x00	; 0
    3b0e:	ee e4       	ldi	r30, 0x4E	; 78
    3b10:	f0 e0       	ldi	r31, 0x00	; 0
    3b12:	80 81       	ld	r24, Z
    3b14:	88 7f       	andi	r24, 0xF8	; 248
    3b16:	8c 93       	st	X, r24
        TIMER1_TCNT1_REG = TIMER1_OCR1A_REG = TIMER1_OCR1B_REG = 0;
    3b18:	2c e4       	ldi	r18, 0x4C	; 76
    3b1a:	30 e0       	ldi	r19, 0x00	; 0
    3b1c:	aa e4       	ldi	r26, 0x4A	; 74
    3b1e:	b0 e0       	ldi	r27, 0x00	; 0
    3b20:	e8 e4       	ldi	r30, 0x48	; 72
    3b22:	f0 e0       	ldi	r31, 0x00	; 0
    3b24:	11 82       	std	Z+1, r1	; 0x01
    3b26:	10 82       	st	Z, r1
    3b28:	80 81       	ld	r24, Z
    3b2a:	91 81       	ldd	r25, Z+1	; 0x01
    3b2c:	11 96       	adiw	r26, 0x01	; 1
    3b2e:	9c 93       	st	X, r25
    3b30:	8e 93       	st	-X, r24
    3b32:	8d 91       	ld	r24, X+
    3b34:	9c 91       	ld	r25, X
    3b36:	11 97       	sbiw	r26, 0x01	; 1
    3b38:	f9 01       	movw	r30, r18
    3b3a:	91 83       	std	Z+1, r25	; 0x01
    3b3c:	80 83       	st	Z, r24
    3b3e:	01 c0       	rjmp	.+2      	; 0x3b42 <Timers_enu_Stop+0x8c>
        break;
        }
    }else{
        Local_u8_errorState =STATE_NOT_OK;
    3b40:	19 82       	std	Y+1, r1	; 0x01
    }
    return Local_u8_errorState;
    3b42:	89 81       	ldd	r24, Y+1	; 0x01
}
    3b44:	0f 90       	pop	r0
    3b46:	0f 90       	pop	r0
    3b48:	0f 90       	pop	r0
    3b4a:	0f 90       	pop	r0
    3b4c:	cf 91       	pop	r28
    3b4e:	df 91       	pop	r29
    3b50:	08 95       	ret

00003b52 <__vector_7>:

/*****ISR(Timer1) CTC Mode A*****/
ISR(TIMER1_COMPA){
    3b52:	1f 92       	push	r1
    3b54:	0f 92       	push	r0
    3b56:	0f b6       	in	r0, 0x3f	; 63
    3b58:	0f 92       	push	r0
    3b5a:	11 24       	eor	r1, r1
    3b5c:	2f 93       	push	r18
    3b5e:	3f 93       	push	r19
    3b60:	4f 93       	push	r20
    3b62:	5f 93       	push	r21
    3b64:	6f 93       	push	r22
    3b66:	7f 93       	push	r23
    3b68:	8f 93       	push	r24
    3b6a:	9f 93       	push	r25
    3b6c:	af 93       	push	r26
    3b6e:	bf 93       	push	r27
    3b70:	ef 93       	push	r30
    3b72:	ff 93       	push	r31
    3b74:	df 93       	push	r29
    3b76:	cf 93       	push	r28
    3b78:	cd b7       	in	r28, 0x3d	; 61
    3b7a:	de b7       	in	r29, 0x3e	; 62
    if (Timers_pf_Timer1[CTC_MODE_A] != NULL)
    3b7c:	80 91 30 01 	lds	r24, 0x0130
    3b80:	90 91 31 01 	lds	r25, 0x0131
    3b84:	00 97       	sbiw	r24, 0x00	; 0
    3b86:	29 f0       	breq	.+10     	; 0x3b92 <__vector_7+0x40>
        Timers_pf_Timer1[CTC_MODE_A]();
    3b88:	e0 91 30 01 	lds	r30, 0x0130
    3b8c:	f0 91 31 01 	lds	r31, 0x0131
    3b90:	09 95       	icall
}
    3b92:	cf 91       	pop	r28
    3b94:	df 91       	pop	r29
    3b96:	ff 91       	pop	r31
    3b98:	ef 91       	pop	r30
    3b9a:	bf 91       	pop	r27
    3b9c:	af 91       	pop	r26
    3b9e:	9f 91       	pop	r25
    3ba0:	8f 91       	pop	r24
    3ba2:	7f 91       	pop	r23
    3ba4:	6f 91       	pop	r22
    3ba6:	5f 91       	pop	r21
    3ba8:	4f 91       	pop	r20
    3baa:	3f 91       	pop	r19
    3bac:	2f 91       	pop	r18
    3bae:	0f 90       	pop	r0
    3bb0:	0f be       	out	0x3f, r0	; 63
    3bb2:	0f 90       	pop	r0
    3bb4:	1f 90       	pop	r1
    3bb6:	18 95       	reti

00003bb8 <__vector_8>:
/*****ISR(Timer1) CTC Mode B*****/
ISR(TIMER1_COMPB){
    3bb8:	1f 92       	push	r1
    3bba:	0f 92       	push	r0
    3bbc:	0f b6       	in	r0, 0x3f	; 63
    3bbe:	0f 92       	push	r0
    3bc0:	11 24       	eor	r1, r1
    3bc2:	2f 93       	push	r18
    3bc4:	3f 93       	push	r19
    3bc6:	4f 93       	push	r20
    3bc8:	5f 93       	push	r21
    3bca:	6f 93       	push	r22
    3bcc:	7f 93       	push	r23
    3bce:	8f 93       	push	r24
    3bd0:	9f 93       	push	r25
    3bd2:	af 93       	push	r26
    3bd4:	bf 93       	push	r27
    3bd6:	ef 93       	push	r30
    3bd8:	ff 93       	push	r31
    3bda:	df 93       	push	r29
    3bdc:	cf 93       	push	r28
    3bde:	cd b7       	in	r28, 0x3d	; 61
    3be0:	de b7       	in	r29, 0x3e	; 62
    if (Timers_pf_Timer1[CTC_MODE_B] != NULL)
    3be2:	80 91 32 01 	lds	r24, 0x0132
    3be6:	90 91 33 01 	lds	r25, 0x0133
    3bea:	00 97       	sbiw	r24, 0x00	; 0
    3bec:	29 f0       	breq	.+10     	; 0x3bf8 <__vector_8+0x40>
        Timers_pf_Timer1[CTC_MODE_B]();
    3bee:	e0 91 32 01 	lds	r30, 0x0132
    3bf2:	f0 91 33 01 	lds	r31, 0x0133
    3bf6:	09 95       	icall
}
    3bf8:	cf 91       	pop	r28
    3bfa:	df 91       	pop	r29
    3bfc:	ff 91       	pop	r31
    3bfe:	ef 91       	pop	r30
    3c00:	bf 91       	pop	r27
    3c02:	af 91       	pop	r26
    3c04:	9f 91       	pop	r25
    3c06:	8f 91       	pop	r24
    3c08:	7f 91       	pop	r23
    3c0a:	6f 91       	pop	r22
    3c0c:	5f 91       	pop	r21
    3c0e:	4f 91       	pop	r20
    3c10:	3f 91       	pop	r19
    3c12:	2f 91       	pop	r18
    3c14:	0f 90       	pop	r0
    3c16:	0f be       	out	0x3f, r0	; 63
    3c18:	0f 90       	pop	r0
    3c1a:	1f 90       	pop	r1
    3c1c:	18 95       	reti

00003c1e <__vector_9>:
/*****ISR(Timer1) Normal Mode*****/
ISR(TIMER1_OVF){
    3c1e:	1f 92       	push	r1
    3c20:	0f 92       	push	r0
    3c22:	0f b6       	in	r0, 0x3f	; 63
    3c24:	0f 92       	push	r0
    3c26:	11 24       	eor	r1, r1
    3c28:	2f 93       	push	r18
    3c2a:	3f 93       	push	r19
    3c2c:	4f 93       	push	r20
    3c2e:	5f 93       	push	r21
    3c30:	6f 93       	push	r22
    3c32:	7f 93       	push	r23
    3c34:	8f 93       	push	r24
    3c36:	9f 93       	push	r25
    3c38:	af 93       	push	r26
    3c3a:	bf 93       	push	r27
    3c3c:	ef 93       	push	r30
    3c3e:	ff 93       	push	r31
    3c40:	df 93       	push	r29
    3c42:	cf 93       	push	r28
    3c44:	cd b7       	in	r28, 0x3d	; 61
    3c46:	de b7       	in	r29, 0x3e	; 62
    if (Timers_pf_Timer1[NORMAL_MODE] != NULL)
    3c48:	80 91 2e 01 	lds	r24, 0x012E
    3c4c:	90 91 2f 01 	lds	r25, 0x012F
    3c50:	00 97       	sbiw	r24, 0x00	; 0
    3c52:	29 f0       	breq	.+10     	; 0x3c5e <__vector_9+0x40>
        Timers_pf_Timer1[NORMAL_MODE]();
    3c54:	e0 91 2e 01 	lds	r30, 0x012E
    3c58:	f0 91 2f 01 	lds	r31, 0x012F
    3c5c:	09 95       	icall
}
    3c5e:	cf 91       	pop	r28
    3c60:	df 91       	pop	r29
    3c62:	ff 91       	pop	r31
    3c64:	ef 91       	pop	r30
    3c66:	bf 91       	pop	r27
    3c68:	af 91       	pop	r26
    3c6a:	9f 91       	pop	r25
    3c6c:	8f 91       	pop	r24
    3c6e:	7f 91       	pop	r23
    3c70:	6f 91       	pop	r22
    3c72:	5f 91       	pop	r21
    3c74:	4f 91       	pop	r20
    3c76:	3f 91       	pop	r19
    3c78:	2f 91       	pop	r18
    3c7a:	0f 90       	pop	r0
    3c7c:	0f be       	out	0x3f, r0	; 63
    3c7e:	0f 90       	pop	r0
    3c80:	1f 90       	pop	r1
    3c82:	18 95       	reti

00003c84 <__vector_10>:
/*****ISR(Timer0) CTC Mode*****/
ISR(TIMER0_COMP){
    3c84:	1f 92       	push	r1
    3c86:	0f 92       	push	r0
    3c88:	0f b6       	in	r0, 0x3f	; 63
    3c8a:	0f 92       	push	r0
    3c8c:	11 24       	eor	r1, r1
    3c8e:	2f 93       	push	r18
    3c90:	3f 93       	push	r19
    3c92:	4f 93       	push	r20
    3c94:	5f 93       	push	r21
    3c96:	6f 93       	push	r22
    3c98:	7f 93       	push	r23
    3c9a:	8f 93       	push	r24
    3c9c:	9f 93       	push	r25
    3c9e:	af 93       	push	r26
    3ca0:	bf 93       	push	r27
    3ca2:	ef 93       	push	r30
    3ca4:	ff 93       	push	r31
    3ca6:	df 93       	push	r29
    3ca8:	cf 93       	push	r28
    3caa:	cd b7       	in	r28, 0x3d	; 61
    3cac:	de b7       	in	r29, 0x3e	; 62
    if (Timers_pf_Timer0[CTC_MODE] != NULL)
    3cae:	80 91 2c 01 	lds	r24, 0x012C
    3cb2:	90 91 2d 01 	lds	r25, 0x012D
    3cb6:	00 97       	sbiw	r24, 0x00	; 0
    3cb8:	29 f0       	breq	.+10     	; 0x3cc4 <__vector_10+0x40>
        Timers_pf_Timer0[CTC_MODE]();
    3cba:	e0 91 2c 01 	lds	r30, 0x012C
    3cbe:	f0 91 2d 01 	lds	r31, 0x012D
    3cc2:	09 95       	icall
}
    3cc4:	cf 91       	pop	r28
    3cc6:	df 91       	pop	r29
    3cc8:	ff 91       	pop	r31
    3cca:	ef 91       	pop	r30
    3ccc:	bf 91       	pop	r27
    3cce:	af 91       	pop	r26
    3cd0:	9f 91       	pop	r25
    3cd2:	8f 91       	pop	r24
    3cd4:	7f 91       	pop	r23
    3cd6:	6f 91       	pop	r22
    3cd8:	5f 91       	pop	r21
    3cda:	4f 91       	pop	r20
    3cdc:	3f 91       	pop	r19
    3cde:	2f 91       	pop	r18
    3ce0:	0f 90       	pop	r0
    3ce2:	0f be       	out	0x3f, r0	; 63
    3ce4:	0f 90       	pop	r0
    3ce6:	1f 90       	pop	r1
    3ce8:	18 95       	reti

00003cea <__vector_11>:
/*****ISR(Timer0) Normal Mode*****/
ISR(TIMER0_OVF){
    3cea:	1f 92       	push	r1
    3cec:	0f 92       	push	r0
    3cee:	0f b6       	in	r0, 0x3f	; 63
    3cf0:	0f 92       	push	r0
    3cf2:	11 24       	eor	r1, r1
    3cf4:	2f 93       	push	r18
    3cf6:	3f 93       	push	r19
    3cf8:	4f 93       	push	r20
    3cfa:	5f 93       	push	r21
    3cfc:	6f 93       	push	r22
    3cfe:	7f 93       	push	r23
    3d00:	8f 93       	push	r24
    3d02:	9f 93       	push	r25
    3d04:	af 93       	push	r26
    3d06:	bf 93       	push	r27
    3d08:	ef 93       	push	r30
    3d0a:	ff 93       	push	r31
    3d0c:	df 93       	push	r29
    3d0e:	cf 93       	push	r28
    3d10:	cd b7       	in	r28, 0x3d	; 61
    3d12:	de b7       	in	r29, 0x3e	; 62
    if (Timers_pf_Timer0[NORMAL_MODE] != NULL)
    3d14:	80 91 2a 01 	lds	r24, 0x012A
    3d18:	90 91 2b 01 	lds	r25, 0x012B
    3d1c:	00 97       	sbiw	r24, 0x00	; 0
    3d1e:	29 f0       	breq	.+10     	; 0x3d2a <__vector_11+0x40>
        Timers_pf_Timer0[NORMAL_MODE]();
    3d20:	e0 91 2a 01 	lds	r30, 0x012A
    3d24:	f0 91 2b 01 	lds	r31, 0x012B
    3d28:	09 95       	icall
}
    3d2a:	cf 91       	pop	r28
    3d2c:	df 91       	pop	r29
    3d2e:	ff 91       	pop	r31
    3d30:	ef 91       	pop	r30
    3d32:	bf 91       	pop	r27
    3d34:	af 91       	pop	r26
    3d36:	9f 91       	pop	r25
    3d38:	8f 91       	pop	r24
    3d3a:	7f 91       	pop	r23
    3d3c:	6f 91       	pop	r22
    3d3e:	5f 91       	pop	r21
    3d40:	4f 91       	pop	r20
    3d42:	3f 91       	pop	r19
    3d44:	2f 91       	pop	r18
    3d46:	0f 90       	pop	r0
    3d48:	0f be       	out	0x3f, r0	; 63
    3d4a:	0f 90       	pop	r0
    3d4c:	1f 90       	pop	r1
    3d4e:	18 95       	reti

00003d50 <DIO_enu_Init>:
/*MCAL*/
#include"DIO_private.h"
#include"DIO_config.h"


ES_t DIO_enu_Init(void){
    3d50:	df 93       	push	r29
    3d52:	cf 93       	push	r28
    3d54:	cd b7       	in	r28, 0x3d	; 61
    3d56:	de b7       	in	r29, 0x3e	; 62
    DIO_U8_DDRA_REG = Conc(DIO_U8_PA7_INITIAL_DIRECTION,DIO_U8_PA6_INITIAL_DIRECTION,DIO_U8_PA5_INITIAL_DIRECTION,DIO_U8_PA4_INITIAL_DIRECTION,
    3d58:	ea e3       	ldi	r30, 0x3A	; 58
    3d5a:	f0 e0       	ldi	r31, 0x00	; 0
    3d5c:	8f e7       	ldi	r24, 0x7F	; 127
    3d5e:	80 83       	st	Z, r24
                           DIO_U8_PA3_INITIAL_DIRECTION,DIO_U8_PA2_INITIAL_DIRECTION,DIO_U8_PA1_INITIAL_DIRECTION,DIO_U8_PA0_INITIAL_DIRECTION);
    DIO_U8_DDRB_REG = Conc(DIO_U8_PB7_INITIAL_DIRECTION,DIO_U8_PB6_INITIAL_DIRECTION,DIO_U8_PB5_INITIAL_DIRECTION,DIO_U8_PB4_INITIAL_DIRECTION,
    3d60:	e7 e3       	ldi	r30, 0x37	; 55
    3d62:	f0 e0       	ldi	r31, 0x00	; 0
    3d64:	8d ef       	ldi	r24, 0xFD	; 253
    3d66:	80 83       	st	Z, r24
                           DIO_U8_PB3_INITIAL_DIRECTION,DIO_U8_PB2_INITIAL_DIRECTION,DIO_U8_PB1_INITIAL_DIRECTION,DIO_U8_PB0_INITIAL_DIRECTION);

    DIO_U8_DDRC_REG = Conc(DIO_U8_PC7_INITIAL_DIRECTION,DIO_U8_PC6_INITIAL_DIRECTION,DIO_U8_PC5_INITIAL_DIRECTION,DIO_U8_PC4_INITIAL_DIRECTION,
    3d68:	e4 e3       	ldi	r30, 0x34	; 52
    3d6a:	f0 e0       	ldi	r31, 0x00	; 0
    3d6c:	83 e1       	ldi	r24, 0x13	; 19
    3d6e:	80 83       	st	Z, r24
                           DIO_U8_PC3_INITIAL_DIRECTION,DIO_U8_PC2_INITIAL_DIRECTION,DIO_U8_PC1_INITIAL_DIRECTION,DIO_U8_PC0_INITIAL_DIRECTION);

    DIO_U8_DDRD_REG = Conc(DIO_U8_PD7_INITIAL_DIRECTION,DIO_U8_PD6_INITIAL_DIRECTION,DIO_U8_PD5_INITIAL_DIRECTION,DIO_U8_PD4_INITIAL_DIRECTION,
    3d70:	e1 e3       	ldi	r30, 0x31	; 49
    3d72:	f0 e0       	ldi	r31, 0x00	; 0
    3d74:	10 82       	st	Z, r1
                           DIO_U8_PD3_INITIAL_DIRECTION,DIO_U8_PD2_INITIAL_DIRECTION,DIO_U8_PD1_INITIAL_DIRECTION,DIO_U8_PD0_INITIAL_DIRECTION);

    DIO_U8_PORTA_REG = Conc(DIO_U8_PA7_INITIAL_VALUE,DIO_U8_PA6_INITIAL_VALUE,DIO_U8_PA5_INITIAL_VALUE,DIO_U8_PA4_INITIAL_VALUE,
    3d76:	eb e3       	ldi	r30, 0x3B	; 59
    3d78:	f0 e0       	ldi	r31, 0x00	; 0
    3d7a:	10 82       	st	Z, r1
                            DIO_U8_PA3_INITIAL_VALUE,DIO_U8_PA2_INITIAL_VALUE,DIO_U8_PA1_INITIAL_VALUE,DIO_U8_PA0_INITIAL_VALUE);

    DIO_U8_PORTB_REG = Conc(DIO_U8_PB7_INITIAL_VALUE,DIO_U8_PB6_INITIAL_VALUE,DIO_U8_PB5_INITIAL_VALUE,DIO_U8_PB4_INITIAL_VALUE,
    3d7c:	e8 e3       	ldi	r30, 0x38	; 56
    3d7e:	f0 e0       	ldi	r31, 0x00	; 0
    3d80:	84 ef       	ldi	r24, 0xF4	; 244
    3d82:	80 83       	st	Z, r24
                            DIO_U8_PB3_INITIAL_VALUE,DIO_U8_PB2_INITIAL_VALUE,DIO_U8_PB1_INITIAL_VALUE,DIO_U8_PB0_INITIAL_VALUE);

    DIO_U8_PORTC_REG = Conc(DIO_U8_PC7_INITIAL_VALUE,DIO_U8_PC6_INITIAL_VALUE,DIO_U8_PC5_INITIAL_VALUE,DIO_U8_PC4_INITIAL_VALUE,
    3d84:	e5 e3       	ldi	r30, 0x35	; 53
    3d86:	f0 e0       	ldi	r31, 0x00	; 0
    3d88:	10 82       	st	Z, r1
                            DIO_U8_PC3_INITIAL_VALUE,DIO_U8_PC2_INITIAL_VALUE,DIO_U8_PC1_INITIAL_VALUE,DIO_U8_PC0_INITIAL_VALUE);

    DIO_U8_PORTD_REG = Conc(DIO_U8_PD7_INITIAL_VALUE,DIO_U8_PD6_INITIAL_VALUE,DIO_U8_PD5_INITIAL_VALUE,DIO_U8_PD4_INITIAL_VALUE,
    3d8a:	e2 e3       	ldi	r30, 0x32	; 50
    3d8c:	f0 e0       	ldi	r31, 0x00	; 0
    3d8e:	8c e3       	ldi	r24, 0x3C	; 60
    3d90:	80 83       	st	Z, r24
                            DIO_U8_PD3_INITIAL_VALUE,DIO_U8_PD2_INITIAL_VALUE,DIO_U8_PD1_INITIAL_VALUE,DIO_U8_PD0_INITIAL_VALUE);
    return STATE_OK;
    3d92:	81 e0       	ldi	r24, 0x01	; 1
}
    3d94:	cf 91       	pop	r28
    3d96:	df 91       	pop	r29
    3d98:	08 95       	ret

00003d9a <DIO_enu_SetPinDirection>:
ES_t DIO_enu_SetPinDirection (u8 Copy_u8_PortId, u8 Copy_u8_PinId,u8 Copy_u8_PinDirection)
{
    3d9a:	df 93       	push	r29
    3d9c:	cf 93       	push	r28
    3d9e:	cd b7       	in	r28, 0x3d	; 61
    3da0:	de b7       	in	r29, 0x3e	; 62
    3da2:	2e 97       	sbiw	r28, 0x0e	; 14
    3da4:	0f b6       	in	r0, 0x3f	; 63
    3da6:	f8 94       	cli
    3da8:	de bf       	out	0x3e, r29	; 62
    3daa:	0f be       	out	0x3f, r0	; 63
    3dac:	cd bf       	out	0x3d, r28	; 61
    3dae:	8a 83       	std	Y+2, r24	; 0x02
    3db0:	6b 83       	std	Y+3, r22	; 0x03
    3db2:	4c 83       	std	Y+4, r20	; 0x04
    u8 Local_u8_ErrorState = STATE_OK;
    3db4:	81 e0       	ldi	r24, 0x01	; 1
    3db6:	89 83       	std	Y+1, r24	; 0x01
    if((Copy_u8_PortId <= DIO_U8_PORTD) && (Copy_u8_PinId <= DIO_U8_PIN7) && ((Copy_u8_PinDirection == DIO_U8_OUTPUT)||(Copy_u8_PinDirection == DIO_U8_INPUT))){
    3db8:	8a 81       	ldd	r24, Y+2	; 0x02
    3dba:	84 30       	cpi	r24, 0x04	; 4
    3dbc:	08 f0       	brcs	.+2      	; 0x3dc0 <DIO_enu_SetPinDirection+0x26>
    3dbe:	0c c1       	rjmp	.+536    	; 0x3fd8 <DIO_enu_SetPinDirection+0x23e>
    3dc0:	8b 81       	ldd	r24, Y+3	; 0x03
    3dc2:	88 30       	cpi	r24, 0x08	; 8
    3dc4:	08 f0       	brcs	.+2      	; 0x3dc8 <DIO_enu_SetPinDirection+0x2e>
    3dc6:	08 c1       	rjmp	.+528    	; 0x3fd8 <DIO_enu_SetPinDirection+0x23e>
    3dc8:	8c 81       	ldd	r24, Y+4	; 0x04
    3dca:	81 30       	cpi	r24, 0x01	; 1
    3dcc:	21 f0       	breq	.+8      	; 0x3dd6 <DIO_enu_SetPinDirection+0x3c>
    3dce:	8c 81       	ldd	r24, Y+4	; 0x04
    3dd0:	88 23       	and	r24, r24
    3dd2:	09 f0       	breq	.+2      	; 0x3dd6 <DIO_enu_SetPinDirection+0x3c>
    3dd4:	01 c1       	rjmp	.+514    	; 0x3fd8 <DIO_enu_SetPinDirection+0x23e>
        switch (Copy_u8_PortId)
    3dd6:	8a 81       	ldd	r24, Y+2	; 0x02
    3dd8:	28 2f       	mov	r18, r24
    3dda:	30 e0       	ldi	r19, 0x00	; 0
    3ddc:	3e 87       	std	Y+14, r19	; 0x0e
    3dde:	2d 87       	std	Y+13, r18	; 0x0d
    3de0:	8d 85       	ldd	r24, Y+13	; 0x0d
    3de2:	9e 85       	ldd	r25, Y+14	; 0x0e
    3de4:	81 30       	cpi	r24, 0x01	; 1
    3de6:	91 05       	cpc	r25, r1
    3de8:	09 f4       	brne	.+2      	; 0x3dec <DIO_enu_SetPinDirection+0x52>
    3dea:	4f c0       	rjmp	.+158    	; 0x3e8a <DIO_enu_SetPinDirection+0xf0>
    3dec:	2d 85       	ldd	r18, Y+13	; 0x0d
    3dee:	3e 85       	ldd	r19, Y+14	; 0x0e
    3df0:	22 30       	cpi	r18, 0x02	; 2
    3df2:	31 05       	cpc	r19, r1
    3df4:	2c f4       	brge	.+10     	; 0x3e00 <DIO_enu_SetPinDirection+0x66>
    3df6:	8d 85       	ldd	r24, Y+13	; 0x0d
    3df8:	9e 85       	ldd	r25, Y+14	; 0x0e
    3dfa:	00 97       	sbiw	r24, 0x00	; 0
    3dfc:	71 f0       	breq	.+28     	; 0x3e1a <DIO_enu_SetPinDirection+0x80>
    3dfe:	ed c0       	rjmp	.+474    	; 0x3fda <DIO_enu_SetPinDirection+0x240>
    3e00:	2d 85       	ldd	r18, Y+13	; 0x0d
    3e02:	3e 85       	ldd	r19, Y+14	; 0x0e
    3e04:	22 30       	cpi	r18, 0x02	; 2
    3e06:	31 05       	cpc	r19, r1
    3e08:	09 f4       	brne	.+2      	; 0x3e0c <DIO_enu_SetPinDirection+0x72>
    3e0a:	77 c0       	rjmp	.+238    	; 0x3efa <DIO_enu_SetPinDirection+0x160>
    3e0c:	8d 85       	ldd	r24, Y+13	; 0x0d
    3e0e:	9e 85       	ldd	r25, Y+14	; 0x0e
    3e10:	83 30       	cpi	r24, 0x03	; 3
    3e12:	91 05       	cpc	r25, r1
    3e14:	09 f4       	brne	.+2      	; 0x3e18 <DIO_enu_SetPinDirection+0x7e>
    3e16:	a9 c0       	rjmp	.+338    	; 0x3f6a <DIO_enu_SetPinDirection+0x1d0>
    3e18:	e0 c0       	rjmp	.+448    	; 0x3fda <DIO_enu_SetPinDirection+0x240>
        {
        case DIO_U8_PORTA:
            switch (Copy_u8_PinDirection)
    3e1a:	8c 81       	ldd	r24, Y+4	; 0x04
    3e1c:	28 2f       	mov	r18, r24
    3e1e:	30 e0       	ldi	r19, 0x00	; 0
    3e20:	3c 87       	std	Y+12, r19	; 0x0c
    3e22:	2b 87       	std	Y+11, r18	; 0x0b
    3e24:	8b 85       	ldd	r24, Y+11	; 0x0b
    3e26:	9c 85       	ldd	r25, Y+12	; 0x0c
    3e28:	00 97       	sbiw	r24, 0x00	; 0
    3e2a:	d1 f0       	breq	.+52     	; 0x3e60 <DIO_enu_SetPinDirection+0xc6>
    3e2c:	2b 85       	ldd	r18, Y+11	; 0x0b
    3e2e:	3c 85       	ldd	r19, Y+12	; 0x0c
    3e30:	21 30       	cpi	r18, 0x01	; 1
    3e32:	31 05       	cpc	r19, r1
    3e34:	09 f0       	breq	.+2      	; 0x3e38 <DIO_enu_SetPinDirection+0x9e>
    3e36:	d1 c0       	rjmp	.+418    	; 0x3fda <DIO_enu_SetPinDirection+0x240>
            {
                case DIO_U8_OUTPUT:SET_BIT(DIO_U8_DDRA_REG,Copy_u8_PinId); break;
    3e38:	aa e3       	ldi	r26, 0x3A	; 58
    3e3a:	b0 e0       	ldi	r27, 0x00	; 0
    3e3c:	ea e3       	ldi	r30, 0x3A	; 58
    3e3e:	f0 e0       	ldi	r31, 0x00	; 0
    3e40:	80 81       	ld	r24, Z
    3e42:	48 2f       	mov	r20, r24
    3e44:	8b 81       	ldd	r24, Y+3	; 0x03
    3e46:	28 2f       	mov	r18, r24
    3e48:	30 e0       	ldi	r19, 0x00	; 0
    3e4a:	81 e0       	ldi	r24, 0x01	; 1
    3e4c:	90 e0       	ldi	r25, 0x00	; 0
    3e4e:	02 2e       	mov	r0, r18
    3e50:	02 c0       	rjmp	.+4      	; 0x3e56 <DIO_enu_SetPinDirection+0xbc>
    3e52:	88 0f       	add	r24, r24
    3e54:	99 1f       	adc	r25, r25
    3e56:	0a 94       	dec	r0
    3e58:	e2 f7       	brpl	.-8      	; 0x3e52 <DIO_enu_SetPinDirection+0xb8>
    3e5a:	84 2b       	or	r24, r20
    3e5c:	8c 93       	st	X, r24
    3e5e:	bd c0       	rjmp	.+378    	; 0x3fda <DIO_enu_SetPinDirection+0x240>
                case DIO_U8_INPUT: CLR_BIT(DIO_U8_DDRA_REG,Copy_u8_PinId); break; 
    3e60:	aa e3       	ldi	r26, 0x3A	; 58
    3e62:	b0 e0       	ldi	r27, 0x00	; 0
    3e64:	ea e3       	ldi	r30, 0x3A	; 58
    3e66:	f0 e0       	ldi	r31, 0x00	; 0
    3e68:	80 81       	ld	r24, Z
    3e6a:	48 2f       	mov	r20, r24
    3e6c:	8b 81       	ldd	r24, Y+3	; 0x03
    3e6e:	28 2f       	mov	r18, r24
    3e70:	30 e0       	ldi	r19, 0x00	; 0
    3e72:	81 e0       	ldi	r24, 0x01	; 1
    3e74:	90 e0       	ldi	r25, 0x00	; 0
    3e76:	02 2e       	mov	r0, r18
    3e78:	02 c0       	rjmp	.+4      	; 0x3e7e <DIO_enu_SetPinDirection+0xe4>
    3e7a:	88 0f       	add	r24, r24
    3e7c:	99 1f       	adc	r25, r25
    3e7e:	0a 94       	dec	r0
    3e80:	e2 f7       	brpl	.-8      	; 0x3e7a <DIO_enu_SetPinDirection+0xe0>
    3e82:	80 95       	com	r24
    3e84:	84 23       	and	r24, r20
    3e86:	8c 93       	st	X, r24
    3e88:	a8 c0       	rjmp	.+336    	; 0x3fda <DIO_enu_SetPinDirection+0x240>
            }
        break;
        case DIO_U8_PORTB:
            switch (Copy_u8_PinDirection)
    3e8a:	8c 81       	ldd	r24, Y+4	; 0x04
    3e8c:	28 2f       	mov	r18, r24
    3e8e:	30 e0       	ldi	r19, 0x00	; 0
    3e90:	3a 87       	std	Y+10, r19	; 0x0a
    3e92:	29 87       	std	Y+9, r18	; 0x09
    3e94:	89 85       	ldd	r24, Y+9	; 0x09
    3e96:	9a 85       	ldd	r25, Y+10	; 0x0a
    3e98:	00 97       	sbiw	r24, 0x00	; 0
    3e9a:	d1 f0       	breq	.+52     	; 0x3ed0 <DIO_enu_SetPinDirection+0x136>
    3e9c:	29 85       	ldd	r18, Y+9	; 0x09
    3e9e:	3a 85       	ldd	r19, Y+10	; 0x0a
    3ea0:	21 30       	cpi	r18, 0x01	; 1
    3ea2:	31 05       	cpc	r19, r1
    3ea4:	09 f0       	breq	.+2      	; 0x3ea8 <DIO_enu_SetPinDirection+0x10e>
    3ea6:	99 c0       	rjmp	.+306    	; 0x3fda <DIO_enu_SetPinDirection+0x240>
            {
                case DIO_U8_OUTPUT:SET_BIT(DIO_U8_DDRB_REG,Copy_u8_PinId); break;
    3ea8:	a7 e3       	ldi	r26, 0x37	; 55
    3eaa:	b0 e0       	ldi	r27, 0x00	; 0
    3eac:	e7 e3       	ldi	r30, 0x37	; 55
    3eae:	f0 e0       	ldi	r31, 0x00	; 0
    3eb0:	80 81       	ld	r24, Z
    3eb2:	48 2f       	mov	r20, r24
    3eb4:	8b 81       	ldd	r24, Y+3	; 0x03
    3eb6:	28 2f       	mov	r18, r24
    3eb8:	30 e0       	ldi	r19, 0x00	; 0
    3eba:	81 e0       	ldi	r24, 0x01	; 1
    3ebc:	90 e0       	ldi	r25, 0x00	; 0
    3ebe:	02 2e       	mov	r0, r18
    3ec0:	02 c0       	rjmp	.+4      	; 0x3ec6 <DIO_enu_SetPinDirection+0x12c>
    3ec2:	88 0f       	add	r24, r24
    3ec4:	99 1f       	adc	r25, r25
    3ec6:	0a 94       	dec	r0
    3ec8:	e2 f7       	brpl	.-8      	; 0x3ec2 <DIO_enu_SetPinDirection+0x128>
    3eca:	84 2b       	or	r24, r20
    3ecc:	8c 93       	st	X, r24
    3ece:	85 c0       	rjmp	.+266    	; 0x3fda <DIO_enu_SetPinDirection+0x240>
                case DIO_U8_INPUT: CLR_BIT(DIO_U8_DDRB_REG,Copy_u8_PinId); break; 
    3ed0:	a7 e3       	ldi	r26, 0x37	; 55
    3ed2:	b0 e0       	ldi	r27, 0x00	; 0
    3ed4:	e7 e3       	ldi	r30, 0x37	; 55
    3ed6:	f0 e0       	ldi	r31, 0x00	; 0
    3ed8:	80 81       	ld	r24, Z
    3eda:	48 2f       	mov	r20, r24
    3edc:	8b 81       	ldd	r24, Y+3	; 0x03
    3ede:	28 2f       	mov	r18, r24
    3ee0:	30 e0       	ldi	r19, 0x00	; 0
    3ee2:	81 e0       	ldi	r24, 0x01	; 1
    3ee4:	90 e0       	ldi	r25, 0x00	; 0
    3ee6:	02 2e       	mov	r0, r18
    3ee8:	02 c0       	rjmp	.+4      	; 0x3eee <DIO_enu_SetPinDirection+0x154>
    3eea:	88 0f       	add	r24, r24
    3eec:	99 1f       	adc	r25, r25
    3eee:	0a 94       	dec	r0
    3ef0:	e2 f7       	brpl	.-8      	; 0x3eea <DIO_enu_SetPinDirection+0x150>
    3ef2:	80 95       	com	r24
    3ef4:	84 23       	and	r24, r20
    3ef6:	8c 93       	st	X, r24
    3ef8:	70 c0       	rjmp	.+224    	; 0x3fda <DIO_enu_SetPinDirection+0x240>
            }
        break;
        case DIO_U8_PORTC:
            switch (Copy_u8_PinDirection)
    3efa:	8c 81       	ldd	r24, Y+4	; 0x04
    3efc:	28 2f       	mov	r18, r24
    3efe:	30 e0       	ldi	r19, 0x00	; 0
    3f00:	38 87       	std	Y+8, r19	; 0x08
    3f02:	2f 83       	std	Y+7, r18	; 0x07
    3f04:	8f 81       	ldd	r24, Y+7	; 0x07
    3f06:	98 85       	ldd	r25, Y+8	; 0x08
    3f08:	00 97       	sbiw	r24, 0x00	; 0
    3f0a:	d1 f0       	breq	.+52     	; 0x3f40 <DIO_enu_SetPinDirection+0x1a6>
    3f0c:	2f 81       	ldd	r18, Y+7	; 0x07
    3f0e:	38 85       	ldd	r19, Y+8	; 0x08
    3f10:	21 30       	cpi	r18, 0x01	; 1
    3f12:	31 05       	cpc	r19, r1
    3f14:	09 f0       	breq	.+2      	; 0x3f18 <DIO_enu_SetPinDirection+0x17e>
    3f16:	61 c0       	rjmp	.+194    	; 0x3fda <DIO_enu_SetPinDirection+0x240>
            {
                case DIO_U8_OUTPUT:SET_BIT(DIO_U8_DDRC_REG,Copy_u8_PinId); break;
    3f18:	a4 e3       	ldi	r26, 0x34	; 52
    3f1a:	b0 e0       	ldi	r27, 0x00	; 0
    3f1c:	e4 e3       	ldi	r30, 0x34	; 52
    3f1e:	f0 e0       	ldi	r31, 0x00	; 0
    3f20:	80 81       	ld	r24, Z
    3f22:	48 2f       	mov	r20, r24
    3f24:	8b 81       	ldd	r24, Y+3	; 0x03
    3f26:	28 2f       	mov	r18, r24
    3f28:	30 e0       	ldi	r19, 0x00	; 0
    3f2a:	81 e0       	ldi	r24, 0x01	; 1
    3f2c:	90 e0       	ldi	r25, 0x00	; 0
    3f2e:	02 2e       	mov	r0, r18
    3f30:	02 c0       	rjmp	.+4      	; 0x3f36 <DIO_enu_SetPinDirection+0x19c>
    3f32:	88 0f       	add	r24, r24
    3f34:	99 1f       	adc	r25, r25
    3f36:	0a 94       	dec	r0
    3f38:	e2 f7       	brpl	.-8      	; 0x3f32 <DIO_enu_SetPinDirection+0x198>
    3f3a:	84 2b       	or	r24, r20
    3f3c:	8c 93       	st	X, r24
    3f3e:	4d c0       	rjmp	.+154    	; 0x3fda <DIO_enu_SetPinDirection+0x240>
                case DIO_U8_INPUT: CLR_BIT(DIO_U8_DDRC_REG,Copy_u8_PinId); break; 
    3f40:	a4 e3       	ldi	r26, 0x34	; 52
    3f42:	b0 e0       	ldi	r27, 0x00	; 0
    3f44:	e4 e3       	ldi	r30, 0x34	; 52
    3f46:	f0 e0       	ldi	r31, 0x00	; 0
    3f48:	80 81       	ld	r24, Z
    3f4a:	48 2f       	mov	r20, r24
    3f4c:	8b 81       	ldd	r24, Y+3	; 0x03
    3f4e:	28 2f       	mov	r18, r24
    3f50:	30 e0       	ldi	r19, 0x00	; 0
    3f52:	81 e0       	ldi	r24, 0x01	; 1
    3f54:	90 e0       	ldi	r25, 0x00	; 0
    3f56:	02 2e       	mov	r0, r18
    3f58:	02 c0       	rjmp	.+4      	; 0x3f5e <DIO_enu_SetPinDirection+0x1c4>
    3f5a:	88 0f       	add	r24, r24
    3f5c:	99 1f       	adc	r25, r25
    3f5e:	0a 94       	dec	r0
    3f60:	e2 f7       	brpl	.-8      	; 0x3f5a <DIO_enu_SetPinDirection+0x1c0>
    3f62:	80 95       	com	r24
    3f64:	84 23       	and	r24, r20
    3f66:	8c 93       	st	X, r24
    3f68:	38 c0       	rjmp	.+112    	; 0x3fda <DIO_enu_SetPinDirection+0x240>
            } 
        break;
        case DIO_U8_PORTD:
            switch (Copy_u8_PinDirection)
    3f6a:	8c 81       	ldd	r24, Y+4	; 0x04
    3f6c:	28 2f       	mov	r18, r24
    3f6e:	30 e0       	ldi	r19, 0x00	; 0
    3f70:	3e 83       	std	Y+6, r19	; 0x06
    3f72:	2d 83       	std	Y+5, r18	; 0x05
    3f74:	8d 81       	ldd	r24, Y+5	; 0x05
    3f76:	9e 81       	ldd	r25, Y+6	; 0x06
    3f78:	00 97       	sbiw	r24, 0x00	; 0
    3f7a:	c9 f0       	breq	.+50     	; 0x3fae <DIO_enu_SetPinDirection+0x214>
    3f7c:	2d 81       	ldd	r18, Y+5	; 0x05
    3f7e:	3e 81       	ldd	r19, Y+6	; 0x06
    3f80:	21 30       	cpi	r18, 0x01	; 1
    3f82:	31 05       	cpc	r19, r1
    3f84:	51 f5       	brne	.+84     	; 0x3fda <DIO_enu_SetPinDirection+0x240>
            {
                case DIO_U8_OUTPUT:SET_BIT(DIO_U8_DDRD_REG,Copy_u8_PinId); break;
    3f86:	a1 e3       	ldi	r26, 0x31	; 49
    3f88:	b0 e0       	ldi	r27, 0x00	; 0
    3f8a:	e1 e3       	ldi	r30, 0x31	; 49
    3f8c:	f0 e0       	ldi	r31, 0x00	; 0
    3f8e:	80 81       	ld	r24, Z
    3f90:	48 2f       	mov	r20, r24
    3f92:	8b 81       	ldd	r24, Y+3	; 0x03
    3f94:	28 2f       	mov	r18, r24
    3f96:	30 e0       	ldi	r19, 0x00	; 0
    3f98:	81 e0       	ldi	r24, 0x01	; 1
    3f9a:	90 e0       	ldi	r25, 0x00	; 0
    3f9c:	02 2e       	mov	r0, r18
    3f9e:	02 c0       	rjmp	.+4      	; 0x3fa4 <DIO_enu_SetPinDirection+0x20a>
    3fa0:	88 0f       	add	r24, r24
    3fa2:	99 1f       	adc	r25, r25
    3fa4:	0a 94       	dec	r0
    3fa6:	e2 f7       	brpl	.-8      	; 0x3fa0 <DIO_enu_SetPinDirection+0x206>
    3fa8:	84 2b       	or	r24, r20
    3faa:	8c 93       	st	X, r24
    3fac:	16 c0       	rjmp	.+44     	; 0x3fda <DIO_enu_SetPinDirection+0x240>
                case DIO_U8_INPUT: CLR_BIT(DIO_U8_DDRD_REG,Copy_u8_PinId); break; 
    3fae:	a1 e3       	ldi	r26, 0x31	; 49
    3fb0:	b0 e0       	ldi	r27, 0x00	; 0
    3fb2:	e1 e3       	ldi	r30, 0x31	; 49
    3fb4:	f0 e0       	ldi	r31, 0x00	; 0
    3fb6:	80 81       	ld	r24, Z
    3fb8:	48 2f       	mov	r20, r24
    3fba:	8b 81       	ldd	r24, Y+3	; 0x03
    3fbc:	28 2f       	mov	r18, r24
    3fbe:	30 e0       	ldi	r19, 0x00	; 0
    3fc0:	81 e0       	ldi	r24, 0x01	; 1
    3fc2:	90 e0       	ldi	r25, 0x00	; 0
    3fc4:	02 2e       	mov	r0, r18
    3fc6:	02 c0       	rjmp	.+4      	; 0x3fcc <DIO_enu_SetPinDirection+0x232>
    3fc8:	88 0f       	add	r24, r24
    3fca:	99 1f       	adc	r25, r25
    3fcc:	0a 94       	dec	r0
    3fce:	e2 f7       	brpl	.-8      	; 0x3fc8 <DIO_enu_SetPinDirection+0x22e>
    3fd0:	80 95       	com	r24
    3fd2:	84 23       	and	r24, r20
    3fd4:	8c 93       	st	X, r24
    3fd6:	01 c0       	rjmp	.+2      	; 0x3fda <DIO_enu_SetPinDirection+0x240>
        break;
        }
    }
    else
    {
        Local_u8_ErrorState = STATE_NOT_OK;
    3fd8:	19 82       	std	Y+1, r1	; 0x01
    }
    return Local_u8_ErrorState;
    3fda:	89 81       	ldd	r24, Y+1	; 0x01
}
    3fdc:	2e 96       	adiw	r28, 0x0e	; 14
    3fde:	0f b6       	in	r0, 0x3f	; 63
    3fe0:	f8 94       	cli
    3fe2:	de bf       	out	0x3e, r29	; 62
    3fe4:	0f be       	out	0x3f, r0	; 63
    3fe6:	cd bf       	out	0x3d, r28	; 61
    3fe8:	cf 91       	pop	r28
    3fea:	df 91       	pop	r29
    3fec:	08 95       	ret

00003fee <DIO_enu_SetPinValue>:

ES_t DIO_enu_SetPinValue(u8 Copy_u8_PortId, u8 Copy_u8_PinId,u8 Copy_u8_PinValue){
    3fee:	df 93       	push	r29
    3ff0:	cf 93       	push	r28
    3ff2:	cd b7       	in	r28, 0x3d	; 61
    3ff4:	de b7       	in	r29, 0x3e	; 62
    3ff6:	2e 97       	sbiw	r28, 0x0e	; 14
    3ff8:	0f b6       	in	r0, 0x3f	; 63
    3ffa:	f8 94       	cli
    3ffc:	de bf       	out	0x3e, r29	; 62
    3ffe:	0f be       	out	0x3f, r0	; 63
    4000:	cd bf       	out	0x3d, r28	; 61
    4002:	8a 83       	std	Y+2, r24	; 0x02
    4004:	6b 83       	std	Y+3, r22	; 0x03
    4006:	4c 83       	std	Y+4, r20	; 0x04
    u8 Local_u8_ErrorState = STATE_OK;
    4008:	81 e0       	ldi	r24, 0x01	; 1
    400a:	89 83       	std	Y+1, r24	; 0x01
    if((Copy_u8_PortId <= DIO_U8_PORTD) && (Copy_u8_PinId <= DIO_U8_PIN7) && ((Copy_u8_PinValue == DIO_U8_HIGH)||(Copy_u8_PinValue == DIO_U8_LOW))){
    400c:	8a 81       	ldd	r24, Y+2	; 0x02
    400e:	84 30       	cpi	r24, 0x04	; 4
    4010:	08 f0       	brcs	.+2      	; 0x4014 <DIO_enu_SetPinValue+0x26>
    4012:	0c c1       	rjmp	.+536    	; 0x422c <DIO_enu_SetPinValue+0x23e>
    4014:	8b 81       	ldd	r24, Y+3	; 0x03
    4016:	88 30       	cpi	r24, 0x08	; 8
    4018:	08 f0       	brcs	.+2      	; 0x401c <DIO_enu_SetPinValue+0x2e>
    401a:	08 c1       	rjmp	.+528    	; 0x422c <DIO_enu_SetPinValue+0x23e>
    401c:	8c 81       	ldd	r24, Y+4	; 0x04
    401e:	81 30       	cpi	r24, 0x01	; 1
    4020:	21 f0       	breq	.+8      	; 0x402a <DIO_enu_SetPinValue+0x3c>
    4022:	8c 81       	ldd	r24, Y+4	; 0x04
    4024:	88 23       	and	r24, r24
    4026:	09 f0       	breq	.+2      	; 0x402a <DIO_enu_SetPinValue+0x3c>
    4028:	01 c1       	rjmp	.+514    	; 0x422c <DIO_enu_SetPinValue+0x23e>
        switch (Copy_u8_PortId)
    402a:	8a 81       	ldd	r24, Y+2	; 0x02
    402c:	28 2f       	mov	r18, r24
    402e:	30 e0       	ldi	r19, 0x00	; 0
    4030:	3e 87       	std	Y+14, r19	; 0x0e
    4032:	2d 87       	std	Y+13, r18	; 0x0d
    4034:	8d 85       	ldd	r24, Y+13	; 0x0d
    4036:	9e 85       	ldd	r25, Y+14	; 0x0e
    4038:	81 30       	cpi	r24, 0x01	; 1
    403a:	91 05       	cpc	r25, r1
    403c:	09 f4       	brne	.+2      	; 0x4040 <DIO_enu_SetPinValue+0x52>
    403e:	4f c0       	rjmp	.+158    	; 0x40de <DIO_enu_SetPinValue+0xf0>
    4040:	2d 85       	ldd	r18, Y+13	; 0x0d
    4042:	3e 85       	ldd	r19, Y+14	; 0x0e
    4044:	22 30       	cpi	r18, 0x02	; 2
    4046:	31 05       	cpc	r19, r1
    4048:	2c f4       	brge	.+10     	; 0x4054 <DIO_enu_SetPinValue+0x66>
    404a:	8d 85       	ldd	r24, Y+13	; 0x0d
    404c:	9e 85       	ldd	r25, Y+14	; 0x0e
    404e:	00 97       	sbiw	r24, 0x00	; 0
    4050:	71 f0       	breq	.+28     	; 0x406e <DIO_enu_SetPinValue+0x80>
    4052:	ed c0       	rjmp	.+474    	; 0x422e <DIO_enu_SetPinValue+0x240>
    4054:	2d 85       	ldd	r18, Y+13	; 0x0d
    4056:	3e 85       	ldd	r19, Y+14	; 0x0e
    4058:	22 30       	cpi	r18, 0x02	; 2
    405a:	31 05       	cpc	r19, r1
    405c:	09 f4       	brne	.+2      	; 0x4060 <DIO_enu_SetPinValue+0x72>
    405e:	77 c0       	rjmp	.+238    	; 0x414e <DIO_enu_SetPinValue+0x160>
    4060:	8d 85       	ldd	r24, Y+13	; 0x0d
    4062:	9e 85       	ldd	r25, Y+14	; 0x0e
    4064:	83 30       	cpi	r24, 0x03	; 3
    4066:	91 05       	cpc	r25, r1
    4068:	09 f4       	brne	.+2      	; 0x406c <DIO_enu_SetPinValue+0x7e>
    406a:	a9 c0       	rjmp	.+338    	; 0x41be <DIO_enu_SetPinValue+0x1d0>
    406c:	e0 c0       	rjmp	.+448    	; 0x422e <DIO_enu_SetPinValue+0x240>
        {
        case DIO_U8_PORTA:
            switch (Copy_u8_PinValue)
    406e:	8c 81       	ldd	r24, Y+4	; 0x04
    4070:	28 2f       	mov	r18, r24
    4072:	30 e0       	ldi	r19, 0x00	; 0
    4074:	3c 87       	std	Y+12, r19	; 0x0c
    4076:	2b 87       	std	Y+11, r18	; 0x0b
    4078:	8b 85       	ldd	r24, Y+11	; 0x0b
    407a:	9c 85       	ldd	r25, Y+12	; 0x0c
    407c:	00 97       	sbiw	r24, 0x00	; 0
    407e:	d1 f0       	breq	.+52     	; 0x40b4 <DIO_enu_SetPinValue+0xc6>
    4080:	2b 85       	ldd	r18, Y+11	; 0x0b
    4082:	3c 85       	ldd	r19, Y+12	; 0x0c
    4084:	21 30       	cpi	r18, 0x01	; 1
    4086:	31 05       	cpc	r19, r1
    4088:	09 f0       	breq	.+2      	; 0x408c <DIO_enu_SetPinValue+0x9e>
    408a:	d1 c0       	rjmp	.+418    	; 0x422e <DIO_enu_SetPinValue+0x240>
            {
                case DIO_U8_HIGH:SET_BIT(DIO_U8_PORTA_REG,Copy_u8_PinId); break;
    408c:	ab e3       	ldi	r26, 0x3B	; 59
    408e:	b0 e0       	ldi	r27, 0x00	; 0
    4090:	eb e3       	ldi	r30, 0x3B	; 59
    4092:	f0 e0       	ldi	r31, 0x00	; 0
    4094:	80 81       	ld	r24, Z
    4096:	48 2f       	mov	r20, r24
    4098:	8b 81       	ldd	r24, Y+3	; 0x03
    409a:	28 2f       	mov	r18, r24
    409c:	30 e0       	ldi	r19, 0x00	; 0
    409e:	81 e0       	ldi	r24, 0x01	; 1
    40a0:	90 e0       	ldi	r25, 0x00	; 0
    40a2:	02 2e       	mov	r0, r18
    40a4:	02 c0       	rjmp	.+4      	; 0x40aa <DIO_enu_SetPinValue+0xbc>
    40a6:	88 0f       	add	r24, r24
    40a8:	99 1f       	adc	r25, r25
    40aa:	0a 94       	dec	r0
    40ac:	e2 f7       	brpl	.-8      	; 0x40a6 <DIO_enu_SetPinValue+0xb8>
    40ae:	84 2b       	or	r24, r20
    40b0:	8c 93       	st	X, r24
    40b2:	bd c0       	rjmp	.+378    	; 0x422e <DIO_enu_SetPinValue+0x240>
                case DIO_U8_LOW: CLR_BIT(DIO_U8_PORTA_REG,Copy_u8_PinId); break; 
    40b4:	ab e3       	ldi	r26, 0x3B	; 59
    40b6:	b0 e0       	ldi	r27, 0x00	; 0
    40b8:	eb e3       	ldi	r30, 0x3B	; 59
    40ba:	f0 e0       	ldi	r31, 0x00	; 0
    40bc:	80 81       	ld	r24, Z
    40be:	48 2f       	mov	r20, r24
    40c0:	8b 81       	ldd	r24, Y+3	; 0x03
    40c2:	28 2f       	mov	r18, r24
    40c4:	30 e0       	ldi	r19, 0x00	; 0
    40c6:	81 e0       	ldi	r24, 0x01	; 1
    40c8:	90 e0       	ldi	r25, 0x00	; 0
    40ca:	02 2e       	mov	r0, r18
    40cc:	02 c0       	rjmp	.+4      	; 0x40d2 <DIO_enu_SetPinValue+0xe4>
    40ce:	88 0f       	add	r24, r24
    40d0:	99 1f       	adc	r25, r25
    40d2:	0a 94       	dec	r0
    40d4:	e2 f7       	brpl	.-8      	; 0x40ce <DIO_enu_SetPinValue+0xe0>
    40d6:	80 95       	com	r24
    40d8:	84 23       	and	r24, r20
    40da:	8c 93       	st	X, r24
    40dc:	a8 c0       	rjmp	.+336    	; 0x422e <DIO_enu_SetPinValue+0x240>
            }
        break;
        case DIO_U8_PORTB:
            switch (Copy_u8_PinValue)
    40de:	8c 81       	ldd	r24, Y+4	; 0x04
    40e0:	28 2f       	mov	r18, r24
    40e2:	30 e0       	ldi	r19, 0x00	; 0
    40e4:	3a 87       	std	Y+10, r19	; 0x0a
    40e6:	29 87       	std	Y+9, r18	; 0x09
    40e8:	89 85       	ldd	r24, Y+9	; 0x09
    40ea:	9a 85       	ldd	r25, Y+10	; 0x0a
    40ec:	00 97       	sbiw	r24, 0x00	; 0
    40ee:	d1 f0       	breq	.+52     	; 0x4124 <DIO_enu_SetPinValue+0x136>
    40f0:	29 85       	ldd	r18, Y+9	; 0x09
    40f2:	3a 85       	ldd	r19, Y+10	; 0x0a
    40f4:	21 30       	cpi	r18, 0x01	; 1
    40f6:	31 05       	cpc	r19, r1
    40f8:	09 f0       	breq	.+2      	; 0x40fc <DIO_enu_SetPinValue+0x10e>
    40fa:	99 c0       	rjmp	.+306    	; 0x422e <DIO_enu_SetPinValue+0x240>
            {
                case DIO_U8_HIGH:SET_BIT(DIO_U8_PORTB_REG,Copy_u8_PinId); break;
    40fc:	a8 e3       	ldi	r26, 0x38	; 56
    40fe:	b0 e0       	ldi	r27, 0x00	; 0
    4100:	e8 e3       	ldi	r30, 0x38	; 56
    4102:	f0 e0       	ldi	r31, 0x00	; 0
    4104:	80 81       	ld	r24, Z
    4106:	48 2f       	mov	r20, r24
    4108:	8b 81       	ldd	r24, Y+3	; 0x03
    410a:	28 2f       	mov	r18, r24
    410c:	30 e0       	ldi	r19, 0x00	; 0
    410e:	81 e0       	ldi	r24, 0x01	; 1
    4110:	90 e0       	ldi	r25, 0x00	; 0
    4112:	02 2e       	mov	r0, r18
    4114:	02 c0       	rjmp	.+4      	; 0x411a <DIO_enu_SetPinValue+0x12c>
    4116:	88 0f       	add	r24, r24
    4118:	99 1f       	adc	r25, r25
    411a:	0a 94       	dec	r0
    411c:	e2 f7       	brpl	.-8      	; 0x4116 <DIO_enu_SetPinValue+0x128>
    411e:	84 2b       	or	r24, r20
    4120:	8c 93       	st	X, r24
    4122:	85 c0       	rjmp	.+266    	; 0x422e <DIO_enu_SetPinValue+0x240>
                case DIO_U8_LOW: CLR_BIT(DIO_U8_PORTB_REG,Copy_u8_PinId); break; 
    4124:	a8 e3       	ldi	r26, 0x38	; 56
    4126:	b0 e0       	ldi	r27, 0x00	; 0
    4128:	e8 e3       	ldi	r30, 0x38	; 56
    412a:	f0 e0       	ldi	r31, 0x00	; 0
    412c:	80 81       	ld	r24, Z
    412e:	48 2f       	mov	r20, r24
    4130:	8b 81       	ldd	r24, Y+3	; 0x03
    4132:	28 2f       	mov	r18, r24
    4134:	30 e0       	ldi	r19, 0x00	; 0
    4136:	81 e0       	ldi	r24, 0x01	; 1
    4138:	90 e0       	ldi	r25, 0x00	; 0
    413a:	02 2e       	mov	r0, r18
    413c:	02 c0       	rjmp	.+4      	; 0x4142 <DIO_enu_SetPinValue+0x154>
    413e:	88 0f       	add	r24, r24
    4140:	99 1f       	adc	r25, r25
    4142:	0a 94       	dec	r0
    4144:	e2 f7       	brpl	.-8      	; 0x413e <DIO_enu_SetPinValue+0x150>
    4146:	80 95       	com	r24
    4148:	84 23       	and	r24, r20
    414a:	8c 93       	st	X, r24
    414c:	70 c0       	rjmp	.+224    	; 0x422e <DIO_enu_SetPinValue+0x240>
            }
        break;
        case DIO_U8_PORTC:
            switch (Copy_u8_PinValue)
    414e:	8c 81       	ldd	r24, Y+4	; 0x04
    4150:	28 2f       	mov	r18, r24
    4152:	30 e0       	ldi	r19, 0x00	; 0
    4154:	38 87       	std	Y+8, r19	; 0x08
    4156:	2f 83       	std	Y+7, r18	; 0x07
    4158:	8f 81       	ldd	r24, Y+7	; 0x07
    415a:	98 85       	ldd	r25, Y+8	; 0x08
    415c:	00 97       	sbiw	r24, 0x00	; 0
    415e:	d1 f0       	breq	.+52     	; 0x4194 <DIO_enu_SetPinValue+0x1a6>
    4160:	2f 81       	ldd	r18, Y+7	; 0x07
    4162:	38 85       	ldd	r19, Y+8	; 0x08
    4164:	21 30       	cpi	r18, 0x01	; 1
    4166:	31 05       	cpc	r19, r1
    4168:	09 f0       	breq	.+2      	; 0x416c <DIO_enu_SetPinValue+0x17e>
    416a:	61 c0       	rjmp	.+194    	; 0x422e <DIO_enu_SetPinValue+0x240>
            {
                case DIO_U8_HIGH:SET_BIT(DIO_U8_PORTC_REG,Copy_u8_PinId); break;
    416c:	a5 e3       	ldi	r26, 0x35	; 53
    416e:	b0 e0       	ldi	r27, 0x00	; 0
    4170:	e5 e3       	ldi	r30, 0x35	; 53
    4172:	f0 e0       	ldi	r31, 0x00	; 0
    4174:	80 81       	ld	r24, Z
    4176:	48 2f       	mov	r20, r24
    4178:	8b 81       	ldd	r24, Y+3	; 0x03
    417a:	28 2f       	mov	r18, r24
    417c:	30 e0       	ldi	r19, 0x00	; 0
    417e:	81 e0       	ldi	r24, 0x01	; 1
    4180:	90 e0       	ldi	r25, 0x00	; 0
    4182:	02 2e       	mov	r0, r18
    4184:	02 c0       	rjmp	.+4      	; 0x418a <DIO_enu_SetPinValue+0x19c>
    4186:	88 0f       	add	r24, r24
    4188:	99 1f       	adc	r25, r25
    418a:	0a 94       	dec	r0
    418c:	e2 f7       	brpl	.-8      	; 0x4186 <DIO_enu_SetPinValue+0x198>
    418e:	84 2b       	or	r24, r20
    4190:	8c 93       	st	X, r24
    4192:	4d c0       	rjmp	.+154    	; 0x422e <DIO_enu_SetPinValue+0x240>
                case DIO_U8_LOW: CLR_BIT(DIO_U8_PORTC_REG,Copy_u8_PinId); break; 
    4194:	a5 e3       	ldi	r26, 0x35	; 53
    4196:	b0 e0       	ldi	r27, 0x00	; 0
    4198:	e5 e3       	ldi	r30, 0x35	; 53
    419a:	f0 e0       	ldi	r31, 0x00	; 0
    419c:	80 81       	ld	r24, Z
    419e:	48 2f       	mov	r20, r24
    41a0:	8b 81       	ldd	r24, Y+3	; 0x03
    41a2:	28 2f       	mov	r18, r24
    41a4:	30 e0       	ldi	r19, 0x00	; 0
    41a6:	81 e0       	ldi	r24, 0x01	; 1
    41a8:	90 e0       	ldi	r25, 0x00	; 0
    41aa:	02 2e       	mov	r0, r18
    41ac:	02 c0       	rjmp	.+4      	; 0x41b2 <DIO_enu_SetPinValue+0x1c4>
    41ae:	88 0f       	add	r24, r24
    41b0:	99 1f       	adc	r25, r25
    41b2:	0a 94       	dec	r0
    41b4:	e2 f7       	brpl	.-8      	; 0x41ae <DIO_enu_SetPinValue+0x1c0>
    41b6:	80 95       	com	r24
    41b8:	84 23       	and	r24, r20
    41ba:	8c 93       	st	X, r24
    41bc:	38 c0       	rjmp	.+112    	; 0x422e <DIO_enu_SetPinValue+0x240>
            } 
        break;
        case DIO_U8_PORTD:
            switch (Copy_u8_PinValue)
    41be:	8c 81       	ldd	r24, Y+4	; 0x04
    41c0:	28 2f       	mov	r18, r24
    41c2:	30 e0       	ldi	r19, 0x00	; 0
    41c4:	3e 83       	std	Y+6, r19	; 0x06
    41c6:	2d 83       	std	Y+5, r18	; 0x05
    41c8:	8d 81       	ldd	r24, Y+5	; 0x05
    41ca:	9e 81       	ldd	r25, Y+6	; 0x06
    41cc:	00 97       	sbiw	r24, 0x00	; 0
    41ce:	c9 f0       	breq	.+50     	; 0x4202 <DIO_enu_SetPinValue+0x214>
    41d0:	2d 81       	ldd	r18, Y+5	; 0x05
    41d2:	3e 81       	ldd	r19, Y+6	; 0x06
    41d4:	21 30       	cpi	r18, 0x01	; 1
    41d6:	31 05       	cpc	r19, r1
    41d8:	51 f5       	brne	.+84     	; 0x422e <DIO_enu_SetPinValue+0x240>
            {
                case DIO_U8_HIGH:SET_BIT(DIO_U8_PORTD_REG,Copy_u8_PinId); break;
    41da:	a2 e3       	ldi	r26, 0x32	; 50
    41dc:	b0 e0       	ldi	r27, 0x00	; 0
    41de:	e2 e3       	ldi	r30, 0x32	; 50
    41e0:	f0 e0       	ldi	r31, 0x00	; 0
    41e2:	80 81       	ld	r24, Z
    41e4:	48 2f       	mov	r20, r24
    41e6:	8b 81       	ldd	r24, Y+3	; 0x03
    41e8:	28 2f       	mov	r18, r24
    41ea:	30 e0       	ldi	r19, 0x00	; 0
    41ec:	81 e0       	ldi	r24, 0x01	; 1
    41ee:	90 e0       	ldi	r25, 0x00	; 0
    41f0:	02 2e       	mov	r0, r18
    41f2:	02 c0       	rjmp	.+4      	; 0x41f8 <DIO_enu_SetPinValue+0x20a>
    41f4:	88 0f       	add	r24, r24
    41f6:	99 1f       	adc	r25, r25
    41f8:	0a 94       	dec	r0
    41fa:	e2 f7       	brpl	.-8      	; 0x41f4 <DIO_enu_SetPinValue+0x206>
    41fc:	84 2b       	or	r24, r20
    41fe:	8c 93       	st	X, r24
    4200:	16 c0       	rjmp	.+44     	; 0x422e <DIO_enu_SetPinValue+0x240>
                case DIO_U8_LOW: CLR_BIT(DIO_U8_PORTD_REG,Copy_u8_PinId); break; 
    4202:	a2 e3       	ldi	r26, 0x32	; 50
    4204:	b0 e0       	ldi	r27, 0x00	; 0
    4206:	e2 e3       	ldi	r30, 0x32	; 50
    4208:	f0 e0       	ldi	r31, 0x00	; 0
    420a:	80 81       	ld	r24, Z
    420c:	48 2f       	mov	r20, r24
    420e:	8b 81       	ldd	r24, Y+3	; 0x03
    4210:	28 2f       	mov	r18, r24
    4212:	30 e0       	ldi	r19, 0x00	; 0
    4214:	81 e0       	ldi	r24, 0x01	; 1
    4216:	90 e0       	ldi	r25, 0x00	; 0
    4218:	02 2e       	mov	r0, r18
    421a:	02 c0       	rjmp	.+4      	; 0x4220 <DIO_enu_SetPinValue+0x232>
    421c:	88 0f       	add	r24, r24
    421e:	99 1f       	adc	r25, r25
    4220:	0a 94       	dec	r0
    4222:	e2 f7       	brpl	.-8      	; 0x421c <DIO_enu_SetPinValue+0x22e>
    4224:	80 95       	com	r24
    4226:	84 23       	and	r24, r20
    4228:	8c 93       	st	X, r24
    422a:	01 c0       	rjmp	.+2      	; 0x422e <DIO_enu_SetPinValue+0x240>
        break;
        }
    }
    else
    {
        Local_u8_ErrorState = STATE_NOT_OK;
    422c:	19 82       	std	Y+1, r1	; 0x01
    }
    return Local_u8_ErrorState;
    422e:	89 81       	ldd	r24, Y+1	; 0x01
}
    4230:	2e 96       	adiw	r28, 0x0e	; 14
    4232:	0f b6       	in	r0, 0x3f	; 63
    4234:	f8 94       	cli
    4236:	de bf       	out	0x3e, r29	; 62
    4238:	0f be       	out	0x3f, r0	; 63
    423a:	cd bf       	out	0x3d, r28	; 61
    423c:	cf 91       	pop	r28
    423e:	df 91       	pop	r29
    4240:	08 95       	ret

00004242 <DIO_enu_GetPinValue>:

ES_t DIO_enu_GetPinValue(u8 Copy_u8_PortId, u8 Copy_u8_PinId,u8 * Copy_pu8_ReturnPinValue){
    4242:	df 93       	push	r29
    4244:	cf 93       	push	r28
    4246:	cd b7       	in	r28, 0x3d	; 61
    4248:	de b7       	in	r29, 0x3e	; 62
    424a:	27 97       	sbiw	r28, 0x07	; 7
    424c:	0f b6       	in	r0, 0x3f	; 63
    424e:	f8 94       	cli
    4250:	de bf       	out	0x3e, r29	; 62
    4252:	0f be       	out	0x3f, r0	; 63
    4254:	cd bf       	out	0x3d, r28	; 61
    4256:	8a 83       	std	Y+2, r24	; 0x02
    4258:	6b 83       	std	Y+3, r22	; 0x03
    425a:	5d 83       	std	Y+5, r21	; 0x05
    425c:	4c 83       	std	Y+4, r20	; 0x04
    u8 Local_u8_ErrorState = STATE_OK;
    425e:	81 e0       	ldi	r24, 0x01	; 1
    4260:	89 83       	std	Y+1, r24	; 0x01
    if((Copy_u8_PortId <= DIO_U8_PORTD) && (Copy_u8_PinId <= DIO_U8_PIN7) && (Copy_pu8_ReturnPinValue != NULL))
    4262:	8a 81       	ldd	r24, Y+2	; 0x02
    4264:	84 30       	cpi	r24, 0x04	; 4
    4266:	08 f0       	brcs	.+2      	; 0x426a <DIO_enu_GetPinValue+0x28>
    4268:	7a c0       	rjmp	.+244    	; 0x435e <DIO_enu_GetPinValue+0x11c>
    426a:	8b 81       	ldd	r24, Y+3	; 0x03
    426c:	88 30       	cpi	r24, 0x08	; 8
    426e:	08 f0       	brcs	.+2      	; 0x4272 <DIO_enu_GetPinValue+0x30>
    4270:	76 c0       	rjmp	.+236    	; 0x435e <DIO_enu_GetPinValue+0x11c>
    4272:	8c 81       	ldd	r24, Y+4	; 0x04
    4274:	9d 81       	ldd	r25, Y+5	; 0x05
    4276:	00 97       	sbiw	r24, 0x00	; 0
    4278:	09 f4       	brne	.+2      	; 0x427c <DIO_enu_GetPinValue+0x3a>
    427a:	71 c0       	rjmp	.+226    	; 0x435e <DIO_enu_GetPinValue+0x11c>
    {
        switch (Copy_u8_PortId)
    427c:	8a 81       	ldd	r24, Y+2	; 0x02
    427e:	28 2f       	mov	r18, r24
    4280:	30 e0       	ldi	r19, 0x00	; 0
    4282:	3f 83       	std	Y+7, r19	; 0x07
    4284:	2e 83       	std	Y+6, r18	; 0x06
    4286:	4e 81       	ldd	r20, Y+6	; 0x06
    4288:	5f 81       	ldd	r21, Y+7	; 0x07
    428a:	41 30       	cpi	r20, 0x01	; 1
    428c:	51 05       	cpc	r21, r1
    428e:	59 f1       	breq	.+86     	; 0x42e6 <DIO_enu_GetPinValue+0xa4>
    4290:	8e 81       	ldd	r24, Y+6	; 0x06
    4292:	9f 81       	ldd	r25, Y+7	; 0x07
    4294:	82 30       	cpi	r24, 0x02	; 2
    4296:	91 05       	cpc	r25, r1
    4298:	34 f4       	brge	.+12     	; 0x42a6 <DIO_enu_GetPinValue+0x64>
    429a:	2e 81       	ldd	r18, Y+6	; 0x06
    429c:	3f 81       	ldd	r19, Y+7	; 0x07
    429e:	21 15       	cp	r18, r1
    42a0:	31 05       	cpc	r19, r1
    42a2:	69 f0       	breq	.+26     	; 0x42be <DIO_enu_GetPinValue+0x7c>
    42a4:	5d c0       	rjmp	.+186    	; 0x4360 <DIO_enu_GetPinValue+0x11e>
    42a6:	4e 81       	ldd	r20, Y+6	; 0x06
    42a8:	5f 81       	ldd	r21, Y+7	; 0x07
    42aa:	42 30       	cpi	r20, 0x02	; 2
    42ac:	51 05       	cpc	r21, r1
    42ae:	79 f1       	breq	.+94     	; 0x430e <DIO_enu_GetPinValue+0xcc>
    42b0:	8e 81       	ldd	r24, Y+6	; 0x06
    42b2:	9f 81       	ldd	r25, Y+7	; 0x07
    42b4:	83 30       	cpi	r24, 0x03	; 3
    42b6:	91 05       	cpc	r25, r1
    42b8:	09 f4       	brne	.+2      	; 0x42bc <DIO_enu_GetPinValue+0x7a>
    42ba:	3d c0       	rjmp	.+122    	; 0x4336 <DIO_enu_GetPinValue+0xf4>
    42bc:	51 c0       	rjmp	.+162    	; 0x4360 <DIO_enu_GetPinValue+0x11e>
        {
            case DIO_U8_PORTA:*Copy_pu8_ReturnPinValue = GET_BIT(DIO_U8_PINA_REG,Copy_u8_PinId);break;
    42be:	e9 e3       	ldi	r30, 0x39	; 57
    42c0:	f0 e0       	ldi	r31, 0x00	; 0
    42c2:	80 81       	ld	r24, Z
    42c4:	28 2f       	mov	r18, r24
    42c6:	30 e0       	ldi	r19, 0x00	; 0
    42c8:	8b 81       	ldd	r24, Y+3	; 0x03
    42ca:	88 2f       	mov	r24, r24
    42cc:	90 e0       	ldi	r25, 0x00	; 0
    42ce:	a9 01       	movw	r20, r18
    42d0:	02 c0       	rjmp	.+4      	; 0x42d6 <DIO_enu_GetPinValue+0x94>
    42d2:	55 95       	asr	r21
    42d4:	47 95       	ror	r20
    42d6:	8a 95       	dec	r24
    42d8:	e2 f7       	brpl	.-8      	; 0x42d2 <DIO_enu_GetPinValue+0x90>
    42da:	ca 01       	movw	r24, r20
    42dc:	81 70       	andi	r24, 0x01	; 1
    42de:	ec 81       	ldd	r30, Y+4	; 0x04
    42e0:	fd 81       	ldd	r31, Y+5	; 0x05
    42e2:	80 83       	st	Z, r24
    42e4:	3d c0       	rjmp	.+122    	; 0x4360 <DIO_enu_GetPinValue+0x11e>
            case DIO_U8_PORTB:*Copy_pu8_ReturnPinValue = GET_BIT(DIO_U8_PINB_REG,Copy_u8_PinId);break;
    42e6:	e6 e3       	ldi	r30, 0x36	; 54
    42e8:	f0 e0       	ldi	r31, 0x00	; 0
    42ea:	80 81       	ld	r24, Z
    42ec:	28 2f       	mov	r18, r24
    42ee:	30 e0       	ldi	r19, 0x00	; 0
    42f0:	8b 81       	ldd	r24, Y+3	; 0x03
    42f2:	88 2f       	mov	r24, r24
    42f4:	90 e0       	ldi	r25, 0x00	; 0
    42f6:	a9 01       	movw	r20, r18
    42f8:	02 c0       	rjmp	.+4      	; 0x42fe <DIO_enu_GetPinValue+0xbc>
    42fa:	55 95       	asr	r21
    42fc:	47 95       	ror	r20
    42fe:	8a 95       	dec	r24
    4300:	e2 f7       	brpl	.-8      	; 0x42fa <DIO_enu_GetPinValue+0xb8>
    4302:	ca 01       	movw	r24, r20
    4304:	81 70       	andi	r24, 0x01	; 1
    4306:	ec 81       	ldd	r30, Y+4	; 0x04
    4308:	fd 81       	ldd	r31, Y+5	; 0x05
    430a:	80 83       	st	Z, r24
    430c:	29 c0       	rjmp	.+82     	; 0x4360 <DIO_enu_GetPinValue+0x11e>
            case DIO_U8_PORTC:*Copy_pu8_ReturnPinValue = GET_BIT(DIO_U8_PINC_REG,Copy_u8_PinId);break;
    430e:	e3 e3       	ldi	r30, 0x33	; 51
    4310:	f0 e0       	ldi	r31, 0x00	; 0
    4312:	80 81       	ld	r24, Z
    4314:	28 2f       	mov	r18, r24
    4316:	30 e0       	ldi	r19, 0x00	; 0
    4318:	8b 81       	ldd	r24, Y+3	; 0x03
    431a:	88 2f       	mov	r24, r24
    431c:	90 e0       	ldi	r25, 0x00	; 0
    431e:	a9 01       	movw	r20, r18
    4320:	02 c0       	rjmp	.+4      	; 0x4326 <DIO_enu_GetPinValue+0xe4>
    4322:	55 95       	asr	r21
    4324:	47 95       	ror	r20
    4326:	8a 95       	dec	r24
    4328:	e2 f7       	brpl	.-8      	; 0x4322 <DIO_enu_GetPinValue+0xe0>
    432a:	ca 01       	movw	r24, r20
    432c:	81 70       	andi	r24, 0x01	; 1
    432e:	ec 81       	ldd	r30, Y+4	; 0x04
    4330:	fd 81       	ldd	r31, Y+5	; 0x05
    4332:	80 83       	st	Z, r24
    4334:	15 c0       	rjmp	.+42     	; 0x4360 <DIO_enu_GetPinValue+0x11e>
            case DIO_U8_PORTD:*Copy_pu8_ReturnPinValue = GET_BIT(DIO_U8_PIND_REG,Copy_u8_PinId);break;
    4336:	e0 e3       	ldi	r30, 0x30	; 48
    4338:	f0 e0       	ldi	r31, 0x00	; 0
    433a:	80 81       	ld	r24, Z
    433c:	28 2f       	mov	r18, r24
    433e:	30 e0       	ldi	r19, 0x00	; 0
    4340:	8b 81       	ldd	r24, Y+3	; 0x03
    4342:	88 2f       	mov	r24, r24
    4344:	90 e0       	ldi	r25, 0x00	; 0
    4346:	a9 01       	movw	r20, r18
    4348:	02 c0       	rjmp	.+4      	; 0x434e <DIO_enu_GetPinValue+0x10c>
    434a:	55 95       	asr	r21
    434c:	47 95       	ror	r20
    434e:	8a 95       	dec	r24
    4350:	e2 f7       	brpl	.-8      	; 0x434a <DIO_enu_GetPinValue+0x108>
    4352:	ca 01       	movw	r24, r20
    4354:	81 70       	andi	r24, 0x01	; 1
    4356:	ec 81       	ldd	r30, Y+4	; 0x04
    4358:	fd 81       	ldd	r31, Y+5	; 0x05
    435a:	80 83       	st	Z, r24
    435c:	01 c0       	rjmp	.+2      	; 0x4360 <DIO_enu_GetPinValue+0x11e>
        }
    }
    else
    {
        Local_u8_ErrorState = STATE_NOT_OK;
    435e:	19 82       	std	Y+1, r1	; 0x01
    }
    return Local_u8_ErrorState;
    4360:	89 81       	ldd	r24, Y+1	; 0x01
}
    4362:	27 96       	adiw	r28, 0x07	; 7
    4364:	0f b6       	in	r0, 0x3f	; 63
    4366:	f8 94       	cli
    4368:	de bf       	out	0x3e, r29	; 62
    436a:	0f be       	out	0x3f, r0	; 63
    436c:	cd bf       	out	0x3d, r28	; 61
    436e:	cf 91       	pop	r28
    4370:	df 91       	pop	r29
    4372:	08 95       	ret

00004374 <DIO_enu_SetPortDirection>:

ES_t DIO_enu_SetPortDirection(u8 Copy_u8_PortId, u8 Copy_u8_PortDirection){
    4374:	df 93       	push	r29
    4376:	cf 93       	push	r28
    4378:	cd b7       	in	r28, 0x3d	; 61
    437a:	de b7       	in	r29, 0x3e	; 62
    437c:	2d 97       	sbiw	r28, 0x0d	; 13
    437e:	0f b6       	in	r0, 0x3f	; 63
    4380:	f8 94       	cli
    4382:	de bf       	out	0x3e, r29	; 62
    4384:	0f be       	out	0x3f, r0	; 63
    4386:	cd bf       	out	0x3d, r28	; 61
    4388:	8a 83       	std	Y+2, r24	; 0x02
    438a:	6b 83       	std	Y+3, r22	; 0x03
    u8 Local_u8_ErrorState = STATE_OK;
    438c:	81 e0       	ldi	r24, 0x01	; 1
    438e:	89 83       	std	Y+1, r24	; 0x01
    if((Copy_u8_PortId <= DIO_U8_PORTD) &&((Copy_u8_PortDirection == DIO_U8_OUTPUT)||(Copy_u8_PortDirection == DIO_U8_INPUT))){
    4390:	8a 81       	ldd	r24, Y+2	; 0x02
    4392:	84 30       	cpi	r24, 0x04	; 4
    4394:	08 f0       	brcs	.+2      	; 0x4398 <DIO_enu_SetPortDirection+0x24>
    4396:	84 c0       	rjmp	.+264    	; 0x44a0 <DIO_enu_SetPortDirection+0x12c>
    4398:	8b 81       	ldd	r24, Y+3	; 0x03
    439a:	81 30       	cpi	r24, 0x01	; 1
    439c:	21 f0       	breq	.+8      	; 0x43a6 <DIO_enu_SetPortDirection+0x32>
    439e:	8b 81       	ldd	r24, Y+3	; 0x03
    43a0:	88 23       	and	r24, r24
    43a2:	09 f0       	breq	.+2      	; 0x43a6 <DIO_enu_SetPortDirection+0x32>
    43a4:	7d c0       	rjmp	.+250    	; 0x44a0 <DIO_enu_SetPortDirection+0x12c>
        switch (Copy_u8_PortId)
    43a6:	8a 81       	ldd	r24, Y+2	; 0x02
    43a8:	28 2f       	mov	r18, r24
    43aa:	30 e0       	ldi	r19, 0x00	; 0
    43ac:	3d 87       	std	Y+13, r19	; 0x0d
    43ae:	2c 87       	std	Y+12, r18	; 0x0c
    43b0:	8c 85       	ldd	r24, Y+12	; 0x0c
    43b2:	9d 85       	ldd	r25, Y+13	; 0x0d
    43b4:	81 30       	cpi	r24, 0x01	; 1
    43b6:	91 05       	cpc	r25, r1
    43b8:	71 f1       	breq	.+92     	; 0x4416 <DIO_enu_SetPortDirection+0xa2>
    43ba:	2c 85       	ldd	r18, Y+12	; 0x0c
    43bc:	3d 85       	ldd	r19, Y+13	; 0x0d
    43be:	22 30       	cpi	r18, 0x02	; 2
    43c0:	31 05       	cpc	r19, r1
    43c2:	2c f4       	brge	.+10     	; 0x43ce <DIO_enu_SetPortDirection+0x5a>
    43c4:	8c 85       	ldd	r24, Y+12	; 0x0c
    43c6:	9d 85       	ldd	r25, Y+13	; 0x0d
    43c8:	00 97       	sbiw	r24, 0x00	; 0
    43ca:	69 f0       	breq	.+26     	; 0x43e6 <DIO_enu_SetPortDirection+0x72>
    43cc:	6a c0       	rjmp	.+212    	; 0x44a2 <DIO_enu_SetPortDirection+0x12e>
    43ce:	2c 85       	ldd	r18, Y+12	; 0x0c
    43d0:	3d 85       	ldd	r19, Y+13	; 0x0d
    43d2:	22 30       	cpi	r18, 0x02	; 2
    43d4:	31 05       	cpc	r19, r1
    43d6:	b1 f1       	breq	.+108    	; 0x4444 <DIO_enu_SetPortDirection+0xd0>
    43d8:	8c 85       	ldd	r24, Y+12	; 0x0c
    43da:	9d 85       	ldd	r25, Y+13	; 0x0d
    43dc:	83 30       	cpi	r24, 0x03	; 3
    43de:	91 05       	cpc	r25, r1
    43e0:	09 f4       	brne	.+2      	; 0x43e4 <DIO_enu_SetPortDirection+0x70>
    43e2:	47 c0       	rjmp	.+142    	; 0x4472 <DIO_enu_SetPortDirection+0xfe>
    43e4:	5e c0       	rjmp	.+188    	; 0x44a2 <DIO_enu_SetPortDirection+0x12e>
        {
        case DIO_U8_PORTA:
            switch (Copy_u8_PortDirection)
    43e6:	8b 81       	ldd	r24, Y+3	; 0x03
    43e8:	28 2f       	mov	r18, r24
    43ea:	30 e0       	ldi	r19, 0x00	; 0
    43ec:	3b 87       	std	Y+11, r19	; 0x0b
    43ee:	2a 87       	std	Y+10, r18	; 0x0a
    43f0:	8a 85       	ldd	r24, Y+10	; 0x0a
    43f2:	9b 85       	ldd	r25, Y+11	; 0x0b
    43f4:	00 97       	sbiw	r24, 0x00	; 0
    43f6:	59 f0       	breq	.+22     	; 0x440e <DIO_enu_SetPortDirection+0x9a>
    43f8:	2a 85       	ldd	r18, Y+10	; 0x0a
    43fa:	3b 85       	ldd	r19, Y+11	; 0x0b
    43fc:	21 30       	cpi	r18, 0x01	; 1
    43fe:	31 05       	cpc	r19, r1
    4400:	09 f0       	breq	.+2      	; 0x4404 <DIO_enu_SetPortDirection+0x90>
    4402:	4f c0       	rjmp	.+158    	; 0x44a2 <DIO_enu_SetPortDirection+0x12e>
            {
            case DIO_U8_OUTPUT: DIO_U8_DDRA_REG = DIO_U8_SETPORT_OUTPUT; break;
    4404:	ea e3       	ldi	r30, 0x3A	; 58
    4406:	f0 e0       	ldi	r31, 0x00	; 0
    4408:	8f ef       	ldi	r24, 0xFF	; 255
    440a:	80 83       	st	Z, r24
    440c:	4a c0       	rjmp	.+148    	; 0x44a2 <DIO_enu_SetPortDirection+0x12e>
            case DIO_U8_INPUT: DIO_U8_DDRA_REG =  DIO_U8_SETPORT_INPUT; break;
    440e:	ea e3       	ldi	r30, 0x3A	; 58
    4410:	f0 e0       	ldi	r31, 0x00	; 0
    4412:	10 82       	st	Z, r1
    4414:	46 c0       	rjmp	.+140    	; 0x44a2 <DIO_enu_SetPortDirection+0x12e>
            }
        break;
        case DIO_U8_PORTB:
            switch (Copy_u8_PortDirection)
    4416:	8b 81       	ldd	r24, Y+3	; 0x03
    4418:	28 2f       	mov	r18, r24
    441a:	30 e0       	ldi	r19, 0x00	; 0
    441c:	39 87       	std	Y+9, r19	; 0x09
    441e:	28 87       	std	Y+8, r18	; 0x08
    4420:	88 85       	ldd	r24, Y+8	; 0x08
    4422:	99 85       	ldd	r25, Y+9	; 0x09
    4424:	00 97       	sbiw	r24, 0x00	; 0
    4426:	51 f0       	breq	.+20     	; 0x443c <DIO_enu_SetPortDirection+0xc8>
    4428:	28 85       	ldd	r18, Y+8	; 0x08
    442a:	39 85       	ldd	r19, Y+9	; 0x09
    442c:	21 30       	cpi	r18, 0x01	; 1
    442e:	31 05       	cpc	r19, r1
    4430:	c1 f5       	brne	.+112    	; 0x44a2 <DIO_enu_SetPortDirection+0x12e>
                {
                case DIO_U8_OUTPUT: DIO_U8_DDRB_REG = DIO_U8_SETPORT_OUTPUT; break;
    4432:	e7 e3       	ldi	r30, 0x37	; 55
    4434:	f0 e0       	ldi	r31, 0x00	; 0
    4436:	8f ef       	ldi	r24, 0xFF	; 255
    4438:	80 83       	st	Z, r24
    443a:	33 c0       	rjmp	.+102    	; 0x44a2 <DIO_enu_SetPortDirection+0x12e>
                case DIO_U8_INPUT: DIO_U8_DDRB_REG =  DIO_U8_SETPORT_INPUT; break;
    443c:	e7 e3       	ldi	r30, 0x37	; 55
    443e:	f0 e0       	ldi	r31, 0x00	; 0
    4440:	10 82       	st	Z, r1
    4442:	2f c0       	rjmp	.+94     	; 0x44a2 <DIO_enu_SetPortDirection+0x12e>
                }
         break;
        case DIO_U8_PORTC:
            switch (Copy_u8_PortDirection)
    4444:	8b 81       	ldd	r24, Y+3	; 0x03
    4446:	28 2f       	mov	r18, r24
    4448:	30 e0       	ldi	r19, 0x00	; 0
    444a:	3f 83       	std	Y+7, r19	; 0x07
    444c:	2e 83       	std	Y+6, r18	; 0x06
    444e:	8e 81       	ldd	r24, Y+6	; 0x06
    4450:	9f 81       	ldd	r25, Y+7	; 0x07
    4452:	00 97       	sbiw	r24, 0x00	; 0
    4454:	51 f0       	breq	.+20     	; 0x446a <DIO_enu_SetPortDirection+0xf6>
    4456:	2e 81       	ldd	r18, Y+6	; 0x06
    4458:	3f 81       	ldd	r19, Y+7	; 0x07
    445a:	21 30       	cpi	r18, 0x01	; 1
    445c:	31 05       	cpc	r19, r1
    445e:	09 f5       	brne	.+66     	; 0x44a2 <DIO_enu_SetPortDirection+0x12e>
                {
                case DIO_U8_OUTPUT: DIO_U8_DDRC_REG = DIO_U8_SETPORT_OUTPUT; break;
    4460:	e4 e3       	ldi	r30, 0x34	; 52
    4462:	f0 e0       	ldi	r31, 0x00	; 0
    4464:	8f ef       	ldi	r24, 0xFF	; 255
    4466:	80 83       	st	Z, r24
    4468:	1c c0       	rjmp	.+56     	; 0x44a2 <DIO_enu_SetPortDirection+0x12e>
                case DIO_U8_INPUT: DIO_U8_DDRC_REG = DIO_U8_SETPORT_INPUT; break;
    446a:	e4 e3       	ldi	r30, 0x34	; 52
    446c:	f0 e0       	ldi	r31, 0x00	; 0
    446e:	10 82       	st	Z, r1
    4470:	18 c0       	rjmp	.+48     	; 0x44a2 <DIO_enu_SetPortDirection+0x12e>
                }
        break;
        case DIO_U8_PORTD:
            switch (Copy_u8_PortDirection)
    4472:	8b 81       	ldd	r24, Y+3	; 0x03
    4474:	28 2f       	mov	r18, r24
    4476:	30 e0       	ldi	r19, 0x00	; 0
    4478:	3d 83       	std	Y+5, r19	; 0x05
    447a:	2c 83       	std	Y+4, r18	; 0x04
    447c:	8c 81       	ldd	r24, Y+4	; 0x04
    447e:	9d 81       	ldd	r25, Y+5	; 0x05
    4480:	00 97       	sbiw	r24, 0x00	; 0
    4482:	51 f0       	breq	.+20     	; 0x4498 <DIO_enu_SetPortDirection+0x124>
    4484:	2c 81       	ldd	r18, Y+4	; 0x04
    4486:	3d 81       	ldd	r19, Y+5	; 0x05
    4488:	21 30       	cpi	r18, 0x01	; 1
    448a:	31 05       	cpc	r19, r1
    448c:	51 f4       	brne	.+20     	; 0x44a2 <DIO_enu_SetPortDirection+0x12e>
                {
                case DIO_U8_OUTPUT: DIO_U8_DDRD_REG = DIO_U8_SETPORT_OUTPUT; break;
    448e:	e1 e3       	ldi	r30, 0x31	; 49
    4490:	f0 e0       	ldi	r31, 0x00	; 0
    4492:	8f ef       	ldi	r24, 0xFF	; 255
    4494:	80 83       	st	Z, r24
    4496:	05 c0       	rjmp	.+10     	; 0x44a2 <DIO_enu_SetPortDirection+0x12e>
                case DIO_U8_INPUT: DIO_U8_DDRD_REG = DIO_U8_SETPORT_INPUT; break;
    4498:	e1 e3       	ldi	r30, 0x31	; 49
    449a:	f0 e0       	ldi	r31, 0x00	; 0
    449c:	10 82       	st	Z, r1
    449e:	01 c0       	rjmp	.+2      	; 0x44a2 <DIO_enu_SetPortDirection+0x12e>
                }
        break;
        }
    }else{
        Local_u8_ErrorState = STATE_NOT_OK;
    44a0:	19 82       	std	Y+1, r1	; 0x01
    }
    return Local_u8_ErrorState;
    44a2:	89 81       	ldd	r24, Y+1	; 0x01
}
    44a4:	2d 96       	adiw	r28, 0x0d	; 13
    44a6:	0f b6       	in	r0, 0x3f	; 63
    44a8:	f8 94       	cli
    44aa:	de bf       	out	0x3e, r29	; 62
    44ac:	0f be       	out	0x3f, r0	; 63
    44ae:	cd bf       	out	0x3d, r28	; 61
    44b0:	cf 91       	pop	r28
    44b2:	df 91       	pop	r29
    44b4:	08 95       	ret

000044b6 <DIO_enu_SetPortValue>:

ES_t DIO_enu_SetPortValue(u8 Copy_u8_PortId, u8 Copy_u8_PortValue){
    44b6:	df 93       	push	r29
    44b8:	cf 93       	push	r28
    44ba:	00 d0       	rcall	.+0      	; 0x44bc <DIO_enu_SetPortValue+0x6>
    44bc:	00 d0       	rcall	.+0      	; 0x44be <DIO_enu_SetPortValue+0x8>
    44be:	0f 92       	push	r0
    44c0:	cd b7       	in	r28, 0x3d	; 61
    44c2:	de b7       	in	r29, 0x3e	; 62
    44c4:	8a 83       	std	Y+2, r24	; 0x02
    44c6:	6b 83       	std	Y+3, r22	; 0x03
	u8 Local_u8_ErrorState = STATE_OK;
    44c8:	81 e0       	ldi	r24, 0x01	; 1
    44ca:	89 83       	std	Y+1, r24	; 0x01
	    if((Copy_u8_PortId <= DIO_U8_PORTD)){
    44cc:	8a 81       	ldd	r24, Y+2	; 0x02
    44ce:	84 30       	cpi	r24, 0x04	; 4
    44d0:	98 f5       	brcc	.+102    	; 0x4538 <DIO_enu_SetPortValue+0x82>
	        switch (Copy_u8_PortId)
    44d2:	8a 81       	ldd	r24, Y+2	; 0x02
    44d4:	28 2f       	mov	r18, r24
    44d6:	30 e0       	ldi	r19, 0x00	; 0
    44d8:	3d 83       	std	Y+5, r19	; 0x05
    44da:	2c 83       	std	Y+4, r18	; 0x04
    44dc:	8c 81       	ldd	r24, Y+4	; 0x04
    44de:	9d 81       	ldd	r25, Y+5	; 0x05
    44e0:	81 30       	cpi	r24, 0x01	; 1
    44e2:	91 05       	cpc	r25, r1
    44e4:	d1 f0       	breq	.+52     	; 0x451a <DIO_enu_SetPortValue+0x64>
    44e6:	2c 81       	ldd	r18, Y+4	; 0x04
    44e8:	3d 81       	ldd	r19, Y+5	; 0x05
    44ea:	22 30       	cpi	r18, 0x02	; 2
    44ec:	31 05       	cpc	r19, r1
    44ee:	2c f4       	brge	.+10     	; 0x44fa <DIO_enu_SetPortValue+0x44>
    44f0:	8c 81       	ldd	r24, Y+4	; 0x04
    44f2:	9d 81       	ldd	r25, Y+5	; 0x05
    44f4:	00 97       	sbiw	r24, 0x00	; 0
    44f6:	61 f0       	breq	.+24     	; 0x4510 <DIO_enu_SetPortValue+0x5a>
    44f8:	20 c0       	rjmp	.+64     	; 0x453a <DIO_enu_SetPortValue+0x84>
    44fa:	2c 81       	ldd	r18, Y+4	; 0x04
    44fc:	3d 81       	ldd	r19, Y+5	; 0x05
    44fe:	22 30       	cpi	r18, 0x02	; 2
    4500:	31 05       	cpc	r19, r1
    4502:	81 f0       	breq	.+32     	; 0x4524 <DIO_enu_SetPortValue+0x6e>
    4504:	8c 81       	ldd	r24, Y+4	; 0x04
    4506:	9d 81       	ldd	r25, Y+5	; 0x05
    4508:	83 30       	cpi	r24, 0x03	; 3
    450a:	91 05       	cpc	r25, r1
    450c:	81 f0       	breq	.+32     	; 0x452e <DIO_enu_SetPortValue+0x78>
    450e:	15 c0       	rjmp	.+42     	; 0x453a <DIO_enu_SetPortValue+0x84>
	        {
	        case DIO_U8_PORTA:DIO_U8_PORTA_REG = Copy_u8_PortValue; break;
    4510:	eb e3       	ldi	r30, 0x3B	; 59
    4512:	f0 e0       	ldi	r31, 0x00	; 0
    4514:	8b 81       	ldd	r24, Y+3	; 0x03
    4516:	80 83       	st	Z, r24
    4518:	10 c0       	rjmp	.+32     	; 0x453a <DIO_enu_SetPortValue+0x84>
	        case DIO_U8_PORTB:DIO_U8_PORTB_REG = Copy_u8_PortValue; break;
    451a:	e8 e3       	ldi	r30, 0x38	; 56
    451c:	f0 e0       	ldi	r31, 0x00	; 0
    451e:	8b 81       	ldd	r24, Y+3	; 0x03
    4520:	80 83       	st	Z, r24
    4522:	0b c0       	rjmp	.+22     	; 0x453a <DIO_enu_SetPortValue+0x84>
	        case DIO_U8_PORTC:DIO_U8_PORTC_REG = Copy_u8_PortValue; break;
    4524:	e5 e3       	ldi	r30, 0x35	; 53
    4526:	f0 e0       	ldi	r31, 0x00	; 0
    4528:	8b 81       	ldd	r24, Y+3	; 0x03
    452a:	80 83       	st	Z, r24
    452c:	06 c0       	rjmp	.+12     	; 0x453a <DIO_enu_SetPortValue+0x84>
	        case DIO_U8_PORTD:DIO_U8_PORTD_REG = Copy_u8_PortValue; break;
    452e:	e2 e3       	ldi	r30, 0x32	; 50
    4530:	f0 e0       	ldi	r31, 0x00	; 0
    4532:	8b 81       	ldd	r24, Y+3	; 0x03
    4534:	80 83       	st	Z, r24
    4536:	01 c0       	rjmp	.+2      	; 0x453a <DIO_enu_SetPortValue+0x84>
	        }
	    }else{
	        Local_u8_ErrorState = STATE_NOT_OK;
    4538:	19 82       	std	Y+1, r1	; 0x01
	    }
	    return Local_u8_ErrorState;
    453a:	89 81       	ldd	r24, Y+1	; 0x01
}
    453c:	0f 90       	pop	r0
    453e:	0f 90       	pop	r0
    4540:	0f 90       	pop	r0
    4542:	0f 90       	pop	r0
    4544:	0f 90       	pop	r0
    4546:	cf 91       	pop	r28
    4548:	df 91       	pop	r29
    454a:	08 95       	ret

0000454c <DIO_enu_GetPortValue>:

ES_t DIO_enu_GetPortValue(u8 Copy_u8_PortId, u8 * Copy_u8_ReturnPortValue){
    454c:	df 93       	push	r29
    454e:	cf 93       	push	r28
    4550:	00 d0       	rcall	.+0      	; 0x4552 <DIO_enu_GetPortValue+0x6>
    4552:	00 d0       	rcall	.+0      	; 0x4554 <DIO_enu_GetPortValue+0x8>
    4554:	00 d0       	rcall	.+0      	; 0x4556 <DIO_enu_GetPortValue+0xa>
    4556:	cd b7       	in	r28, 0x3d	; 61
    4558:	de b7       	in	r29, 0x3e	; 62
    455a:	8a 83       	std	Y+2, r24	; 0x02
    455c:	7c 83       	std	Y+4, r23	; 0x04
    455e:	6b 83       	std	Y+3, r22	; 0x03
    u8 Local_u8_ErrorState = STATE_OK;
    4560:	81 e0       	ldi	r24, 0x01	; 1
    4562:	89 83       	std	Y+1, r24	; 0x01
    if((Copy_u8_PortId<= DIO_U8_PORTD) && (Copy_u8_ReturnPortValue != NULL)){
    4564:	8a 81       	ldd	r24, Y+2	; 0x02
    4566:	84 30       	cpi	r24, 0x04	; 4
    4568:	08 f0       	brcs	.+2      	; 0x456c <DIO_enu_GetPortValue+0x20>
    456a:	3f c0       	rjmp	.+126    	; 0x45ea <DIO_enu_GetPortValue+0x9e>
    456c:	8b 81       	ldd	r24, Y+3	; 0x03
    456e:	9c 81       	ldd	r25, Y+4	; 0x04
    4570:	00 97       	sbiw	r24, 0x00	; 0
    4572:	d9 f1       	breq	.+118    	; 0x45ea <DIO_enu_GetPortValue+0x9e>
        switch (Copy_u8_PortId)
    4574:	8a 81       	ldd	r24, Y+2	; 0x02
    4576:	28 2f       	mov	r18, r24
    4578:	30 e0       	ldi	r19, 0x00	; 0
    457a:	3e 83       	std	Y+6, r19	; 0x06
    457c:	2d 83       	std	Y+5, r18	; 0x05
    457e:	8d 81       	ldd	r24, Y+5	; 0x05
    4580:	9e 81       	ldd	r25, Y+6	; 0x06
    4582:	81 30       	cpi	r24, 0x01	; 1
    4584:	91 05       	cpc	r25, r1
    4586:	e1 f0       	breq	.+56     	; 0x45c0 <DIO_enu_GetPortValue+0x74>
    4588:	2d 81       	ldd	r18, Y+5	; 0x05
    458a:	3e 81       	ldd	r19, Y+6	; 0x06
    458c:	22 30       	cpi	r18, 0x02	; 2
    458e:	31 05       	cpc	r19, r1
    4590:	2c f4       	brge	.+10     	; 0x459c <DIO_enu_GetPortValue+0x50>
    4592:	8d 81       	ldd	r24, Y+5	; 0x05
    4594:	9e 81       	ldd	r25, Y+6	; 0x06
    4596:	00 97       	sbiw	r24, 0x00	; 0
    4598:	61 f0       	breq	.+24     	; 0x45b2 <DIO_enu_GetPortValue+0x66>
    459a:	28 c0       	rjmp	.+80     	; 0x45ec <DIO_enu_GetPortValue+0xa0>
    459c:	2d 81       	ldd	r18, Y+5	; 0x05
    459e:	3e 81       	ldd	r19, Y+6	; 0x06
    45a0:	22 30       	cpi	r18, 0x02	; 2
    45a2:	31 05       	cpc	r19, r1
    45a4:	a1 f0       	breq	.+40     	; 0x45ce <DIO_enu_GetPortValue+0x82>
    45a6:	8d 81       	ldd	r24, Y+5	; 0x05
    45a8:	9e 81       	ldd	r25, Y+6	; 0x06
    45aa:	83 30       	cpi	r24, 0x03	; 3
    45ac:	91 05       	cpc	r25, r1
    45ae:	b1 f0       	breq	.+44     	; 0x45dc <DIO_enu_GetPortValue+0x90>
    45b0:	1d c0       	rjmp	.+58     	; 0x45ec <DIO_enu_GetPortValue+0xa0>
        {
        case DIO_U8_PORTA: *Copy_u8_ReturnPortValue = DIO_U8_PINA_REG;break;
    45b2:	e9 e3       	ldi	r30, 0x39	; 57
    45b4:	f0 e0       	ldi	r31, 0x00	; 0
    45b6:	80 81       	ld	r24, Z
    45b8:	eb 81       	ldd	r30, Y+3	; 0x03
    45ba:	fc 81       	ldd	r31, Y+4	; 0x04
    45bc:	80 83       	st	Z, r24
    45be:	16 c0       	rjmp	.+44     	; 0x45ec <DIO_enu_GetPortValue+0xa0>
        case DIO_U8_PORTB: *Copy_u8_ReturnPortValue = DIO_U8_PINB_REG;break;
    45c0:	e6 e3       	ldi	r30, 0x36	; 54
    45c2:	f0 e0       	ldi	r31, 0x00	; 0
    45c4:	80 81       	ld	r24, Z
    45c6:	eb 81       	ldd	r30, Y+3	; 0x03
    45c8:	fc 81       	ldd	r31, Y+4	; 0x04
    45ca:	80 83       	st	Z, r24
    45cc:	0f c0       	rjmp	.+30     	; 0x45ec <DIO_enu_GetPortValue+0xa0>
        case DIO_U8_PORTC: *Copy_u8_ReturnPortValue = DIO_U8_PINC_REG;break;
    45ce:	e3 e3       	ldi	r30, 0x33	; 51
    45d0:	f0 e0       	ldi	r31, 0x00	; 0
    45d2:	80 81       	ld	r24, Z
    45d4:	eb 81       	ldd	r30, Y+3	; 0x03
    45d6:	fc 81       	ldd	r31, Y+4	; 0x04
    45d8:	80 83       	st	Z, r24
    45da:	08 c0       	rjmp	.+16     	; 0x45ec <DIO_enu_GetPortValue+0xa0>
        case DIO_U8_PORTD: *Copy_u8_ReturnPortValue = DIO_U8_PIND_REG;break;
    45dc:	e0 e3       	ldi	r30, 0x30	; 48
    45de:	f0 e0       	ldi	r31, 0x00	; 0
    45e0:	80 81       	ld	r24, Z
    45e2:	eb 81       	ldd	r30, Y+3	; 0x03
    45e4:	fc 81       	ldd	r31, Y+4	; 0x04
    45e6:	80 83       	st	Z, r24
    45e8:	01 c0       	rjmp	.+2      	; 0x45ec <DIO_enu_GetPortValue+0xa0>
        }
    }
    else{
        Local_u8_ErrorState = STATE_NOT_OK;
    45ea:	19 82       	std	Y+1, r1	; 0x01
    }
    return Local_u8_ErrorState;
    45ec:	89 81       	ldd	r24, Y+1	; 0x01
}
    45ee:	26 96       	adiw	r28, 0x06	; 6
    45f0:	0f b6       	in	r0, 0x3f	; 63
    45f2:	f8 94       	cli
    45f4:	de bf       	out	0x3e, r29	; 62
    45f6:	0f be       	out	0x3f, r0	; 63
    45f8:	cd bf       	out	0x3d, r28	; 61
    45fa:	cf 91       	pop	r28
    45fc:	df 91       	pop	r29
    45fe:	08 95       	ret

00004600 <DIO_enu_ToggPin>:
ES_t DIO_enu_ToggPin(u8 Copy_u8_PortId, u8 Copy_u8_PinId){
    4600:	df 93       	push	r29
    4602:	cf 93       	push	r28
    4604:	00 d0       	rcall	.+0      	; 0x4606 <DIO_enu_ToggPin+0x6>
    4606:	00 d0       	rcall	.+0      	; 0x4608 <DIO_enu_ToggPin+0x8>
    4608:	0f 92       	push	r0
    460a:	cd b7       	in	r28, 0x3d	; 61
    460c:	de b7       	in	r29, 0x3e	; 62
    460e:	8a 83       	std	Y+2, r24	; 0x02
    4610:	6b 83       	std	Y+3, r22	; 0x03
    u8 Local_u8_errorState = STATE_OK;
    4612:	81 e0       	ldi	r24, 0x01	; 1
    4614:	89 83       	std	Y+1, r24	; 0x01
    if((Copy_u8_PortId <=DIO_U8_PORTD)&&(Copy_u8_PinId <= DIO_U8_PIN7)){
    4616:	8a 81       	ldd	r24, Y+2	; 0x02
    4618:	84 30       	cpi	r24, 0x04	; 4
    461a:	08 f0       	brcs	.+2      	; 0x461e <DIO_enu_ToggPin+0x1e>
    461c:	73 c0       	rjmp	.+230    	; 0x4704 <DIO_enu_ToggPin+0x104>
    461e:	8b 81       	ldd	r24, Y+3	; 0x03
    4620:	88 30       	cpi	r24, 0x08	; 8
    4622:	08 f0       	brcs	.+2      	; 0x4626 <DIO_enu_ToggPin+0x26>
    4624:	6f c0       	rjmp	.+222    	; 0x4704 <DIO_enu_ToggPin+0x104>
        switch (Copy_u8_PortId)
    4626:	8a 81       	ldd	r24, Y+2	; 0x02
    4628:	28 2f       	mov	r18, r24
    462a:	30 e0       	ldi	r19, 0x00	; 0
    462c:	3d 83       	std	Y+5, r19	; 0x05
    462e:	2c 83       	std	Y+4, r18	; 0x04
    4630:	8c 81       	ldd	r24, Y+4	; 0x04
    4632:	9d 81       	ldd	r25, Y+5	; 0x05
    4634:	81 30       	cpi	r24, 0x01	; 1
    4636:	91 05       	cpc	r25, r1
    4638:	49 f1       	breq	.+82     	; 0x468c <DIO_enu_ToggPin+0x8c>
    463a:	2c 81       	ldd	r18, Y+4	; 0x04
    463c:	3d 81       	ldd	r19, Y+5	; 0x05
    463e:	22 30       	cpi	r18, 0x02	; 2
    4640:	31 05       	cpc	r19, r1
    4642:	2c f4       	brge	.+10     	; 0x464e <DIO_enu_ToggPin+0x4e>
    4644:	8c 81       	ldd	r24, Y+4	; 0x04
    4646:	9d 81       	ldd	r25, Y+5	; 0x05
    4648:	00 97       	sbiw	r24, 0x00	; 0
    464a:	61 f0       	breq	.+24     	; 0x4664 <DIO_enu_ToggPin+0x64>
    464c:	5c c0       	rjmp	.+184    	; 0x4706 <DIO_enu_ToggPin+0x106>
    464e:	2c 81       	ldd	r18, Y+4	; 0x04
    4650:	3d 81       	ldd	r19, Y+5	; 0x05
    4652:	22 30       	cpi	r18, 0x02	; 2
    4654:	31 05       	cpc	r19, r1
    4656:	71 f1       	breq	.+92     	; 0x46b4 <DIO_enu_ToggPin+0xb4>
    4658:	8c 81       	ldd	r24, Y+4	; 0x04
    465a:	9d 81       	ldd	r25, Y+5	; 0x05
    465c:	83 30       	cpi	r24, 0x03	; 3
    465e:	91 05       	cpc	r25, r1
    4660:	e9 f1       	breq	.+122    	; 0x46dc <DIO_enu_ToggPin+0xdc>
    4662:	51 c0       	rjmp	.+162    	; 0x4706 <DIO_enu_ToggPin+0x106>
	        {
	        case DIO_U8_PORTA:TOG_BIT(DIO_U8_PORTA_REG,Copy_u8_PinId); break;
    4664:	ab e3       	ldi	r26, 0x3B	; 59
    4666:	b0 e0       	ldi	r27, 0x00	; 0
    4668:	eb e3       	ldi	r30, 0x3B	; 59
    466a:	f0 e0       	ldi	r31, 0x00	; 0
    466c:	80 81       	ld	r24, Z
    466e:	48 2f       	mov	r20, r24
    4670:	8b 81       	ldd	r24, Y+3	; 0x03
    4672:	28 2f       	mov	r18, r24
    4674:	30 e0       	ldi	r19, 0x00	; 0
    4676:	81 e0       	ldi	r24, 0x01	; 1
    4678:	90 e0       	ldi	r25, 0x00	; 0
    467a:	02 2e       	mov	r0, r18
    467c:	02 c0       	rjmp	.+4      	; 0x4682 <DIO_enu_ToggPin+0x82>
    467e:	88 0f       	add	r24, r24
    4680:	99 1f       	adc	r25, r25
    4682:	0a 94       	dec	r0
    4684:	e2 f7       	brpl	.-8      	; 0x467e <DIO_enu_ToggPin+0x7e>
    4686:	84 27       	eor	r24, r20
    4688:	8c 93       	st	X, r24
    468a:	3d c0       	rjmp	.+122    	; 0x4706 <DIO_enu_ToggPin+0x106>
	        case DIO_U8_PORTB:TOG_BIT(DIO_U8_PORTB_REG,Copy_u8_PinId); break;
    468c:	a8 e3       	ldi	r26, 0x38	; 56
    468e:	b0 e0       	ldi	r27, 0x00	; 0
    4690:	e8 e3       	ldi	r30, 0x38	; 56
    4692:	f0 e0       	ldi	r31, 0x00	; 0
    4694:	80 81       	ld	r24, Z
    4696:	48 2f       	mov	r20, r24
    4698:	8b 81       	ldd	r24, Y+3	; 0x03
    469a:	28 2f       	mov	r18, r24
    469c:	30 e0       	ldi	r19, 0x00	; 0
    469e:	81 e0       	ldi	r24, 0x01	; 1
    46a0:	90 e0       	ldi	r25, 0x00	; 0
    46a2:	02 2e       	mov	r0, r18
    46a4:	02 c0       	rjmp	.+4      	; 0x46aa <DIO_enu_ToggPin+0xaa>
    46a6:	88 0f       	add	r24, r24
    46a8:	99 1f       	adc	r25, r25
    46aa:	0a 94       	dec	r0
    46ac:	e2 f7       	brpl	.-8      	; 0x46a6 <DIO_enu_ToggPin+0xa6>
    46ae:	84 27       	eor	r24, r20
    46b0:	8c 93       	st	X, r24
    46b2:	29 c0       	rjmp	.+82     	; 0x4706 <DIO_enu_ToggPin+0x106>
	        case DIO_U8_PORTC:TOG_BIT(DIO_U8_PORTC_REG,Copy_u8_PinId); break;
    46b4:	a5 e3       	ldi	r26, 0x35	; 53
    46b6:	b0 e0       	ldi	r27, 0x00	; 0
    46b8:	e5 e3       	ldi	r30, 0x35	; 53
    46ba:	f0 e0       	ldi	r31, 0x00	; 0
    46bc:	80 81       	ld	r24, Z
    46be:	48 2f       	mov	r20, r24
    46c0:	8b 81       	ldd	r24, Y+3	; 0x03
    46c2:	28 2f       	mov	r18, r24
    46c4:	30 e0       	ldi	r19, 0x00	; 0
    46c6:	81 e0       	ldi	r24, 0x01	; 1
    46c8:	90 e0       	ldi	r25, 0x00	; 0
    46ca:	02 2e       	mov	r0, r18
    46cc:	02 c0       	rjmp	.+4      	; 0x46d2 <DIO_enu_ToggPin+0xd2>
    46ce:	88 0f       	add	r24, r24
    46d0:	99 1f       	adc	r25, r25
    46d2:	0a 94       	dec	r0
    46d4:	e2 f7       	brpl	.-8      	; 0x46ce <DIO_enu_ToggPin+0xce>
    46d6:	84 27       	eor	r24, r20
    46d8:	8c 93       	st	X, r24
    46da:	15 c0       	rjmp	.+42     	; 0x4706 <DIO_enu_ToggPin+0x106>
	        case DIO_U8_PORTD:TOG_BIT(DIO_U8_PORTD_REG,Copy_u8_PinId); break;
    46dc:	a2 e3       	ldi	r26, 0x32	; 50
    46de:	b0 e0       	ldi	r27, 0x00	; 0
    46e0:	e2 e3       	ldi	r30, 0x32	; 50
    46e2:	f0 e0       	ldi	r31, 0x00	; 0
    46e4:	80 81       	ld	r24, Z
    46e6:	48 2f       	mov	r20, r24
    46e8:	8b 81       	ldd	r24, Y+3	; 0x03
    46ea:	28 2f       	mov	r18, r24
    46ec:	30 e0       	ldi	r19, 0x00	; 0
    46ee:	81 e0       	ldi	r24, 0x01	; 1
    46f0:	90 e0       	ldi	r25, 0x00	; 0
    46f2:	02 2e       	mov	r0, r18
    46f4:	02 c0       	rjmp	.+4      	; 0x46fa <DIO_enu_ToggPin+0xfa>
    46f6:	88 0f       	add	r24, r24
    46f8:	99 1f       	adc	r25, r25
    46fa:	0a 94       	dec	r0
    46fc:	e2 f7       	brpl	.-8      	; 0x46f6 <DIO_enu_ToggPin+0xf6>
    46fe:	84 27       	eor	r24, r20
    4700:	8c 93       	st	X, r24
    4702:	01 c0       	rjmp	.+2      	; 0x4706 <DIO_enu_ToggPin+0x106>
	        }
    }else{
        Local_u8_errorState = STATE_NOT_OK;
    4704:	19 82       	std	Y+1, r1	; 0x01
    }
    return Local_u8_errorState;
    4706:	89 81       	ldd	r24, Y+1	; 0x01


}
    4708:	0f 90       	pop	r0
    470a:	0f 90       	pop	r0
    470c:	0f 90       	pop	r0
    470e:	0f 90       	pop	r0
    4710:	0f 90       	pop	r0
    4712:	cf 91       	pop	r28
    4714:	df 91       	pop	r29
    4716:	08 95       	ret

00004718 <ADC_enu_Init>:
#include"ADC_Config.h"
/********************Global Pointer to Notification Function***********************/
static void(* ADC_pf_Notification)(u16) = NULL;
/****************************ADC busy Flag*****************************************/
static u8 ADC_u8_busyFlag = 0;
ES_t ADC_enu_Init(void){
    4718:	df 93       	push	r29
    471a:	cf 93       	push	r28
    471c:	cd b7       	in	r28, 0x3d	; 61
    471e:	de b7       	in	r29, 0x3e	; 62
/**********************Voltage Referance******************/
    #if ADC_REF_VOLTAGE == AVCC
    CLR_BIT(ADMUX_REG,REFS1);
    4720:	a7 e2       	ldi	r26, 0x27	; 39
    4722:	b0 e0       	ldi	r27, 0x00	; 0
    4724:	e7 e2       	ldi	r30, 0x27	; 39
    4726:	f0 e0       	ldi	r31, 0x00	; 0
    4728:	80 81       	ld	r24, Z
    472a:	8f 77       	andi	r24, 0x7F	; 127
    472c:	8c 93       	st	X, r24
    SET_BIT(ADMUX_REG,REFS0);
    472e:	a7 e2       	ldi	r26, 0x27	; 39
    4730:	b0 e0       	ldi	r27, 0x00	; 0
    4732:	e7 e2       	ldi	r30, 0x27	; 39
    4734:	f0 e0       	ldi	r31, 0x00	; 0
    4736:	80 81       	ld	r24, Z
    4738:	80 64       	ori	r24, 0x40	; 64
    473a:	8c 93       	st	X, r24
    SET_BIT(ADMUX_REG,REFS1);
    SET_BIT(ADMUX_REG,REFS0);
    #endif
/**********************Presentation************************/
    #if ADC_PRESENTATION_MODE == RIGHT_ADJUST
    CLR_BIT(ADMUX_REG,ADLAR);
    473c:	a7 e2       	ldi	r26, 0x27	; 39
    473e:	b0 e0       	ldi	r27, 0x00	; 0
    4740:	e7 e2       	ldi	r30, 0x27	; 39
    4742:	f0 e0       	ldi	r31, 0x00	; 0
    4744:	80 81       	ld	r24, Z
    4746:	8f 7d       	andi	r24, 0xDF	; 223
    4748:	8c 93       	st	X, r24
    #elif ADC_PRESENTATION_MODE == LEFT_ADJUST
    SET_BIT(ADMUX_REG,ADLAR);
    #endif
/****************Conversion Mode**************************/
    #if ADC_CONVERSION_MODE == DISABLE_AUTO_TRIGG
    CLR_BIT(ADCSRA_REG,ADATE);
    474a:	a6 e2       	ldi	r26, 0x26	; 38
    474c:	b0 e0       	ldi	r27, 0x00	; 0
    474e:	e6 e2       	ldi	r30, 0x26	; 38
    4750:	f0 e0       	ldi	r31, 0x00	; 0
    4752:	80 81       	ld	r24, Z
    4754:	8f 7d       	andi	r24, 0xDF	; 223
    4756:	8c 93       	st	X, r24
    CLR_BIT(SFIOR_REG,ADTS2);
    SET_BIT(SFIOR_REG,ADTS1);
    CLR_BIT(SFIOR_REG,ADTS0);
    #endif
/*******************Division Factor*********************/
    ADCSRA_REG |= ADC_DIVISION_FACTOR;
    4758:	a6 e2       	ldi	r26, 0x26	; 38
    475a:	b0 e0       	ldi	r27, 0x00	; 0
    475c:	e6 e2       	ldi	r30, 0x26	; 38
    475e:	f0 e0       	ldi	r31, 0x00	; 0
    4760:	80 81       	ld	r24, Z
    4762:	87 60       	ori	r24, 0x07	; 7
    4764:	8c 93       	st	X, r24
/******************* Enable ADC **********************/
    SET_BIT(ADCSRA_REG,ADEN);
    4766:	a6 e2       	ldi	r26, 0x26	; 38
    4768:	b0 e0       	ldi	r27, 0x00	; 0
    476a:	e6 e2       	ldi	r30, 0x26	; 38
    476c:	f0 e0       	ldi	r31, 0x00	; 0
    476e:	80 81       	ld	r24, Z
    4770:	80 68       	ori	r24, 0x80	; 128
    4772:	8c 93       	st	X, r24
    return STATE_OK;
    4774:	81 e0       	ldi	r24, 0x01	; 1
}
    4776:	cf 91       	pop	r28
    4778:	df 91       	pop	r29
    477a:	08 95       	ret

0000477c <ADC_enu_GetDigitalValueSynchNonBlocking>:
ES_t ADC_enu_GetDigitalValueSynchNonBlocking(u8 Copy_u8_channelNb, u16 * Copy_pu16_DigitalValue){
    477c:	df 93       	push	r29
    477e:	cf 93       	push	r28
    4780:	cd b7       	in	r28, 0x3d	; 61
    4782:	de b7       	in	r29, 0x3e	; 62
    4784:	28 97       	sbiw	r28, 0x08	; 8
    4786:	0f b6       	in	r0, 0x3f	; 63
    4788:	f8 94       	cli
    478a:	de bf       	out	0x3e, r29	; 62
    478c:	0f be       	out	0x3f, r0	; 63
    478e:	cd bf       	out	0x3d, r28	; 61
    4790:	8e 83       	std	Y+6, r24	; 0x06
    4792:	78 87       	std	Y+8, r23	; 0x08
    4794:	6f 83       	std	Y+7, r22	; 0x07
    u8 Local_u8_errorState = STATE_OK;
    4796:	81 e0       	ldi	r24, 0x01	; 1
    4798:	8d 83       	std	Y+5, r24	; 0x05
    u32 Local_u32_timeOutCounter = 0;
    479a:	19 82       	std	Y+1, r1	; 0x01
    479c:	1a 82       	std	Y+2, r1	; 0x02
    479e:	1b 82       	std	Y+3, r1	; 0x03
    47a0:	1c 82       	std	Y+4, r1	; 0x04
    if((Copy_u8_channelNb<MAX_NUM_OF_CHANNELS) && (Copy_pu16_DigitalValue!= NULL) && (!ADC_u8_busyFlag) ){
    47a2:	8e 81       	ldd	r24, Y+6	; 0x06
    47a4:	80 32       	cpi	r24, 0x20	; 32
    47a6:	08 f0       	brcs	.+2      	; 0x47aa <ADC_enu_GetDigitalValueSynchNonBlocking+0x2e>
    47a8:	65 c0       	rjmp	.+202    	; 0x4874 <ADC_enu_GetDigitalValueSynchNonBlocking+0xf8>
    47aa:	8f 81       	ldd	r24, Y+7	; 0x07
    47ac:	98 85       	ldd	r25, Y+8	; 0x08
    47ae:	00 97       	sbiw	r24, 0x00	; 0
    47b0:	09 f4       	brne	.+2      	; 0x47b4 <ADC_enu_GetDigitalValueSynchNonBlocking+0x38>
    47b2:	60 c0       	rjmp	.+192    	; 0x4874 <ADC_enu_GetDigitalValueSynchNonBlocking+0xf8>
    47b4:	80 91 38 01 	lds	r24, 0x0138
    47b8:	88 23       	and	r24, r24
    47ba:	09 f0       	breq	.+2      	; 0x47be <ADC_enu_GetDigitalValueSynchNonBlocking+0x42>
    47bc:	5b c0       	rjmp	.+182    	; 0x4874 <ADC_enu_GetDigitalValueSynchNonBlocking+0xf8>
        //Set busy Flag for ADC
        ADC_u8_busyFlag = 1;
    47be:	81 e0       	ldi	r24, 0x01	; 1
    47c0:	80 93 38 01 	sts	0x0138, r24
        //Clear MUX4...0
        ADMUX_REG &= CLEAR_MUX_BITS;
    47c4:	a7 e2       	ldi	r26, 0x27	; 39
    47c6:	b0 e0       	ldi	r27, 0x00	; 0
    47c8:	e7 e2       	ldi	r30, 0x27	; 39
    47ca:	f0 e0       	ldi	r31, 0x00	; 0
    47cc:	80 81       	ld	r24, Z
    47ce:	80 7e       	andi	r24, 0xE0	; 224
    47d0:	8c 93       	st	X, r24
        //Select Channel
        ADMUX_REG |= Copy_u8_channelNb;
    47d2:	a7 e2       	ldi	r26, 0x27	; 39
    47d4:	b0 e0       	ldi	r27, 0x00	; 0
    47d6:	e7 e2       	ldi	r30, 0x27	; 39
    47d8:	f0 e0       	ldi	r31, 0x00	; 0
    47da:	90 81       	ld	r25, Z
    47dc:	8e 81       	ldd	r24, Y+6	; 0x06
    47de:	89 2b       	or	r24, r25
    47e0:	8c 93       	st	X, r24
        //Start Conversion
        SET_BIT(ADCSRA_REG,ADSC);
    47e2:	a6 e2       	ldi	r26, 0x26	; 38
    47e4:	b0 e0       	ldi	r27, 0x00	; 0
    47e6:	e6 e2       	ldi	r30, 0x26	; 38
    47e8:	f0 e0       	ldi	r31, 0x00	; 0
    47ea:	80 81       	ld	r24, Z
    47ec:	80 64       	ori	r24, 0x40	; 64
    47ee:	8c 93       	st	X, r24
    47f0:	0b c0       	rjmp	.+22     	; 0x4808 <ADC_enu_GetDigitalValueSynchNonBlocking+0x8c>
        //Wait -> ADC Flag = 1 (Timeout Mechanism)
        while((!GET_BIT(ADCSRA_REG,ADIF)) && (Local_u32_timeOutCounter<ADC_U32_TIMEOUT_MAX_VALUE))
        {Local_u32_timeOutCounter++;}
    47f2:	89 81       	ldd	r24, Y+1	; 0x01
    47f4:	9a 81       	ldd	r25, Y+2	; 0x02
    47f6:	ab 81       	ldd	r26, Y+3	; 0x03
    47f8:	bc 81       	ldd	r27, Y+4	; 0x04
    47fa:	01 96       	adiw	r24, 0x01	; 1
    47fc:	a1 1d       	adc	r26, r1
    47fe:	b1 1d       	adc	r27, r1
    4800:	89 83       	std	Y+1, r24	; 0x01
    4802:	9a 83       	std	Y+2, r25	; 0x02
    4804:	ab 83       	std	Y+3, r26	; 0x03
    4806:	bc 83       	std	Y+4, r27	; 0x04
        //Select Channel
        ADMUX_REG |= Copy_u8_channelNb;
        //Start Conversion
        SET_BIT(ADCSRA_REG,ADSC);
        //Wait -> ADC Flag = 1 (Timeout Mechanism)
        while((!GET_BIT(ADCSRA_REG,ADIF)) && (Local_u32_timeOutCounter<ADC_U32_TIMEOUT_MAX_VALUE))
    4808:	e6 e2       	ldi	r30, 0x26	; 38
    480a:	f0 e0       	ldi	r31, 0x00	; 0
    480c:	80 81       	ld	r24, Z
    480e:	82 95       	swap	r24
    4810:	8f 70       	andi	r24, 0x0F	; 15
    4812:	88 2f       	mov	r24, r24
    4814:	90 e0       	ldi	r25, 0x00	; 0
    4816:	81 70       	andi	r24, 0x01	; 1
    4818:	90 70       	andi	r25, 0x00	; 0
    481a:	00 97       	sbiw	r24, 0x00	; 0
    481c:	61 f4       	brne	.+24     	; 0x4836 <ADC_enu_GetDigitalValueSynchNonBlocking+0xba>
    481e:	89 81       	ldd	r24, Y+1	; 0x01
    4820:	9a 81       	ldd	r25, Y+2	; 0x02
    4822:	ab 81       	ldd	r26, Y+3	; 0x03
    4824:	bc 81       	ldd	r27, Y+4	; 0x04
    4826:	80 35       	cpi	r24, 0x50	; 80
    4828:	23 ec       	ldi	r18, 0xC3	; 195
    482a:	92 07       	cpc	r25, r18
    482c:	20 e0       	ldi	r18, 0x00	; 0
    482e:	a2 07       	cpc	r26, r18
    4830:	20 e0       	ldi	r18, 0x00	; 0
    4832:	b2 07       	cpc	r27, r18
    4834:	f0 f2       	brcs	.-68     	; 0x47f2 <ADC_enu_GetDigitalValueSynchNonBlocking+0x76>
        {Local_u32_timeOutCounter++;}
        //Check For ADC Peripheral
        if(GET_BIT(ADCSRA_REG,ADIF)){
    4836:	e6 e2       	ldi	r30, 0x26	; 38
    4838:	f0 e0       	ldi	r31, 0x00	; 0
    483a:	80 81       	ld	r24, Z
    483c:	82 95       	swap	r24
    483e:	8f 70       	andi	r24, 0x0F	; 15
    4840:	88 2f       	mov	r24, r24
    4842:	90 e0       	ldi	r25, 0x00	; 0
    4844:	81 70       	andi	r24, 0x01	; 1
    4846:	90 70       	andi	r25, 0x00	; 0
    4848:	88 23       	and	r24, r24
    484a:	91 f0       	breq	.+36     	; 0x4870 <ADC_enu_GetDigitalValueSynchNonBlocking+0xf4>
            //Clear ADC Flag & busy Flag
            ADC_u8_busyFlag = 0;
    484c:	10 92 38 01 	sts	0x0138, r1
            SET_BIT(ADCSRA_REG,ADIF);
    4850:	a6 e2       	ldi	r26, 0x26	; 38
    4852:	b0 e0       	ldi	r27, 0x00	; 0
    4854:	e6 e2       	ldi	r30, 0x26	; 38
    4856:	f0 e0       	ldi	r31, 0x00	; 0
    4858:	80 81       	ld	r24, Z
    485a:	80 61       	ori	r24, 0x10	; 16
    485c:	8c 93       	st	X, r24
            //Read Digital Value
            *Copy_pu16_DigitalValue = ADC_REG;
    485e:	e4 e2       	ldi	r30, 0x24	; 36
    4860:	f0 e0       	ldi	r31, 0x00	; 0
    4862:	80 81       	ld	r24, Z
    4864:	91 81       	ldd	r25, Z+1	; 0x01
    4866:	ef 81       	ldd	r30, Y+7	; 0x07
    4868:	f8 85       	ldd	r31, Y+8	; 0x08
    486a:	91 83       	std	Z+1, r25	; 0x01
    486c:	80 83       	st	Z, r24
    486e:	03 c0       	rjmp	.+6      	; 0x4876 <ADC_enu_GetDigitalValueSynchNonBlocking+0xfa>
        }else{
            Local_u8_errorState = STATE_NOT_OK;
    4870:	1d 82       	std	Y+5, r1	; 0x05
    4872:	01 c0       	rjmp	.+2      	; 0x4876 <ADC_enu_GetDigitalValueSynchNonBlocking+0xfa>
        }
    }else{
        Local_u8_errorState = STATE_NOT_OK;
    4874:	1d 82       	std	Y+5, r1	; 0x05
    }
    return Local_u8_errorState;
    4876:	8d 81       	ldd	r24, Y+5	; 0x05
}
    4878:	28 96       	adiw	r28, 0x08	; 8
    487a:	0f b6       	in	r0, 0x3f	; 63
    487c:	f8 94       	cli
    487e:	de bf       	out	0x3e, r29	; 62
    4880:	0f be       	out	0x3f, r0	; 63
    4882:	cd bf       	out	0x3d, r28	; 61
    4884:	cf 91       	pop	r28
    4886:	df 91       	pop	r29
    4888:	08 95       	ret

0000488a <ADC_enu_GetDigitalValueASynch>:
ES_t ADC_enu_GetDigitalValueASynch(u8 Copy_u8_channelNb, void(* Copy_pf_Notification)(u16)){
    488a:	df 93       	push	r29
    488c:	cf 93       	push	r28
    488e:	00 d0       	rcall	.+0      	; 0x4890 <ADC_enu_GetDigitalValueASynch+0x6>
    4890:	00 d0       	rcall	.+0      	; 0x4892 <ADC_enu_GetDigitalValueASynch+0x8>
    4892:	cd b7       	in	r28, 0x3d	; 61
    4894:	de b7       	in	r29, 0x3e	; 62
    4896:	8a 83       	std	Y+2, r24	; 0x02
    4898:	7c 83       	std	Y+4, r23	; 0x04
    489a:	6b 83       	std	Y+3, r22	; 0x03
    u8 Local_u8_errorState = STATE_OK;
    489c:	81 e0       	ldi	r24, 0x01	; 1
    489e:	89 83       	std	Y+1, r24	; 0x01
    if((Copy_u8_channelNb<MAX_NUM_OF_CHANNELS) && (Copy_pf_Notification!= NULL) && (!ADC_u8_busyFlag)){
    48a0:	8a 81       	ldd	r24, Y+2	; 0x02
    48a2:	80 32       	cpi	r24, 0x20	; 32
    48a4:	78 f5       	brcc	.+94     	; 0x4904 <ADC_enu_GetDigitalValueASynch+0x7a>
    48a6:	8b 81       	ldd	r24, Y+3	; 0x03
    48a8:	9c 81       	ldd	r25, Y+4	; 0x04
    48aa:	00 97       	sbiw	r24, 0x00	; 0
    48ac:	59 f1       	breq	.+86     	; 0x4904 <ADC_enu_GetDigitalValueASynch+0x7a>
    48ae:	80 91 38 01 	lds	r24, 0x0138
    48b2:	88 23       	and	r24, r24
    48b4:	39 f5       	brne	.+78     	; 0x4904 <ADC_enu_GetDigitalValueASynch+0x7a>
        //Set busy Flag for ADC
        ADC_u8_busyFlag = 1;
    48b6:	81 e0       	ldi	r24, 0x01	; 1
    48b8:	80 93 38 01 	sts	0x0138, r24
        //update Global Pointer to Function
        ADC_pf_Notification = Copy_pf_Notification;
    48bc:	8b 81       	ldd	r24, Y+3	; 0x03
    48be:	9c 81       	ldd	r25, Y+4	; 0x04
    48c0:	90 93 37 01 	sts	0x0137, r25
    48c4:	80 93 36 01 	sts	0x0136, r24
        //Enable ADC Interrupt
        SET_BIT(ADCSRA_REG,ADIE);
    48c8:	a6 e2       	ldi	r26, 0x26	; 38
    48ca:	b0 e0       	ldi	r27, 0x00	; 0
    48cc:	e6 e2       	ldi	r30, 0x26	; 38
    48ce:	f0 e0       	ldi	r31, 0x00	; 0
    48d0:	80 81       	ld	r24, Z
    48d2:	88 60       	ori	r24, 0x08	; 8
    48d4:	8c 93       	st	X, r24
        //Clear MUX4...0
        ADMUX_REG &= CLEAR_MUX_BITS;
    48d6:	a7 e2       	ldi	r26, 0x27	; 39
    48d8:	b0 e0       	ldi	r27, 0x00	; 0
    48da:	e7 e2       	ldi	r30, 0x27	; 39
    48dc:	f0 e0       	ldi	r31, 0x00	; 0
    48de:	80 81       	ld	r24, Z
    48e0:	80 7e       	andi	r24, 0xE0	; 224
    48e2:	8c 93       	st	X, r24
        //Select Channel
        ADMUX_REG |= Copy_u8_channelNb;
    48e4:	a7 e2       	ldi	r26, 0x27	; 39
    48e6:	b0 e0       	ldi	r27, 0x00	; 0
    48e8:	e7 e2       	ldi	r30, 0x27	; 39
    48ea:	f0 e0       	ldi	r31, 0x00	; 0
    48ec:	90 81       	ld	r25, Z
    48ee:	8a 81       	ldd	r24, Y+2	; 0x02
    48f0:	89 2b       	or	r24, r25
    48f2:	8c 93       	st	X, r24
        //Start Conversion
        SET_BIT(ADCSRA_REG,ADSC);
    48f4:	a6 e2       	ldi	r26, 0x26	; 38
    48f6:	b0 e0       	ldi	r27, 0x00	; 0
    48f8:	e6 e2       	ldi	r30, 0x26	; 38
    48fa:	f0 e0       	ldi	r31, 0x00	; 0
    48fc:	80 81       	ld	r24, Z
    48fe:	80 64       	ori	r24, 0x40	; 64
    4900:	8c 93       	st	X, r24
    4902:	01 c0       	rjmp	.+2      	; 0x4906 <ADC_enu_GetDigitalValueASynch+0x7c>
    }else{
        Local_u8_errorState= STATE_NOT_OK;
    4904:	19 82       	std	Y+1, r1	; 0x01
    }
    return Local_u8_errorState;
    4906:	89 81       	ldd	r24, Y+1	; 0x01
}
    4908:	0f 90       	pop	r0
    490a:	0f 90       	pop	r0
    490c:	0f 90       	pop	r0
    490e:	0f 90       	pop	r0
    4910:	cf 91       	pop	r28
    4912:	df 91       	pop	r29
    4914:	08 95       	ret

00004916 <__vector_16>:
/***************ISR Function OF ADC*************/
ISR(ADC){
    4916:	1f 92       	push	r1
    4918:	0f 92       	push	r0
    491a:	0f b6       	in	r0, 0x3f	; 63
    491c:	0f 92       	push	r0
    491e:	11 24       	eor	r1, r1
    4920:	2f 93       	push	r18
    4922:	3f 93       	push	r19
    4924:	4f 93       	push	r20
    4926:	5f 93       	push	r21
    4928:	6f 93       	push	r22
    492a:	7f 93       	push	r23
    492c:	8f 93       	push	r24
    492e:	9f 93       	push	r25
    4930:	af 93       	push	r26
    4932:	bf 93       	push	r27
    4934:	ef 93       	push	r30
    4936:	ff 93       	push	r31
    4938:	df 93       	push	r29
    493a:	cf 93       	push	r28
    493c:	cd b7       	in	r28, 0x3d	; 61
    493e:	de b7       	in	r29, 0x3e	; 62
    if(ADC_pf_Notification !=NULL){
    4940:	80 91 36 01 	lds	r24, 0x0136
    4944:	90 91 37 01 	lds	r25, 0x0137
    4948:	00 97       	sbiw	r24, 0x00	; 0
    494a:	99 f0       	breq	.+38     	; 0x4972 <__vector_16+0x5c>
        //Disable Interrupt & busy Flag
        CLR_BIT(ADCSRA_REG,ADIE);
    494c:	a6 e2       	ldi	r26, 0x26	; 38
    494e:	b0 e0       	ldi	r27, 0x00	; 0
    4950:	e6 e2       	ldi	r30, 0x26	; 38
    4952:	f0 e0       	ldi	r31, 0x00	; 0
    4954:	80 81       	ld	r24, Z
    4956:	87 7f       	andi	r24, 0xF7	; 247
    4958:	8c 93       	st	X, r24
        ADC_u8_busyFlag = 0;
    495a:	10 92 38 01 	sts	0x0138, r1
        //Calling Notification Func
        ADC_pf_Notification(ADC_REG);
    495e:	20 91 36 01 	lds	r18, 0x0136
    4962:	30 91 37 01 	lds	r19, 0x0137
    4966:	e4 e2       	ldi	r30, 0x24	; 36
    4968:	f0 e0       	ldi	r31, 0x00	; 0
    496a:	80 81       	ld	r24, Z
    496c:	91 81       	ldd	r25, Z+1	; 0x01
    496e:	f9 01       	movw	r30, r18
    4970:	09 95       	icall
    }
}
    4972:	cf 91       	pop	r28
    4974:	df 91       	pop	r29
    4976:	ff 91       	pop	r31
    4978:	ef 91       	pop	r30
    497a:	bf 91       	pop	r27
    497c:	af 91       	pop	r26
    497e:	9f 91       	pop	r25
    4980:	8f 91       	pop	r24
    4982:	7f 91       	pop	r23
    4984:	6f 91       	pop	r22
    4986:	5f 91       	pop	r21
    4988:	4f 91       	pop	r20
    498a:	3f 91       	pop	r19
    498c:	2f 91       	pop	r18
    498e:	0f 90       	pop	r0
    4990:	0f be       	out	0x3f, r0	; 63
    4992:	0f 90       	pop	r0
    4994:	1f 90       	pop	r1
    4996:	18 95       	reti

00004998 <__mulsi3>:
    4998:	62 9f       	mul	r22, r18
    499a:	d0 01       	movw	r26, r0
    499c:	73 9f       	mul	r23, r19
    499e:	f0 01       	movw	r30, r0
    49a0:	82 9f       	mul	r24, r18
    49a2:	e0 0d       	add	r30, r0
    49a4:	f1 1d       	adc	r31, r1
    49a6:	64 9f       	mul	r22, r20
    49a8:	e0 0d       	add	r30, r0
    49aa:	f1 1d       	adc	r31, r1
    49ac:	92 9f       	mul	r25, r18
    49ae:	f0 0d       	add	r31, r0
    49b0:	83 9f       	mul	r24, r19
    49b2:	f0 0d       	add	r31, r0
    49b4:	74 9f       	mul	r23, r20
    49b6:	f0 0d       	add	r31, r0
    49b8:	65 9f       	mul	r22, r21
    49ba:	f0 0d       	add	r31, r0
    49bc:	99 27       	eor	r25, r25
    49be:	72 9f       	mul	r23, r18
    49c0:	b0 0d       	add	r27, r0
    49c2:	e1 1d       	adc	r30, r1
    49c4:	f9 1f       	adc	r31, r25
    49c6:	63 9f       	mul	r22, r19
    49c8:	b0 0d       	add	r27, r0
    49ca:	e1 1d       	adc	r30, r1
    49cc:	f9 1f       	adc	r31, r25
    49ce:	bd 01       	movw	r22, r26
    49d0:	cf 01       	movw	r24, r30
    49d2:	11 24       	eor	r1, r1
    49d4:	08 95       	ret

000049d6 <__udivmodhi4>:
    49d6:	aa 1b       	sub	r26, r26
    49d8:	bb 1b       	sub	r27, r27
    49da:	51 e1       	ldi	r21, 0x11	; 17
    49dc:	07 c0       	rjmp	.+14     	; 0x49ec <__udivmodhi4_ep>

000049de <__udivmodhi4_loop>:
    49de:	aa 1f       	adc	r26, r26
    49e0:	bb 1f       	adc	r27, r27
    49e2:	a6 17       	cp	r26, r22
    49e4:	b7 07       	cpc	r27, r23
    49e6:	10 f0       	brcs	.+4      	; 0x49ec <__udivmodhi4_ep>
    49e8:	a6 1b       	sub	r26, r22
    49ea:	b7 0b       	sbc	r27, r23

000049ec <__udivmodhi4_ep>:
    49ec:	88 1f       	adc	r24, r24
    49ee:	99 1f       	adc	r25, r25
    49f0:	5a 95       	dec	r21
    49f2:	a9 f7       	brne	.-22     	; 0x49de <__udivmodhi4_loop>
    49f4:	80 95       	com	r24
    49f6:	90 95       	com	r25
    49f8:	bc 01       	movw	r22, r24
    49fa:	cd 01       	movw	r24, r26
    49fc:	08 95       	ret

000049fe <__udivmodsi4>:
    49fe:	a1 e2       	ldi	r26, 0x21	; 33
    4a00:	1a 2e       	mov	r1, r26
    4a02:	aa 1b       	sub	r26, r26
    4a04:	bb 1b       	sub	r27, r27
    4a06:	fd 01       	movw	r30, r26
    4a08:	0d c0       	rjmp	.+26     	; 0x4a24 <__udivmodsi4_ep>

00004a0a <__udivmodsi4_loop>:
    4a0a:	aa 1f       	adc	r26, r26
    4a0c:	bb 1f       	adc	r27, r27
    4a0e:	ee 1f       	adc	r30, r30
    4a10:	ff 1f       	adc	r31, r31
    4a12:	a2 17       	cp	r26, r18
    4a14:	b3 07       	cpc	r27, r19
    4a16:	e4 07       	cpc	r30, r20
    4a18:	f5 07       	cpc	r31, r21
    4a1a:	20 f0       	brcs	.+8      	; 0x4a24 <__udivmodsi4_ep>
    4a1c:	a2 1b       	sub	r26, r18
    4a1e:	b3 0b       	sbc	r27, r19
    4a20:	e4 0b       	sbc	r30, r20
    4a22:	f5 0b       	sbc	r31, r21

00004a24 <__udivmodsi4_ep>:
    4a24:	66 1f       	adc	r22, r22
    4a26:	77 1f       	adc	r23, r23
    4a28:	88 1f       	adc	r24, r24
    4a2a:	99 1f       	adc	r25, r25
    4a2c:	1a 94       	dec	r1
    4a2e:	69 f7       	brne	.-38     	; 0x4a0a <__udivmodsi4_loop>
    4a30:	60 95       	com	r22
    4a32:	70 95       	com	r23
    4a34:	80 95       	com	r24
    4a36:	90 95       	com	r25
    4a38:	9b 01       	movw	r18, r22
    4a3a:	ac 01       	movw	r20, r24
    4a3c:	bd 01       	movw	r22, r26
    4a3e:	cf 01       	movw	r24, r30
    4a40:	08 95       	ret

00004a42 <__prologue_saves__>:
    4a42:	2f 92       	push	r2
    4a44:	3f 92       	push	r3
    4a46:	4f 92       	push	r4
    4a48:	5f 92       	push	r5
    4a4a:	6f 92       	push	r6
    4a4c:	7f 92       	push	r7
    4a4e:	8f 92       	push	r8
    4a50:	9f 92       	push	r9
    4a52:	af 92       	push	r10
    4a54:	bf 92       	push	r11
    4a56:	cf 92       	push	r12
    4a58:	df 92       	push	r13
    4a5a:	ef 92       	push	r14
    4a5c:	ff 92       	push	r15
    4a5e:	0f 93       	push	r16
    4a60:	1f 93       	push	r17
    4a62:	cf 93       	push	r28
    4a64:	df 93       	push	r29
    4a66:	cd b7       	in	r28, 0x3d	; 61
    4a68:	de b7       	in	r29, 0x3e	; 62
    4a6a:	ca 1b       	sub	r28, r26
    4a6c:	db 0b       	sbc	r29, r27
    4a6e:	0f b6       	in	r0, 0x3f	; 63
    4a70:	f8 94       	cli
    4a72:	de bf       	out	0x3e, r29	; 62
    4a74:	0f be       	out	0x3f, r0	; 63
    4a76:	cd bf       	out	0x3d, r28	; 61
    4a78:	09 94       	ijmp

00004a7a <__epilogue_restores__>:
    4a7a:	2a 88       	ldd	r2, Y+18	; 0x12
    4a7c:	39 88       	ldd	r3, Y+17	; 0x11
    4a7e:	48 88       	ldd	r4, Y+16	; 0x10
    4a80:	5f 84       	ldd	r5, Y+15	; 0x0f
    4a82:	6e 84       	ldd	r6, Y+14	; 0x0e
    4a84:	7d 84       	ldd	r7, Y+13	; 0x0d
    4a86:	8c 84       	ldd	r8, Y+12	; 0x0c
    4a88:	9b 84       	ldd	r9, Y+11	; 0x0b
    4a8a:	aa 84       	ldd	r10, Y+10	; 0x0a
    4a8c:	b9 84       	ldd	r11, Y+9	; 0x09
    4a8e:	c8 84       	ldd	r12, Y+8	; 0x08
    4a90:	df 80       	ldd	r13, Y+7	; 0x07
    4a92:	ee 80       	ldd	r14, Y+6	; 0x06
    4a94:	fd 80       	ldd	r15, Y+5	; 0x05
    4a96:	0c 81       	ldd	r16, Y+4	; 0x04
    4a98:	1b 81       	ldd	r17, Y+3	; 0x03
    4a9a:	aa 81       	ldd	r26, Y+2	; 0x02
    4a9c:	b9 81       	ldd	r27, Y+1	; 0x01
    4a9e:	ce 0f       	add	r28, r30
    4aa0:	d1 1d       	adc	r29, r1
    4aa2:	0f b6       	in	r0, 0x3f	; 63
    4aa4:	f8 94       	cli
    4aa6:	de bf       	out	0x3e, r29	; 62
    4aa8:	0f be       	out	0x3f, r0	; 63
    4aaa:	cd bf       	out	0x3d, r28	; 61
    4aac:	ed 01       	movw	r28, r26
    4aae:	08 95       	ret

00004ab0 <_exit>:
    4ab0:	f8 94       	cli

00004ab2 <__stop_program>:
    4ab2:	ff cf       	rjmp	.-2      	; 0x4ab2 <__stop_program>
