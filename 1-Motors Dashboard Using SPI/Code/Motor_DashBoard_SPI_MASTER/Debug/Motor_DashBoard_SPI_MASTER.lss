
Motor_DashBoard_SPI_MASTER.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00005de0  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         000000ea  00800060  00005de0  00005e74  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000002c  0080014a  0080014a  00005f5e  2**0
                  ALLOC
  3 .stab         0000732c  00000000  00000000  00005f60  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      000027c2  00000000  00000000  0000d28c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000160  00000000  00000000  0000fa4e  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 0000018f  00000000  00000000  0000fbae  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00002045  00000000  00000000  0000fd3d  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00001101  00000000  00000000  00011d82  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000f82  00000000  00000000  00012e83  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000180  00000000  00000000  00013e08  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    000002c2  00000000  00000000  00013f88  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    0000088e  00000000  00000000  0001424a  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  00014ad8  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 8a 27 	jmp	0x4f14	; 0x4f14 <__vector_1>
       8:	0c 94 bd 27 	jmp	0x4f7a	; 0x4f7a <__vector_2>
       c:	0c 94 f0 27 	jmp	0x4fe0	; 0x4fe0 <__vector_3>
      10:	0c 94 d0 21 	jmp	0x43a0	; 0x43a0 <__vector_4>
      14:	0c 94 03 22 	jmp	0x4406	; 0x4406 <__vector_5>
      18:	0c 94 36 22 	jmp	0x446c	; 0x446c <__vector_6>
      1c:	0c 94 69 22 	jmp	0x44d2	; 0x44d2 <__vector_7>
      20:	0c 94 9c 22 	jmp	0x4538	; 0x4538 <__vector_8>
      24:	0c 94 cf 22 	jmp	0x459e	; 0x459e <__vector_9>
      28:	0c 94 02 23 	jmp	0x4604	; 0x4604 <__vector_10>
      2c:	0c 94 35 23 	jmp	0x466a	; 0x466a <__vector_11>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 b7 1a 	jmp	0x356e	; 0x356e <__vector_13>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 ea 1a 	jmp	0x35d4	; 0x35d4 <__vector_15>
      40:	0c 94 06 2e 	jmp	0x5c0c	; 0x5c0c <__vector_16>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	11 e0       	ldi	r17, 0x01	; 1
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e0 ee       	ldi	r30, 0xE0	; 224
      68:	fd e5       	ldi	r31, 0x5D	; 93
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	aa 34       	cpi	r26, 0x4A	; 74
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	11 e0       	ldi	r17, 0x01	; 1
      78:	aa e4       	ldi	r26, 0x4A	; 74
      7a:	b1 e0       	ldi	r27, 0x01	; 1
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a6 37       	cpi	r26, 0x76	; 118
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 62 08 	call	0x10c4	; 0x10c4 <main>
      8a:	0c 94 ee 2e 	jmp	0x5ddc	; 0x5ddc <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 55 04 	call	0x8aa	; 0x8aa <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 55 04 	call	0x8aa	; 0x8aa <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 b7 2e 	jmp	0x5d6e	; 0x5d6e <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	ac e0       	ldi	r26, 0x0C	; 12
     128:	b1 e0       	ldi	r27, 0x01	; 1
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 d3 2e 	jmp	0x5da6	; 0x5da6 <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 c3 2e 	jmp	0x5d86	; 0x5d86 <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 a9 04 	call	0x952	; 0x952 <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 df 2e 	jmp	0x5dbe	; 0x5dbe <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 c3 2e 	jmp	0x5d86	; 0x5d86 <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 a9 04 	call	0x952	; 0x952 <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 df 2e 	jmp	0x5dbe	; 0x5dbe <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 b7 2e 	jmp	0x5d6e	; 0x5d6e <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	8c e0       	ldi	r24, 0x0C	; 12
     496:	91 e0       	ldi	r25, 0x01	; 1
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 a9 04 	call	0x952	; 0x952 <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 d3 2e 	jmp	0x5da6	; 0x5da6 <__epilogue_restores__>

00000632 <__divsf3>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 bf 2e 	jmp	0x5d7e	; 0x5d7e <__prologue_saves__+0x10>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	b9 e0       	ldi	r27, 0x09	; 9
     650:	eb 2e       	mov	r14, r27
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     672:	29 85       	ldd	r18, Y+9	; 0x09
     674:	22 30       	cpi	r18, 0x02	; 2
     676:	08 f4       	brcc	.+2      	; 0x67a <__divsf3+0x48>
     678:	7e c0       	rjmp	.+252    	; 0x776 <__divsf3+0x144>
     67a:	39 89       	ldd	r19, Y+17	; 0x11
     67c:	32 30       	cpi	r19, 0x02	; 2
     67e:	10 f4       	brcc	.+4      	; 0x684 <__divsf3+0x52>
     680:	b8 01       	movw	r22, r16
     682:	7c c0       	rjmp	.+248    	; 0x77c <__divsf3+0x14a>
     684:	8a 85       	ldd	r24, Y+10	; 0x0a
     686:	9a 89       	ldd	r25, Y+18	; 0x12
     688:	89 27       	eor	r24, r25
     68a:	8a 87       	std	Y+10, r24	; 0x0a
     68c:	24 30       	cpi	r18, 0x04	; 4
     68e:	11 f0       	breq	.+4      	; 0x694 <__divsf3+0x62>
     690:	22 30       	cpi	r18, 0x02	; 2
     692:	31 f4       	brne	.+12     	; 0x6a0 <__divsf3+0x6e>
     694:	23 17       	cp	r18, r19
     696:	09 f0       	breq	.+2      	; 0x69a <__divsf3+0x68>
     698:	6e c0       	rjmp	.+220    	; 0x776 <__divsf3+0x144>
     69a:	6c e0       	ldi	r22, 0x0C	; 12
     69c:	71 e0       	ldi	r23, 0x01	; 1
     69e:	6e c0       	rjmp	.+220    	; 0x77c <__divsf3+0x14a>
     6a0:	34 30       	cpi	r19, 0x04	; 4
     6a2:	39 f4       	brne	.+14     	; 0x6b2 <__divsf3+0x80>
     6a4:	1d 86       	std	Y+13, r1	; 0x0d
     6a6:	1e 86       	std	Y+14, r1	; 0x0e
     6a8:	1f 86       	std	Y+15, r1	; 0x0f
     6aa:	18 8a       	std	Y+16, r1	; 0x10
     6ac:	1c 86       	std	Y+12, r1	; 0x0c
     6ae:	1b 86       	std	Y+11, r1	; 0x0b
     6b0:	04 c0       	rjmp	.+8      	; 0x6ba <__divsf3+0x88>
     6b2:	32 30       	cpi	r19, 0x02	; 2
     6b4:	21 f4       	brne	.+8      	; 0x6be <__divsf3+0x8c>
     6b6:	84 e0       	ldi	r24, 0x04	; 4
     6b8:	89 87       	std	Y+9, r24	; 0x09
     6ba:	b7 01       	movw	r22, r14
     6bc:	5f c0       	rjmp	.+190    	; 0x77c <__divsf3+0x14a>
     6be:	2b 85       	ldd	r18, Y+11	; 0x0b
     6c0:	3c 85       	ldd	r19, Y+12	; 0x0c
     6c2:	8b 89       	ldd	r24, Y+19	; 0x13
     6c4:	9c 89       	ldd	r25, Y+20	; 0x14
     6c6:	28 1b       	sub	r18, r24
     6c8:	39 0b       	sbc	r19, r25
     6ca:	3c 87       	std	Y+12, r19	; 0x0c
     6cc:	2b 87       	std	Y+11, r18	; 0x0b
     6ce:	ed 84       	ldd	r14, Y+13	; 0x0d
     6d0:	fe 84       	ldd	r15, Y+14	; 0x0e
     6d2:	0f 85       	ldd	r16, Y+15	; 0x0f
     6d4:	18 89       	ldd	r17, Y+16	; 0x10
     6d6:	ad 88       	ldd	r10, Y+21	; 0x15
     6d8:	be 88       	ldd	r11, Y+22	; 0x16
     6da:	cf 88       	ldd	r12, Y+23	; 0x17
     6dc:	d8 8c       	ldd	r13, Y+24	; 0x18
     6de:	ea 14       	cp	r14, r10
     6e0:	fb 04       	cpc	r15, r11
     6e2:	0c 05       	cpc	r16, r12
     6e4:	1d 05       	cpc	r17, r13
     6e6:	40 f4       	brcc	.+16     	; 0x6f8 <__divsf3+0xc6>
     6e8:	ee 0c       	add	r14, r14
     6ea:	ff 1c       	adc	r15, r15
     6ec:	00 1f       	adc	r16, r16
     6ee:	11 1f       	adc	r17, r17
     6f0:	21 50       	subi	r18, 0x01	; 1
     6f2:	30 40       	sbci	r19, 0x00	; 0
     6f4:	3c 87       	std	Y+12, r19	; 0x0c
     6f6:	2b 87       	std	Y+11, r18	; 0x0b
     6f8:	20 e0       	ldi	r18, 0x00	; 0
     6fa:	30 e0       	ldi	r19, 0x00	; 0
     6fc:	40 e0       	ldi	r20, 0x00	; 0
     6fe:	50 e0       	ldi	r21, 0x00	; 0
     700:	80 e0       	ldi	r24, 0x00	; 0
     702:	90 e0       	ldi	r25, 0x00	; 0
     704:	a0 e0       	ldi	r26, 0x00	; 0
     706:	b0 e4       	ldi	r27, 0x40	; 64
     708:	60 e0       	ldi	r22, 0x00	; 0
     70a:	70 e0       	ldi	r23, 0x00	; 0
     70c:	ea 14       	cp	r14, r10
     70e:	fb 04       	cpc	r15, r11
     710:	0c 05       	cpc	r16, r12
     712:	1d 05       	cpc	r17, r13
     714:	40 f0       	brcs	.+16     	; 0x726 <__divsf3+0xf4>
     716:	28 2b       	or	r18, r24
     718:	39 2b       	or	r19, r25
     71a:	4a 2b       	or	r20, r26
     71c:	5b 2b       	or	r21, r27
     71e:	ea 18       	sub	r14, r10
     720:	fb 08       	sbc	r15, r11
     722:	0c 09       	sbc	r16, r12
     724:	1d 09       	sbc	r17, r13
     726:	b6 95       	lsr	r27
     728:	a7 95       	ror	r26
     72a:	97 95       	ror	r25
     72c:	87 95       	ror	r24
     72e:	ee 0c       	add	r14, r14
     730:	ff 1c       	adc	r15, r15
     732:	00 1f       	adc	r16, r16
     734:	11 1f       	adc	r17, r17
     736:	6f 5f       	subi	r22, 0xFF	; 255
     738:	7f 4f       	sbci	r23, 0xFF	; 255
     73a:	6f 31       	cpi	r22, 0x1F	; 31
     73c:	71 05       	cpc	r23, r1
     73e:	31 f7       	brne	.-52     	; 0x70c <__divsf3+0xda>
     740:	da 01       	movw	r26, r20
     742:	c9 01       	movw	r24, r18
     744:	8f 77       	andi	r24, 0x7F	; 127
     746:	90 70       	andi	r25, 0x00	; 0
     748:	a0 70       	andi	r26, 0x00	; 0
     74a:	b0 70       	andi	r27, 0x00	; 0
     74c:	80 34       	cpi	r24, 0x40	; 64
     74e:	91 05       	cpc	r25, r1
     750:	a1 05       	cpc	r26, r1
     752:	b1 05       	cpc	r27, r1
     754:	61 f4       	brne	.+24     	; 0x76e <__divsf3+0x13c>
     756:	27 fd       	sbrc	r18, 7
     758:	0a c0       	rjmp	.+20     	; 0x76e <__divsf3+0x13c>
     75a:	e1 14       	cp	r14, r1
     75c:	f1 04       	cpc	r15, r1
     75e:	01 05       	cpc	r16, r1
     760:	11 05       	cpc	r17, r1
     762:	29 f0       	breq	.+10     	; 0x76e <__divsf3+0x13c>
     764:	20 5c       	subi	r18, 0xC0	; 192
     766:	3f 4f       	sbci	r19, 0xFF	; 255
     768:	4f 4f       	sbci	r20, 0xFF	; 255
     76a:	5f 4f       	sbci	r21, 0xFF	; 255
     76c:	20 78       	andi	r18, 0x80	; 128
     76e:	2d 87       	std	Y+13, r18	; 0x0d
     770:	3e 87       	std	Y+14, r19	; 0x0e
     772:	4f 87       	std	Y+15, r20	; 0x0f
     774:	58 8b       	std	Y+16, r21	; 0x10
     776:	be 01       	movw	r22, r28
     778:	67 5f       	subi	r22, 0xF7	; 247
     77a:	7f 4f       	sbci	r23, 0xFF	; 255
     77c:	cb 01       	movw	r24, r22
     77e:	0e 94 a9 04 	call	0x952	; 0x952 <__pack_f>
     782:	68 96       	adiw	r28, 0x18	; 24
     784:	ea e0       	ldi	r30, 0x0A	; 10
     786:	0c 94 db 2e 	jmp	0x5db6	; 0x5db6 <__epilogue_restores__+0x10>

0000078a <__gtsf2>:
     78a:	a8 e1       	ldi	r26, 0x18	; 24
     78c:	b0 e0       	ldi	r27, 0x00	; 0
     78e:	eb ec       	ldi	r30, 0xCB	; 203
     790:	f3 e0       	ldi	r31, 0x03	; 3
     792:	0c 94 c3 2e 	jmp	0x5d86	; 0x5d86 <__prologue_saves__+0x18>
     796:	69 83       	std	Y+1, r22	; 0x01
     798:	7a 83       	std	Y+2, r23	; 0x02
     79a:	8b 83       	std	Y+3, r24	; 0x03
     79c:	9c 83       	std	Y+4, r25	; 0x04
     79e:	2d 83       	std	Y+5, r18	; 0x05
     7a0:	3e 83       	std	Y+6, r19	; 0x06
     7a2:	4f 83       	std	Y+7, r20	; 0x07
     7a4:	58 87       	std	Y+8, r21	; 0x08
     7a6:	89 e0       	ldi	r24, 0x09	; 9
     7a8:	e8 2e       	mov	r14, r24
     7aa:	f1 2c       	mov	r15, r1
     7ac:	ec 0e       	add	r14, r28
     7ae:	fd 1e       	adc	r15, r29
     7b0:	ce 01       	movw	r24, r28
     7b2:	01 96       	adiw	r24, 0x01	; 1
     7b4:	b7 01       	movw	r22, r14
     7b6:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     7ba:	8e 01       	movw	r16, r28
     7bc:	0f 5e       	subi	r16, 0xEF	; 239
     7be:	1f 4f       	sbci	r17, 0xFF	; 255
     7c0:	ce 01       	movw	r24, r28
     7c2:	05 96       	adiw	r24, 0x05	; 5
     7c4:	b8 01       	movw	r22, r16
     7c6:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     7ca:	89 85       	ldd	r24, Y+9	; 0x09
     7cc:	82 30       	cpi	r24, 0x02	; 2
     7ce:	40 f0       	brcs	.+16     	; 0x7e0 <__gtsf2+0x56>
     7d0:	89 89       	ldd	r24, Y+17	; 0x11
     7d2:	82 30       	cpi	r24, 0x02	; 2
     7d4:	28 f0       	brcs	.+10     	; 0x7e0 <__gtsf2+0x56>
     7d6:	c7 01       	movw	r24, r14
     7d8:	b8 01       	movw	r22, r16
     7da:	0e 94 f6 05 	call	0xbec	; 0xbec <__fpcmp_parts_f>
     7de:	01 c0       	rjmp	.+2      	; 0x7e2 <__gtsf2+0x58>
     7e0:	8f ef       	ldi	r24, 0xFF	; 255
     7e2:	68 96       	adiw	r28, 0x18	; 24
     7e4:	e6 e0       	ldi	r30, 0x06	; 6
     7e6:	0c 94 df 2e 	jmp	0x5dbe	; 0x5dbe <__epilogue_restores__+0x18>

000007ea <__gesf2>:
     7ea:	a8 e1       	ldi	r26, 0x18	; 24
     7ec:	b0 e0       	ldi	r27, 0x00	; 0
     7ee:	eb ef       	ldi	r30, 0xFB	; 251
     7f0:	f3 e0       	ldi	r31, 0x03	; 3
     7f2:	0c 94 c3 2e 	jmp	0x5d86	; 0x5d86 <__prologue_saves__+0x18>
     7f6:	69 83       	std	Y+1, r22	; 0x01
     7f8:	7a 83       	std	Y+2, r23	; 0x02
     7fa:	8b 83       	std	Y+3, r24	; 0x03
     7fc:	9c 83       	std	Y+4, r25	; 0x04
     7fe:	2d 83       	std	Y+5, r18	; 0x05
     800:	3e 83       	std	Y+6, r19	; 0x06
     802:	4f 83       	std	Y+7, r20	; 0x07
     804:	58 87       	std	Y+8, r21	; 0x08
     806:	89 e0       	ldi	r24, 0x09	; 9
     808:	e8 2e       	mov	r14, r24
     80a:	f1 2c       	mov	r15, r1
     80c:	ec 0e       	add	r14, r28
     80e:	fd 1e       	adc	r15, r29
     810:	ce 01       	movw	r24, r28
     812:	01 96       	adiw	r24, 0x01	; 1
     814:	b7 01       	movw	r22, r14
     816:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     81a:	8e 01       	movw	r16, r28
     81c:	0f 5e       	subi	r16, 0xEF	; 239
     81e:	1f 4f       	sbci	r17, 0xFF	; 255
     820:	ce 01       	movw	r24, r28
     822:	05 96       	adiw	r24, 0x05	; 5
     824:	b8 01       	movw	r22, r16
     826:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     82a:	89 85       	ldd	r24, Y+9	; 0x09
     82c:	82 30       	cpi	r24, 0x02	; 2
     82e:	40 f0       	brcs	.+16     	; 0x840 <__gesf2+0x56>
     830:	89 89       	ldd	r24, Y+17	; 0x11
     832:	82 30       	cpi	r24, 0x02	; 2
     834:	28 f0       	brcs	.+10     	; 0x840 <__gesf2+0x56>
     836:	c7 01       	movw	r24, r14
     838:	b8 01       	movw	r22, r16
     83a:	0e 94 f6 05 	call	0xbec	; 0xbec <__fpcmp_parts_f>
     83e:	01 c0       	rjmp	.+2      	; 0x842 <__gesf2+0x58>
     840:	8f ef       	ldi	r24, 0xFF	; 255
     842:	68 96       	adiw	r28, 0x18	; 24
     844:	e6 e0       	ldi	r30, 0x06	; 6
     846:	0c 94 df 2e 	jmp	0x5dbe	; 0x5dbe <__epilogue_restores__+0x18>

0000084a <__ltsf2>:
     84a:	a8 e1       	ldi	r26, 0x18	; 24
     84c:	b0 e0       	ldi	r27, 0x00	; 0
     84e:	eb e2       	ldi	r30, 0x2B	; 43
     850:	f4 e0       	ldi	r31, 0x04	; 4
     852:	0c 94 c3 2e 	jmp	0x5d86	; 0x5d86 <__prologue_saves__+0x18>
     856:	69 83       	std	Y+1, r22	; 0x01
     858:	7a 83       	std	Y+2, r23	; 0x02
     85a:	8b 83       	std	Y+3, r24	; 0x03
     85c:	9c 83       	std	Y+4, r25	; 0x04
     85e:	2d 83       	std	Y+5, r18	; 0x05
     860:	3e 83       	std	Y+6, r19	; 0x06
     862:	4f 83       	std	Y+7, r20	; 0x07
     864:	58 87       	std	Y+8, r21	; 0x08
     866:	89 e0       	ldi	r24, 0x09	; 9
     868:	e8 2e       	mov	r14, r24
     86a:	f1 2c       	mov	r15, r1
     86c:	ec 0e       	add	r14, r28
     86e:	fd 1e       	adc	r15, r29
     870:	ce 01       	movw	r24, r28
     872:	01 96       	adiw	r24, 0x01	; 1
     874:	b7 01       	movw	r22, r14
     876:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     87a:	8e 01       	movw	r16, r28
     87c:	0f 5e       	subi	r16, 0xEF	; 239
     87e:	1f 4f       	sbci	r17, 0xFF	; 255
     880:	ce 01       	movw	r24, r28
     882:	05 96       	adiw	r24, 0x05	; 5
     884:	b8 01       	movw	r22, r16
     886:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     88a:	89 85       	ldd	r24, Y+9	; 0x09
     88c:	82 30       	cpi	r24, 0x02	; 2
     88e:	40 f0       	brcs	.+16     	; 0x8a0 <__stack+0x41>
     890:	89 89       	ldd	r24, Y+17	; 0x11
     892:	82 30       	cpi	r24, 0x02	; 2
     894:	28 f0       	brcs	.+10     	; 0x8a0 <__stack+0x41>
     896:	c7 01       	movw	r24, r14
     898:	b8 01       	movw	r22, r16
     89a:	0e 94 f6 05 	call	0xbec	; 0xbec <__fpcmp_parts_f>
     89e:	01 c0       	rjmp	.+2      	; 0x8a2 <__stack+0x43>
     8a0:	81 e0       	ldi	r24, 0x01	; 1
     8a2:	68 96       	adiw	r28, 0x18	; 24
     8a4:	e6 e0       	ldi	r30, 0x06	; 6
     8a6:	0c 94 df 2e 	jmp	0x5dbe	; 0x5dbe <__epilogue_restores__+0x18>

000008aa <__fixsfsi>:
     8aa:	ac e0       	ldi	r26, 0x0C	; 12
     8ac:	b0 e0       	ldi	r27, 0x00	; 0
     8ae:	eb e5       	ldi	r30, 0x5B	; 91
     8b0:	f4 e0       	ldi	r31, 0x04	; 4
     8b2:	0c 94 c7 2e 	jmp	0x5d8e	; 0x5d8e <__prologue_saves__+0x20>
     8b6:	69 83       	std	Y+1, r22	; 0x01
     8b8:	7a 83       	std	Y+2, r23	; 0x02
     8ba:	8b 83       	std	Y+3, r24	; 0x03
     8bc:	9c 83       	std	Y+4, r25	; 0x04
     8be:	ce 01       	movw	r24, r28
     8c0:	01 96       	adiw	r24, 0x01	; 1
     8c2:	be 01       	movw	r22, r28
     8c4:	6b 5f       	subi	r22, 0xFB	; 251
     8c6:	7f 4f       	sbci	r23, 0xFF	; 255
     8c8:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     8cc:	8d 81       	ldd	r24, Y+5	; 0x05
     8ce:	82 30       	cpi	r24, 0x02	; 2
     8d0:	61 f1       	breq	.+88     	; 0x92a <__fixsfsi+0x80>
     8d2:	82 30       	cpi	r24, 0x02	; 2
     8d4:	50 f1       	brcs	.+84     	; 0x92a <__fixsfsi+0x80>
     8d6:	84 30       	cpi	r24, 0x04	; 4
     8d8:	21 f4       	brne	.+8      	; 0x8e2 <__fixsfsi+0x38>
     8da:	8e 81       	ldd	r24, Y+6	; 0x06
     8dc:	88 23       	and	r24, r24
     8de:	51 f1       	breq	.+84     	; 0x934 <__fixsfsi+0x8a>
     8e0:	2e c0       	rjmp	.+92     	; 0x93e <__fixsfsi+0x94>
     8e2:	2f 81       	ldd	r18, Y+7	; 0x07
     8e4:	38 85       	ldd	r19, Y+8	; 0x08
     8e6:	37 fd       	sbrc	r19, 7
     8e8:	20 c0       	rjmp	.+64     	; 0x92a <__fixsfsi+0x80>
     8ea:	6e 81       	ldd	r22, Y+6	; 0x06
     8ec:	2f 31       	cpi	r18, 0x1F	; 31
     8ee:	31 05       	cpc	r19, r1
     8f0:	1c f0       	brlt	.+6      	; 0x8f8 <__fixsfsi+0x4e>
     8f2:	66 23       	and	r22, r22
     8f4:	f9 f0       	breq	.+62     	; 0x934 <__fixsfsi+0x8a>
     8f6:	23 c0       	rjmp	.+70     	; 0x93e <__fixsfsi+0x94>
     8f8:	8e e1       	ldi	r24, 0x1E	; 30
     8fa:	90 e0       	ldi	r25, 0x00	; 0
     8fc:	82 1b       	sub	r24, r18
     8fe:	93 0b       	sbc	r25, r19
     900:	29 85       	ldd	r18, Y+9	; 0x09
     902:	3a 85       	ldd	r19, Y+10	; 0x0a
     904:	4b 85       	ldd	r20, Y+11	; 0x0b
     906:	5c 85       	ldd	r21, Y+12	; 0x0c
     908:	04 c0       	rjmp	.+8      	; 0x912 <__fixsfsi+0x68>
     90a:	56 95       	lsr	r21
     90c:	47 95       	ror	r20
     90e:	37 95       	ror	r19
     910:	27 95       	ror	r18
     912:	8a 95       	dec	r24
     914:	d2 f7       	brpl	.-12     	; 0x90a <__fixsfsi+0x60>
     916:	66 23       	and	r22, r22
     918:	b1 f0       	breq	.+44     	; 0x946 <__fixsfsi+0x9c>
     91a:	50 95       	com	r21
     91c:	40 95       	com	r20
     91e:	30 95       	com	r19
     920:	21 95       	neg	r18
     922:	3f 4f       	sbci	r19, 0xFF	; 255
     924:	4f 4f       	sbci	r20, 0xFF	; 255
     926:	5f 4f       	sbci	r21, 0xFF	; 255
     928:	0e c0       	rjmp	.+28     	; 0x946 <__fixsfsi+0x9c>
     92a:	20 e0       	ldi	r18, 0x00	; 0
     92c:	30 e0       	ldi	r19, 0x00	; 0
     92e:	40 e0       	ldi	r20, 0x00	; 0
     930:	50 e0       	ldi	r21, 0x00	; 0
     932:	09 c0       	rjmp	.+18     	; 0x946 <__fixsfsi+0x9c>
     934:	2f ef       	ldi	r18, 0xFF	; 255
     936:	3f ef       	ldi	r19, 0xFF	; 255
     938:	4f ef       	ldi	r20, 0xFF	; 255
     93a:	5f e7       	ldi	r21, 0x7F	; 127
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__fixsfsi+0x9c>
     93e:	20 e0       	ldi	r18, 0x00	; 0
     940:	30 e0       	ldi	r19, 0x00	; 0
     942:	40 e0       	ldi	r20, 0x00	; 0
     944:	50 e8       	ldi	r21, 0x80	; 128
     946:	b9 01       	movw	r22, r18
     948:	ca 01       	movw	r24, r20
     94a:	2c 96       	adiw	r28, 0x0c	; 12
     94c:	e2 e0       	ldi	r30, 0x02	; 2
     94e:	0c 94 e3 2e 	jmp	0x5dc6	; 0x5dc6 <__epilogue_restores__+0x20>

00000952 <__pack_f>:
     952:	df 92       	push	r13
     954:	ef 92       	push	r14
     956:	ff 92       	push	r15
     958:	0f 93       	push	r16
     95a:	1f 93       	push	r17
     95c:	fc 01       	movw	r30, r24
     95e:	e4 80       	ldd	r14, Z+4	; 0x04
     960:	f5 80       	ldd	r15, Z+5	; 0x05
     962:	06 81       	ldd	r16, Z+6	; 0x06
     964:	17 81       	ldd	r17, Z+7	; 0x07
     966:	d1 80       	ldd	r13, Z+1	; 0x01
     968:	80 81       	ld	r24, Z
     96a:	82 30       	cpi	r24, 0x02	; 2
     96c:	48 f4       	brcc	.+18     	; 0x980 <__pack_f+0x2e>
     96e:	80 e0       	ldi	r24, 0x00	; 0
     970:	90 e0       	ldi	r25, 0x00	; 0
     972:	a0 e1       	ldi	r26, 0x10	; 16
     974:	b0 e0       	ldi	r27, 0x00	; 0
     976:	e8 2a       	or	r14, r24
     978:	f9 2a       	or	r15, r25
     97a:	0a 2b       	or	r16, r26
     97c:	1b 2b       	or	r17, r27
     97e:	a5 c0       	rjmp	.+330    	; 0xaca <__pack_f+0x178>
     980:	84 30       	cpi	r24, 0x04	; 4
     982:	09 f4       	brne	.+2      	; 0x986 <__pack_f+0x34>
     984:	9f c0       	rjmp	.+318    	; 0xac4 <__pack_f+0x172>
     986:	82 30       	cpi	r24, 0x02	; 2
     988:	21 f4       	brne	.+8      	; 0x992 <__pack_f+0x40>
     98a:	ee 24       	eor	r14, r14
     98c:	ff 24       	eor	r15, r15
     98e:	87 01       	movw	r16, r14
     990:	05 c0       	rjmp	.+10     	; 0x99c <__pack_f+0x4a>
     992:	e1 14       	cp	r14, r1
     994:	f1 04       	cpc	r15, r1
     996:	01 05       	cpc	r16, r1
     998:	11 05       	cpc	r17, r1
     99a:	19 f4       	brne	.+6      	; 0x9a2 <__pack_f+0x50>
     99c:	e0 e0       	ldi	r30, 0x00	; 0
     99e:	f0 e0       	ldi	r31, 0x00	; 0
     9a0:	96 c0       	rjmp	.+300    	; 0xace <__pack_f+0x17c>
     9a2:	62 81       	ldd	r22, Z+2	; 0x02
     9a4:	73 81       	ldd	r23, Z+3	; 0x03
     9a6:	9f ef       	ldi	r25, 0xFF	; 255
     9a8:	62 38       	cpi	r22, 0x82	; 130
     9aa:	79 07       	cpc	r23, r25
     9ac:	0c f0       	brlt	.+2      	; 0x9b0 <__pack_f+0x5e>
     9ae:	5b c0       	rjmp	.+182    	; 0xa66 <__pack_f+0x114>
     9b0:	22 e8       	ldi	r18, 0x82	; 130
     9b2:	3f ef       	ldi	r19, 0xFF	; 255
     9b4:	26 1b       	sub	r18, r22
     9b6:	37 0b       	sbc	r19, r23
     9b8:	2a 31       	cpi	r18, 0x1A	; 26
     9ba:	31 05       	cpc	r19, r1
     9bc:	2c f0       	brlt	.+10     	; 0x9c8 <__pack_f+0x76>
     9be:	20 e0       	ldi	r18, 0x00	; 0
     9c0:	30 e0       	ldi	r19, 0x00	; 0
     9c2:	40 e0       	ldi	r20, 0x00	; 0
     9c4:	50 e0       	ldi	r21, 0x00	; 0
     9c6:	2a c0       	rjmp	.+84     	; 0xa1c <__pack_f+0xca>
     9c8:	b8 01       	movw	r22, r16
     9ca:	a7 01       	movw	r20, r14
     9cc:	02 2e       	mov	r0, r18
     9ce:	04 c0       	rjmp	.+8      	; 0x9d8 <__pack_f+0x86>
     9d0:	76 95       	lsr	r23
     9d2:	67 95       	ror	r22
     9d4:	57 95       	ror	r21
     9d6:	47 95       	ror	r20
     9d8:	0a 94       	dec	r0
     9da:	d2 f7       	brpl	.-12     	; 0x9d0 <__pack_f+0x7e>
     9dc:	81 e0       	ldi	r24, 0x01	; 1
     9de:	90 e0       	ldi	r25, 0x00	; 0
     9e0:	a0 e0       	ldi	r26, 0x00	; 0
     9e2:	b0 e0       	ldi	r27, 0x00	; 0
     9e4:	04 c0       	rjmp	.+8      	; 0x9ee <__pack_f+0x9c>
     9e6:	88 0f       	add	r24, r24
     9e8:	99 1f       	adc	r25, r25
     9ea:	aa 1f       	adc	r26, r26
     9ec:	bb 1f       	adc	r27, r27
     9ee:	2a 95       	dec	r18
     9f0:	d2 f7       	brpl	.-12     	; 0x9e6 <__pack_f+0x94>
     9f2:	01 97       	sbiw	r24, 0x01	; 1
     9f4:	a1 09       	sbc	r26, r1
     9f6:	b1 09       	sbc	r27, r1
     9f8:	8e 21       	and	r24, r14
     9fa:	9f 21       	and	r25, r15
     9fc:	a0 23       	and	r26, r16
     9fe:	b1 23       	and	r27, r17
     a00:	00 97       	sbiw	r24, 0x00	; 0
     a02:	a1 05       	cpc	r26, r1
     a04:	b1 05       	cpc	r27, r1
     a06:	21 f0       	breq	.+8      	; 0xa10 <__pack_f+0xbe>
     a08:	81 e0       	ldi	r24, 0x01	; 1
     a0a:	90 e0       	ldi	r25, 0x00	; 0
     a0c:	a0 e0       	ldi	r26, 0x00	; 0
     a0e:	b0 e0       	ldi	r27, 0x00	; 0
     a10:	9a 01       	movw	r18, r20
     a12:	ab 01       	movw	r20, r22
     a14:	28 2b       	or	r18, r24
     a16:	39 2b       	or	r19, r25
     a18:	4a 2b       	or	r20, r26
     a1a:	5b 2b       	or	r21, r27
     a1c:	da 01       	movw	r26, r20
     a1e:	c9 01       	movw	r24, r18
     a20:	8f 77       	andi	r24, 0x7F	; 127
     a22:	90 70       	andi	r25, 0x00	; 0
     a24:	a0 70       	andi	r26, 0x00	; 0
     a26:	b0 70       	andi	r27, 0x00	; 0
     a28:	80 34       	cpi	r24, 0x40	; 64
     a2a:	91 05       	cpc	r25, r1
     a2c:	a1 05       	cpc	r26, r1
     a2e:	b1 05       	cpc	r27, r1
     a30:	39 f4       	brne	.+14     	; 0xa40 <__pack_f+0xee>
     a32:	27 ff       	sbrs	r18, 7
     a34:	09 c0       	rjmp	.+18     	; 0xa48 <__pack_f+0xf6>
     a36:	20 5c       	subi	r18, 0xC0	; 192
     a38:	3f 4f       	sbci	r19, 0xFF	; 255
     a3a:	4f 4f       	sbci	r20, 0xFF	; 255
     a3c:	5f 4f       	sbci	r21, 0xFF	; 255
     a3e:	04 c0       	rjmp	.+8      	; 0xa48 <__pack_f+0xf6>
     a40:	21 5c       	subi	r18, 0xC1	; 193
     a42:	3f 4f       	sbci	r19, 0xFF	; 255
     a44:	4f 4f       	sbci	r20, 0xFF	; 255
     a46:	5f 4f       	sbci	r21, 0xFF	; 255
     a48:	e0 e0       	ldi	r30, 0x00	; 0
     a4a:	f0 e0       	ldi	r31, 0x00	; 0
     a4c:	20 30       	cpi	r18, 0x00	; 0
     a4e:	a0 e0       	ldi	r26, 0x00	; 0
     a50:	3a 07       	cpc	r19, r26
     a52:	a0 e0       	ldi	r26, 0x00	; 0
     a54:	4a 07       	cpc	r20, r26
     a56:	a0 e4       	ldi	r26, 0x40	; 64
     a58:	5a 07       	cpc	r21, r26
     a5a:	10 f0       	brcs	.+4      	; 0xa60 <__pack_f+0x10e>
     a5c:	e1 e0       	ldi	r30, 0x01	; 1
     a5e:	f0 e0       	ldi	r31, 0x00	; 0
     a60:	79 01       	movw	r14, r18
     a62:	8a 01       	movw	r16, r20
     a64:	27 c0       	rjmp	.+78     	; 0xab4 <__pack_f+0x162>
     a66:	60 38       	cpi	r22, 0x80	; 128
     a68:	71 05       	cpc	r23, r1
     a6a:	64 f5       	brge	.+88     	; 0xac4 <__pack_f+0x172>
     a6c:	fb 01       	movw	r30, r22
     a6e:	e1 58       	subi	r30, 0x81	; 129
     a70:	ff 4f       	sbci	r31, 0xFF	; 255
     a72:	d8 01       	movw	r26, r16
     a74:	c7 01       	movw	r24, r14
     a76:	8f 77       	andi	r24, 0x7F	; 127
     a78:	90 70       	andi	r25, 0x00	; 0
     a7a:	a0 70       	andi	r26, 0x00	; 0
     a7c:	b0 70       	andi	r27, 0x00	; 0
     a7e:	80 34       	cpi	r24, 0x40	; 64
     a80:	91 05       	cpc	r25, r1
     a82:	a1 05       	cpc	r26, r1
     a84:	b1 05       	cpc	r27, r1
     a86:	39 f4       	brne	.+14     	; 0xa96 <__pack_f+0x144>
     a88:	e7 fe       	sbrs	r14, 7
     a8a:	0d c0       	rjmp	.+26     	; 0xaa6 <__pack_f+0x154>
     a8c:	80 e4       	ldi	r24, 0x40	; 64
     a8e:	90 e0       	ldi	r25, 0x00	; 0
     a90:	a0 e0       	ldi	r26, 0x00	; 0
     a92:	b0 e0       	ldi	r27, 0x00	; 0
     a94:	04 c0       	rjmp	.+8      	; 0xa9e <__pack_f+0x14c>
     a96:	8f e3       	ldi	r24, 0x3F	; 63
     a98:	90 e0       	ldi	r25, 0x00	; 0
     a9a:	a0 e0       	ldi	r26, 0x00	; 0
     a9c:	b0 e0       	ldi	r27, 0x00	; 0
     a9e:	e8 0e       	add	r14, r24
     aa0:	f9 1e       	adc	r15, r25
     aa2:	0a 1f       	adc	r16, r26
     aa4:	1b 1f       	adc	r17, r27
     aa6:	17 ff       	sbrs	r17, 7
     aa8:	05 c0       	rjmp	.+10     	; 0xab4 <__pack_f+0x162>
     aaa:	16 95       	lsr	r17
     aac:	07 95       	ror	r16
     aae:	f7 94       	ror	r15
     ab0:	e7 94       	ror	r14
     ab2:	31 96       	adiw	r30, 0x01	; 1
     ab4:	87 e0       	ldi	r24, 0x07	; 7
     ab6:	16 95       	lsr	r17
     ab8:	07 95       	ror	r16
     aba:	f7 94       	ror	r15
     abc:	e7 94       	ror	r14
     abe:	8a 95       	dec	r24
     ac0:	d1 f7       	brne	.-12     	; 0xab6 <__pack_f+0x164>
     ac2:	05 c0       	rjmp	.+10     	; 0xace <__pack_f+0x17c>
     ac4:	ee 24       	eor	r14, r14
     ac6:	ff 24       	eor	r15, r15
     ac8:	87 01       	movw	r16, r14
     aca:	ef ef       	ldi	r30, 0xFF	; 255
     acc:	f0 e0       	ldi	r31, 0x00	; 0
     ace:	6e 2f       	mov	r22, r30
     ad0:	67 95       	ror	r22
     ad2:	66 27       	eor	r22, r22
     ad4:	67 95       	ror	r22
     ad6:	90 2f       	mov	r25, r16
     ad8:	9f 77       	andi	r25, 0x7F	; 127
     ada:	d7 94       	ror	r13
     adc:	dd 24       	eor	r13, r13
     ade:	d7 94       	ror	r13
     ae0:	8e 2f       	mov	r24, r30
     ae2:	86 95       	lsr	r24
     ae4:	49 2f       	mov	r20, r25
     ae6:	46 2b       	or	r20, r22
     ae8:	58 2f       	mov	r21, r24
     aea:	5d 29       	or	r21, r13
     aec:	b7 01       	movw	r22, r14
     aee:	ca 01       	movw	r24, r20
     af0:	1f 91       	pop	r17
     af2:	0f 91       	pop	r16
     af4:	ff 90       	pop	r15
     af6:	ef 90       	pop	r14
     af8:	df 90       	pop	r13
     afa:	08 95       	ret

00000afc <__unpack_f>:
     afc:	fc 01       	movw	r30, r24
     afe:	db 01       	movw	r26, r22
     b00:	40 81       	ld	r20, Z
     b02:	51 81       	ldd	r21, Z+1	; 0x01
     b04:	22 81       	ldd	r18, Z+2	; 0x02
     b06:	62 2f       	mov	r22, r18
     b08:	6f 77       	andi	r22, 0x7F	; 127
     b0a:	70 e0       	ldi	r23, 0x00	; 0
     b0c:	22 1f       	adc	r18, r18
     b0e:	22 27       	eor	r18, r18
     b10:	22 1f       	adc	r18, r18
     b12:	93 81       	ldd	r25, Z+3	; 0x03
     b14:	89 2f       	mov	r24, r25
     b16:	88 0f       	add	r24, r24
     b18:	82 2b       	or	r24, r18
     b1a:	28 2f       	mov	r18, r24
     b1c:	30 e0       	ldi	r19, 0x00	; 0
     b1e:	99 1f       	adc	r25, r25
     b20:	99 27       	eor	r25, r25
     b22:	99 1f       	adc	r25, r25
     b24:	11 96       	adiw	r26, 0x01	; 1
     b26:	9c 93       	st	X, r25
     b28:	11 97       	sbiw	r26, 0x01	; 1
     b2a:	21 15       	cp	r18, r1
     b2c:	31 05       	cpc	r19, r1
     b2e:	a9 f5       	brne	.+106    	; 0xb9a <__unpack_f+0x9e>
     b30:	41 15       	cp	r20, r1
     b32:	51 05       	cpc	r21, r1
     b34:	61 05       	cpc	r22, r1
     b36:	71 05       	cpc	r23, r1
     b38:	11 f4       	brne	.+4      	; 0xb3e <__unpack_f+0x42>
     b3a:	82 e0       	ldi	r24, 0x02	; 2
     b3c:	37 c0       	rjmp	.+110    	; 0xbac <__unpack_f+0xb0>
     b3e:	82 e8       	ldi	r24, 0x82	; 130
     b40:	9f ef       	ldi	r25, 0xFF	; 255
     b42:	13 96       	adiw	r26, 0x03	; 3
     b44:	9c 93       	st	X, r25
     b46:	8e 93       	st	-X, r24
     b48:	12 97       	sbiw	r26, 0x02	; 2
     b4a:	9a 01       	movw	r18, r20
     b4c:	ab 01       	movw	r20, r22
     b4e:	67 e0       	ldi	r22, 0x07	; 7
     b50:	22 0f       	add	r18, r18
     b52:	33 1f       	adc	r19, r19
     b54:	44 1f       	adc	r20, r20
     b56:	55 1f       	adc	r21, r21
     b58:	6a 95       	dec	r22
     b5a:	d1 f7       	brne	.-12     	; 0xb50 <__unpack_f+0x54>
     b5c:	83 e0       	ldi	r24, 0x03	; 3
     b5e:	8c 93       	st	X, r24
     b60:	0d c0       	rjmp	.+26     	; 0xb7c <__unpack_f+0x80>
     b62:	22 0f       	add	r18, r18
     b64:	33 1f       	adc	r19, r19
     b66:	44 1f       	adc	r20, r20
     b68:	55 1f       	adc	r21, r21
     b6a:	12 96       	adiw	r26, 0x02	; 2
     b6c:	8d 91       	ld	r24, X+
     b6e:	9c 91       	ld	r25, X
     b70:	13 97       	sbiw	r26, 0x03	; 3
     b72:	01 97       	sbiw	r24, 0x01	; 1
     b74:	13 96       	adiw	r26, 0x03	; 3
     b76:	9c 93       	st	X, r25
     b78:	8e 93       	st	-X, r24
     b7a:	12 97       	sbiw	r26, 0x02	; 2
     b7c:	20 30       	cpi	r18, 0x00	; 0
     b7e:	80 e0       	ldi	r24, 0x00	; 0
     b80:	38 07       	cpc	r19, r24
     b82:	80 e0       	ldi	r24, 0x00	; 0
     b84:	48 07       	cpc	r20, r24
     b86:	80 e4       	ldi	r24, 0x40	; 64
     b88:	58 07       	cpc	r21, r24
     b8a:	58 f3       	brcs	.-42     	; 0xb62 <__unpack_f+0x66>
     b8c:	14 96       	adiw	r26, 0x04	; 4
     b8e:	2d 93       	st	X+, r18
     b90:	3d 93       	st	X+, r19
     b92:	4d 93       	st	X+, r20
     b94:	5c 93       	st	X, r21
     b96:	17 97       	sbiw	r26, 0x07	; 7
     b98:	08 95       	ret
     b9a:	2f 3f       	cpi	r18, 0xFF	; 255
     b9c:	31 05       	cpc	r19, r1
     b9e:	79 f4       	brne	.+30     	; 0xbbe <__unpack_f+0xc2>
     ba0:	41 15       	cp	r20, r1
     ba2:	51 05       	cpc	r21, r1
     ba4:	61 05       	cpc	r22, r1
     ba6:	71 05       	cpc	r23, r1
     ba8:	19 f4       	brne	.+6      	; 0xbb0 <__unpack_f+0xb4>
     baa:	84 e0       	ldi	r24, 0x04	; 4
     bac:	8c 93       	st	X, r24
     bae:	08 95       	ret
     bb0:	64 ff       	sbrs	r22, 4
     bb2:	03 c0       	rjmp	.+6      	; 0xbba <__unpack_f+0xbe>
     bb4:	81 e0       	ldi	r24, 0x01	; 1
     bb6:	8c 93       	st	X, r24
     bb8:	12 c0       	rjmp	.+36     	; 0xbde <__unpack_f+0xe2>
     bba:	1c 92       	st	X, r1
     bbc:	10 c0       	rjmp	.+32     	; 0xbde <__unpack_f+0xe2>
     bbe:	2f 57       	subi	r18, 0x7F	; 127
     bc0:	30 40       	sbci	r19, 0x00	; 0
     bc2:	13 96       	adiw	r26, 0x03	; 3
     bc4:	3c 93       	st	X, r19
     bc6:	2e 93       	st	-X, r18
     bc8:	12 97       	sbiw	r26, 0x02	; 2
     bca:	83 e0       	ldi	r24, 0x03	; 3
     bcc:	8c 93       	st	X, r24
     bce:	87 e0       	ldi	r24, 0x07	; 7
     bd0:	44 0f       	add	r20, r20
     bd2:	55 1f       	adc	r21, r21
     bd4:	66 1f       	adc	r22, r22
     bd6:	77 1f       	adc	r23, r23
     bd8:	8a 95       	dec	r24
     bda:	d1 f7       	brne	.-12     	; 0xbd0 <__unpack_f+0xd4>
     bdc:	70 64       	ori	r23, 0x40	; 64
     bde:	14 96       	adiw	r26, 0x04	; 4
     be0:	4d 93       	st	X+, r20
     be2:	5d 93       	st	X+, r21
     be4:	6d 93       	st	X+, r22
     be6:	7c 93       	st	X, r23
     be8:	17 97       	sbiw	r26, 0x07	; 7
     bea:	08 95       	ret

00000bec <__fpcmp_parts_f>:
     bec:	1f 93       	push	r17
     bee:	dc 01       	movw	r26, r24
     bf0:	fb 01       	movw	r30, r22
     bf2:	9c 91       	ld	r25, X
     bf4:	92 30       	cpi	r25, 0x02	; 2
     bf6:	08 f4       	brcc	.+2      	; 0xbfa <__fpcmp_parts_f+0xe>
     bf8:	47 c0       	rjmp	.+142    	; 0xc88 <__fpcmp_parts_f+0x9c>
     bfa:	80 81       	ld	r24, Z
     bfc:	82 30       	cpi	r24, 0x02	; 2
     bfe:	08 f4       	brcc	.+2      	; 0xc02 <__fpcmp_parts_f+0x16>
     c00:	43 c0       	rjmp	.+134    	; 0xc88 <__fpcmp_parts_f+0x9c>
     c02:	94 30       	cpi	r25, 0x04	; 4
     c04:	51 f4       	brne	.+20     	; 0xc1a <__fpcmp_parts_f+0x2e>
     c06:	11 96       	adiw	r26, 0x01	; 1
     c08:	1c 91       	ld	r17, X
     c0a:	84 30       	cpi	r24, 0x04	; 4
     c0c:	99 f5       	brne	.+102    	; 0xc74 <__fpcmp_parts_f+0x88>
     c0e:	81 81       	ldd	r24, Z+1	; 0x01
     c10:	68 2f       	mov	r22, r24
     c12:	70 e0       	ldi	r23, 0x00	; 0
     c14:	61 1b       	sub	r22, r17
     c16:	71 09       	sbc	r23, r1
     c18:	3f c0       	rjmp	.+126    	; 0xc98 <__fpcmp_parts_f+0xac>
     c1a:	84 30       	cpi	r24, 0x04	; 4
     c1c:	21 f0       	breq	.+8      	; 0xc26 <__fpcmp_parts_f+0x3a>
     c1e:	92 30       	cpi	r25, 0x02	; 2
     c20:	31 f4       	brne	.+12     	; 0xc2e <__fpcmp_parts_f+0x42>
     c22:	82 30       	cpi	r24, 0x02	; 2
     c24:	b9 f1       	breq	.+110    	; 0xc94 <__fpcmp_parts_f+0xa8>
     c26:	81 81       	ldd	r24, Z+1	; 0x01
     c28:	88 23       	and	r24, r24
     c2a:	89 f1       	breq	.+98     	; 0xc8e <__fpcmp_parts_f+0xa2>
     c2c:	2d c0       	rjmp	.+90     	; 0xc88 <__fpcmp_parts_f+0x9c>
     c2e:	11 96       	adiw	r26, 0x01	; 1
     c30:	1c 91       	ld	r17, X
     c32:	11 97       	sbiw	r26, 0x01	; 1
     c34:	82 30       	cpi	r24, 0x02	; 2
     c36:	f1 f0       	breq	.+60     	; 0xc74 <__fpcmp_parts_f+0x88>
     c38:	81 81       	ldd	r24, Z+1	; 0x01
     c3a:	18 17       	cp	r17, r24
     c3c:	d9 f4       	brne	.+54     	; 0xc74 <__fpcmp_parts_f+0x88>
     c3e:	12 96       	adiw	r26, 0x02	; 2
     c40:	2d 91       	ld	r18, X+
     c42:	3c 91       	ld	r19, X
     c44:	13 97       	sbiw	r26, 0x03	; 3
     c46:	82 81       	ldd	r24, Z+2	; 0x02
     c48:	93 81       	ldd	r25, Z+3	; 0x03
     c4a:	82 17       	cp	r24, r18
     c4c:	93 07       	cpc	r25, r19
     c4e:	94 f0       	brlt	.+36     	; 0xc74 <__fpcmp_parts_f+0x88>
     c50:	28 17       	cp	r18, r24
     c52:	39 07       	cpc	r19, r25
     c54:	bc f0       	brlt	.+46     	; 0xc84 <__fpcmp_parts_f+0x98>
     c56:	14 96       	adiw	r26, 0x04	; 4
     c58:	8d 91       	ld	r24, X+
     c5a:	9d 91       	ld	r25, X+
     c5c:	0d 90       	ld	r0, X+
     c5e:	bc 91       	ld	r27, X
     c60:	a0 2d       	mov	r26, r0
     c62:	24 81       	ldd	r18, Z+4	; 0x04
     c64:	35 81       	ldd	r19, Z+5	; 0x05
     c66:	46 81       	ldd	r20, Z+6	; 0x06
     c68:	57 81       	ldd	r21, Z+7	; 0x07
     c6a:	28 17       	cp	r18, r24
     c6c:	39 07       	cpc	r19, r25
     c6e:	4a 07       	cpc	r20, r26
     c70:	5b 07       	cpc	r21, r27
     c72:	18 f4       	brcc	.+6      	; 0xc7a <__fpcmp_parts_f+0x8e>
     c74:	11 23       	and	r17, r17
     c76:	41 f0       	breq	.+16     	; 0xc88 <__fpcmp_parts_f+0x9c>
     c78:	0a c0       	rjmp	.+20     	; 0xc8e <__fpcmp_parts_f+0xa2>
     c7a:	82 17       	cp	r24, r18
     c7c:	93 07       	cpc	r25, r19
     c7e:	a4 07       	cpc	r26, r20
     c80:	b5 07       	cpc	r27, r21
     c82:	40 f4       	brcc	.+16     	; 0xc94 <__fpcmp_parts_f+0xa8>
     c84:	11 23       	and	r17, r17
     c86:	19 f0       	breq	.+6      	; 0xc8e <__fpcmp_parts_f+0xa2>
     c88:	61 e0       	ldi	r22, 0x01	; 1
     c8a:	70 e0       	ldi	r23, 0x00	; 0
     c8c:	05 c0       	rjmp	.+10     	; 0xc98 <__fpcmp_parts_f+0xac>
     c8e:	6f ef       	ldi	r22, 0xFF	; 255
     c90:	7f ef       	ldi	r23, 0xFF	; 255
     c92:	02 c0       	rjmp	.+4      	; 0xc98 <__fpcmp_parts_f+0xac>
     c94:	60 e0       	ldi	r22, 0x00	; 0
     c96:	70 e0       	ldi	r23, 0x00	; 0
     c98:	cb 01       	movw	r24, r22
     c9a:	1f 91       	pop	r17
     c9c:	08 95       	ret

00000c9e <APP_Init>:
#include"APP.h"

u8 key=0,order = 0, Index=0, checkCounter = 0,homeFlag = 0,inputFlag = 0;
u8 savedPass[] = Password, pass[PasswordLength];
u8 dummy = 0;
void APP_Init(void){
     c9e:	df 93       	push	r29
     ca0:	cf 93       	push	r28
     ca2:	cd b7       	in	r28, 0x3d	; 61
     ca4:	de b7       	in	r29, 0x3e	; 62
    SPI_enu_Init();
     ca6:	0e 94 68 23 	call	0x46d0	; 0x46d0 <SPI_enu_Init>
	DIO_enu_SetPinDirection(DIO_U8_PORTB, DIO_U8_PIN4, DIO_U8_OUTPUT);
     caa:	81 e0       	ldi	r24, 0x01	; 1
     cac:	64 e0       	ldi	r22, 0x04	; 4
     cae:	41 e0       	ldi	r20, 0x01	; 1
     cb0:	0e 94 48 28 	call	0x5090	; 0x5090 <DIO_enu_SetPinDirection>
	DIO_enu_SetPinValue(DIO_U8_PORTB, DIO_U8_PIN4, DIO_U8_LOW);
     cb4:	81 e0       	ldi	r24, 0x01	; 1
     cb6:	64 e0       	ldi	r22, 0x04	; 4
     cb8:	40 e0       	ldi	r20, 0x00	; 0
     cba:	0e 94 72 29 	call	0x52e4	; 0x52e4 <DIO_enu_SetPinValue>
	Keypad_enu_Init();
     cbe:	0e 94 b3 15 	call	0x2b66	; 0x2b66 <Keypad_enu_Init>
	LCD_enu_Init();
     cc2:	0e 94 ed 11 	call	0x23da	; 0x23da <LCD_enu_Init>
	Timers_enu_Init(TIMER0, NORMAL_MODE, CLK_8);
     cc6:	80 e0       	ldi	r24, 0x00	; 0
     cc8:	60 e0       	ldi	r22, 0x00	; 0
     cca:	42 e0       	ldi	r20, 0x02	; 2
     ccc:	0e 94 1d 1b 	call	0x363a	; 0x363a <Timers_enu_Init>
	LCD_enu_SendString("Hello, User :)");
     cd0:	80 e6       	ldi	r24, 0x60	; 96
     cd2:	90 e0       	ldi	r25, 0x00	; 0
     cd4:	0e 94 10 11 	call	0x2220	; 0x2220 <LCD_enu_SendString>
	Timers_enu_delay_ms(delay);
     cd8:	64 ef       	ldi	r22, 0xF4	; 244
     cda:	71 e0       	ldi	r23, 0x01	; 1
     cdc:	80 e0       	ldi	r24, 0x00	; 0
     cde:	90 e0       	ldi	r25, 0x00	; 0
     ce0:	0e 94 3e 1f 	call	0x3e7c	; 0x3e7c <Timers_enu_delay_ms>
	LCD_enu_Clear();
     ce4:	0e 94 da 14 	call	0x29b4	; 0x29b4 <LCD_enu_Clear>
	LCD_enu_SendString("Enter Password:");
     ce8:	8f e6       	ldi	r24, 0x6F	; 111
     cea:	90 e0       	ldi	r25, 0x00	; 0
     cec:	0e 94 10 11 	call	0x2220	; 0x2220 <LCD_enu_SendString>
	LCD_enu_SetCursor(1, 0);
     cf0:	81 e0       	ldi	r24, 0x01	; 1
     cf2:	60 e0       	ldi	r22, 0x00	; 0
     cf4:	0e 94 ba 11 	call	0x2374	; 0x2374 <LCD_enu_SetCursor>
}
     cf8:	cf 91       	pop	r28
     cfa:	df 91       	pop	r29
     cfc:	08 95       	ret

00000cfe <displayOptionsPage>:
void displayOptionsPage(void){
     cfe:	df 93       	push	r29
     d00:	cf 93       	push	r28
     d02:	cd b7       	in	r28, 0x3d	; 61
     d04:	de b7       	in	r29, 0x3e	; 62
	LCD_enu_Clear();
     d06:	0e 94 da 14 	call	0x29b4	; 0x29b4 <LCD_enu_Clear>
	LCD_enu_SendString("1-DC    3-Servo");
     d0a:	8f e7       	ldi	r24, 0x7F	; 127
     d0c:	90 e0       	ldi	r25, 0x00	; 0
     d0e:	0e 94 10 11 	call	0x2220	; 0x2220 <LCD_enu_SendString>
	LCD_enu_SetCursor(1, 0);
     d12:	81 e0       	ldi	r24, 0x01	; 1
     d14:	60 e0       	ldi	r22, 0x00	; 0
     d16:	0e 94 ba 11 	call	0x2374	; 0x2374 <LCD_enu_SetCursor>
	LCD_enu_SendString("2-Stepper 4-Stop");
     d1a:	8f e8       	ldi	r24, 0x8F	; 143
     d1c:	90 e0       	ldi	r25, 0x00	; 0
     d1e:	0e 94 10 11 	call	0x2220	; 0x2220 <LCD_enu_SendString>
}
     d22:	cf 91       	pop	r28
     d24:	df 91       	pop	r29
     d26:	08 95       	ret

00000d28 <takeUserOption>:
void takeUserOption(u8 *option){
     d28:	df 93       	push	r29
     d2a:	cf 93       	push	r28
     d2c:	00 d0       	rcall	.+0      	; 0xd2e <takeUserOption+0x6>
     d2e:	cd b7       	in	r28, 0x3d	; 61
     d30:	de b7       	in	r29, 0x3e	; 62
     d32:	9a 83       	std	Y+2, r25	; 0x02
     d34:	89 83       	std	Y+1, r24	; 0x01
	while(1){
		Keypad_enu_getKey(option);
     d36:	89 81       	ldd	r24, Y+1	; 0x01
     d38:	9a 81       	ldd	r25, Y+2	; 0x02
     d3a:	0e 94 f5 15 	call	0x2bea	; 0x2bea <Keypad_enu_getKey>
		if(*option == '1' || *option == '2' || *option == '3' || *option == '4')break;
     d3e:	e9 81       	ldd	r30, Y+1	; 0x01
     d40:	fa 81       	ldd	r31, Y+2	; 0x02
     d42:	80 81       	ld	r24, Z
     d44:	81 33       	cpi	r24, 0x31	; 49
     d46:	79 f0       	breq	.+30     	; 0xd66 <takeUserOption+0x3e>
     d48:	e9 81       	ldd	r30, Y+1	; 0x01
     d4a:	fa 81       	ldd	r31, Y+2	; 0x02
     d4c:	80 81       	ld	r24, Z
     d4e:	82 33       	cpi	r24, 0x32	; 50
     d50:	51 f0       	breq	.+20     	; 0xd66 <takeUserOption+0x3e>
     d52:	e9 81       	ldd	r30, Y+1	; 0x01
     d54:	fa 81       	ldd	r31, Y+2	; 0x02
     d56:	80 81       	ld	r24, Z
     d58:	83 33       	cpi	r24, 0x33	; 51
     d5a:	29 f0       	breq	.+10     	; 0xd66 <takeUserOption+0x3e>
     d5c:	e9 81       	ldd	r30, Y+1	; 0x01
     d5e:	fa 81       	ldd	r31, Y+2	; 0x02
     d60:	80 81       	ld	r24, Z
     d62:	84 33       	cpi	r24, 0x34	; 52
     d64:	41 f7       	brne	.-48     	; 0xd36 <takeUserOption+0xe>
	}
}
     d66:	0f 90       	pop	r0
     d68:	0f 90       	pop	r0
     d6a:	cf 91       	pop	r28
     d6c:	df 91       	pop	r29
     d6e:	08 95       	ret

00000d70 <displayRotationOptions>:
void displayRotationOptions(void){
     d70:	df 93       	push	r29
     d72:	cf 93       	push	r28
     d74:	cd b7       	in	r28, 0x3d	; 61
     d76:	de b7       	in	r29, 0x3e	; 62
	LCD_enu_Clear();
     d78:	0e 94 da 14 	call	0x29b4	; 0x29b4 <LCD_enu_Clear>
	LCD_enu_SendString("1-Rotate CW ");
     d7c:	80 ea       	ldi	r24, 0xA0	; 160
     d7e:	90 e0       	ldi	r25, 0x00	; 0
     d80:	0e 94 10 11 	call	0x2220	; 0x2220 <LCD_enu_SendString>
	LCD_enu_SetCursor(1, 0);
     d84:	81 e0       	ldi	r24, 0x01	; 1
     d86:	60 e0       	ldi	r22, 0x00	; 0
     d88:	0e 94 ba 11 	call	0x2374	; 0x2374 <LCD_enu_SetCursor>
	LCD_enu_SendString("2-Rotate CCW");
     d8c:	8d ea       	ldi	r24, 0xAD	; 173
     d8e:	90 e0       	ldi	r25, 0x00	; 0
     d90:	0e 94 10 11 	call	0x2220	; 0x2220 <LCD_enu_SendString>
}
     d94:	cf 91       	pop	r28
     d96:	df 91       	pop	r29
     d98:	08 95       	ret

00000d9a <getPassword>:
void getPassword(void){
     d9a:	df 93       	push	r29
     d9c:	cf 93       	push	r28
     d9e:	00 d0       	rcall	.+0      	; 0xda0 <getPassword+0x6>
     da0:	cd b7       	in	r28, 0x3d	; 61
     da2:	de b7       	in	r29, 0x3e	; 62
	Keypad_enu_getKey(&key);
     da4:	8a e4       	ldi	r24, 0x4A	; 74
     da6:	91 e0       	ldi	r25, 0x01	; 1
     da8:	0e 94 f5 15 	call	0x2bea	; 0x2bea <Keypad_enu_getKey>
	if(key != KEYPAD_U8_NO_KEY_PRESSED){
     dac:	80 91 4a 01 	lds	r24, 0x014A
     db0:	8f 3f       	cpi	r24, 0xFF	; 255
     db2:	b9 f0       	breq	.+46     	; 0xde2 <getPassword+0x48>
		LCD_enu_SendChar('*');
     db4:	8a e2       	ldi	r24, 0x2A	; 42
     db6:	0e 94 10 0f 	call	0x1e20	; 0x1e20 <LCD_enu_SendChar>
		pass[Index] = key;
     dba:	80 91 4c 01 	lds	r24, 0x014C
     dbe:	88 2f       	mov	r24, r24
     dc0:	90 e0       	ldi	r25, 0x00	; 0
     dc2:	20 91 4a 01 	lds	r18, 0x014A
     dc6:	fc 01       	movw	r30, r24
     dc8:	ef 58       	subi	r30, 0x8F	; 143
     dca:	fe 4f       	sbci	r31, 0xFE	; 254
     dcc:	20 83       	st	Z, r18
		Index++;
     dce:	80 91 4c 01 	lds	r24, 0x014C
     dd2:	8f 5f       	subi	r24, 0xFF	; 255
     dd4:	80 93 4c 01 	sts	0x014C, r24
		checkCounter++;
     dd8:	80 91 4d 01 	lds	r24, 0x014D
     ddc:	8f 5f       	subi	r24, 0xFF	; 255
     dde:	80 93 4d 01 	sts	0x014D, r24
	}
	if(checkCounter == PasswordLength){
     de2:	80 91 4d 01 	lds	r24, 0x014D
     de6:	85 30       	cpi	r24, 0x05	; 5
     de8:	09 f0       	breq	.+2      	; 0xdec <getPassword+0x52>
     dea:	69 c0       	rjmp	.+210    	; 0xebe <getPassword+0x124>
		for(int j =0 ;j<PasswordLength ; j++){
     dec:	1a 82       	std	Y+2, r1	; 0x02
     dee:	19 82       	std	Y+1, r1	; 0x01
     df0:	17 c0       	rjmp	.+46     	; 0xe20 <getPassword+0x86>
			if(pass[j] != savedPass[j]){
     df2:	89 81       	ldd	r24, Y+1	; 0x01
     df4:	9a 81       	ldd	r25, Y+2	; 0x02
     df6:	fc 01       	movw	r30, r24
     df8:	ef 58       	subi	r30, 0x8F	; 143
     dfa:	fe 4f       	sbci	r31, 0xFE	; 254
     dfc:	20 81       	ld	r18, Z
     dfe:	89 81       	ldd	r24, Y+1	; 0x01
     e00:	9a 81       	ldd	r25, Y+2	; 0x02
     e02:	fc 01       	movw	r30, r24
     e04:	ec 5e       	subi	r30, 0xEC	; 236
     e06:	fe 4f       	sbci	r31, 0xFE	; 254
     e08:	80 81       	ld	r24, Z
     e0a:	28 17       	cp	r18, r24
     e0c:	21 f0       	breq	.+8      	; 0xe16 <getPassword+0x7c>
				inputFlag = 1;
     e0e:	81 e0       	ldi	r24, 0x01	; 1
     e10:	80 93 4f 01 	sts	0x014F, r24
     e14:	0a c0       	rjmp	.+20     	; 0xe2a <getPassword+0x90>
		pass[Index] = key;
		Index++;
		checkCounter++;
	}
	if(checkCounter == PasswordLength){
		for(int j =0 ;j<PasswordLength ; j++){
     e16:	89 81       	ldd	r24, Y+1	; 0x01
     e18:	9a 81       	ldd	r25, Y+2	; 0x02
     e1a:	01 96       	adiw	r24, 0x01	; 1
     e1c:	9a 83       	std	Y+2, r25	; 0x02
     e1e:	89 83       	std	Y+1, r24	; 0x01
     e20:	89 81       	ldd	r24, Y+1	; 0x01
     e22:	9a 81       	ldd	r25, Y+2	; 0x02
     e24:	85 30       	cpi	r24, 0x05	; 5
     e26:	91 05       	cpc	r25, r1
     e28:	24 f3       	brlt	.-56     	; 0xdf2 <getPassword+0x58>
			if(pass[j] != savedPass[j]){
				inputFlag = 1;
				break;
			}
		}
		if(inputFlag){
     e2a:	80 91 4f 01 	lds	r24, 0x014F
     e2e:	88 23       	and	r24, r24
     e30:	29 f1       	breq	.+74     	; 0xe7c <getPassword+0xe2>
			Index =0;
     e32:	10 92 4c 01 	sts	0x014C, r1
			checkCounter =0;
     e36:	10 92 4d 01 	sts	0x014D, r1
			inputFlag = 0;
     e3a:	10 92 4f 01 	sts	0x014F, r1
			LCD_enu_Clear();
     e3e:	0e 94 da 14 	call	0x29b4	; 0x29b4 <LCD_enu_Clear>
			LCD_enu_SendString("Wrong Password");
     e42:	8a eb       	ldi	r24, 0xBA	; 186
     e44:	90 e0       	ldi	r25, 0x00	; 0
     e46:	0e 94 10 11 	call	0x2220	; 0x2220 <LCD_enu_SendString>
			LCD_enu_SetCursor(1, 0);
     e4a:	81 e0       	ldi	r24, 0x01	; 1
     e4c:	60 e0       	ldi	r22, 0x00	; 0
     e4e:	0e 94 ba 11 	call	0x2374	; 0x2374 <LCD_enu_SetCursor>
			LCD_enu_SendString("Try Again!");
     e52:	89 ec       	ldi	r24, 0xC9	; 201
     e54:	90 e0       	ldi	r25, 0x00	; 0
     e56:	0e 94 10 11 	call	0x2220	; 0x2220 <LCD_enu_SendString>
			Timers_enu_delay_ms(delay);
     e5a:	64 ef       	ldi	r22, 0xF4	; 244
     e5c:	71 e0       	ldi	r23, 0x01	; 1
     e5e:	80 e0       	ldi	r24, 0x00	; 0
     e60:	90 e0       	ldi	r25, 0x00	; 0
     e62:	0e 94 3e 1f 	call	0x3e7c	; 0x3e7c <Timers_enu_delay_ms>
			LCD_enu_Clear();
     e66:	0e 94 da 14 	call	0x29b4	; 0x29b4 <LCD_enu_Clear>
			LCD_enu_SendString("Enter Password:");
     e6a:	8f e6       	ldi	r24, 0x6F	; 111
     e6c:	90 e0       	ldi	r25, 0x00	; 0
     e6e:	0e 94 10 11 	call	0x2220	; 0x2220 <LCD_enu_SendString>
			LCD_enu_SetCursor(1, 0);
     e72:	81 e0       	ldi	r24, 0x01	; 1
     e74:	60 e0       	ldi	r22, 0x00	; 0
     e76:	0e 94 ba 11 	call	0x2374	; 0x2374 <LCD_enu_SetCursor>
     e7a:	21 c0       	rjmp	.+66     	; 0xebe <getPassword+0x124>
		}else{
			//To display this message only once
			if(!homeFlag){
     e7c:	80 91 4e 01 	lds	r24, 0x014E
     e80:	88 23       	and	r24, r24
     e82:	b9 f4       	brne	.+46     	; 0xeb2 <getPassword+0x118>
				LCD_enu_Clear();
     e84:	0e 94 da 14 	call	0x29b4	; 0x29b4 <LCD_enu_Clear>
				LCD_enu_SendString("Welcome :)");
     e88:	84 ed       	ldi	r24, 0xD4	; 212
     e8a:	90 e0       	ldi	r25, 0x00	; 0
     e8c:	0e 94 10 11 	call	0x2220	; 0x2220 <LCD_enu_SendString>
				LCD_enu_SetCursor(1, 0);
     e90:	81 e0       	ldi	r24, 0x01	; 1
     e92:	60 e0       	ldi	r22, 0x00	; 0
     e94:	0e 94 ba 11 	call	0x2374	; 0x2374 <LCD_enu_SetCursor>
				LCD_enu_SendString("Choose Motor ..");
     e98:	8f ed       	ldi	r24, 0xDF	; 223
     e9a:	90 e0       	ldi	r25, 0x00	; 0
     e9c:	0e 94 10 11 	call	0x2220	; 0x2220 <LCD_enu_SendString>
				homeFlag = 1;
     ea0:	81 e0       	ldi	r24, 0x01	; 1
     ea2:	80 93 4e 01 	sts	0x014E, r24
				Timers_enu_delay_ms(delay);
     ea6:	64 ef       	ldi	r22, 0xF4	; 244
     ea8:	71 e0       	ldi	r23, 0x01	; 1
     eaa:	80 e0       	ldi	r24, 0x00	; 0
     eac:	90 e0       	ldi	r25, 0x00	; 0
     eae:	0e 94 3e 1f 	call	0x3e7c	; 0x3e7c <Timers_enu_delay_ms>
			}
			displayOptionsPage();
     eb2:	0e 94 7f 06 	call	0xcfe	; 0xcfe <displayOptionsPage>
			takeUserOption(&order);
     eb6:	8b e4       	ldi	r24, 0x4B	; 75
     eb8:	91 e0       	ldi	r25, 0x01	; 1
     eba:	0e 94 94 06 	call	0xd28	; 0xd28 <takeUserOption>
		}
	}
}
     ebe:	0f 90       	pop	r0
     ec0:	0f 90       	pop	r0
     ec2:	cf 91       	pop	r28
     ec4:	df 91       	pop	r29
     ec6:	08 95       	ret

00000ec8 <DCMotor>:
void DCMotor(void){
     ec8:	df 93       	push	r29
     eca:	cf 93       	push	r28
     ecc:	cd b7       	in	r28, 0x3d	; 61
     ece:	de b7       	in	r29, 0x3e	; 62
    SPI_enu_Transceive(order, &dummy);
     ed0:	80 91 4b 01 	lds	r24, 0x014B
     ed4:	20 e5       	ldi	r18, 0x50	; 80
     ed6:	31 e0       	ldi	r19, 0x01	; 1
     ed8:	b9 01       	movw	r22, r18
     eda:	0e 94 c1 23 	call	0x4782	; 0x4782 <SPI_enu_Transceive>
	displayRotationOptions();
     ede:	0e 94 b8 06 	call	0xd70	; 0xd70 <displayRotationOptions>
	takeUserOption(&order);
     ee2:	8b e4       	ldi	r24, 0x4B	; 75
     ee4:	91 e0       	ldi	r25, 0x01	; 1
     ee6:	0e 94 94 06 	call	0xd28	; 0xd28 <takeUserOption>
	// Rotate DC Motors CW
	if(order == '1'){SPI_enu_Transceive(order, &dummy);}
     eea:	80 91 4b 01 	lds	r24, 0x014B
     eee:	81 33       	cpi	r24, 0x31	; 49
     ef0:	41 f4       	brne	.+16     	; 0xf02 <DCMotor+0x3a>
     ef2:	80 91 4b 01 	lds	r24, 0x014B
     ef6:	20 e5       	ldi	r18, 0x50	; 80
     ef8:	31 e0       	ldi	r19, 0x01	; 1
     efa:	b9 01       	movw	r22, r18
     efc:	0e 94 c1 23 	call	0x4782	; 0x4782 <SPI_enu_Transceive>
     f00:	0b c0       	rjmp	.+22     	; 0xf18 <DCMotor+0x50>
	// Rotate DC Motors CCW
	else if (order == '2'){SPI_enu_Transceive(order, &dummy);}
     f02:	80 91 4b 01 	lds	r24, 0x014B
     f06:	82 33       	cpi	r24, 0x32	; 50
     f08:	39 f4       	brne	.+14     	; 0xf18 <DCMotor+0x50>
     f0a:	80 91 4b 01 	lds	r24, 0x014B
     f0e:	20 e5       	ldi	r18, 0x50	; 80
     f10:	31 e0       	ldi	r19, 0x01	; 1
     f12:	b9 01       	movw	r22, r18
     f14:	0e 94 c1 23 	call	0x4782	; 0x4782 <SPI_enu_Transceive>
}
     f18:	cf 91       	pop	r28
     f1a:	df 91       	pop	r29
     f1c:	08 95       	ret

00000f1e <servoMotor>:
void servoMotor(void){
     f1e:	df 93       	push	r29
     f20:	cf 93       	push	r28
     f22:	0f 92       	push	r0
     f24:	cd b7       	in	r28, 0x3d	; 61
     f26:	de b7       	in	r29, 0x3e	; 62
    SPI_enu_Transceive(order, &dummy);
     f28:	80 91 4b 01 	lds	r24, 0x014B
     f2c:	20 e5       	ldi	r18, 0x50	; 80
     f2e:	31 e0       	ldi	r19, 0x01	; 1
     f30:	b9 01       	movw	r22, r18
     f32:	0e 94 c1 23 	call	0x4782	; 0x4782 <SPI_enu_Transceive>
	LCD_enu_Clear();
     f36:	0e 94 da 14 	call	0x29b4	; 0x29b4 <LCD_enu_Clear>
	LCD_enu_SendString("Enter Angle:");
     f3a:	8f ee       	ldi	r24, 0xEF	; 239
     f3c:	90 e0       	ldi	r25, 0x00	; 0
     f3e:	0e 94 10 11 	call	0x2220	; 0x2220 <LCD_enu_SendString>
	u8 servoMotorAngle= 0;
     f42:	19 82       	std	Y+1, r1	; 0x01
	// Display and Storing Angle
	Keypad_enu_getKey(&key);
     f44:	8a e4       	ldi	r24, 0x4A	; 74
     f46:	91 e0       	ldi	r25, 0x01	; 1
     f48:	0e 94 f5 15 	call	0x2bea	; 0x2bea <Keypad_enu_getKey>
     f4c:	23 c0       	rjmp	.+70     	; 0xf94 <servoMotor+0x76>
	while(key != '='){
		Keypad_enu_getKey(&key);
     f4e:	8a e4       	ldi	r24, 0x4A	; 74
     f50:	91 e0       	ldi	r25, 0x01	; 1
     f52:	0e 94 f5 15 	call	0x2bea	; 0x2bea <Keypad_enu_getKey>
		if((key != KEYPAD_U8_NO_KEY_PRESSED)&&(key != '=')){
     f56:	80 91 4a 01 	lds	r24, 0x014A
     f5a:	8f 3f       	cpi	r24, 0xFF	; 255
     f5c:	d9 f0       	breq	.+54     	; 0xf94 <servoMotor+0x76>
     f5e:	80 91 4a 01 	lds	r24, 0x014A
     f62:	8d 33       	cpi	r24, 0x3D	; 61
     f64:	b9 f0       	breq	.+46     	; 0xf94 <servoMotor+0x76>
			LCD_enu_SendChar(key);
     f66:	80 91 4a 01 	lds	r24, 0x014A
     f6a:	0e 94 10 0f 	call	0x1e20	; 0x1e20 <LCD_enu_SendChar>
			servoMotorAngle = (servoMotorAngle*10)+(key -'0');
     f6e:	89 81       	ldd	r24, Y+1	; 0x01
     f70:	88 2f       	mov	r24, r24
     f72:	90 e0       	ldi	r25, 0x00	; 0
     f74:	9c 01       	movw	r18, r24
     f76:	22 0f       	add	r18, r18
     f78:	33 1f       	adc	r19, r19
     f7a:	c9 01       	movw	r24, r18
     f7c:	88 0f       	add	r24, r24
     f7e:	99 1f       	adc	r25, r25
     f80:	88 0f       	add	r24, r24
     f82:	99 1f       	adc	r25, r25
     f84:	82 0f       	add	r24, r18
     f86:	93 1f       	adc	r25, r19
     f88:	98 2f       	mov	r25, r24
     f8a:	80 91 4a 01 	lds	r24, 0x014A
     f8e:	89 0f       	add	r24, r25
     f90:	80 53       	subi	r24, 0x30	; 48
     f92:	89 83       	std	Y+1, r24	; 0x01
	LCD_enu_Clear();
	LCD_enu_SendString("Enter Angle:");
	u8 servoMotorAngle= 0;
	// Display and Storing Angle
	Keypad_enu_getKey(&key);
	while(key != '='){
     f94:	80 91 4a 01 	lds	r24, 0x014A
     f98:	8d 33       	cpi	r24, 0x3D	; 61
     f9a:	c9 f6       	brne	.-78     	; 0xf4e <servoMotor+0x30>
		if((key != KEYPAD_U8_NO_KEY_PRESSED)&&(key != '=')){
			LCD_enu_SendChar(key);
			servoMotorAngle = (servoMotorAngle*10)+(key -'0');
		}
	}
	SPI_enu_Transceive(servoMotorAngle, &dummy);
     f9c:	20 e5       	ldi	r18, 0x50	; 80
     f9e:	31 e0       	ldi	r19, 0x01	; 1
     fa0:	89 81       	ldd	r24, Y+1	; 0x01
     fa2:	b9 01       	movw	r22, r18
     fa4:	0e 94 c1 23 	call	0x4782	; 0x4782 <SPI_enu_Transceive>
}
     fa8:	0f 90       	pop	r0
     faa:	cf 91       	pop	r28
     fac:	df 91       	pop	r29
     fae:	08 95       	ret

00000fb0 <stepperMotor>:
void stepperMotor(void){
     fb0:	df 93       	push	r29
     fb2:	cf 93       	push	r28
     fb4:	00 d0       	rcall	.+0      	; 0xfb6 <stepperMotor+0x6>
     fb6:	cd b7       	in	r28, 0x3d	; 61
     fb8:	de b7       	in	r29, 0x3e	; 62
    SPI_enu_Transceive(order, &dummy);
     fba:	80 91 4b 01 	lds	r24, 0x014B
     fbe:	20 e5       	ldi	r18, 0x50	; 80
     fc0:	31 e0       	ldi	r19, 0x01	; 1
     fc2:	b9 01       	movw	r22, r18
     fc4:	0e 94 c1 23 	call	0x4782	; 0x4782 <SPI_enu_Transceive>
	// Take Stepper Motor Angle
	LCD_enu_Clear();
     fc8:	0e 94 da 14 	call	0x29b4	; 0x29b4 <LCD_enu_Clear>
	LCD_enu_SendString("Enter Angle:");
     fcc:	8f ee       	ldi	r24, 0xEF	; 239
     fce:	90 e0       	ldi	r25, 0x00	; 0
     fd0:	0e 94 10 11 	call	0x2220	; 0x2220 <LCD_enu_SendString>
	u16 stepperMotorAngle=0;
     fd4:	1a 82       	std	Y+2, r1	; 0x02
     fd6:	19 82       	std	Y+1, r1	; 0x01
	// Display and Storing Angle
	Keypad_enu_getKey(&key);
     fd8:	8a e4       	ldi	r24, 0x4A	; 74
     fda:	91 e0       	ldi	r25, 0x01	; 1
     fdc:	0e 94 f5 15 	call	0x2bea	; 0x2bea <Keypad_enu_getKey>
     fe0:	25 c0       	rjmp	.+74     	; 0x102c <stepperMotor+0x7c>
	while(key != '='){
		Keypad_enu_getKey(&key);
     fe2:	8a e4       	ldi	r24, 0x4A	; 74
     fe4:	91 e0       	ldi	r25, 0x01	; 1
     fe6:	0e 94 f5 15 	call	0x2bea	; 0x2bea <Keypad_enu_getKey>
		if((key != KEYPAD_U8_NO_KEY_PRESSED)&&((key != '='))){
     fea:	80 91 4a 01 	lds	r24, 0x014A
     fee:	8f 3f       	cpi	r24, 0xFF	; 255
     ff0:	e9 f0       	breq	.+58     	; 0x102c <stepperMotor+0x7c>
     ff2:	80 91 4a 01 	lds	r24, 0x014A
     ff6:	8d 33       	cpi	r24, 0x3D	; 61
     ff8:	c9 f0       	breq	.+50     	; 0x102c <stepperMotor+0x7c>
			LCD_enu_SendChar(key);
     ffa:	80 91 4a 01 	lds	r24, 0x014A
     ffe:	0e 94 10 0f 	call	0x1e20	; 0x1e20 <LCD_enu_SendChar>
			stepperMotorAngle = (stepperMotorAngle*10)+(key -'0');
    1002:	89 81       	ldd	r24, Y+1	; 0x01
    1004:	9a 81       	ldd	r25, Y+2	; 0x02
    1006:	9c 01       	movw	r18, r24
    1008:	22 0f       	add	r18, r18
    100a:	33 1f       	adc	r19, r19
    100c:	c9 01       	movw	r24, r18
    100e:	88 0f       	add	r24, r24
    1010:	99 1f       	adc	r25, r25
    1012:	88 0f       	add	r24, r24
    1014:	99 1f       	adc	r25, r25
    1016:	28 0f       	add	r18, r24
    1018:	39 1f       	adc	r19, r25
    101a:	80 91 4a 01 	lds	r24, 0x014A
    101e:	88 2f       	mov	r24, r24
    1020:	90 e0       	ldi	r25, 0x00	; 0
    1022:	82 0f       	add	r24, r18
    1024:	93 1f       	adc	r25, r19
    1026:	c0 97       	sbiw	r24, 0x30	; 48
    1028:	9a 83       	std	Y+2, r25	; 0x02
    102a:	89 83       	std	Y+1, r24	; 0x01
	LCD_enu_Clear();
	LCD_enu_SendString("Enter Angle:");
	u16 stepperMotorAngle=0;
	// Display and Storing Angle
	Keypad_enu_getKey(&key);
	while(key != '='){
    102c:	80 91 4a 01 	lds	r24, 0x014A
    1030:	8d 33       	cpi	r24, 0x3D	; 61
    1032:	b9 f6       	brne	.-82     	; 0xfe2 <stepperMotor+0x32>
		if((key != KEYPAD_U8_NO_KEY_PRESSED)&&((key != '='))){
			LCD_enu_SendChar(key);
			stepperMotorAngle = (stepperMotorAngle*10)+(key -'0');
		}
	}
		displayRotationOptions();
    1034:	0e 94 b8 06 	call	0xd70	; 0xd70 <displayRotationOptions>
		takeUserOption(&order);
    1038:	8b e4       	ldi	r24, 0x4B	; 75
    103a:	91 e0       	ldi	r25, 0x01	; 1
    103c:	0e 94 94 06 	call	0xd28	; 0xd28 <takeUserOption>
		// Rotate Stepper Motor CW With Entered Angle
		if(order == '1'){
    1040:	80 91 4b 01 	lds	r24, 0x014B
    1044:	81 33       	cpi	r24, 0x31	; 49
    1046:	71 f4       	brne	.+28     	; 0x1064 <stepperMotor+0xb4>
			SPI_enu_Transceive(order, &dummy);
    1048:	80 91 4b 01 	lds	r24, 0x014B
    104c:	20 e5       	ldi	r18, 0x50	; 80
    104e:	31 e0       	ldi	r19, 0x01	; 1
    1050:	b9 01       	movw	r22, r18
    1052:	0e 94 c1 23 	call	0x4782	; 0x4782 <SPI_enu_Transceive>
			SPI_enu_Transceive(stepperMotorAngle, &dummy);
    1056:	89 81       	ldd	r24, Y+1	; 0x01
    1058:	20 e5       	ldi	r18, 0x50	; 80
    105a:	31 e0       	ldi	r19, 0x01	; 1
    105c:	b9 01       	movw	r22, r18
    105e:	0e 94 c1 23 	call	0x4782	; 0x4782 <SPI_enu_Transceive>
    1062:	11 c0       	rjmp	.+34     	; 0x1086 <stepperMotor+0xd6>
		}
		// Rotate Stepper Motor CCW With Entered Angle
		else if (order == '2'){
    1064:	80 91 4b 01 	lds	r24, 0x014B
    1068:	82 33       	cpi	r24, 0x32	; 50
    106a:	69 f4       	brne	.+26     	; 0x1086 <stepperMotor+0xd6>
			SPI_enu_Transceive(order, &dummy);
    106c:	80 91 4b 01 	lds	r24, 0x014B
    1070:	20 e5       	ldi	r18, 0x50	; 80
    1072:	31 e0       	ldi	r19, 0x01	; 1
    1074:	b9 01       	movw	r22, r18
    1076:	0e 94 c1 23 	call	0x4782	; 0x4782 <SPI_enu_Transceive>
			SPI_enu_Transceive(stepperMotorAngle, &dummy);
    107a:	89 81       	ldd	r24, Y+1	; 0x01
    107c:	20 e5       	ldi	r18, 0x50	; 80
    107e:	31 e0       	ldi	r19, 0x01	; 1
    1080:	b9 01       	movw	r22, r18
    1082:	0e 94 c1 23 	call	0x4782	; 0x4782 <SPI_enu_Transceive>
		}
}
    1086:	0f 90       	pop	r0
    1088:	0f 90       	pop	r0
    108a:	cf 91       	pop	r28
    108c:	df 91       	pop	r29
    108e:	08 95       	ret

00001090 <stopMotors>:
void stopMotors(void){
    1090:	df 93       	push	r29
    1092:	cf 93       	push	r28
    1094:	cd b7       	in	r28, 0x3d	; 61
    1096:	de b7       	in	r29, 0x3e	; 62
        SPI_enu_Transceive(order, &dummy);
    1098:	80 91 4b 01 	lds	r24, 0x014B
    109c:	20 e5       	ldi	r18, 0x50	; 80
    109e:	31 e0       	ldi	r19, 0x01	; 1
    10a0:	b9 01       	movw	r22, r18
    10a2:	0e 94 c1 23 	call	0x4782	; 0x4782 <SPI_enu_Transceive>
        LCD_enu_Clear();
    10a6:	0e 94 da 14 	call	0x29b4	; 0x29b4 <LCD_enu_Clear>
        LCD_enu_SendString("Stopping Motors");
    10aa:	8c ef       	ldi	r24, 0xFC	; 252
    10ac:	90 e0       	ldi	r25, 0x00	; 0
    10ae:	0e 94 10 11 	call	0x2220	; 0x2220 <LCD_enu_SendString>
        Timers_enu_delay_ms(delay);
    10b2:	64 ef       	ldi	r22, 0xF4	; 244
    10b4:	71 e0       	ldi	r23, 0x01	; 1
    10b6:	80 e0       	ldi	r24, 0x00	; 0
    10b8:	90 e0       	ldi	r25, 0x00	; 0
    10ba:	0e 94 3e 1f 	call	0x3e7c	; 0x3e7c <Timers_enu_delay_ms>
}
    10be:	cf 91       	pop	r28
    10c0:	df 91       	pop	r29
    10c2:	08 95       	ret

000010c4 <main>:
#include"APP.h"
int main(void){
    10c4:	df 93       	push	r29
    10c6:	cf 93       	push	r28
    10c8:	cd b7       	in	r28, 0x3d	; 61
    10ca:	de b7       	in	r29, 0x3e	; 62
    APP_Init();
    10cc:	0e 94 4f 06 	call	0xc9e	; 0xc9e <APP_Init>
	while(1){
		getPassword();
    10d0:	0e 94 cd 06 	call	0xd9a	; 0xd9a <getPassword>
		if(order == '1'){DCMotor();}
    10d4:	80 91 4b 01 	lds	r24, 0x014B
    10d8:	81 33       	cpi	r24, 0x31	; 49
    10da:	19 f4       	brne	.+6      	; 0x10e2 <main+0x1e>
    10dc:	0e 94 64 07 	call	0xec8	; 0xec8 <DCMotor>
    10e0:	f7 cf       	rjmp	.-18     	; 0x10d0 <main+0xc>
		else if(order == '2'){stepperMotor();}
    10e2:	80 91 4b 01 	lds	r24, 0x014B
    10e6:	82 33       	cpi	r24, 0x32	; 50
    10e8:	19 f4       	brne	.+6      	; 0x10f0 <main+0x2c>
    10ea:	0e 94 d8 07 	call	0xfb0	; 0xfb0 <stepperMotor>
    10ee:	f0 cf       	rjmp	.-32     	; 0x10d0 <main+0xc>
		else if(order == '3'){servoMotor();}
    10f0:	80 91 4b 01 	lds	r24, 0x014B
    10f4:	83 33       	cpi	r24, 0x33	; 51
    10f6:	19 f4       	brne	.+6      	; 0x10fe <main+0x3a>
    10f8:	0e 94 8f 07 	call	0xf1e	; 0xf1e <servoMotor>
    10fc:	e9 cf       	rjmp	.-46     	; 0x10d0 <main+0xc>
		else if (order == '4'){stopMotors();}
    10fe:	80 91 4b 01 	lds	r24, 0x014B
    1102:	84 33       	cpi	r24, 0x34	; 52
    1104:	29 f7       	brne	.-54     	; 0x10d0 <main+0xc>
    1106:	0e 94 48 08 	call	0x1090	; 0x1090 <stopMotors>
    110a:	e2 cf       	rjmp	.-60     	; 0x10d0 <main+0xc>

0000110c <SW_enu_Init>:
#include "Switch_Config.h"
#include "Switch_Private.h"


ES_t SW_enu_Init(SW_t * Copy_Au8_Switchs)
{
    110c:	df 93       	push	r29
    110e:	cf 93       	push	r28
    1110:	00 d0       	rcall	.+0      	; 0x1112 <SW_enu_Init+0x6>
    1112:	00 d0       	rcall	.+0      	; 0x1114 <SW_enu_Init+0x8>
    1114:	cd b7       	in	r28, 0x3d	; 61
    1116:	de b7       	in	r29, 0x3e	; 62
    1118:	9b 83       	std	Y+3, r25	; 0x03
    111a:	8a 83       	std	Y+2, r24	; 0x02

    for(u8 i = 0 ; i < NUM_OF_SWITCHS;i++ ){
    111c:	19 82       	std	Y+1, r1	; 0x01
    111e:	53 c0       	rjmp	.+166    	; 0x11c6 <SW_enu_Init+0xba>
    DIO_enu_SetPinDirection(Copy_Au8_Switchs[i].SW_Port, Copy_Au8_Switchs[i].SW_Pin, DIO_U8_INPUT);
    1120:	89 81       	ldd	r24, Y+1	; 0x01
    1122:	28 2f       	mov	r18, r24
    1124:	30 e0       	ldi	r19, 0x00	; 0
    1126:	c9 01       	movw	r24, r18
    1128:	88 0f       	add	r24, r24
    112a:	99 1f       	adc	r25, r25
    112c:	28 0f       	add	r18, r24
    112e:	39 1f       	adc	r19, r25
    1130:	8a 81       	ldd	r24, Y+2	; 0x02
    1132:	9b 81       	ldd	r25, Y+3	; 0x03
    1134:	fc 01       	movw	r30, r24
    1136:	e2 0f       	add	r30, r18
    1138:	f3 1f       	adc	r31, r19
    113a:	40 81       	ld	r20, Z
    113c:	89 81       	ldd	r24, Y+1	; 0x01
    113e:	28 2f       	mov	r18, r24
    1140:	30 e0       	ldi	r19, 0x00	; 0
    1142:	c9 01       	movw	r24, r18
    1144:	88 0f       	add	r24, r24
    1146:	99 1f       	adc	r25, r25
    1148:	28 0f       	add	r18, r24
    114a:	39 1f       	adc	r19, r25
    114c:	8a 81       	ldd	r24, Y+2	; 0x02
    114e:	9b 81       	ldd	r25, Y+3	; 0x03
    1150:	fc 01       	movw	r30, r24
    1152:	e2 0f       	add	r30, r18
    1154:	f3 1f       	adc	r31, r19
    1156:	91 81       	ldd	r25, Z+1	; 0x01
    1158:	84 2f       	mov	r24, r20
    115a:	69 2f       	mov	r22, r25
    115c:	40 e0       	ldi	r20, 0x00	; 0
    115e:	0e 94 48 28 	call	0x5090	; 0x5090 <DIO_enu_SetPinDirection>
    DIO_enu_SetPinValue(Copy_Au8_Switchs[i].SW_Port, Copy_Au8_Switchs[i].SW_Pin, Copy_Au8_Switchs[i].SW_Initial_State);
    1162:	89 81       	ldd	r24, Y+1	; 0x01
    1164:	28 2f       	mov	r18, r24
    1166:	30 e0       	ldi	r19, 0x00	; 0
    1168:	c9 01       	movw	r24, r18
    116a:	88 0f       	add	r24, r24
    116c:	99 1f       	adc	r25, r25
    116e:	28 0f       	add	r18, r24
    1170:	39 1f       	adc	r19, r25
    1172:	8a 81       	ldd	r24, Y+2	; 0x02
    1174:	9b 81       	ldd	r25, Y+3	; 0x03
    1176:	fc 01       	movw	r30, r24
    1178:	e2 0f       	add	r30, r18
    117a:	f3 1f       	adc	r31, r19
    117c:	50 81       	ld	r21, Z
    117e:	89 81       	ldd	r24, Y+1	; 0x01
    1180:	28 2f       	mov	r18, r24
    1182:	30 e0       	ldi	r19, 0x00	; 0
    1184:	c9 01       	movw	r24, r18
    1186:	88 0f       	add	r24, r24
    1188:	99 1f       	adc	r25, r25
    118a:	28 0f       	add	r18, r24
    118c:	39 1f       	adc	r19, r25
    118e:	8a 81       	ldd	r24, Y+2	; 0x02
    1190:	9b 81       	ldd	r25, Y+3	; 0x03
    1192:	fc 01       	movw	r30, r24
    1194:	e2 0f       	add	r30, r18
    1196:	f3 1f       	adc	r31, r19
    1198:	41 81       	ldd	r20, Z+1	; 0x01
    119a:	89 81       	ldd	r24, Y+1	; 0x01
    119c:	28 2f       	mov	r18, r24
    119e:	30 e0       	ldi	r19, 0x00	; 0
    11a0:	c9 01       	movw	r24, r18
    11a2:	88 0f       	add	r24, r24
    11a4:	99 1f       	adc	r25, r25
    11a6:	28 0f       	add	r18, r24
    11a8:	39 1f       	adc	r19, r25
    11aa:	8a 81       	ldd	r24, Y+2	; 0x02
    11ac:	9b 81       	ldd	r25, Y+3	; 0x03
    11ae:	fc 01       	movw	r30, r24
    11b0:	e2 0f       	add	r30, r18
    11b2:	f3 1f       	adc	r31, r19
    11b4:	92 81       	ldd	r25, Z+2	; 0x02
    11b6:	85 2f       	mov	r24, r21
    11b8:	64 2f       	mov	r22, r20
    11ba:	49 2f       	mov	r20, r25
    11bc:	0e 94 72 29 	call	0x52e4	; 0x52e4 <DIO_enu_SetPinValue>


ES_t SW_enu_Init(SW_t * Copy_Au8_Switchs)
{

    for(u8 i = 0 ; i < NUM_OF_SWITCHS;i++ ){
    11c0:	89 81       	ldd	r24, Y+1	; 0x01
    11c2:	8f 5f       	subi	r24, 0xFF	; 255
    11c4:	89 83       	std	Y+1, r24	; 0x01
    11c6:	89 81       	ldd	r24, Y+1	; 0x01
    11c8:	82 30       	cpi	r24, 0x02	; 2
    11ca:	08 f4       	brcc	.+2      	; 0x11ce <SW_enu_Init+0xc2>
    11cc:	a9 cf       	rjmp	.-174    	; 0x1120 <SW_enu_Init+0x14>
    DIO_enu_SetPinDirection(Copy_Au8_Switchs[i].SW_Port, Copy_Au8_Switchs[i].SW_Pin, DIO_U8_INPUT);
    DIO_enu_SetPinValue(Copy_Au8_Switchs[i].SW_Port, Copy_Au8_Switchs[i].SW_Pin, Copy_Au8_Switchs[i].SW_Initial_State);
    }

}
    11ce:	0f 90       	pop	r0
    11d0:	0f 90       	pop	r0
    11d2:	0f 90       	pop	r0
    11d4:	0f 90       	pop	r0
    11d6:	cf 91       	pop	r28
    11d8:	df 91       	pop	r29
    11da:	08 95       	ret

000011dc <SW_enu_getValue>:

ES_t SW_enu_getValue(u8 * Copy_u8_Value,SW_t * Copy_Au8_Switchs)
{
    11dc:	df 93       	push	r29
    11de:	cf 93       	push	r28
    11e0:	cd b7       	in	r28, 0x3d	; 61
    11e2:	de b7       	in	r29, 0x3e	; 62
    11e4:	63 97       	sbiw	r28, 0x13	; 19
    11e6:	0f b6       	in	r0, 0x3f	; 63
    11e8:	f8 94       	cli
    11ea:	de bf       	out	0x3e, r29	; 62
    11ec:	0f be       	out	0x3f, r0	; 63
    11ee:	cd bf       	out	0x3d, r28	; 61
    11f0:	98 8b       	std	Y+16, r25	; 0x10
    11f2:	8f 87       	std	Y+15, r24	; 0x0f
    11f4:	7a 8b       	std	Y+18, r23	; 0x12
    11f6:	69 8b       	std	Y+17, r22	; 0x11

    DIO_enu_GetPinValue(Copy_Au8_Switchs->SW_Port, Copy_Au8_Switchs->SW_Pin,Copy_u8_Value);
    11f8:	e9 89       	ldd	r30, Y+17	; 0x11
    11fa:	fa 89       	ldd	r31, Y+18	; 0x12
    11fc:	80 81       	ld	r24, Z
    11fe:	e9 89       	ldd	r30, Y+17	; 0x11
    1200:	fa 89       	ldd	r31, Y+18	; 0x12
    1202:	91 81       	ldd	r25, Z+1	; 0x01
    1204:	2f 85       	ldd	r18, Y+15	; 0x0f
    1206:	38 89       	ldd	r19, Y+16	; 0x10
    1208:	69 2f       	mov	r22, r25
    120a:	a9 01       	movw	r20, r18
    120c:	0e 94 9c 2a 	call	0x5538	; 0x5538 <DIO_enu_GetPinValue>
    1210:	80 e0       	ldi	r24, 0x00	; 0
    1212:	90 e0       	ldi	r25, 0x00	; 0
    1214:	a8 ec       	ldi	r26, 0xC8	; 200
    1216:	b1 e4       	ldi	r27, 0x41	; 65
    1218:	8b 87       	std	Y+11, r24	; 0x0b
    121a:	9c 87       	std	Y+12, r25	; 0x0c
    121c:	ad 87       	std	Y+13, r26	; 0x0d
    121e:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1220:	6b 85       	ldd	r22, Y+11	; 0x0b
    1222:	7c 85       	ldd	r23, Y+12	; 0x0c
    1224:	8d 85       	ldd	r24, Y+13	; 0x0d
    1226:	9e 85       	ldd	r25, Y+14	; 0x0e
    1228:	20 e0       	ldi	r18, 0x00	; 0
    122a:	30 e0       	ldi	r19, 0x00	; 0
    122c:	4a e7       	ldi	r20, 0x7A	; 122
    122e:	55 e4       	ldi	r21, 0x45	; 69
    1230:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1234:	dc 01       	movw	r26, r24
    1236:	cb 01       	movw	r24, r22
    1238:	8f 83       	std	Y+7, r24	; 0x07
    123a:	98 87       	std	Y+8, r25	; 0x08
    123c:	a9 87       	std	Y+9, r26	; 0x09
    123e:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1240:	6f 81       	ldd	r22, Y+7	; 0x07
    1242:	78 85       	ldd	r23, Y+8	; 0x08
    1244:	89 85       	ldd	r24, Y+9	; 0x09
    1246:	9a 85       	ldd	r25, Y+10	; 0x0a
    1248:	20 e0       	ldi	r18, 0x00	; 0
    124a:	30 e0       	ldi	r19, 0x00	; 0
    124c:	40 e8       	ldi	r20, 0x80	; 128
    124e:	5f e3       	ldi	r21, 0x3F	; 63
    1250:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1254:	88 23       	and	r24, r24
    1256:	2c f4       	brge	.+10     	; 0x1262 <SW_enu_getValue+0x86>
		__ticks = 1;
    1258:	81 e0       	ldi	r24, 0x01	; 1
    125a:	90 e0       	ldi	r25, 0x00	; 0
    125c:	9e 83       	std	Y+6, r25	; 0x06
    125e:	8d 83       	std	Y+5, r24	; 0x05
    1260:	3f c0       	rjmp	.+126    	; 0x12e0 <SW_enu_getValue+0x104>
	else if (__tmp > 65535)
    1262:	6f 81       	ldd	r22, Y+7	; 0x07
    1264:	78 85       	ldd	r23, Y+8	; 0x08
    1266:	89 85       	ldd	r24, Y+9	; 0x09
    1268:	9a 85       	ldd	r25, Y+10	; 0x0a
    126a:	20 e0       	ldi	r18, 0x00	; 0
    126c:	3f ef       	ldi	r19, 0xFF	; 255
    126e:	4f e7       	ldi	r20, 0x7F	; 127
    1270:	57 e4       	ldi	r21, 0x47	; 71
    1272:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1276:	18 16       	cp	r1, r24
    1278:	4c f5       	brge	.+82     	; 0x12cc <SW_enu_getValue+0xf0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    127a:	6b 85       	ldd	r22, Y+11	; 0x0b
    127c:	7c 85       	ldd	r23, Y+12	; 0x0c
    127e:	8d 85       	ldd	r24, Y+13	; 0x0d
    1280:	9e 85       	ldd	r25, Y+14	; 0x0e
    1282:	20 e0       	ldi	r18, 0x00	; 0
    1284:	30 e0       	ldi	r19, 0x00	; 0
    1286:	40 e2       	ldi	r20, 0x20	; 32
    1288:	51 e4       	ldi	r21, 0x41	; 65
    128a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    128e:	dc 01       	movw	r26, r24
    1290:	cb 01       	movw	r24, r22
    1292:	bc 01       	movw	r22, r24
    1294:	cd 01       	movw	r24, r26
    1296:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    129a:	dc 01       	movw	r26, r24
    129c:	cb 01       	movw	r24, r22
    129e:	9e 83       	std	Y+6, r25	; 0x06
    12a0:	8d 83       	std	Y+5, r24	; 0x05
    12a2:	0f c0       	rjmp	.+30     	; 0x12c2 <SW_enu_getValue+0xe6>
    12a4:	80 e9       	ldi	r24, 0x90	; 144
    12a6:	91 e0       	ldi	r25, 0x01	; 1
    12a8:	9c 83       	std	Y+4, r25	; 0x04
    12aa:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    12ac:	8b 81       	ldd	r24, Y+3	; 0x03
    12ae:	9c 81       	ldd	r25, Y+4	; 0x04
    12b0:	01 97       	sbiw	r24, 0x01	; 1
    12b2:	f1 f7       	brne	.-4      	; 0x12b0 <SW_enu_getValue+0xd4>
    12b4:	9c 83       	std	Y+4, r25	; 0x04
    12b6:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    12b8:	8d 81       	ldd	r24, Y+5	; 0x05
    12ba:	9e 81       	ldd	r25, Y+6	; 0x06
    12bc:	01 97       	sbiw	r24, 0x01	; 1
    12be:	9e 83       	std	Y+6, r25	; 0x06
    12c0:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    12c2:	8d 81       	ldd	r24, Y+5	; 0x05
    12c4:	9e 81       	ldd	r25, Y+6	; 0x06
    12c6:	00 97       	sbiw	r24, 0x00	; 0
    12c8:	69 f7       	brne	.-38     	; 0x12a4 <SW_enu_getValue+0xc8>
    12ca:	14 c0       	rjmp	.+40     	; 0x12f4 <SW_enu_getValue+0x118>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    12cc:	6f 81       	ldd	r22, Y+7	; 0x07
    12ce:	78 85       	ldd	r23, Y+8	; 0x08
    12d0:	89 85       	ldd	r24, Y+9	; 0x09
    12d2:	9a 85       	ldd	r25, Y+10	; 0x0a
    12d4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    12d8:	dc 01       	movw	r26, r24
    12da:	cb 01       	movw	r24, r22
    12dc:	9e 83       	std	Y+6, r25	; 0x06
    12de:	8d 83       	std	Y+5, r24	; 0x05
    12e0:	8d 81       	ldd	r24, Y+5	; 0x05
    12e2:	9e 81       	ldd	r25, Y+6	; 0x06
    12e4:	9a 83       	std	Y+2, r25	; 0x02
    12e6:	89 83       	std	Y+1, r24	; 0x01
    12e8:	89 81       	ldd	r24, Y+1	; 0x01
    12ea:	9a 81       	ldd	r25, Y+2	; 0x02
    12ec:	01 97       	sbiw	r24, 0x01	; 1
    12ee:	f1 f7       	brne	.-4      	; 0x12ec <SW_enu_getValue+0x110>
    12f0:	9a 83       	std	Y+2, r25	; 0x02
    12f2:	89 83       	std	Y+1, r24	; 0x01
    _delay_ms(25);
    DIO_enu_GetPinValue(Copy_Au8_Switchs->SW_Port, Copy_Au8_Switchs->SW_Pin,Copy_u8_Value);
    12f4:	e9 89       	ldd	r30, Y+17	; 0x11
    12f6:	fa 89       	ldd	r31, Y+18	; 0x12
    12f8:	80 81       	ld	r24, Z
    12fa:	e9 89       	ldd	r30, Y+17	; 0x11
    12fc:	fa 89       	ldd	r31, Y+18	; 0x12
    12fe:	91 81       	ldd	r25, Z+1	; 0x01
    1300:	2f 85       	ldd	r18, Y+15	; 0x0f
    1302:	38 89       	ldd	r19, Y+16	; 0x10
    1304:	69 2f       	mov	r22, r25
    1306:	a9 01       	movw	r20, r18
    1308:	0e 94 9c 2a 	call	0x5538	; 0x5538 <DIO_enu_GetPinValue>
    
}
    130c:	63 96       	adiw	r28, 0x13	; 19
    130e:	0f b6       	in	r0, 0x3f	; 63
    1310:	f8 94       	cli
    1312:	de bf       	out	0x3e, r29	; 62
    1314:	0f be       	out	0x3f, r0	; 63
    1316:	cd bf       	out	0x3d, r28	; 61
    1318:	cf 91       	pop	r28
    131a:	df 91       	pop	r29
    131c:	08 95       	ret

0000131e <STEP_Motor_enu_Init>:


#define  delay   125

ES_t STEP_Motor_enu_Init()
{
    131e:	df 93       	push	r29
    1320:	cf 93       	push	r28
    1322:	cd b7       	in	r28, 0x3d	; 61
    1324:	de b7       	in	r29, 0x3e	; 62
    DIO_enu_SetPinDirection(STEPPER_MOTOR_PORT, STEPPER_MOTOR_PIN1, DIO_U8_OUTPUT);
    1326:	81 e0       	ldi	r24, 0x01	; 1
    1328:	60 e0       	ldi	r22, 0x00	; 0
    132a:	41 e0       	ldi	r20, 0x01	; 1
    132c:	0e 94 48 28 	call	0x5090	; 0x5090 <DIO_enu_SetPinDirection>
    DIO_enu_SetPinDirection(STEPPER_MOTOR_PORT, STEPPER_MOTOR_PIN2, DIO_U8_OUTPUT);
    1330:	81 e0       	ldi	r24, 0x01	; 1
    1332:	61 e0       	ldi	r22, 0x01	; 1
    1334:	41 e0       	ldi	r20, 0x01	; 1
    1336:	0e 94 48 28 	call	0x5090	; 0x5090 <DIO_enu_SetPinDirection>
    DIO_enu_SetPinDirection(STEPPER_MOTOR_PORT, STEPPER_MOTOR_PIN3, DIO_U8_OUTPUT);
    133a:	81 e0       	ldi	r24, 0x01	; 1
    133c:	62 e0       	ldi	r22, 0x02	; 2
    133e:	41 e0       	ldi	r20, 0x01	; 1
    1340:	0e 94 48 28 	call	0x5090	; 0x5090 <DIO_enu_SetPinDirection>
    DIO_enu_SetPinDirection(STEPPER_MOTOR_PORT, STEPPER_MOTOR_PIN4, DIO_U8_OUTPUT);
    1344:	81 e0       	ldi	r24, 0x01	; 1
    1346:	63 e0       	ldi	r22, 0x03	; 3
    1348:	41 e0       	ldi	r20, 0x01	; 1
    134a:	0e 94 48 28 	call	0x5090	; 0x5090 <DIO_enu_SetPinDirection>
    DIO_enu_SetPinValue(STEPPER_MOTOR_PORT, STEPPER_MOTOR_PIN1, DIO_U8_LOW);
    134e:	81 e0       	ldi	r24, 0x01	; 1
    1350:	60 e0       	ldi	r22, 0x00	; 0
    1352:	40 e0       	ldi	r20, 0x00	; 0
    1354:	0e 94 72 29 	call	0x52e4	; 0x52e4 <DIO_enu_SetPinValue>
    DIO_enu_SetPinValue(STEPPER_MOTOR_PORT, STEPPER_MOTOR_PIN2, DIO_U8_LOW);
    1358:	81 e0       	ldi	r24, 0x01	; 1
    135a:	61 e0       	ldi	r22, 0x01	; 1
    135c:	40 e0       	ldi	r20, 0x00	; 0
    135e:	0e 94 72 29 	call	0x52e4	; 0x52e4 <DIO_enu_SetPinValue>
    DIO_enu_SetPinValue(STEPPER_MOTOR_PORT, STEPPER_MOTOR_PIN3, DIO_U8_LOW);
    1362:	81 e0       	ldi	r24, 0x01	; 1
    1364:	62 e0       	ldi	r22, 0x02	; 2
    1366:	40 e0       	ldi	r20, 0x00	; 0
    1368:	0e 94 72 29 	call	0x52e4	; 0x52e4 <DIO_enu_SetPinValue>
    DIO_enu_SetPinValue(STEPPER_MOTOR_PORT, STEPPER_MOTOR_PIN4, DIO_U8_LOW);
    136c:	81 e0       	ldi	r24, 0x01	; 1
    136e:	63 e0       	ldi	r22, 0x03	; 3
    1370:	40 e0       	ldi	r20, 0x00	; 0
    1372:	0e 94 72 29 	call	0x52e4	; 0x52e4 <DIO_enu_SetPinValue>

    return STATE_OK;
    1376:	81 e0       	ldi	r24, 0x01	; 1
}
    1378:	cf 91       	pop	r28
    137a:	df 91       	pop	r29
    137c:	08 95       	ret

0000137e <STEP_Motor_enu_Rotate>:
ES_t STEP_Motor_enu_Rotate(u8 Copy_u8_Direction, u16 Copy_u16_Angle)
{
    137e:	df 93       	push	r29
    1380:	cf 93       	push	r28
    1382:	cd b7       	in	r28, 0x3d	; 61
    1384:	de b7       	in	r29, 0x3e	; 62
    1386:	a5 97       	sbiw	r28, 0x25	; 37
    1388:	0f b6       	in	r0, 0x3f	; 63
    138a:	f8 94       	cli
    138c:	de bf       	out	0x3e, r29	; 62
    138e:	0f be       	out	0x3f, r0	; 63
    1390:	cd bf       	out	0x3d, r28	; 61
    1392:	8b a3       	std	Y+35, r24	; 0x23
    1394:	7d a3       	std	Y+37, r23	; 0x25
    1396:	6c a3       	std	Y+36, r22	; 0x24
    u8 Local_u8_errorState = STATE_OK;
    1398:	81 e0       	ldi	r24, 0x01	; 1
    139a:	8a a3       	std	Y+34, r24	; 0x22
    if ((Copy_u8_Direction == CW || Copy_u8_Direction == CCW) && (Copy_u16_Angle >= 0 && Copy_u16_Angle <= 360))
    139c:	8b a1       	ldd	r24, Y+35	; 0x23
    139e:	81 30       	cpi	r24, 0x01	; 1
    13a0:	21 f0       	breq	.+8      	; 0x13aa <STEP_Motor_enu_Rotate+0x2c>
    13a2:	8b a1       	ldd	r24, Y+35	; 0x23
    13a4:	88 23       	and	r24, r24
    13a6:	09 f0       	breq	.+2      	; 0x13aa <STEP_Motor_enu_Rotate+0x2c>
    13a8:	a5 c1       	rjmp	.+842    	; 0x16f4 <STEP_Motor_enu_Rotate+0x376>
    13aa:	8c a1       	ldd	r24, Y+36	; 0x24
    13ac:	9d a1       	ldd	r25, Y+37	; 0x25
    13ae:	21 e0       	ldi	r18, 0x01	; 1
    13b0:	89 36       	cpi	r24, 0x69	; 105
    13b2:	92 07       	cpc	r25, r18
    13b4:	08 f0       	brcs	.+2      	; 0x13b8 <STEP_Motor_enu_Rotate+0x3a>
    13b6:	9e c1       	rjmp	.+828    	; 0x16f4 <STEP_Motor_enu_Rotate+0x376>
    {
        u8 state = MOTOR_PINS_STATE; // 0000 1111
    13b8:	8f e0       	ldi	r24, 0x0F	; 15
    13ba:	89 a3       	std	Y+33, r24	; 0x21
        u16 Local_u16_numOFSteps = Copy_u16_Angle / STEP_ANGLE;
    13bc:	8c a1       	ldd	r24, Y+36	; 0x24
    13be:	9d a1       	ldd	r25, Y+37	; 0x25
    13c0:	2a e5       	ldi	r18, 0x5A	; 90
    13c2:	30 e0       	ldi	r19, 0x00	; 0
    13c4:	b9 01       	movw	r22, r18
    13c6:	0e 94 66 2e 	call	0x5ccc	; 0x5ccc <__udivmodhi4>
    13ca:	cb 01       	movw	r24, r22
    13cc:	98 a3       	std	Y+32, r25	; 0x20
    13ce:	8f 8f       	std	Y+31, r24	; 0x1f
        if (Copy_u8_Direction == CW)
    13d0:	8b a1       	ldd	r24, Y+35	; 0x23
    13d2:	81 30       	cpi	r24, 0x01	; 1
    13d4:	09 f0       	breq	.+2      	; 0x13d8 <STEP_Motor_enu_Rotate+0x5a>
    13d6:	c5 c0       	rjmp	.+394    	; 0x1562 <STEP_Motor_enu_Rotate+0x1e4>
        {
            for (u8 Local_u8_Iterator = 0; Local_u8_Iterator < Local_u16_numOFSteps; Local_u8_Iterator++)
    13d8:	1e 8e       	std	Y+30, r1	; 0x1e
    13da:	b9 c0       	rjmp	.+370    	; 0x154e <STEP_Motor_enu_Rotate+0x1d0>
            {
                state &=  3<<(Local_u8_Iterator%4);
    13dc:	8e 8d       	ldd	r24, Y+30	; 0x1e
    13de:	88 2f       	mov	r24, r24
    13e0:	90 e0       	ldi	r25, 0x00	; 0
    13e2:	9c 01       	movw	r18, r24
    13e4:	23 70       	andi	r18, 0x03	; 3
    13e6:	30 70       	andi	r19, 0x00	; 0
    13e8:	83 e0       	ldi	r24, 0x03	; 3
    13ea:	90 e0       	ldi	r25, 0x00	; 0
    13ec:	02 2e       	mov	r0, r18
    13ee:	02 c0       	rjmp	.+4      	; 0x13f4 <STEP_Motor_enu_Rotate+0x76>
    13f0:	88 0f       	add	r24, r24
    13f2:	99 1f       	adc	r25, r25
    13f4:	0a 94       	dec	r0
    13f6:	e2 f7       	brpl	.-8      	; 0x13f0 <STEP_Motor_enu_Rotate+0x72>
    13f8:	98 2f       	mov	r25, r24
    13fa:	89 a1       	ldd	r24, Y+33	; 0x21
    13fc:	89 23       	and	r24, r25
    13fe:	89 a3       	std	Y+33, r24	; 0x21
                if((Local_u8_Iterator%4) == 3) state = EDGE_STATE;
    1400:	8e 8d       	ldd	r24, Y+30	; 0x1e
    1402:	88 2f       	mov	r24, r24
    1404:	90 e0       	ldi	r25, 0x00	; 0
    1406:	83 70       	andi	r24, 0x03	; 3
    1408:	90 70       	andi	r25, 0x00	; 0
    140a:	83 30       	cpi	r24, 0x03	; 3
    140c:	91 05       	cpc	r25, r1
    140e:	11 f4       	brne	.+4      	; 0x1414 <STEP_Motor_enu_Rotate+0x96>
    1410:	89 e0       	ldi	r24, 0x09	; 9
    1412:	89 a3       	std	Y+33, r24	; 0x21
                DIO_enu_SetPinValue(STEPPER_MOTOR_PORT, STEPPER_MOTOR_PIN4, (state>>SHIFT_0BIT)&MASK_BIT);
    1414:	89 a1       	ldd	r24, Y+33	; 0x21
    1416:	98 2f       	mov	r25, r24
    1418:	91 70       	andi	r25, 0x01	; 1
    141a:	81 e0       	ldi	r24, 0x01	; 1
    141c:	63 e0       	ldi	r22, 0x03	; 3
    141e:	49 2f       	mov	r20, r25
    1420:	0e 94 72 29 	call	0x52e4	; 0x52e4 <DIO_enu_SetPinValue>
                DIO_enu_SetPinValue(STEPPER_MOTOR_PORT, STEPPER_MOTOR_PIN3, (state>>SHIFT_1BIT)&MASK_BIT);
    1424:	89 a1       	ldd	r24, Y+33	; 0x21
    1426:	86 95       	lsr	r24
    1428:	98 2f       	mov	r25, r24
    142a:	91 70       	andi	r25, 0x01	; 1
    142c:	81 e0       	ldi	r24, 0x01	; 1
    142e:	62 e0       	ldi	r22, 0x02	; 2
    1430:	49 2f       	mov	r20, r25
    1432:	0e 94 72 29 	call	0x52e4	; 0x52e4 <DIO_enu_SetPinValue>
                DIO_enu_SetPinValue(STEPPER_MOTOR_PORT, STEPPER_MOTOR_PIN2, (state>>SHIFT_2BIT)&MASK_BIT);
    1436:	89 a1       	ldd	r24, Y+33	; 0x21
    1438:	86 95       	lsr	r24
    143a:	86 95       	lsr	r24
    143c:	98 2f       	mov	r25, r24
    143e:	91 70       	andi	r25, 0x01	; 1
    1440:	81 e0       	ldi	r24, 0x01	; 1
    1442:	61 e0       	ldi	r22, 0x01	; 1
    1444:	49 2f       	mov	r20, r25
    1446:	0e 94 72 29 	call	0x52e4	; 0x52e4 <DIO_enu_SetPinValue>
                DIO_enu_SetPinValue(STEPPER_MOTOR_PORT, STEPPER_MOTOR_PIN1, (state>>SHIFT_3BIT)&MASK_BIT);
    144a:	89 a1       	ldd	r24, Y+33	; 0x21
    144c:	86 95       	lsr	r24
    144e:	86 95       	lsr	r24
    1450:	86 95       	lsr	r24
    1452:	98 2f       	mov	r25, r24
    1454:	91 70       	andi	r25, 0x01	; 1
    1456:	81 e0       	ldi	r24, 0x01	; 1
    1458:	60 e0       	ldi	r22, 0x00	; 0
    145a:	49 2f       	mov	r20, r25
    145c:	0e 94 72 29 	call	0x52e4	; 0x52e4 <DIO_enu_SetPinValue>
    1460:	80 e0       	ldi	r24, 0x00	; 0
    1462:	90 e0       	ldi	r25, 0x00	; 0
    1464:	aa ef       	ldi	r26, 0xFA	; 250
    1466:	b2 e4       	ldi	r27, 0x42	; 66
    1468:	89 8f       	std	Y+25, r24	; 0x19
    146a:	9a 8f       	std	Y+26, r25	; 0x1a
    146c:	ab 8f       	std	Y+27, r26	; 0x1b
    146e:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1470:	69 8d       	ldd	r22, Y+25	; 0x19
    1472:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1474:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1476:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1478:	20 e0       	ldi	r18, 0x00	; 0
    147a:	30 e0       	ldi	r19, 0x00	; 0
    147c:	4a e7       	ldi	r20, 0x7A	; 122
    147e:	55 e4       	ldi	r21, 0x45	; 69
    1480:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1484:	dc 01       	movw	r26, r24
    1486:	cb 01       	movw	r24, r22
    1488:	8d 8b       	std	Y+21, r24	; 0x15
    148a:	9e 8b       	std	Y+22, r25	; 0x16
    148c:	af 8b       	std	Y+23, r26	; 0x17
    148e:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1490:	6d 89       	ldd	r22, Y+21	; 0x15
    1492:	7e 89       	ldd	r23, Y+22	; 0x16
    1494:	8f 89       	ldd	r24, Y+23	; 0x17
    1496:	98 8d       	ldd	r25, Y+24	; 0x18
    1498:	20 e0       	ldi	r18, 0x00	; 0
    149a:	30 e0       	ldi	r19, 0x00	; 0
    149c:	40 e8       	ldi	r20, 0x80	; 128
    149e:	5f e3       	ldi	r21, 0x3F	; 63
    14a0:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    14a4:	88 23       	and	r24, r24
    14a6:	2c f4       	brge	.+10     	; 0x14b2 <STEP_Motor_enu_Rotate+0x134>
		__ticks = 1;
    14a8:	81 e0       	ldi	r24, 0x01	; 1
    14aa:	90 e0       	ldi	r25, 0x00	; 0
    14ac:	9c 8b       	std	Y+20, r25	; 0x14
    14ae:	8b 8b       	std	Y+19, r24	; 0x13
    14b0:	3f c0       	rjmp	.+126    	; 0x1530 <STEP_Motor_enu_Rotate+0x1b2>
	else if (__tmp > 65535)
    14b2:	6d 89       	ldd	r22, Y+21	; 0x15
    14b4:	7e 89       	ldd	r23, Y+22	; 0x16
    14b6:	8f 89       	ldd	r24, Y+23	; 0x17
    14b8:	98 8d       	ldd	r25, Y+24	; 0x18
    14ba:	20 e0       	ldi	r18, 0x00	; 0
    14bc:	3f ef       	ldi	r19, 0xFF	; 255
    14be:	4f e7       	ldi	r20, 0x7F	; 127
    14c0:	57 e4       	ldi	r21, 0x47	; 71
    14c2:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    14c6:	18 16       	cp	r1, r24
    14c8:	4c f5       	brge	.+82     	; 0x151c <STEP_Motor_enu_Rotate+0x19e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    14ca:	69 8d       	ldd	r22, Y+25	; 0x19
    14cc:	7a 8d       	ldd	r23, Y+26	; 0x1a
    14ce:	8b 8d       	ldd	r24, Y+27	; 0x1b
    14d0:	9c 8d       	ldd	r25, Y+28	; 0x1c
    14d2:	20 e0       	ldi	r18, 0x00	; 0
    14d4:	30 e0       	ldi	r19, 0x00	; 0
    14d6:	40 e2       	ldi	r20, 0x20	; 32
    14d8:	51 e4       	ldi	r21, 0x41	; 65
    14da:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    14de:	dc 01       	movw	r26, r24
    14e0:	cb 01       	movw	r24, r22
    14e2:	bc 01       	movw	r22, r24
    14e4:	cd 01       	movw	r24, r26
    14e6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    14ea:	dc 01       	movw	r26, r24
    14ec:	cb 01       	movw	r24, r22
    14ee:	9c 8b       	std	Y+20, r25	; 0x14
    14f0:	8b 8b       	std	Y+19, r24	; 0x13
    14f2:	0f c0       	rjmp	.+30     	; 0x1512 <STEP_Motor_enu_Rotate+0x194>
    14f4:	80 e9       	ldi	r24, 0x90	; 144
    14f6:	91 e0       	ldi	r25, 0x01	; 1
    14f8:	9a 8b       	std	Y+18, r25	; 0x12
    14fa:	89 8b       	std	Y+17, r24	; 0x11
    14fc:	89 89       	ldd	r24, Y+17	; 0x11
    14fe:	9a 89       	ldd	r25, Y+18	; 0x12
    1500:	01 97       	sbiw	r24, 0x01	; 1
    1502:	f1 f7       	brne	.-4      	; 0x1500 <STEP_Motor_enu_Rotate+0x182>
    1504:	9a 8b       	std	Y+18, r25	; 0x12
    1506:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1508:	8b 89       	ldd	r24, Y+19	; 0x13
    150a:	9c 89       	ldd	r25, Y+20	; 0x14
    150c:	01 97       	sbiw	r24, 0x01	; 1
    150e:	9c 8b       	std	Y+20, r25	; 0x14
    1510:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1512:	8b 89       	ldd	r24, Y+19	; 0x13
    1514:	9c 89       	ldd	r25, Y+20	; 0x14
    1516:	00 97       	sbiw	r24, 0x00	; 0
    1518:	69 f7       	brne	.-38     	; 0x14f4 <STEP_Motor_enu_Rotate+0x176>
    151a:	14 c0       	rjmp	.+40     	; 0x1544 <STEP_Motor_enu_Rotate+0x1c6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    151c:	6d 89       	ldd	r22, Y+21	; 0x15
    151e:	7e 89       	ldd	r23, Y+22	; 0x16
    1520:	8f 89       	ldd	r24, Y+23	; 0x17
    1522:	98 8d       	ldd	r25, Y+24	; 0x18
    1524:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1528:	dc 01       	movw	r26, r24
    152a:	cb 01       	movw	r24, r22
    152c:	9c 8b       	std	Y+20, r25	; 0x14
    152e:	8b 8b       	std	Y+19, r24	; 0x13
    1530:	8b 89       	ldd	r24, Y+19	; 0x13
    1532:	9c 89       	ldd	r25, Y+20	; 0x14
    1534:	98 8b       	std	Y+16, r25	; 0x10
    1536:	8f 87       	std	Y+15, r24	; 0x0f
    1538:	8f 85       	ldd	r24, Y+15	; 0x0f
    153a:	98 89       	ldd	r25, Y+16	; 0x10
    153c:	01 97       	sbiw	r24, 0x01	; 1
    153e:	f1 f7       	brne	.-4      	; 0x153c <STEP_Motor_enu_Rotate+0x1be>
    1540:	98 8b       	std	Y+16, r25	; 0x10
    1542:	8f 87       	std	Y+15, r24	; 0x0f
                _delay_ms(delay);
                state = 0x0F;
    1544:	8f e0       	ldi	r24, 0x0F	; 15
    1546:	89 a3       	std	Y+33, r24	; 0x21
    {
        u8 state = MOTOR_PINS_STATE; // 0000 1111
        u16 Local_u16_numOFSteps = Copy_u16_Angle / STEP_ANGLE;
        if (Copy_u8_Direction == CW)
        {
            for (u8 Local_u8_Iterator = 0; Local_u8_Iterator < Local_u16_numOFSteps; Local_u8_Iterator++)
    1548:	8e 8d       	ldd	r24, Y+30	; 0x1e
    154a:	8f 5f       	subi	r24, 0xFF	; 255
    154c:	8e 8f       	std	Y+30, r24	; 0x1e
    154e:	8e 8d       	ldd	r24, Y+30	; 0x1e
    1550:	28 2f       	mov	r18, r24
    1552:	30 e0       	ldi	r19, 0x00	; 0
    1554:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1556:	98 a1       	ldd	r25, Y+32	; 0x20
    1558:	28 17       	cp	r18, r24
    155a:	39 07       	cpc	r19, r25
    155c:	08 f4       	brcc	.+2      	; 0x1560 <STEP_Motor_enu_Rotate+0x1e2>
    155e:	3e cf       	rjmp	.-388    	; 0x13dc <STEP_Motor_enu_Rotate+0x5e>
    1560:	ca c0       	rjmp	.+404    	; 0x16f6 <STEP_Motor_enu_Rotate+0x378>
                DIO_enu_SetPinValue(STEPPER_MOTOR_PORT, STEPPER_MOTOR_PIN1, (state>>SHIFT_3BIT)&MASK_BIT);
                _delay_ms(delay);
                state = 0x0F;
            }
        }
        else if (Copy_u8_Direction == CCW)
    1562:	8b a1       	ldd	r24, Y+35	; 0x23
    1564:	88 23       	and	r24, r24
    1566:	09 f0       	breq	.+2      	; 0x156a <STEP_Motor_enu_Rotate+0x1ec>
    1568:	c6 c0       	rjmp	.+396    	; 0x16f6 <STEP_Motor_enu_Rotate+0x378>
        {
            for (u8 Local_u8_Iterator = 0; Local_u8_Iterator < Local_u16_numOFSteps; Local_u8_Iterator++)
    156a:	1d 8e       	std	Y+29, r1	; 0x1d
    156c:	b9 c0       	rjmp	.+370    	; 0x16e0 <STEP_Motor_enu_Rotate+0x362>
            {
                state &=  3<<(Local_u8_Iterator%4);
    156e:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1570:	88 2f       	mov	r24, r24
    1572:	90 e0       	ldi	r25, 0x00	; 0
    1574:	9c 01       	movw	r18, r24
    1576:	23 70       	andi	r18, 0x03	; 3
    1578:	30 70       	andi	r19, 0x00	; 0
    157a:	83 e0       	ldi	r24, 0x03	; 3
    157c:	90 e0       	ldi	r25, 0x00	; 0
    157e:	02 2e       	mov	r0, r18
    1580:	02 c0       	rjmp	.+4      	; 0x1586 <STEP_Motor_enu_Rotate+0x208>
    1582:	88 0f       	add	r24, r24
    1584:	99 1f       	adc	r25, r25
    1586:	0a 94       	dec	r0
    1588:	e2 f7       	brpl	.-8      	; 0x1582 <STEP_Motor_enu_Rotate+0x204>
    158a:	98 2f       	mov	r25, r24
    158c:	89 a1       	ldd	r24, Y+33	; 0x21
    158e:	89 23       	and	r24, r25
    1590:	89 a3       	std	Y+33, r24	; 0x21
                if((Local_u8_Iterator%4) == 3) state = EDGE_STATE;
    1592:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1594:	88 2f       	mov	r24, r24
    1596:	90 e0       	ldi	r25, 0x00	; 0
    1598:	83 70       	andi	r24, 0x03	; 3
    159a:	90 70       	andi	r25, 0x00	; 0
    159c:	83 30       	cpi	r24, 0x03	; 3
    159e:	91 05       	cpc	r25, r1
    15a0:	11 f4       	brne	.+4      	; 0x15a6 <STEP_Motor_enu_Rotate+0x228>
    15a2:	89 e0       	ldi	r24, 0x09	; 9
    15a4:	89 a3       	std	Y+33, r24	; 0x21
                DIO_enu_SetPinValue(STEPPER_MOTOR_PORT, STEPPER_MOTOR_PIN1, (state>>SHIFT_0BIT)&MASK_BIT);
    15a6:	89 a1       	ldd	r24, Y+33	; 0x21
    15a8:	98 2f       	mov	r25, r24
    15aa:	91 70       	andi	r25, 0x01	; 1
    15ac:	81 e0       	ldi	r24, 0x01	; 1
    15ae:	60 e0       	ldi	r22, 0x00	; 0
    15b0:	49 2f       	mov	r20, r25
    15b2:	0e 94 72 29 	call	0x52e4	; 0x52e4 <DIO_enu_SetPinValue>
                DIO_enu_SetPinValue(STEPPER_MOTOR_PORT, STEPPER_MOTOR_PIN2, (state>>SHIFT_1BIT)&MASK_BIT);
    15b6:	89 a1       	ldd	r24, Y+33	; 0x21
    15b8:	86 95       	lsr	r24
    15ba:	98 2f       	mov	r25, r24
    15bc:	91 70       	andi	r25, 0x01	; 1
    15be:	81 e0       	ldi	r24, 0x01	; 1
    15c0:	61 e0       	ldi	r22, 0x01	; 1
    15c2:	49 2f       	mov	r20, r25
    15c4:	0e 94 72 29 	call	0x52e4	; 0x52e4 <DIO_enu_SetPinValue>
                DIO_enu_SetPinValue(STEPPER_MOTOR_PORT, STEPPER_MOTOR_PIN3, (state>>SHIFT_2BIT)&MASK_BIT);
    15c8:	89 a1       	ldd	r24, Y+33	; 0x21
    15ca:	86 95       	lsr	r24
    15cc:	86 95       	lsr	r24
    15ce:	98 2f       	mov	r25, r24
    15d0:	91 70       	andi	r25, 0x01	; 1
    15d2:	81 e0       	ldi	r24, 0x01	; 1
    15d4:	62 e0       	ldi	r22, 0x02	; 2
    15d6:	49 2f       	mov	r20, r25
    15d8:	0e 94 72 29 	call	0x52e4	; 0x52e4 <DIO_enu_SetPinValue>
                DIO_enu_SetPinValue(STEPPER_MOTOR_PORT, STEPPER_MOTOR_PIN4, (state>>SHIFT_3BIT)&MASK_BIT);
    15dc:	89 a1       	ldd	r24, Y+33	; 0x21
    15de:	86 95       	lsr	r24
    15e0:	86 95       	lsr	r24
    15e2:	86 95       	lsr	r24
    15e4:	98 2f       	mov	r25, r24
    15e6:	91 70       	andi	r25, 0x01	; 1
    15e8:	81 e0       	ldi	r24, 0x01	; 1
    15ea:	63 e0       	ldi	r22, 0x03	; 3
    15ec:	49 2f       	mov	r20, r25
    15ee:	0e 94 72 29 	call	0x52e4	; 0x52e4 <DIO_enu_SetPinValue>
    15f2:	80 e0       	ldi	r24, 0x00	; 0
    15f4:	90 e0       	ldi	r25, 0x00	; 0
    15f6:	aa ef       	ldi	r26, 0xFA	; 250
    15f8:	b2 e4       	ldi	r27, 0x42	; 66
    15fa:	8b 87       	std	Y+11, r24	; 0x0b
    15fc:	9c 87       	std	Y+12, r25	; 0x0c
    15fe:	ad 87       	std	Y+13, r26	; 0x0d
    1600:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1602:	6b 85       	ldd	r22, Y+11	; 0x0b
    1604:	7c 85       	ldd	r23, Y+12	; 0x0c
    1606:	8d 85       	ldd	r24, Y+13	; 0x0d
    1608:	9e 85       	ldd	r25, Y+14	; 0x0e
    160a:	20 e0       	ldi	r18, 0x00	; 0
    160c:	30 e0       	ldi	r19, 0x00	; 0
    160e:	4a e7       	ldi	r20, 0x7A	; 122
    1610:	55 e4       	ldi	r21, 0x45	; 69
    1612:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1616:	dc 01       	movw	r26, r24
    1618:	cb 01       	movw	r24, r22
    161a:	8f 83       	std	Y+7, r24	; 0x07
    161c:	98 87       	std	Y+8, r25	; 0x08
    161e:	a9 87       	std	Y+9, r26	; 0x09
    1620:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1622:	6f 81       	ldd	r22, Y+7	; 0x07
    1624:	78 85       	ldd	r23, Y+8	; 0x08
    1626:	89 85       	ldd	r24, Y+9	; 0x09
    1628:	9a 85       	ldd	r25, Y+10	; 0x0a
    162a:	20 e0       	ldi	r18, 0x00	; 0
    162c:	30 e0       	ldi	r19, 0x00	; 0
    162e:	40 e8       	ldi	r20, 0x80	; 128
    1630:	5f e3       	ldi	r21, 0x3F	; 63
    1632:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1636:	88 23       	and	r24, r24
    1638:	2c f4       	brge	.+10     	; 0x1644 <STEP_Motor_enu_Rotate+0x2c6>
		__ticks = 1;
    163a:	81 e0       	ldi	r24, 0x01	; 1
    163c:	90 e0       	ldi	r25, 0x00	; 0
    163e:	9e 83       	std	Y+6, r25	; 0x06
    1640:	8d 83       	std	Y+5, r24	; 0x05
    1642:	3f c0       	rjmp	.+126    	; 0x16c2 <STEP_Motor_enu_Rotate+0x344>
	else if (__tmp > 65535)
    1644:	6f 81       	ldd	r22, Y+7	; 0x07
    1646:	78 85       	ldd	r23, Y+8	; 0x08
    1648:	89 85       	ldd	r24, Y+9	; 0x09
    164a:	9a 85       	ldd	r25, Y+10	; 0x0a
    164c:	20 e0       	ldi	r18, 0x00	; 0
    164e:	3f ef       	ldi	r19, 0xFF	; 255
    1650:	4f e7       	ldi	r20, 0x7F	; 127
    1652:	57 e4       	ldi	r21, 0x47	; 71
    1654:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1658:	18 16       	cp	r1, r24
    165a:	4c f5       	brge	.+82     	; 0x16ae <STEP_Motor_enu_Rotate+0x330>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    165c:	6b 85       	ldd	r22, Y+11	; 0x0b
    165e:	7c 85       	ldd	r23, Y+12	; 0x0c
    1660:	8d 85       	ldd	r24, Y+13	; 0x0d
    1662:	9e 85       	ldd	r25, Y+14	; 0x0e
    1664:	20 e0       	ldi	r18, 0x00	; 0
    1666:	30 e0       	ldi	r19, 0x00	; 0
    1668:	40 e2       	ldi	r20, 0x20	; 32
    166a:	51 e4       	ldi	r21, 0x41	; 65
    166c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1670:	dc 01       	movw	r26, r24
    1672:	cb 01       	movw	r24, r22
    1674:	bc 01       	movw	r22, r24
    1676:	cd 01       	movw	r24, r26
    1678:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    167c:	dc 01       	movw	r26, r24
    167e:	cb 01       	movw	r24, r22
    1680:	9e 83       	std	Y+6, r25	; 0x06
    1682:	8d 83       	std	Y+5, r24	; 0x05
    1684:	0f c0       	rjmp	.+30     	; 0x16a4 <STEP_Motor_enu_Rotate+0x326>
    1686:	80 e9       	ldi	r24, 0x90	; 144
    1688:	91 e0       	ldi	r25, 0x01	; 1
    168a:	9c 83       	std	Y+4, r25	; 0x04
    168c:	8b 83       	std	Y+3, r24	; 0x03
    168e:	8b 81       	ldd	r24, Y+3	; 0x03
    1690:	9c 81       	ldd	r25, Y+4	; 0x04
    1692:	01 97       	sbiw	r24, 0x01	; 1
    1694:	f1 f7       	brne	.-4      	; 0x1692 <STEP_Motor_enu_Rotate+0x314>
    1696:	9c 83       	std	Y+4, r25	; 0x04
    1698:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    169a:	8d 81       	ldd	r24, Y+5	; 0x05
    169c:	9e 81       	ldd	r25, Y+6	; 0x06
    169e:	01 97       	sbiw	r24, 0x01	; 1
    16a0:	9e 83       	std	Y+6, r25	; 0x06
    16a2:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    16a4:	8d 81       	ldd	r24, Y+5	; 0x05
    16a6:	9e 81       	ldd	r25, Y+6	; 0x06
    16a8:	00 97       	sbiw	r24, 0x00	; 0
    16aa:	69 f7       	brne	.-38     	; 0x1686 <STEP_Motor_enu_Rotate+0x308>
    16ac:	14 c0       	rjmp	.+40     	; 0x16d6 <STEP_Motor_enu_Rotate+0x358>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    16ae:	6f 81       	ldd	r22, Y+7	; 0x07
    16b0:	78 85       	ldd	r23, Y+8	; 0x08
    16b2:	89 85       	ldd	r24, Y+9	; 0x09
    16b4:	9a 85       	ldd	r25, Y+10	; 0x0a
    16b6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    16ba:	dc 01       	movw	r26, r24
    16bc:	cb 01       	movw	r24, r22
    16be:	9e 83       	std	Y+6, r25	; 0x06
    16c0:	8d 83       	std	Y+5, r24	; 0x05
    16c2:	8d 81       	ldd	r24, Y+5	; 0x05
    16c4:	9e 81       	ldd	r25, Y+6	; 0x06
    16c6:	9a 83       	std	Y+2, r25	; 0x02
    16c8:	89 83       	std	Y+1, r24	; 0x01
    16ca:	89 81       	ldd	r24, Y+1	; 0x01
    16cc:	9a 81       	ldd	r25, Y+2	; 0x02
    16ce:	01 97       	sbiw	r24, 0x01	; 1
    16d0:	f1 f7       	brne	.-4      	; 0x16ce <STEP_Motor_enu_Rotate+0x350>
    16d2:	9a 83       	std	Y+2, r25	; 0x02
    16d4:	89 83       	std	Y+1, r24	; 0x01
                _delay_ms(delay);
                state = 0x0F;
    16d6:	8f e0       	ldi	r24, 0x0F	; 15
    16d8:	89 a3       	std	Y+33, r24	; 0x21
                state = 0x0F;
            }
        }
        else if (Copy_u8_Direction == CCW)
        {
            for (u8 Local_u8_Iterator = 0; Local_u8_Iterator < Local_u16_numOFSteps; Local_u8_Iterator++)
    16da:	8d 8d       	ldd	r24, Y+29	; 0x1d
    16dc:	8f 5f       	subi	r24, 0xFF	; 255
    16de:	8d 8f       	std	Y+29, r24	; 0x1d
    16e0:	8d 8d       	ldd	r24, Y+29	; 0x1d
    16e2:	28 2f       	mov	r18, r24
    16e4:	30 e0       	ldi	r19, 0x00	; 0
    16e6:	8f 8d       	ldd	r24, Y+31	; 0x1f
    16e8:	98 a1       	ldd	r25, Y+32	; 0x20
    16ea:	28 17       	cp	r18, r24
    16ec:	39 07       	cpc	r19, r25
    16ee:	08 f4       	brcc	.+2      	; 0x16f2 <STEP_Motor_enu_Rotate+0x374>
    16f0:	3e cf       	rjmp	.-388    	; 0x156e <STEP_Motor_enu_Rotate+0x1f0>
    16f2:	01 c0       	rjmp	.+2      	; 0x16f6 <STEP_Motor_enu_Rotate+0x378>
                state = 0x0F;
            }
        }
    }else
    {
        Local_u8_errorState = STATE_NOT_OK;
    16f4:	1a a2       	std	Y+34, r1	; 0x22
    }
    return Local_u8_errorState;
    16f6:	8a a1       	ldd	r24, Y+34	; 0x22
}
    16f8:	a5 96       	adiw	r28, 0x25	; 37
    16fa:	0f b6       	in	r0, 0x3f	; 63
    16fc:	f8 94       	cli
    16fe:	de bf       	out	0x3e, r29	; 62
    1700:	0f be       	out	0x3f, r0	; 63
    1702:	cd bf       	out	0x3d, r28	; 61
    1704:	cf 91       	pop	r28
    1706:	df 91       	pop	r29
    1708:	08 95       	ret

0000170a <STEP_Motor_enu_Stop>:

ES_t STEP_Motor_enu_Stop()
{
    170a:	df 93       	push	r29
    170c:	cf 93       	push	r28
    170e:	cd b7       	in	r28, 0x3d	; 61
    1710:	de b7       	in	r29, 0x3e	; 62
    1712:	2e 97       	sbiw	r28, 0x0e	; 14
    1714:	0f b6       	in	r0, 0x3f	; 63
    1716:	f8 94       	cli
    1718:	de bf       	out	0x3e, r29	; 62
    171a:	0f be       	out	0x3f, r0	; 63
    171c:	cd bf       	out	0x3d, r28	; 61
    DIO_enu_SetPinValue(STEPPER_MOTOR_PORT, STEPPER_MOTOR_PIN1, DIO_U8_LOW);
    171e:	81 e0       	ldi	r24, 0x01	; 1
    1720:	60 e0       	ldi	r22, 0x00	; 0
    1722:	40 e0       	ldi	r20, 0x00	; 0
    1724:	0e 94 72 29 	call	0x52e4	; 0x52e4 <DIO_enu_SetPinValue>
    DIO_enu_SetPinValue(STEPPER_MOTOR_PORT, STEPPER_MOTOR_PIN2, DIO_U8_LOW);
    1728:	81 e0       	ldi	r24, 0x01	; 1
    172a:	61 e0       	ldi	r22, 0x01	; 1
    172c:	40 e0       	ldi	r20, 0x00	; 0
    172e:	0e 94 72 29 	call	0x52e4	; 0x52e4 <DIO_enu_SetPinValue>
    DIO_enu_SetPinValue(STEPPER_MOTOR_PORT, STEPPER_MOTOR_PIN3, DIO_U8_LOW);
    1732:	81 e0       	ldi	r24, 0x01	; 1
    1734:	62 e0       	ldi	r22, 0x02	; 2
    1736:	40 e0       	ldi	r20, 0x00	; 0
    1738:	0e 94 72 29 	call	0x52e4	; 0x52e4 <DIO_enu_SetPinValue>
    DIO_enu_SetPinValue(STEPPER_MOTOR_PORT, STEPPER_MOTOR_PIN4, DIO_U8_LOW);
    173c:	81 e0       	ldi	r24, 0x01	; 1
    173e:	63 e0       	ldi	r22, 0x03	; 3
    1740:	40 e0       	ldi	r20, 0x00	; 0
    1742:	0e 94 72 29 	call	0x52e4	; 0x52e4 <DIO_enu_SetPinValue>
    1746:	80 e0       	ldi	r24, 0x00	; 0
    1748:	90 e0       	ldi	r25, 0x00	; 0
    174a:	aa ef       	ldi	r26, 0xFA	; 250
    174c:	b2 e4       	ldi	r27, 0x42	; 66
    174e:	8b 87       	std	Y+11, r24	; 0x0b
    1750:	9c 87       	std	Y+12, r25	; 0x0c
    1752:	ad 87       	std	Y+13, r26	; 0x0d
    1754:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1756:	6b 85       	ldd	r22, Y+11	; 0x0b
    1758:	7c 85       	ldd	r23, Y+12	; 0x0c
    175a:	8d 85       	ldd	r24, Y+13	; 0x0d
    175c:	9e 85       	ldd	r25, Y+14	; 0x0e
    175e:	20 e0       	ldi	r18, 0x00	; 0
    1760:	30 e0       	ldi	r19, 0x00	; 0
    1762:	4a e7       	ldi	r20, 0x7A	; 122
    1764:	55 e4       	ldi	r21, 0x45	; 69
    1766:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    176a:	dc 01       	movw	r26, r24
    176c:	cb 01       	movw	r24, r22
    176e:	8f 83       	std	Y+7, r24	; 0x07
    1770:	98 87       	std	Y+8, r25	; 0x08
    1772:	a9 87       	std	Y+9, r26	; 0x09
    1774:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1776:	6f 81       	ldd	r22, Y+7	; 0x07
    1778:	78 85       	ldd	r23, Y+8	; 0x08
    177a:	89 85       	ldd	r24, Y+9	; 0x09
    177c:	9a 85       	ldd	r25, Y+10	; 0x0a
    177e:	20 e0       	ldi	r18, 0x00	; 0
    1780:	30 e0       	ldi	r19, 0x00	; 0
    1782:	40 e8       	ldi	r20, 0x80	; 128
    1784:	5f e3       	ldi	r21, 0x3F	; 63
    1786:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    178a:	88 23       	and	r24, r24
    178c:	2c f4       	brge	.+10     	; 0x1798 <STEP_Motor_enu_Stop+0x8e>
		__ticks = 1;
    178e:	81 e0       	ldi	r24, 0x01	; 1
    1790:	90 e0       	ldi	r25, 0x00	; 0
    1792:	9e 83       	std	Y+6, r25	; 0x06
    1794:	8d 83       	std	Y+5, r24	; 0x05
    1796:	3f c0       	rjmp	.+126    	; 0x1816 <STEP_Motor_enu_Stop+0x10c>
	else if (__tmp > 65535)
    1798:	6f 81       	ldd	r22, Y+7	; 0x07
    179a:	78 85       	ldd	r23, Y+8	; 0x08
    179c:	89 85       	ldd	r24, Y+9	; 0x09
    179e:	9a 85       	ldd	r25, Y+10	; 0x0a
    17a0:	20 e0       	ldi	r18, 0x00	; 0
    17a2:	3f ef       	ldi	r19, 0xFF	; 255
    17a4:	4f e7       	ldi	r20, 0x7F	; 127
    17a6:	57 e4       	ldi	r21, 0x47	; 71
    17a8:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    17ac:	18 16       	cp	r1, r24
    17ae:	4c f5       	brge	.+82     	; 0x1802 <STEP_Motor_enu_Stop+0xf8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    17b0:	6b 85       	ldd	r22, Y+11	; 0x0b
    17b2:	7c 85       	ldd	r23, Y+12	; 0x0c
    17b4:	8d 85       	ldd	r24, Y+13	; 0x0d
    17b6:	9e 85       	ldd	r25, Y+14	; 0x0e
    17b8:	20 e0       	ldi	r18, 0x00	; 0
    17ba:	30 e0       	ldi	r19, 0x00	; 0
    17bc:	40 e2       	ldi	r20, 0x20	; 32
    17be:	51 e4       	ldi	r21, 0x41	; 65
    17c0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    17c4:	dc 01       	movw	r26, r24
    17c6:	cb 01       	movw	r24, r22
    17c8:	bc 01       	movw	r22, r24
    17ca:	cd 01       	movw	r24, r26
    17cc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    17d0:	dc 01       	movw	r26, r24
    17d2:	cb 01       	movw	r24, r22
    17d4:	9e 83       	std	Y+6, r25	; 0x06
    17d6:	8d 83       	std	Y+5, r24	; 0x05
    17d8:	0f c0       	rjmp	.+30     	; 0x17f8 <STEP_Motor_enu_Stop+0xee>
    17da:	80 e9       	ldi	r24, 0x90	; 144
    17dc:	91 e0       	ldi	r25, 0x01	; 1
    17de:	9c 83       	std	Y+4, r25	; 0x04
    17e0:	8b 83       	std	Y+3, r24	; 0x03
    17e2:	8b 81       	ldd	r24, Y+3	; 0x03
    17e4:	9c 81       	ldd	r25, Y+4	; 0x04
    17e6:	01 97       	sbiw	r24, 0x01	; 1
    17e8:	f1 f7       	brne	.-4      	; 0x17e6 <STEP_Motor_enu_Stop+0xdc>
    17ea:	9c 83       	std	Y+4, r25	; 0x04
    17ec:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    17ee:	8d 81       	ldd	r24, Y+5	; 0x05
    17f0:	9e 81       	ldd	r25, Y+6	; 0x06
    17f2:	01 97       	sbiw	r24, 0x01	; 1
    17f4:	9e 83       	std	Y+6, r25	; 0x06
    17f6:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    17f8:	8d 81       	ldd	r24, Y+5	; 0x05
    17fa:	9e 81       	ldd	r25, Y+6	; 0x06
    17fc:	00 97       	sbiw	r24, 0x00	; 0
    17fe:	69 f7       	brne	.-38     	; 0x17da <STEP_Motor_enu_Stop+0xd0>
    1800:	14 c0       	rjmp	.+40     	; 0x182a <STEP_Motor_enu_Stop+0x120>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1802:	6f 81       	ldd	r22, Y+7	; 0x07
    1804:	78 85       	ldd	r23, Y+8	; 0x08
    1806:	89 85       	ldd	r24, Y+9	; 0x09
    1808:	9a 85       	ldd	r25, Y+10	; 0x0a
    180a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    180e:	dc 01       	movw	r26, r24
    1810:	cb 01       	movw	r24, r22
    1812:	9e 83       	std	Y+6, r25	; 0x06
    1814:	8d 83       	std	Y+5, r24	; 0x05
    1816:	8d 81       	ldd	r24, Y+5	; 0x05
    1818:	9e 81       	ldd	r25, Y+6	; 0x06
    181a:	9a 83       	std	Y+2, r25	; 0x02
    181c:	89 83       	std	Y+1, r24	; 0x01
    181e:	89 81       	ldd	r24, Y+1	; 0x01
    1820:	9a 81       	ldd	r25, Y+2	; 0x02
    1822:	01 97       	sbiw	r24, 0x01	; 1
    1824:	f1 f7       	brne	.-4      	; 0x1822 <STEP_Motor_enu_Stop+0x118>
    1826:	9a 83       	std	Y+2, r25	; 0x02
    1828:	89 83       	std	Y+1, r24	; 0x01
    _delay_ms(delay);
    return STATE_OK;
    182a:	81 e0       	ldi	r24, 0x01	; 1
}
    182c:	2e 96       	adiw	r28, 0x0e	; 14
    182e:	0f b6       	in	r0, 0x3f	; 63
    1830:	f8 94       	cli
    1832:	de bf       	out	0x3e, r29	; 62
    1834:	0f be       	out	0x3f, r0	; 63
    1836:	cd bf       	out	0x3d, r28	; 61
    1838:	cf 91       	pop	r28
    183a:	df 91       	pop	r29
    183c:	08 95       	ret

0000183e <sevenSeg_enu_displayNum>:

u8 SevenSeg_au8_Numbers[10] = {0b00111111,0b00000110,0b01011011,0b01001111,0b01100110,
                              0b01101101,0b01111101,0b00000111,0b01111111,0b01101111};
u8 SevenSeg_au8_Pins[7] = {PIN_U8_A,PIN_U8_B,PIN_U8_C,PIN_U8_D,PIN_U8_E,PIN_U8_F,PIN_U8_G};   
ES_t sevenSeg_enu_displayNum(u8 Copy_u8_Num)
{
    183e:	df 93       	push	r29
    1840:	cf 93       	push	r28
    1842:	00 d0       	rcall	.+0      	; 0x1844 <sevenSeg_enu_displayNum+0x6>
    1844:	0f 92       	push	r0
    1846:	cd b7       	in	r28, 0x3d	; 61
    1848:	de b7       	in	r29, 0x3e	; 62
    184a:	8b 83       	std	Y+3, r24	; 0x03
    DIO_enu_SetPinDirection(SEVEN_SEGMENT_U8_E_PORT, SEVEN_SEGMENT_U8_E_PIN, DIO_U8_OUTPUT);
    184c:	82 e0       	ldi	r24, 0x02	; 2
    184e:	66 e0       	ldi	r22, 0x06	; 6
    1850:	41 e0       	ldi	r20, 0x01	; 1
    1852:	0e 94 48 28 	call	0x5090	; 0x5090 <DIO_enu_SetPinDirection>
    DIO_enu_SetPortDirection(SEVEN_SEGMENT_U8_PORT,DIO_U8_OUTPUT);
    1856:	80 e0       	ldi	r24, 0x00	; 0
    1858:	61 e0       	ldi	r22, 0x01	; 1
    185a:	0e 94 35 2b 	call	0x566a	; 0x566a <DIO_enu_SetPortDirection>
    u8 Local_u8_errorState = STATE_OK;
    185e:	81 e0       	ldi	r24, 0x01	; 1
    1860:	8a 83       	std	Y+2, r24	; 0x02
    if(Copy_u8_Num>= 0 && Copy_u8_Num<=9){
    1862:	8b 81       	ldd	r24, Y+3	; 0x03
    1864:	8a 30       	cpi	r24, 0x0A	; 10
    1866:	78 f5       	brcc	.+94     	; 0x18c6 <sevenSeg_enu_displayNum+0x88>
        for (u8 Local_u8_iterator = 0; Local_u8_iterator < 7; Local_u8_iterator++)
        {
           DIO_enu_SetPinValue(SEVEN_SEGMENT_U8_PORT,SevenSeg_au8_Pins[Local_u8_iterator],(~SevenSeg_au8_Numbers[Copy_u8_Num]>>Local_u8_iterator) & MASK_BIT);
        }
        #elif SEVEN_SEGMENT_TYPE == FARES_KIT
        DIO_enu_SetPinValue(SEVEN_SEGMENT_U8_E_PORT, SEVEN_SEGMENT_U8_E_PIN, DIO_U8_HIGH);
    1868:	82 e0       	ldi	r24, 0x02	; 2
    186a:	66 e0       	ldi	r22, 0x06	; 6
    186c:	41 e0       	ldi	r20, 0x01	; 1
    186e:	0e 94 72 29 	call	0x52e4	; 0x52e4 <DIO_enu_SetPinValue>
        for (u8 Local_u8_iterator = 0; Local_u8_iterator < 7; Local_u8_iterator++)
    1872:	19 82       	std	Y+1, r1	; 0x01
    1874:	24 c0       	rjmp	.+72     	; 0x18be <sevenSeg_enu_displayNum+0x80>
        {
           DIO_enu_SetPinValue(SEVEN_SEGMENT_U8_PORT,SevenSeg_au8_Pins[Local_u8_iterator],(SevenSeg_au8_Numbers[Copy_u8_Num]>>Local_u8_iterator) & MASK_BIT);
    1876:	89 81       	ldd	r24, Y+1	; 0x01
    1878:	88 2f       	mov	r24, r24
    187a:	90 e0       	ldi	r25, 0x00	; 0
    187c:	fc 01       	movw	r30, r24
    187e:	e6 5d       	subi	r30, 0xD6	; 214
    1880:	fe 4f       	sbci	r31, 0xFE	; 254
    1882:	40 81       	ld	r20, Z
    1884:	8b 81       	ldd	r24, Y+3	; 0x03
    1886:	88 2f       	mov	r24, r24
    1888:	90 e0       	ldi	r25, 0x00	; 0
    188a:	fc 01       	movw	r30, r24
    188c:	e0 5e       	subi	r30, 0xE0	; 224
    188e:	fe 4f       	sbci	r31, 0xFE	; 254
    1890:	80 81       	ld	r24, Z
    1892:	28 2f       	mov	r18, r24
    1894:	30 e0       	ldi	r19, 0x00	; 0
    1896:	89 81       	ldd	r24, Y+1	; 0x01
    1898:	88 2f       	mov	r24, r24
    189a:	90 e0       	ldi	r25, 0x00	; 0
    189c:	b9 01       	movw	r22, r18
    189e:	02 c0       	rjmp	.+4      	; 0x18a4 <sevenSeg_enu_displayNum+0x66>
    18a0:	75 95       	asr	r23
    18a2:	67 95       	ror	r22
    18a4:	8a 95       	dec	r24
    18a6:	e2 f7       	brpl	.-8      	; 0x18a0 <sevenSeg_enu_displayNum+0x62>
    18a8:	cb 01       	movw	r24, r22
    18aa:	98 2f       	mov	r25, r24
    18ac:	91 70       	andi	r25, 0x01	; 1
    18ae:	80 e0       	ldi	r24, 0x00	; 0
    18b0:	64 2f       	mov	r22, r20
    18b2:	49 2f       	mov	r20, r25
    18b4:	0e 94 72 29 	call	0x52e4	; 0x52e4 <DIO_enu_SetPinValue>
        {
           DIO_enu_SetPinValue(SEVEN_SEGMENT_U8_PORT,SevenSeg_au8_Pins[Local_u8_iterator],(~SevenSeg_au8_Numbers[Copy_u8_Num]>>Local_u8_iterator) & MASK_BIT);
        }
        #elif SEVEN_SEGMENT_TYPE == FARES_KIT
        DIO_enu_SetPinValue(SEVEN_SEGMENT_U8_E_PORT, SEVEN_SEGMENT_U8_E_PIN, DIO_U8_HIGH);
        for (u8 Local_u8_iterator = 0; Local_u8_iterator < 7; Local_u8_iterator++)
    18b8:	89 81       	ldd	r24, Y+1	; 0x01
    18ba:	8f 5f       	subi	r24, 0xFF	; 255
    18bc:	89 83       	std	Y+1, r24	; 0x01
    18be:	89 81       	ldd	r24, Y+1	; 0x01
    18c0:	87 30       	cpi	r24, 0x07	; 7
    18c2:	c8 f2       	brcs	.-78     	; 0x1876 <sevenSeg_enu_displayNum+0x38>
    18c4:	01 c0       	rjmp	.+2      	; 0x18c8 <sevenSeg_enu_displayNum+0x8a>
        
        #endif


    }else{
        Local_u8_errorState = STATE_NOT_OK;
    18c6:	1a 82       	std	Y+2, r1	; 0x02
    }
    return Local_u8_errorState;
    18c8:	8a 81       	ldd	r24, Y+2	; 0x02
}
    18ca:	0f 90       	pop	r0
    18cc:	0f 90       	pop	r0
    18ce:	0f 90       	pop	r0
    18d0:	cf 91       	pop	r28
    18d2:	df 91       	pop	r29
    18d4:	08 95       	ret

000018d6 <Servo_enu_Init>:
#include"../../1-MCAL/Timers/Timer_Interface.h"

#include"Servo_Config.h"
#include"Servo_Private.h"

ES_t Servo_enu_Init(u8 Copy_Motor_PD4_State,u8 Copy_Motor_PD5_State){
    18d6:	df 93       	push	r29
    18d8:	cf 93       	push	r28
    18da:	00 d0       	rcall	.+0      	; 0x18dc <Servo_enu_Init+0x6>
    18dc:	0f 92       	push	r0
    18de:	cd b7       	in	r28, 0x3d	; 61
    18e0:	de b7       	in	r29, 0x3e	; 62
    18e2:	8a 83       	std	Y+2, r24	; 0x02
    18e4:	6b 83       	std	Y+3, r22	; 0x03
    u8 Local_u8_errorState = STATE_OK;
    18e6:	81 e0       	ldi	r24, 0x01	; 1
    18e8:	89 83       	std	Y+1, r24	; 0x01
    if((Copy_Motor_PD4_State<2)&&(Copy_Motor_PD5_State<2)){
    18ea:	8a 81       	ldd	r24, Y+2	; 0x02
    18ec:	82 30       	cpi	r24, 0x02	; 2
    18ee:	10 f5       	brcc	.+68     	; 0x1934 <Servo_enu_Init+0x5e>
    18f0:	8b 81       	ldd	r24, Y+3	; 0x03
    18f2:	82 30       	cpi	r24, 0x02	; 2
    18f4:	f8 f4       	brcc	.+62     	; 0x1934 <Servo_enu_Init+0x5e>
        if(Copy_Motor_PD4_State == CONNECTED){
    18f6:	8a 81       	ldd	r24, Y+2	; 0x02
    18f8:	81 30       	cpi	r24, 0x01	; 1
    18fa:	51 f4       	brne	.+20     	; 0x1910 <Servo_enu_Init+0x3a>
            DIO_enu_SetPinDirection(DIO_U8_PORTD, DIO_U8_PIN4, DIO_U8_OUTPUT);
    18fc:	83 e0       	ldi	r24, 0x03	; 3
    18fe:	64 e0       	ldi	r22, 0x04	; 4
    1900:	41 e0       	ldi	r20, 0x01	; 1
    1902:	0e 94 48 28 	call	0x5090	; 0x5090 <DIO_enu_SetPinDirection>
            Timers_enu_Init(TIMER1, FAST_PWM_NON_INVERTING_COMB, CLK_8);
    1906:	81 e0       	ldi	r24, 0x01	; 1
    1908:	68 e0       	ldi	r22, 0x08	; 8
    190a:	42 e0       	ldi	r20, 0x02	; 2
    190c:	0e 94 1d 1b 	call	0x363a	; 0x363a <Timers_enu_Init>
        }
        if(Copy_Motor_PD5_State == CONNECTED){
    1910:	8b 81       	ldd	r24, Y+3	; 0x03
    1912:	81 30       	cpi	r24, 0x01	; 1
    1914:	51 f4       	brne	.+20     	; 0x192a <Servo_enu_Init+0x54>
            DIO_enu_SetPinDirection(DIO_U8_PORTD, DIO_U8_PIN5, DIO_U8_OUTPUT);
    1916:	83 e0       	ldi	r24, 0x03	; 3
    1918:	65 e0       	ldi	r22, 0x05	; 5
    191a:	41 e0       	ldi	r20, 0x01	; 1
    191c:	0e 94 48 28 	call	0x5090	; 0x5090 <DIO_enu_SetPinDirection>
            Timers_enu_Init(TIMER1, FAST_PWM_NON_INVERTING_COMA, CLK_8);
    1920:	81 e0       	ldi	r24, 0x01	; 1
    1922:	67 e0       	ldi	r22, 0x07	; 7
    1924:	42 e0       	ldi	r20, 0x02	; 2
    1926:	0e 94 1d 1b 	call	0x363a	; 0x363a <Timers_enu_Init>
        }
        Timers_enu_Timer1_setTopValue(SERVO_COMPLETE_CYCLE_TICKS - 1);
    192a:	8f e3       	ldi	r24, 0x3F	; 63
    192c:	9c e9       	ldi	r25, 0x9C	; 156
    192e:	0e 94 99 20 	call	0x4132	; 0x4132 <Timers_enu_Timer1_setTopValue>
    1932:	01 c0       	rjmp	.+2      	; 0x1936 <Servo_enu_Init+0x60>
    }else{
        Local_u8_errorState =STATE_NOT_OK;
    1934:	19 82       	std	Y+1, r1	; 0x01
    }
    return STATE_NOT_OK;
    1936:	80 e0       	ldi	r24, 0x00	; 0
}
    1938:	0f 90       	pop	r0
    193a:	0f 90       	pop	r0
    193c:	0f 90       	pop	r0
    193e:	cf 91       	pop	r28
    1940:	df 91       	pop	r29
    1942:	08 95       	ret

00001944 <Servo_enu_SetAngle>:
ES_t Servo_enu_SetAngle(u8 Copy_Motor,u8 Copy_u8_Angle){
    1944:	df 93       	push	r29
    1946:	cf 93       	push	r28
    1948:	cd b7       	in	r28, 0x3d	; 61
    194a:	de b7       	in	r29, 0x3e	; 62
    194c:	27 97       	sbiw	r28, 0x07	; 7
    194e:	0f b6       	in	r0, 0x3f	; 63
    1950:	f8 94       	cli
    1952:	de bf       	out	0x3e, r29	; 62
    1954:	0f be       	out	0x3f, r0	; 63
    1956:	cd bf       	out	0x3d, r28	; 61
    1958:	8c 83       	std	Y+4, r24	; 0x04
    195a:	6d 83       	std	Y+5, r22	; 0x05
    ES_t Local_u8_errorState = STATE_OK;
    195c:	81 e0       	ldi	r24, 0x01	; 1
    195e:	8b 83       	std	Y+3, r24	; 0x03
    if((Copy_Motor<=NUM_OF_MOTORS)&&(Copy_u8_Angle<=SERVO_MAX_ANGLE)){
    1960:	8c 81       	ldd	r24, Y+4	; 0x04
    1962:	83 30       	cpi	r24, 0x03	; 3
    1964:	08 f0       	brcs	.+2      	; 0x1968 <Servo_enu_SetAngle+0x24>
    1966:	46 c0       	rjmp	.+140    	; 0x19f4 <Servo_enu_SetAngle+0xb0>
    1968:	8d 81       	ldd	r24, Y+5	; 0x05
    196a:	85 3b       	cpi	r24, 0xB5	; 181
    196c:	08 f0       	brcs	.+2      	; 0x1970 <Servo_enu_SetAngle+0x2c>
    196e:	42 c0       	rjmp	.+132    	; 0x19f4 <Servo_enu_SetAngle+0xb0>
        u16 Servo_u16_OCR_Value = ((SERVO_MIN_TIME+(Copy_u8_Angle*SERVO_MIN_TIME)/SERVO_MAX_ANGLE)*2)-1;
    1970:	8d 81       	ldd	r24, Y+5	; 0x05
    1972:	88 2f       	mov	r24, r24
    1974:	90 e0       	ldi	r25, 0x00	; 0
    1976:	a0 e0       	ldi	r26, 0x00	; 0
    1978:	b0 e0       	ldi	r27, 0x00	; 0
    197a:	28 ee       	ldi	r18, 0xE8	; 232
    197c:	33 e0       	ldi	r19, 0x03	; 3
    197e:	40 e0       	ldi	r20, 0x00	; 0
    1980:	50 e0       	ldi	r21, 0x00	; 0
    1982:	bc 01       	movw	r22, r24
    1984:	cd 01       	movw	r24, r26
    1986:	0e 94 47 2e 	call	0x5c8e	; 0x5c8e <__mulsi3>
    198a:	dc 01       	movw	r26, r24
    198c:	cb 01       	movw	r24, r22
    198e:	24 eb       	ldi	r18, 0xB4	; 180
    1990:	30 e0       	ldi	r19, 0x00	; 0
    1992:	40 e0       	ldi	r20, 0x00	; 0
    1994:	50 e0       	ldi	r21, 0x00	; 0
    1996:	bc 01       	movw	r22, r24
    1998:	cd 01       	movw	r24, r26
    199a:	0e 94 7a 2e 	call	0x5cf4	; 0x5cf4 <__udivmodsi4>
    199e:	da 01       	movw	r26, r20
    19a0:	c9 01       	movw	r24, r18
    19a2:	88 51       	subi	r24, 0x18	; 24
    19a4:	9c 4f       	sbci	r25, 0xFC	; 252
    19a6:	af 4f       	sbci	r26, 0xFF	; 255
    19a8:	bf 4f       	sbci	r27, 0xFF	; 255
    19aa:	88 0f       	add	r24, r24
    19ac:	99 1f       	adc	r25, r25
    19ae:	aa 1f       	adc	r26, r26
    19b0:	bb 1f       	adc	r27, r27
    19b2:	01 97       	sbiw	r24, 0x01	; 1
    19b4:	9a 83       	std	Y+2, r25	; 0x02
    19b6:	89 83       	std	Y+1, r24	; 0x01
        switch (Copy_Motor)
    19b8:	8c 81       	ldd	r24, Y+4	; 0x04
    19ba:	28 2f       	mov	r18, r24
    19bc:	30 e0       	ldi	r19, 0x00	; 0
    19be:	3f 83       	std	Y+7, r19	; 0x07
    19c0:	2e 83       	std	Y+6, r18	; 0x06
    19c2:	8e 81       	ldd	r24, Y+6	; 0x06
    19c4:	9f 81       	ldd	r25, Y+7	; 0x07
    19c6:	81 30       	cpi	r24, 0x01	; 1
    19c8:	91 05       	cpc	r25, r1
    19ca:	31 f0       	breq	.+12     	; 0x19d8 <Servo_enu_SetAngle+0x94>
    19cc:	2e 81       	ldd	r18, Y+6	; 0x06
    19ce:	3f 81       	ldd	r19, Y+7	; 0x07
    19d0:	22 30       	cpi	r18, 0x02	; 2
    19d2:	31 05       	cpc	r19, r1
    19d4:	41 f0       	breq	.+16     	; 0x19e6 <Servo_enu_SetAngle+0xa2>
    19d6:	0f c0       	rjmp	.+30     	; 0x19f6 <Servo_enu_SetAngle+0xb2>
        {
        case MOTOR_1:Timers_enu_Timer1SetCompareValue(COMPARE_UNIT_B,Servo_u16_OCR_Value); break;
    19d8:	29 81       	ldd	r18, Y+1	; 0x01
    19da:	3a 81       	ldd	r19, Y+2	; 0x02
    19dc:	81 e0       	ldi	r24, 0x01	; 1
    19de:	b9 01       	movw	r22, r18
    19e0:	0e 94 ac 20 	call	0x4158	; 0x4158 <Timers_enu_Timer1SetCompareValue>
    19e4:	08 c0       	rjmp	.+16     	; 0x19f6 <Servo_enu_SetAngle+0xb2>
        case MOTOR_2:Timers_enu_Timer1SetCompareValue(COMPARE_UNIT_A,Servo_u16_OCR_Value); break;
    19e6:	29 81       	ldd	r18, Y+1	; 0x01
    19e8:	3a 81       	ldd	r19, Y+2	; 0x02
    19ea:	80 e0       	ldi	r24, 0x00	; 0
    19ec:	b9 01       	movw	r22, r18
    19ee:	0e 94 ac 20 	call	0x4158	; 0x4158 <Timers_enu_Timer1SetCompareValue>
    19f2:	01 c0       	rjmp	.+2      	; 0x19f6 <Servo_enu_SetAngle+0xb2>
        }
    }else{
        Local_u8_errorState = STATE_NOT_OK;
    19f4:	1b 82       	std	Y+3, r1	; 0x03
    }
    return Local_u8_errorState;
    19f6:	8b 81       	ldd	r24, Y+3	; 0x03
}
    19f8:	27 96       	adiw	r28, 0x07	; 7
    19fa:	0f b6       	in	r0, 0x3f	; 63
    19fc:	f8 94       	cli
    19fe:	de bf       	out	0x3e, r29	; 62
    1a00:	0f be       	out	0x3f, r0	; 63
    1a02:	cd bf       	out	0x3d, r28	; 61
    1a04:	cf 91       	pop	r28
    1a06:	df 91       	pop	r29
    1a08:	08 95       	ret

00001a0a <Servos_enu_Stop>:
ES_t Servos_enu_Stop(void){
    1a0a:	df 93       	push	r29
    1a0c:	cf 93       	push	r28
    1a0e:	cd b7       	in	r28, 0x3d	; 61
    1a10:	de b7       	in	r29, 0x3e	; 62
    Timers_enu_Stop(TIMER1);
    1a12:	81 e0       	ldi	r24, 0x01	; 1
    1a14:	0e 94 e3 20 	call	0x41c6	; 0x41c6 <Timers_enu_Stop>
    return STATE_OK;
    1a18:	81 e0       	ldi	r24, 0x01	; 1
}
    1a1a:	cf 91       	pop	r28
    1a1c:	df 91       	pop	r29
    1a1e:	08 95       	ret

00001a20 <LCD_enu_SendCmnd>:
#include "../../1-MCAL/DIO/DIO_interface.h"
/*HAL*/
#include "../../2-HAL/LCD/LCD_Private.h"
#include "../../2-HAL/LCD/LCD_Config.h"
ES_t LCD_enu_SendCmnd(u8 Copy_u8_Cmdn)
{
    1a20:	df 93       	push	r29
    1a22:	cf 93       	push	r28
    1a24:	cd b7       	in	r28, 0x3d	; 61
    1a26:	de b7       	in	r29, 0x3e	; 62
    1a28:	e1 97       	sbiw	r28, 0x31	; 49
    1a2a:	0f b6       	in	r0, 0x3f	; 63
    1a2c:	f8 94       	cli
    1a2e:	de bf       	out	0x3e, r29	; 62
    1a30:	0f be       	out	0x3f, r0	; 63
    1a32:	cd bf       	out	0x3d, r28	; 61
    1a34:	89 ab       	std	Y+49, r24	; 0x31
    DIO_enu_SetPinValue(LCD_U8_E_PORT, LCD_U8_E_PIN, DIO_U8_LOW);
    return STATE_OK;
#elif LCD_U8_MODE == LCD_U8_MODE_4BIT
    /*Send Command at 4-bit mode*/
    /* RS = 0 */
    DIO_enu_SetPinValue(LCD_U8_RS_PORT, LCD_U8_RS_PIN, DIO_U8_LOW);
    1a36:	80 e0       	ldi	r24, 0x00	; 0
    1a38:	61 e0       	ldi	r22, 0x01	; 1
    1a3a:	40 e0       	ldi	r20, 0x00	; 0
    1a3c:	0e 94 72 29 	call	0x52e4	; 0x52e4 <DIO_enu_SetPinValue>
    /* RW = 0 */
    DIO_enu_SetPinValue(LCD_U8_RW_PORT, LCD_U8_RW_PIN, DIO_U8_LOW);
    1a40:	80 e0       	ldi	r24, 0x00	; 0
    1a42:	60 e0       	ldi	r22, 0x00	; 0
    1a44:	40 e0       	ldi	r20, 0x00	; 0
    1a46:	0e 94 72 29 	call	0x52e4	; 0x52e4 <DIO_enu_SetPinValue>
    /*Write Command*/
    DIO_enu_SetPinValue(LCD_U8_DATA_PORT, D7, (Copy_u8_Cmdn >> SHIFT_7BIT) & MASK_BIT);
    1a4a:	89 a9       	ldd	r24, Y+49	; 0x31
    1a4c:	98 2f       	mov	r25, r24
    1a4e:	99 1f       	adc	r25, r25
    1a50:	99 27       	eor	r25, r25
    1a52:	99 1f       	adc	r25, r25
    1a54:	80 e0       	ldi	r24, 0x00	; 0
    1a56:	66 e0       	ldi	r22, 0x06	; 6
    1a58:	49 2f       	mov	r20, r25
    1a5a:	0e 94 72 29 	call	0x52e4	; 0x52e4 <DIO_enu_SetPinValue>
    DIO_enu_SetPinValue(LCD_U8_DATA_PORT, D6, (Copy_u8_Cmdn >> SHIFT_6BIT) & MASK_BIT);
    1a5e:	89 a9       	ldd	r24, Y+49	; 0x31
    1a60:	82 95       	swap	r24
    1a62:	86 95       	lsr	r24
    1a64:	86 95       	lsr	r24
    1a66:	83 70       	andi	r24, 0x03	; 3
    1a68:	98 2f       	mov	r25, r24
    1a6a:	91 70       	andi	r25, 0x01	; 1
    1a6c:	80 e0       	ldi	r24, 0x00	; 0
    1a6e:	65 e0       	ldi	r22, 0x05	; 5
    1a70:	49 2f       	mov	r20, r25
    1a72:	0e 94 72 29 	call	0x52e4	; 0x52e4 <DIO_enu_SetPinValue>
    DIO_enu_SetPinValue(LCD_U8_DATA_PORT, D5, (Copy_u8_Cmdn >> SHIFT_5BIT) & MASK_BIT);
    1a76:	89 a9       	ldd	r24, Y+49	; 0x31
    1a78:	82 95       	swap	r24
    1a7a:	86 95       	lsr	r24
    1a7c:	87 70       	andi	r24, 0x07	; 7
    1a7e:	98 2f       	mov	r25, r24
    1a80:	91 70       	andi	r25, 0x01	; 1
    1a82:	80 e0       	ldi	r24, 0x00	; 0
    1a84:	64 e0       	ldi	r22, 0x04	; 4
    1a86:	49 2f       	mov	r20, r25
    1a88:	0e 94 72 29 	call	0x52e4	; 0x52e4 <DIO_enu_SetPinValue>
    DIO_enu_SetPinValue(LCD_U8_DATA_PORT, D4, (Copy_u8_Cmdn >> SHIFT_4BIT) & MASK_BIT);
    1a8c:	89 a9       	ldd	r24, Y+49	; 0x31
    1a8e:	82 95       	swap	r24
    1a90:	8f 70       	andi	r24, 0x0F	; 15
    1a92:	98 2f       	mov	r25, r24
    1a94:	91 70       	andi	r25, 0x01	; 1
    1a96:	80 e0       	ldi	r24, 0x00	; 0
    1a98:	63 e0       	ldi	r22, 0x03	; 3
    1a9a:	49 2f       	mov	r20, r25
    1a9c:	0e 94 72 29 	call	0x52e4	; 0x52e4 <DIO_enu_SetPinValue>
    /* E = 1 */
    DIO_enu_SetPinValue(LCD_U8_E_PORT, LCD_U8_E_PIN, DIO_U8_HIGH);
    1aa0:	80 e0       	ldi	r24, 0x00	; 0
    1aa2:	62 e0       	ldi	r22, 0x02	; 2
    1aa4:	41 e0       	ldi	r20, 0x01	; 1
    1aa6:	0e 94 72 29 	call	0x52e4	; 0x52e4 <DIO_enu_SetPinValue>
    1aaa:	80 e0       	ldi	r24, 0x00	; 0
    1aac:	90 e0       	ldi	r25, 0x00	; 0
    1aae:	a0 e8       	ldi	r26, 0x80	; 128
    1ab0:	bf e3       	ldi	r27, 0x3F	; 63
    1ab2:	8d a7       	std	Y+45, r24	; 0x2d
    1ab4:	9e a7       	std	Y+46, r25	; 0x2e
    1ab6:	af a7       	std	Y+47, r26	; 0x2f
    1ab8:	b8 ab       	std	Y+48, r27	; 0x30
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    1aba:	6d a5       	ldd	r22, Y+45	; 0x2d
    1abc:	7e a5       	ldd	r23, Y+46	; 0x2e
    1abe:	8f a5       	ldd	r24, Y+47	; 0x2f
    1ac0:	98 a9       	ldd	r25, Y+48	; 0x30
    1ac2:	2b ea       	ldi	r18, 0xAB	; 171
    1ac4:	3a ea       	ldi	r19, 0xAA	; 170
    1ac6:	4a ea       	ldi	r20, 0xAA	; 170
    1ac8:	50 e4       	ldi	r21, 0x40	; 64
    1aca:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1ace:	dc 01       	movw	r26, r24
    1ad0:	cb 01       	movw	r24, r22
    1ad2:	89 a7       	std	Y+41, r24	; 0x29
    1ad4:	9a a7       	std	Y+42, r25	; 0x2a
    1ad6:	ab a7       	std	Y+43, r26	; 0x2b
    1ad8:	bc a7       	std	Y+44, r27	; 0x2c
	if (__tmp < 1.0)
    1ada:	69 a5       	ldd	r22, Y+41	; 0x29
    1adc:	7a a5       	ldd	r23, Y+42	; 0x2a
    1ade:	8b a5       	ldd	r24, Y+43	; 0x2b
    1ae0:	9c a5       	ldd	r25, Y+44	; 0x2c
    1ae2:	20 e0       	ldi	r18, 0x00	; 0
    1ae4:	30 e0       	ldi	r19, 0x00	; 0
    1ae6:	40 e8       	ldi	r20, 0x80	; 128
    1ae8:	5f e3       	ldi	r21, 0x3F	; 63
    1aea:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1aee:	88 23       	and	r24, r24
    1af0:	1c f4       	brge	.+6      	; 0x1af8 <LCD_enu_SendCmnd+0xd8>
		__ticks = 1;
    1af2:	81 e0       	ldi	r24, 0x01	; 1
    1af4:	88 a7       	std	Y+40, r24	; 0x28
    1af6:	91 c0       	rjmp	.+290    	; 0x1c1a <LCD_enu_SendCmnd+0x1fa>
	else if (__tmp > 255)
    1af8:	69 a5       	ldd	r22, Y+41	; 0x29
    1afa:	7a a5       	ldd	r23, Y+42	; 0x2a
    1afc:	8b a5       	ldd	r24, Y+43	; 0x2b
    1afe:	9c a5       	ldd	r25, Y+44	; 0x2c
    1b00:	20 e0       	ldi	r18, 0x00	; 0
    1b02:	30 e0       	ldi	r19, 0x00	; 0
    1b04:	4f e7       	ldi	r20, 0x7F	; 127
    1b06:	53 e4       	ldi	r21, 0x43	; 67
    1b08:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1b0c:	18 16       	cp	r1, r24
    1b0e:	0c f0       	brlt	.+2      	; 0x1b12 <LCD_enu_SendCmnd+0xf2>
    1b10:	7b c0       	rjmp	.+246    	; 0x1c08 <LCD_enu_SendCmnd+0x1e8>
	{
		_delay_ms(__us / 1000.0);
    1b12:	6d a5       	ldd	r22, Y+45	; 0x2d
    1b14:	7e a5       	ldd	r23, Y+46	; 0x2e
    1b16:	8f a5       	ldd	r24, Y+47	; 0x2f
    1b18:	98 a9       	ldd	r25, Y+48	; 0x30
    1b1a:	20 e0       	ldi	r18, 0x00	; 0
    1b1c:	30 e0       	ldi	r19, 0x00	; 0
    1b1e:	4a e7       	ldi	r20, 0x7A	; 122
    1b20:	54 e4       	ldi	r21, 0x44	; 68
    1b22:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    1b26:	dc 01       	movw	r26, r24
    1b28:	cb 01       	movw	r24, r22
    1b2a:	8c a3       	std	Y+36, r24	; 0x24
    1b2c:	9d a3       	std	Y+37, r25	; 0x25
    1b2e:	ae a3       	std	Y+38, r26	; 0x26
    1b30:	bf a3       	std	Y+39, r27	; 0x27
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1b32:	6c a1       	ldd	r22, Y+36	; 0x24
    1b34:	7d a1       	ldd	r23, Y+37	; 0x25
    1b36:	8e a1       	ldd	r24, Y+38	; 0x26
    1b38:	9f a1       	ldd	r25, Y+39	; 0x27
    1b3a:	20 e0       	ldi	r18, 0x00	; 0
    1b3c:	30 e0       	ldi	r19, 0x00	; 0
    1b3e:	4a e7       	ldi	r20, 0x7A	; 122
    1b40:	55 e4       	ldi	r21, 0x45	; 69
    1b42:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1b46:	dc 01       	movw	r26, r24
    1b48:	cb 01       	movw	r24, r22
    1b4a:	88 a3       	std	Y+32, r24	; 0x20
    1b4c:	99 a3       	std	Y+33, r25	; 0x21
    1b4e:	aa a3       	std	Y+34, r26	; 0x22
    1b50:	bb a3       	std	Y+35, r27	; 0x23
	if (__tmp < 1.0)
    1b52:	68 a1       	ldd	r22, Y+32	; 0x20
    1b54:	79 a1       	ldd	r23, Y+33	; 0x21
    1b56:	8a a1       	ldd	r24, Y+34	; 0x22
    1b58:	9b a1       	ldd	r25, Y+35	; 0x23
    1b5a:	20 e0       	ldi	r18, 0x00	; 0
    1b5c:	30 e0       	ldi	r19, 0x00	; 0
    1b5e:	40 e8       	ldi	r20, 0x80	; 128
    1b60:	5f e3       	ldi	r21, 0x3F	; 63
    1b62:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1b66:	88 23       	and	r24, r24
    1b68:	2c f4       	brge	.+10     	; 0x1b74 <LCD_enu_SendCmnd+0x154>
		__ticks = 1;
    1b6a:	81 e0       	ldi	r24, 0x01	; 1
    1b6c:	90 e0       	ldi	r25, 0x00	; 0
    1b6e:	9f 8f       	std	Y+31, r25	; 0x1f
    1b70:	8e 8f       	std	Y+30, r24	; 0x1e
    1b72:	3f c0       	rjmp	.+126    	; 0x1bf2 <LCD_enu_SendCmnd+0x1d2>
	else if (__tmp > 65535)
    1b74:	68 a1       	ldd	r22, Y+32	; 0x20
    1b76:	79 a1       	ldd	r23, Y+33	; 0x21
    1b78:	8a a1       	ldd	r24, Y+34	; 0x22
    1b7a:	9b a1       	ldd	r25, Y+35	; 0x23
    1b7c:	20 e0       	ldi	r18, 0x00	; 0
    1b7e:	3f ef       	ldi	r19, 0xFF	; 255
    1b80:	4f e7       	ldi	r20, 0x7F	; 127
    1b82:	57 e4       	ldi	r21, 0x47	; 71
    1b84:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1b88:	18 16       	cp	r1, r24
    1b8a:	4c f5       	brge	.+82     	; 0x1bde <LCD_enu_SendCmnd+0x1be>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1b8c:	6c a1       	ldd	r22, Y+36	; 0x24
    1b8e:	7d a1       	ldd	r23, Y+37	; 0x25
    1b90:	8e a1       	ldd	r24, Y+38	; 0x26
    1b92:	9f a1       	ldd	r25, Y+39	; 0x27
    1b94:	20 e0       	ldi	r18, 0x00	; 0
    1b96:	30 e0       	ldi	r19, 0x00	; 0
    1b98:	40 e2       	ldi	r20, 0x20	; 32
    1b9a:	51 e4       	ldi	r21, 0x41	; 65
    1b9c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1ba0:	dc 01       	movw	r26, r24
    1ba2:	cb 01       	movw	r24, r22
    1ba4:	bc 01       	movw	r22, r24
    1ba6:	cd 01       	movw	r24, r26
    1ba8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1bac:	dc 01       	movw	r26, r24
    1bae:	cb 01       	movw	r24, r22
    1bb0:	9f 8f       	std	Y+31, r25	; 0x1f
    1bb2:	8e 8f       	std	Y+30, r24	; 0x1e
    1bb4:	0f c0       	rjmp	.+30     	; 0x1bd4 <LCD_enu_SendCmnd+0x1b4>
    1bb6:	80 e9       	ldi	r24, 0x90	; 144
    1bb8:	91 e0       	ldi	r25, 0x01	; 1
    1bba:	9d 8f       	std	Y+29, r25	; 0x1d
    1bbc:	8c 8f       	std	Y+28, r24	; 0x1c
    1bbe:	8c 8d       	ldd	r24, Y+28	; 0x1c
    1bc0:	9d 8d       	ldd	r25, Y+29	; 0x1d
    1bc2:	01 97       	sbiw	r24, 0x01	; 1
    1bc4:	f1 f7       	brne	.-4      	; 0x1bc2 <LCD_enu_SendCmnd+0x1a2>
    1bc6:	9d 8f       	std	Y+29, r25	; 0x1d
    1bc8:	8c 8f       	std	Y+28, r24	; 0x1c
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1bca:	8e 8d       	ldd	r24, Y+30	; 0x1e
    1bcc:	9f 8d       	ldd	r25, Y+31	; 0x1f
    1bce:	01 97       	sbiw	r24, 0x01	; 1
    1bd0:	9f 8f       	std	Y+31, r25	; 0x1f
    1bd2:	8e 8f       	std	Y+30, r24	; 0x1e
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1bd4:	8e 8d       	ldd	r24, Y+30	; 0x1e
    1bd6:	9f 8d       	ldd	r25, Y+31	; 0x1f
    1bd8:	00 97       	sbiw	r24, 0x00	; 0
    1bda:	69 f7       	brne	.-38     	; 0x1bb6 <LCD_enu_SendCmnd+0x196>
    1bdc:	24 c0       	rjmp	.+72     	; 0x1c26 <LCD_enu_SendCmnd+0x206>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1bde:	68 a1       	ldd	r22, Y+32	; 0x20
    1be0:	79 a1       	ldd	r23, Y+33	; 0x21
    1be2:	8a a1       	ldd	r24, Y+34	; 0x22
    1be4:	9b a1       	ldd	r25, Y+35	; 0x23
    1be6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1bea:	dc 01       	movw	r26, r24
    1bec:	cb 01       	movw	r24, r22
    1bee:	9f 8f       	std	Y+31, r25	; 0x1f
    1bf0:	8e 8f       	std	Y+30, r24	; 0x1e
    1bf2:	8e 8d       	ldd	r24, Y+30	; 0x1e
    1bf4:	9f 8d       	ldd	r25, Y+31	; 0x1f
    1bf6:	9b 8f       	std	Y+27, r25	; 0x1b
    1bf8:	8a 8f       	std	Y+26, r24	; 0x1a
    1bfa:	8a 8d       	ldd	r24, Y+26	; 0x1a
    1bfc:	9b 8d       	ldd	r25, Y+27	; 0x1b
    1bfe:	01 97       	sbiw	r24, 0x01	; 1
    1c00:	f1 f7       	brne	.-4      	; 0x1bfe <LCD_enu_SendCmnd+0x1de>
    1c02:	9b 8f       	std	Y+27, r25	; 0x1b
    1c04:	8a 8f       	std	Y+26, r24	; 0x1a
    1c06:	0f c0       	rjmp	.+30     	; 0x1c26 <LCD_enu_SendCmnd+0x206>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    1c08:	69 a5       	ldd	r22, Y+41	; 0x29
    1c0a:	7a a5       	ldd	r23, Y+42	; 0x2a
    1c0c:	8b a5       	ldd	r24, Y+43	; 0x2b
    1c0e:	9c a5       	ldd	r25, Y+44	; 0x2c
    1c10:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1c14:	dc 01       	movw	r26, r24
    1c16:	cb 01       	movw	r24, r22
    1c18:	88 a7       	std	Y+40, r24	; 0x28
    1c1a:	88 a5       	ldd	r24, Y+40	; 0x28
    1c1c:	89 8f       	std	Y+25, r24	; 0x19
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    1c1e:	89 8d       	ldd	r24, Y+25	; 0x19
    1c20:	8a 95       	dec	r24
    1c22:	f1 f7       	brne	.-4      	; 0x1c20 <LCD_enu_SendCmnd+0x200>
    1c24:	89 8f       	std	Y+25, r24	; 0x19
    _delay_us(1);
    /* E = 0 */
    DIO_enu_SetPinValue(LCD_U8_E_PORT, LCD_U8_E_PIN, DIO_U8_LOW);
    1c26:	80 e0       	ldi	r24, 0x00	; 0
    1c28:	62 e0       	ldi	r22, 0x02	; 2
    1c2a:	40 e0       	ldi	r20, 0x00	; 0
    1c2c:	0e 94 72 29 	call	0x52e4	; 0x52e4 <DIO_enu_SetPinValue>
    /*Write the rest of the cmnd*/
    DIO_enu_SetPinValue(LCD_U8_DATA_PORT, D7, (Copy_u8_Cmdn >> SHIFT_3BIT) & MASK_BIT);
    1c30:	89 a9       	ldd	r24, Y+49	; 0x31
    1c32:	86 95       	lsr	r24
    1c34:	86 95       	lsr	r24
    1c36:	86 95       	lsr	r24
    1c38:	98 2f       	mov	r25, r24
    1c3a:	91 70       	andi	r25, 0x01	; 1
    1c3c:	80 e0       	ldi	r24, 0x00	; 0
    1c3e:	66 e0       	ldi	r22, 0x06	; 6
    1c40:	49 2f       	mov	r20, r25
    1c42:	0e 94 72 29 	call	0x52e4	; 0x52e4 <DIO_enu_SetPinValue>
    DIO_enu_SetPinValue(LCD_U8_DATA_PORT, D6, (Copy_u8_Cmdn >> SHIFT_2BIT) & MASK_BIT);
    1c46:	89 a9       	ldd	r24, Y+49	; 0x31
    1c48:	86 95       	lsr	r24
    1c4a:	86 95       	lsr	r24
    1c4c:	98 2f       	mov	r25, r24
    1c4e:	91 70       	andi	r25, 0x01	; 1
    1c50:	80 e0       	ldi	r24, 0x00	; 0
    1c52:	65 e0       	ldi	r22, 0x05	; 5
    1c54:	49 2f       	mov	r20, r25
    1c56:	0e 94 72 29 	call	0x52e4	; 0x52e4 <DIO_enu_SetPinValue>
    DIO_enu_SetPinValue(LCD_U8_DATA_PORT, D5, (Copy_u8_Cmdn >> SHIFT_1BIT) & MASK_BIT);
    1c5a:	89 a9       	ldd	r24, Y+49	; 0x31
    1c5c:	86 95       	lsr	r24
    1c5e:	98 2f       	mov	r25, r24
    1c60:	91 70       	andi	r25, 0x01	; 1
    1c62:	80 e0       	ldi	r24, 0x00	; 0
    1c64:	64 e0       	ldi	r22, 0x04	; 4
    1c66:	49 2f       	mov	r20, r25
    1c68:	0e 94 72 29 	call	0x52e4	; 0x52e4 <DIO_enu_SetPinValue>
    DIO_enu_SetPinValue(LCD_U8_DATA_PORT, D4, (Copy_u8_Cmdn >> SHIFT_0BIT) & MASK_BIT);
    1c6c:	89 a9       	ldd	r24, Y+49	; 0x31
    1c6e:	98 2f       	mov	r25, r24
    1c70:	91 70       	andi	r25, 0x01	; 1
    1c72:	80 e0       	ldi	r24, 0x00	; 0
    1c74:	63 e0       	ldi	r22, 0x03	; 3
    1c76:	49 2f       	mov	r20, r25
    1c78:	0e 94 72 29 	call	0x52e4	; 0x52e4 <DIO_enu_SetPinValue>
    /* E = 1 */
    DIO_enu_SetPinValue(LCD_U8_E_PORT, LCD_U8_E_PIN, DIO_U8_HIGH);
    1c7c:	80 e0       	ldi	r24, 0x00	; 0
    1c7e:	62 e0       	ldi	r22, 0x02	; 2
    1c80:	41 e0       	ldi	r20, 0x01	; 1
    1c82:	0e 94 72 29 	call	0x52e4	; 0x52e4 <DIO_enu_SetPinValue>
    1c86:	80 e0       	ldi	r24, 0x00	; 0
    1c88:	90 e0       	ldi	r25, 0x00	; 0
    1c8a:	a0 e8       	ldi	r26, 0x80	; 128
    1c8c:	bf e3       	ldi	r27, 0x3F	; 63
    1c8e:	8d 8b       	std	Y+21, r24	; 0x15
    1c90:	9e 8b       	std	Y+22, r25	; 0x16
    1c92:	af 8b       	std	Y+23, r26	; 0x17
    1c94:	b8 8f       	std	Y+24, r27	; 0x18
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    1c96:	6d 89       	ldd	r22, Y+21	; 0x15
    1c98:	7e 89       	ldd	r23, Y+22	; 0x16
    1c9a:	8f 89       	ldd	r24, Y+23	; 0x17
    1c9c:	98 8d       	ldd	r25, Y+24	; 0x18
    1c9e:	2b ea       	ldi	r18, 0xAB	; 171
    1ca0:	3a ea       	ldi	r19, 0xAA	; 170
    1ca2:	4a ea       	ldi	r20, 0xAA	; 170
    1ca4:	50 e4       	ldi	r21, 0x40	; 64
    1ca6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1caa:	dc 01       	movw	r26, r24
    1cac:	cb 01       	movw	r24, r22
    1cae:	89 8b       	std	Y+17, r24	; 0x11
    1cb0:	9a 8b       	std	Y+18, r25	; 0x12
    1cb2:	ab 8b       	std	Y+19, r26	; 0x13
    1cb4:	bc 8b       	std	Y+20, r27	; 0x14
	if (__tmp < 1.0)
    1cb6:	69 89       	ldd	r22, Y+17	; 0x11
    1cb8:	7a 89       	ldd	r23, Y+18	; 0x12
    1cba:	8b 89       	ldd	r24, Y+19	; 0x13
    1cbc:	9c 89       	ldd	r25, Y+20	; 0x14
    1cbe:	20 e0       	ldi	r18, 0x00	; 0
    1cc0:	30 e0       	ldi	r19, 0x00	; 0
    1cc2:	40 e8       	ldi	r20, 0x80	; 128
    1cc4:	5f e3       	ldi	r21, 0x3F	; 63
    1cc6:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1cca:	88 23       	and	r24, r24
    1ccc:	1c f4       	brge	.+6      	; 0x1cd4 <LCD_enu_SendCmnd+0x2b4>
		__ticks = 1;
    1cce:	81 e0       	ldi	r24, 0x01	; 1
    1cd0:	88 8b       	std	Y+16, r24	; 0x10
    1cd2:	91 c0       	rjmp	.+290    	; 0x1df6 <LCD_enu_SendCmnd+0x3d6>
	else if (__tmp > 255)
    1cd4:	69 89       	ldd	r22, Y+17	; 0x11
    1cd6:	7a 89       	ldd	r23, Y+18	; 0x12
    1cd8:	8b 89       	ldd	r24, Y+19	; 0x13
    1cda:	9c 89       	ldd	r25, Y+20	; 0x14
    1cdc:	20 e0       	ldi	r18, 0x00	; 0
    1cde:	30 e0       	ldi	r19, 0x00	; 0
    1ce0:	4f e7       	ldi	r20, 0x7F	; 127
    1ce2:	53 e4       	ldi	r21, 0x43	; 67
    1ce4:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1ce8:	18 16       	cp	r1, r24
    1cea:	0c f0       	brlt	.+2      	; 0x1cee <LCD_enu_SendCmnd+0x2ce>
    1cec:	7b c0       	rjmp	.+246    	; 0x1de4 <LCD_enu_SendCmnd+0x3c4>
	{
		_delay_ms(__us / 1000.0);
    1cee:	6d 89       	ldd	r22, Y+21	; 0x15
    1cf0:	7e 89       	ldd	r23, Y+22	; 0x16
    1cf2:	8f 89       	ldd	r24, Y+23	; 0x17
    1cf4:	98 8d       	ldd	r25, Y+24	; 0x18
    1cf6:	20 e0       	ldi	r18, 0x00	; 0
    1cf8:	30 e0       	ldi	r19, 0x00	; 0
    1cfa:	4a e7       	ldi	r20, 0x7A	; 122
    1cfc:	54 e4       	ldi	r21, 0x44	; 68
    1cfe:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    1d02:	dc 01       	movw	r26, r24
    1d04:	cb 01       	movw	r24, r22
    1d06:	8c 87       	std	Y+12, r24	; 0x0c
    1d08:	9d 87       	std	Y+13, r25	; 0x0d
    1d0a:	ae 87       	std	Y+14, r26	; 0x0e
    1d0c:	bf 87       	std	Y+15, r27	; 0x0f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1d0e:	6c 85       	ldd	r22, Y+12	; 0x0c
    1d10:	7d 85       	ldd	r23, Y+13	; 0x0d
    1d12:	8e 85       	ldd	r24, Y+14	; 0x0e
    1d14:	9f 85       	ldd	r25, Y+15	; 0x0f
    1d16:	20 e0       	ldi	r18, 0x00	; 0
    1d18:	30 e0       	ldi	r19, 0x00	; 0
    1d1a:	4a e7       	ldi	r20, 0x7A	; 122
    1d1c:	55 e4       	ldi	r21, 0x45	; 69
    1d1e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1d22:	dc 01       	movw	r26, r24
    1d24:	cb 01       	movw	r24, r22
    1d26:	88 87       	std	Y+8, r24	; 0x08
    1d28:	99 87       	std	Y+9, r25	; 0x09
    1d2a:	aa 87       	std	Y+10, r26	; 0x0a
    1d2c:	bb 87       	std	Y+11, r27	; 0x0b
	if (__tmp < 1.0)
    1d2e:	68 85       	ldd	r22, Y+8	; 0x08
    1d30:	79 85       	ldd	r23, Y+9	; 0x09
    1d32:	8a 85       	ldd	r24, Y+10	; 0x0a
    1d34:	9b 85       	ldd	r25, Y+11	; 0x0b
    1d36:	20 e0       	ldi	r18, 0x00	; 0
    1d38:	30 e0       	ldi	r19, 0x00	; 0
    1d3a:	40 e8       	ldi	r20, 0x80	; 128
    1d3c:	5f e3       	ldi	r21, 0x3F	; 63
    1d3e:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1d42:	88 23       	and	r24, r24
    1d44:	2c f4       	brge	.+10     	; 0x1d50 <LCD_enu_SendCmnd+0x330>
		__ticks = 1;
    1d46:	81 e0       	ldi	r24, 0x01	; 1
    1d48:	90 e0       	ldi	r25, 0x00	; 0
    1d4a:	9f 83       	std	Y+7, r25	; 0x07
    1d4c:	8e 83       	std	Y+6, r24	; 0x06
    1d4e:	3f c0       	rjmp	.+126    	; 0x1dce <LCD_enu_SendCmnd+0x3ae>
	else if (__tmp > 65535)
    1d50:	68 85       	ldd	r22, Y+8	; 0x08
    1d52:	79 85       	ldd	r23, Y+9	; 0x09
    1d54:	8a 85       	ldd	r24, Y+10	; 0x0a
    1d56:	9b 85       	ldd	r25, Y+11	; 0x0b
    1d58:	20 e0       	ldi	r18, 0x00	; 0
    1d5a:	3f ef       	ldi	r19, 0xFF	; 255
    1d5c:	4f e7       	ldi	r20, 0x7F	; 127
    1d5e:	57 e4       	ldi	r21, 0x47	; 71
    1d60:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1d64:	18 16       	cp	r1, r24
    1d66:	4c f5       	brge	.+82     	; 0x1dba <LCD_enu_SendCmnd+0x39a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1d68:	6c 85       	ldd	r22, Y+12	; 0x0c
    1d6a:	7d 85       	ldd	r23, Y+13	; 0x0d
    1d6c:	8e 85       	ldd	r24, Y+14	; 0x0e
    1d6e:	9f 85       	ldd	r25, Y+15	; 0x0f
    1d70:	20 e0       	ldi	r18, 0x00	; 0
    1d72:	30 e0       	ldi	r19, 0x00	; 0
    1d74:	40 e2       	ldi	r20, 0x20	; 32
    1d76:	51 e4       	ldi	r21, 0x41	; 65
    1d78:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1d7c:	dc 01       	movw	r26, r24
    1d7e:	cb 01       	movw	r24, r22
    1d80:	bc 01       	movw	r22, r24
    1d82:	cd 01       	movw	r24, r26
    1d84:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1d88:	dc 01       	movw	r26, r24
    1d8a:	cb 01       	movw	r24, r22
    1d8c:	9f 83       	std	Y+7, r25	; 0x07
    1d8e:	8e 83       	std	Y+6, r24	; 0x06
    1d90:	0f c0       	rjmp	.+30     	; 0x1db0 <LCD_enu_SendCmnd+0x390>
    1d92:	80 e9       	ldi	r24, 0x90	; 144
    1d94:	91 e0       	ldi	r25, 0x01	; 1
    1d96:	9d 83       	std	Y+5, r25	; 0x05
    1d98:	8c 83       	std	Y+4, r24	; 0x04
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1d9a:	8c 81       	ldd	r24, Y+4	; 0x04
    1d9c:	9d 81       	ldd	r25, Y+5	; 0x05
    1d9e:	01 97       	sbiw	r24, 0x01	; 1
    1da0:	f1 f7       	brne	.-4      	; 0x1d9e <LCD_enu_SendCmnd+0x37e>
    1da2:	9d 83       	std	Y+5, r25	; 0x05
    1da4:	8c 83       	std	Y+4, r24	; 0x04
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1da6:	8e 81       	ldd	r24, Y+6	; 0x06
    1da8:	9f 81       	ldd	r25, Y+7	; 0x07
    1daa:	01 97       	sbiw	r24, 0x01	; 1
    1dac:	9f 83       	std	Y+7, r25	; 0x07
    1dae:	8e 83       	std	Y+6, r24	; 0x06
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1db0:	8e 81       	ldd	r24, Y+6	; 0x06
    1db2:	9f 81       	ldd	r25, Y+7	; 0x07
    1db4:	00 97       	sbiw	r24, 0x00	; 0
    1db6:	69 f7       	brne	.-38     	; 0x1d92 <LCD_enu_SendCmnd+0x372>
    1db8:	24 c0       	rjmp	.+72     	; 0x1e02 <LCD_enu_SendCmnd+0x3e2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1dba:	68 85       	ldd	r22, Y+8	; 0x08
    1dbc:	79 85       	ldd	r23, Y+9	; 0x09
    1dbe:	8a 85       	ldd	r24, Y+10	; 0x0a
    1dc0:	9b 85       	ldd	r25, Y+11	; 0x0b
    1dc2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1dc6:	dc 01       	movw	r26, r24
    1dc8:	cb 01       	movw	r24, r22
    1dca:	9f 83       	std	Y+7, r25	; 0x07
    1dcc:	8e 83       	std	Y+6, r24	; 0x06
    1dce:	8e 81       	ldd	r24, Y+6	; 0x06
    1dd0:	9f 81       	ldd	r25, Y+7	; 0x07
    1dd2:	9b 83       	std	Y+3, r25	; 0x03
    1dd4:	8a 83       	std	Y+2, r24	; 0x02
    1dd6:	8a 81       	ldd	r24, Y+2	; 0x02
    1dd8:	9b 81       	ldd	r25, Y+3	; 0x03
    1dda:	01 97       	sbiw	r24, 0x01	; 1
    1ddc:	f1 f7       	brne	.-4      	; 0x1dda <LCD_enu_SendCmnd+0x3ba>
    1dde:	9b 83       	std	Y+3, r25	; 0x03
    1de0:	8a 83       	std	Y+2, r24	; 0x02
    1de2:	0f c0       	rjmp	.+30     	; 0x1e02 <LCD_enu_SendCmnd+0x3e2>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    1de4:	69 89       	ldd	r22, Y+17	; 0x11
    1de6:	7a 89       	ldd	r23, Y+18	; 0x12
    1de8:	8b 89       	ldd	r24, Y+19	; 0x13
    1dea:	9c 89       	ldd	r25, Y+20	; 0x14
    1dec:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1df0:	dc 01       	movw	r26, r24
    1df2:	cb 01       	movw	r24, r22
    1df4:	88 8b       	std	Y+16, r24	; 0x10
    1df6:	88 89       	ldd	r24, Y+16	; 0x10
    1df8:	89 83       	std	Y+1, r24	; 0x01
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    1dfa:	89 81       	ldd	r24, Y+1	; 0x01
    1dfc:	8a 95       	dec	r24
    1dfe:	f1 f7       	brne	.-4      	; 0x1dfc <LCD_enu_SendCmnd+0x3dc>
    1e00:	89 83       	std	Y+1, r24	; 0x01
    _delay_us(1);
    /* E = 0 */
    DIO_enu_SetPinValue(LCD_U8_E_PORT, LCD_U8_E_PIN, DIO_U8_LOW);
    1e02:	80 e0       	ldi	r24, 0x00	; 0
    1e04:	62 e0       	ldi	r22, 0x02	; 2
    1e06:	40 e0       	ldi	r20, 0x00	; 0
    1e08:	0e 94 72 29 	call	0x52e4	; 0x52e4 <DIO_enu_SetPinValue>
    return STATE_OK;
    1e0c:	81 e0       	ldi	r24, 0x01	; 1
#endif
}
    1e0e:	e1 96       	adiw	r28, 0x31	; 49
    1e10:	0f b6       	in	r0, 0x3f	; 63
    1e12:	f8 94       	cli
    1e14:	de bf       	out	0x3e, r29	; 62
    1e16:	0f be       	out	0x3f, r0	; 63
    1e18:	cd bf       	out	0x3d, r28	; 61
    1e1a:	cf 91       	pop	r28
    1e1c:	df 91       	pop	r29
    1e1e:	08 95       	ret

00001e20 <LCD_enu_SendChar>:
ES_t LCD_enu_SendChar(u8 Copy_u8_Char)
{
    1e20:	df 93       	push	r29
    1e22:	cf 93       	push	r28
    1e24:	cd b7       	in	r28, 0x3d	; 61
    1e26:	de b7       	in	r29, 0x3e	; 62
    1e28:	e1 97       	sbiw	r28, 0x31	; 49
    1e2a:	0f b6       	in	r0, 0x3f	; 63
    1e2c:	f8 94       	cli
    1e2e:	de bf       	out	0x3e, r29	; 62
    1e30:	0f be       	out	0x3f, r0	; 63
    1e32:	cd bf       	out	0x3d, r28	; 61
    1e34:	89 ab       	std	Y+49, r24	; 0x31
    /* E = 0 */
    DIO_enu_SetPinValue(LCD_U8_E_PORT, LCD_U8_E_PIN, DIO_U8_LOW);
    return STATE_OK;
#elif LCD_U8_MODE == LCD_U8_MODE_4BIT
    /* RS = 1 */
    DIO_enu_SetPinValue(LCD_U8_RS_PORT, LCD_U8_RS_PIN, DIO_U8_HIGH);
    1e36:	80 e0       	ldi	r24, 0x00	; 0
    1e38:	61 e0       	ldi	r22, 0x01	; 1
    1e3a:	41 e0       	ldi	r20, 0x01	; 1
    1e3c:	0e 94 72 29 	call	0x52e4	; 0x52e4 <DIO_enu_SetPinValue>
    /* RW = 0 */
    DIO_enu_SetPinValue(LCD_U8_RW_PORT, LCD_U8_RW_PIN, DIO_U8_LOW);
    1e40:	80 e0       	ldi	r24, 0x00	; 0
    1e42:	60 e0       	ldi	r22, 0x00	; 0
    1e44:	40 e0       	ldi	r20, 0x00	; 0
    1e46:	0e 94 72 29 	call	0x52e4	; 0x52e4 <DIO_enu_SetPinValue>
    /*Write Char*/
    DIO_enu_SetPinValue(LCD_U8_DATA_PORT, D7, (Copy_u8_Char >> SHIFT_7BIT) & MASK_BIT);
    1e4a:	89 a9       	ldd	r24, Y+49	; 0x31
    1e4c:	98 2f       	mov	r25, r24
    1e4e:	99 1f       	adc	r25, r25
    1e50:	99 27       	eor	r25, r25
    1e52:	99 1f       	adc	r25, r25
    1e54:	80 e0       	ldi	r24, 0x00	; 0
    1e56:	66 e0       	ldi	r22, 0x06	; 6
    1e58:	49 2f       	mov	r20, r25
    1e5a:	0e 94 72 29 	call	0x52e4	; 0x52e4 <DIO_enu_SetPinValue>
    DIO_enu_SetPinValue(LCD_U8_DATA_PORT, D6, (Copy_u8_Char >> SHIFT_6BIT) & MASK_BIT);
    1e5e:	89 a9       	ldd	r24, Y+49	; 0x31
    1e60:	82 95       	swap	r24
    1e62:	86 95       	lsr	r24
    1e64:	86 95       	lsr	r24
    1e66:	83 70       	andi	r24, 0x03	; 3
    1e68:	98 2f       	mov	r25, r24
    1e6a:	91 70       	andi	r25, 0x01	; 1
    1e6c:	80 e0       	ldi	r24, 0x00	; 0
    1e6e:	65 e0       	ldi	r22, 0x05	; 5
    1e70:	49 2f       	mov	r20, r25
    1e72:	0e 94 72 29 	call	0x52e4	; 0x52e4 <DIO_enu_SetPinValue>
    DIO_enu_SetPinValue(LCD_U8_DATA_PORT, D5, (Copy_u8_Char >> SHIFT_5BIT) & MASK_BIT);
    1e76:	89 a9       	ldd	r24, Y+49	; 0x31
    1e78:	82 95       	swap	r24
    1e7a:	86 95       	lsr	r24
    1e7c:	87 70       	andi	r24, 0x07	; 7
    1e7e:	98 2f       	mov	r25, r24
    1e80:	91 70       	andi	r25, 0x01	; 1
    1e82:	80 e0       	ldi	r24, 0x00	; 0
    1e84:	64 e0       	ldi	r22, 0x04	; 4
    1e86:	49 2f       	mov	r20, r25
    1e88:	0e 94 72 29 	call	0x52e4	; 0x52e4 <DIO_enu_SetPinValue>
    DIO_enu_SetPinValue(LCD_U8_DATA_PORT, D4, (Copy_u8_Char >> SHIFT_4BIT) & MASK_BIT);
    1e8c:	89 a9       	ldd	r24, Y+49	; 0x31
    1e8e:	82 95       	swap	r24
    1e90:	8f 70       	andi	r24, 0x0F	; 15
    1e92:	98 2f       	mov	r25, r24
    1e94:	91 70       	andi	r25, 0x01	; 1
    1e96:	80 e0       	ldi	r24, 0x00	; 0
    1e98:	63 e0       	ldi	r22, 0x03	; 3
    1e9a:	49 2f       	mov	r20, r25
    1e9c:	0e 94 72 29 	call	0x52e4	; 0x52e4 <DIO_enu_SetPinValue>
    /* E = 1 */
    DIO_enu_SetPinValue(LCD_U8_E_PORT, LCD_U8_E_PIN, DIO_U8_HIGH);
    1ea0:	80 e0       	ldi	r24, 0x00	; 0
    1ea2:	62 e0       	ldi	r22, 0x02	; 2
    1ea4:	41 e0       	ldi	r20, 0x01	; 1
    1ea6:	0e 94 72 29 	call	0x52e4	; 0x52e4 <DIO_enu_SetPinValue>
    1eaa:	80 e0       	ldi	r24, 0x00	; 0
    1eac:	90 e0       	ldi	r25, 0x00	; 0
    1eae:	a0 e8       	ldi	r26, 0x80	; 128
    1eb0:	bf e3       	ldi	r27, 0x3F	; 63
    1eb2:	8d a7       	std	Y+45, r24	; 0x2d
    1eb4:	9e a7       	std	Y+46, r25	; 0x2e
    1eb6:	af a7       	std	Y+47, r26	; 0x2f
    1eb8:	b8 ab       	std	Y+48, r27	; 0x30
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    1eba:	6d a5       	ldd	r22, Y+45	; 0x2d
    1ebc:	7e a5       	ldd	r23, Y+46	; 0x2e
    1ebe:	8f a5       	ldd	r24, Y+47	; 0x2f
    1ec0:	98 a9       	ldd	r25, Y+48	; 0x30
    1ec2:	2b ea       	ldi	r18, 0xAB	; 171
    1ec4:	3a ea       	ldi	r19, 0xAA	; 170
    1ec6:	4a ea       	ldi	r20, 0xAA	; 170
    1ec8:	50 e4       	ldi	r21, 0x40	; 64
    1eca:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1ece:	dc 01       	movw	r26, r24
    1ed0:	cb 01       	movw	r24, r22
    1ed2:	89 a7       	std	Y+41, r24	; 0x29
    1ed4:	9a a7       	std	Y+42, r25	; 0x2a
    1ed6:	ab a7       	std	Y+43, r26	; 0x2b
    1ed8:	bc a7       	std	Y+44, r27	; 0x2c
	if (__tmp < 1.0)
    1eda:	69 a5       	ldd	r22, Y+41	; 0x29
    1edc:	7a a5       	ldd	r23, Y+42	; 0x2a
    1ede:	8b a5       	ldd	r24, Y+43	; 0x2b
    1ee0:	9c a5       	ldd	r25, Y+44	; 0x2c
    1ee2:	20 e0       	ldi	r18, 0x00	; 0
    1ee4:	30 e0       	ldi	r19, 0x00	; 0
    1ee6:	40 e8       	ldi	r20, 0x80	; 128
    1ee8:	5f e3       	ldi	r21, 0x3F	; 63
    1eea:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1eee:	88 23       	and	r24, r24
    1ef0:	1c f4       	brge	.+6      	; 0x1ef8 <LCD_enu_SendChar+0xd8>
		__ticks = 1;
    1ef2:	81 e0       	ldi	r24, 0x01	; 1
    1ef4:	88 a7       	std	Y+40, r24	; 0x28
    1ef6:	91 c0       	rjmp	.+290    	; 0x201a <LCD_enu_SendChar+0x1fa>
	else if (__tmp > 255)
    1ef8:	69 a5       	ldd	r22, Y+41	; 0x29
    1efa:	7a a5       	ldd	r23, Y+42	; 0x2a
    1efc:	8b a5       	ldd	r24, Y+43	; 0x2b
    1efe:	9c a5       	ldd	r25, Y+44	; 0x2c
    1f00:	20 e0       	ldi	r18, 0x00	; 0
    1f02:	30 e0       	ldi	r19, 0x00	; 0
    1f04:	4f e7       	ldi	r20, 0x7F	; 127
    1f06:	53 e4       	ldi	r21, 0x43	; 67
    1f08:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1f0c:	18 16       	cp	r1, r24
    1f0e:	0c f0       	brlt	.+2      	; 0x1f12 <LCD_enu_SendChar+0xf2>
    1f10:	7b c0       	rjmp	.+246    	; 0x2008 <LCD_enu_SendChar+0x1e8>
	{
		_delay_ms(__us / 1000.0);
    1f12:	6d a5       	ldd	r22, Y+45	; 0x2d
    1f14:	7e a5       	ldd	r23, Y+46	; 0x2e
    1f16:	8f a5       	ldd	r24, Y+47	; 0x2f
    1f18:	98 a9       	ldd	r25, Y+48	; 0x30
    1f1a:	20 e0       	ldi	r18, 0x00	; 0
    1f1c:	30 e0       	ldi	r19, 0x00	; 0
    1f1e:	4a e7       	ldi	r20, 0x7A	; 122
    1f20:	54 e4       	ldi	r21, 0x44	; 68
    1f22:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    1f26:	dc 01       	movw	r26, r24
    1f28:	cb 01       	movw	r24, r22
    1f2a:	8c a3       	std	Y+36, r24	; 0x24
    1f2c:	9d a3       	std	Y+37, r25	; 0x25
    1f2e:	ae a3       	std	Y+38, r26	; 0x26
    1f30:	bf a3       	std	Y+39, r27	; 0x27
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1f32:	6c a1       	ldd	r22, Y+36	; 0x24
    1f34:	7d a1       	ldd	r23, Y+37	; 0x25
    1f36:	8e a1       	ldd	r24, Y+38	; 0x26
    1f38:	9f a1       	ldd	r25, Y+39	; 0x27
    1f3a:	20 e0       	ldi	r18, 0x00	; 0
    1f3c:	30 e0       	ldi	r19, 0x00	; 0
    1f3e:	4a e7       	ldi	r20, 0x7A	; 122
    1f40:	55 e4       	ldi	r21, 0x45	; 69
    1f42:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1f46:	dc 01       	movw	r26, r24
    1f48:	cb 01       	movw	r24, r22
    1f4a:	88 a3       	std	Y+32, r24	; 0x20
    1f4c:	99 a3       	std	Y+33, r25	; 0x21
    1f4e:	aa a3       	std	Y+34, r26	; 0x22
    1f50:	bb a3       	std	Y+35, r27	; 0x23
	if (__tmp < 1.0)
    1f52:	68 a1       	ldd	r22, Y+32	; 0x20
    1f54:	79 a1       	ldd	r23, Y+33	; 0x21
    1f56:	8a a1       	ldd	r24, Y+34	; 0x22
    1f58:	9b a1       	ldd	r25, Y+35	; 0x23
    1f5a:	20 e0       	ldi	r18, 0x00	; 0
    1f5c:	30 e0       	ldi	r19, 0x00	; 0
    1f5e:	40 e8       	ldi	r20, 0x80	; 128
    1f60:	5f e3       	ldi	r21, 0x3F	; 63
    1f62:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1f66:	88 23       	and	r24, r24
    1f68:	2c f4       	brge	.+10     	; 0x1f74 <LCD_enu_SendChar+0x154>
		__ticks = 1;
    1f6a:	81 e0       	ldi	r24, 0x01	; 1
    1f6c:	90 e0       	ldi	r25, 0x00	; 0
    1f6e:	9f 8f       	std	Y+31, r25	; 0x1f
    1f70:	8e 8f       	std	Y+30, r24	; 0x1e
    1f72:	3f c0       	rjmp	.+126    	; 0x1ff2 <LCD_enu_SendChar+0x1d2>
	else if (__tmp > 65535)
    1f74:	68 a1       	ldd	r22, Y+32	; 0x20
    1f76:	79 a1       	ldd	r23, Y+33	; 0x21
    1f78:	8a a1       	ldd	r24, Y+34	; 0x22
    1f7a:	9b a1       	ldd	r25, Y+35	; 0x23
    1f7c:	20 e0       	ldi	r18, 0x00	; 0
    1f7e:	3f ef       	ldi	r19, 0xFF	; 255
    1f80:	4f e7       	ldi	r20, 0x7F	; 127
    1f82:	57 e4       	ldi	r21, 0x47	; 71
    1f84:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1f88:	18 16       	cp	r1, r24
    1f8a:	4c f5       	brge	.+82     	; 0x1fde <LCD_enu_SendChar+0x1be>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1f8c:	6c a1       	ldd	r22, Y+36	; 0x24
    1f8e:	7d a1       	ldd	r23, Y+37	; 0x25
    1f90:	8e a1       	ldd	r24, Y+38	; 0x26
    1f92:	9f a1       	ldd	r25, Y+39	; 0x27
    1f94:	20 e0       	ldi	r18, 0x00	; 0
    1f96:	30 e0       	ldi	r19, 0x00	; 0
    1f98:	40 e2       	ldi	r20, 0x20	; 32
    1f9a:	51 e4       	ldi	r21, 0x41	; 65
    1f9c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1fa0:	dc 01       	movw	r26, r24
    1fa2:	cb 01       	movw	r24, r22
    1fa4:	bc 01       	movw	r22, r24
    1fa6:	cd 01       	movw	r24, r26
    1fa8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1fac:	dc 01       	movw	r26, r24
    1fae:	cb 01       	movw	r24, r22
    1fb0:	9f 8f       	std	Y+31, r25	; 0x1f
    1fb2:	8e 8f       	std	Y+30, r24	; 0x1e
    1fb4:	0f c0       	rjmp	.+30     	; 0x1fd4 <LCD_enu_SendChar+0x1b4>
    1fb6:	80 e9       	ldi	r24, 0x90	; 144
    1fb8:	91 e0       	ldi	r25, 0x01	; 1
    1fba:	9d 8f       	std	Y+29, r25	; 0x1d
    1fbc:	8c 8f       	std	Y+28, r24	; 0x1c
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1fbe:	8c 8d       	ldd	r24, Y+28	; 0x1c
    1fc0:	9d 8d       	ldd	r25, Y+29	; 0x1d
    1fc2:	01 97       	sbiw	r24, 0x01	; 1
    1fc4:	f1 f7       	brne	.-4      	; 0x1fc2 <LCD_enu_SendChar+0x1a2>
    1fc6:	9d 8f       	std	Y+29, r25	; 0x1d
    1fc8:	8c 8f       	std	Y+28, r24	; 0x1c
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1fca:	8e 8d       	ldd	r24, Y+30	; 0x1e
    1fcc:	9f 8d       	ldd	r25, Y+31	; 0x1f
    1fce:	01 97       	sbiw	r24, 0x01	; 1
    1fd0:	9f 8f       	std	Y+31, r25	; 0x1f
    1fd2:	8e 8f       	std	Y+30, r24	; 0x1e
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1fd4:	8e 8d       	ldd	r24, Y+30	; 0x1e
    1fd6:	9f 8d       	ldd	r25, Y+31	; 0x1f
    1fd8:	00 97       	sbiw	r24, 0x00	; 0
    1fda:	69 f7       	brne	.-38     	; 0x1fb6 <LCD_enu_SendChar+0x196>
    1fdc:	24 c0       	rjmp	.+72     	; 0x2026 <LCD_enu_SendChar+0x206>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1fde:	68 a1       	ldd	r22, Y+32	; 0x20
    1fe0:	79 a1       	ldd	r23, Y+33	; 0x21
    1fe2:	8a a1       	ldd	r24, Y+34	; 0x22
    1fe4:	9b a1       	ldd	r25, Y+35	; 0x23
    1fe6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1fea:	dc 01       	movw	r26, r24
    1fec:	cb 01       	movw	r24, r22
    1fee:	9f 8f       	std	Y+31, r25	; 0x1f
    1ff0:	8e 8f       	std	Y+30, r24	; 0x1e
    1ff2:	8e 8d       	ldd	r24, Y+30	; 0x1e
    1ff4:	9f 8d       	ldd	r25, Y+31	; 0x1f
    1ff6:	9b 8f       	std	Y+27, r25	; 0x1b
    1ff8:	8a 8f       	std	Y+26, r24	; 0x1a
    1ffa:	8a 8d       	ldd	r24, Y+26	; 0x1a
    1ffc:	9b 8d       	ldd	r25, Y+27	; 0x1b
    1ffe:	01 97       	sbiw	r24, 0x01	; 1
    2000:	f1 f7       	brne	.-4      	; 0x1ffe <LCD_enu_SendChar+0x1de>
    2002:	9b 8f       	std	Y+27, r25	; 0x1b
    2004:	8a 8f       	std	Y+26, r24	; 0x1a
    2006:	0f c0       	rjmp	.+30     	; 0x2026 <LCD_enu_SendChar+0x206>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    2008:	69 a5       	ldd	r22, Y+41	; 0x29
    200a:	7a a5       	ldd	r23, Y+42	; 0x2a
    200c:	8b a5       	ldd	r24, Y+43	; 0x2b
    200e:	9c a5       	ldd	r25, Y+44	; 0x2c
    2010:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2014:	dc 01       	movw	r26, r24
    2016:	cb 01       	movw	r24, r22
    2018:	88 a7       	std	Y+40, r24	; 0x28
    201a:	88 a5       	ldd	r24, Y+40	; 0x28
    201c:	89 8f       	std	Y+25, r24	; 0x19
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    201e:	89 8d       	ldd	r24, Y+25	; 0x19
    2020:	8a 95       	dec	r24
    2022:	f1 f7       	brne	.-4      	; 0x2020 <LCD_enu_SendChar+0x200>
    2024:	89 8f       	std	Y+25, r24	; 0x19
    _delay_us(1);
    /* E = 0 */
    DIO_enu_SetPinValue(LCD_U8_E_PORT, LCD_U8_E_PIN, DIO_U8_LOW);
    2026:	80 e0       	ldi	r24, 0x00	; 0
    2028:	62 e0       	ldi	r22, 0x02	; 2
    202a:	40 e0       	ldi	r20, 0x00	; 0
    202c:	0e 94 72 29 	call	0x52e4	; 0x52e4 <DIO_enu_SetPinValue>
    /*Write Char*/
    DIO_enu_SetPinValue(LCD_U8_DATA_PORT, D7, (Copy_u8_Char >> SHIFT_3BIT) & MASK_BIT);
    2030:	89 a9       	ldd	r24, Y+49	; 0x31
    2032:	86 95       	lsr	r24
    2034:	86 95       	lsr	r24
    2036:	86 95       	lsr	r24
    2038:	98 2f       	mov	r25, r24
    203a:	91 70       	andi	r25, 0x01	; 1
    203c:	80 e0       	ldi	r24, 0x00	; 0
    203e:	66 e0       	ldi	r22, 0x06	; 6
    2040:	49 2f       	mov	r20, r25
    2042:	0e 94 72 29 	call	0x52e4	; 0x52e4 <DIO_enu_SetPinValue>
    DIO_enu_SetPinValue(LCD_U8_DATA_PORT, D6, (Copy_u8_Char >> SHIFT_2BIT) & MASK_BIT);
    2046:	89 a9       	ldd	r24, Y+49	; 0x31
    2048:	86 95       	lsr	r24
    204a:	86 95       	lsr	r24
    204c:	98 2f       	mov	r25, r24
    204e:	91 70       	andi	r25, 0x01	; 1
    2050:	80 e0       	ldi	r24, 0x00	; 0
    2052:	65 e0       	ldi	r22, 0x05	; 5
    2054:	49 2f       	mov	r20, r25
    2056:	0e 94 72 29 	call	0x52e4	; 0x52e4 <DIO_enu_SetPinValue>
    DIO_enu_SetPinValue(LCD_U8_DATA_PORT, D5, (Copy_u8_Char >> SHIFT_1BIT) & MASK_BIT);
    205a:	89 a9       	ldd	r24, Y+49	; 0x31
    205c:	86 95       	lsr	r24
    205e:	98 2f       	mov	r25, r24
    2060:	91 70       	andi	r25, 0x01	; 1
    2062:	80 e0       	ldi	r24, 0x00	; 0
    2064:	64 e0       	ldi	r22, 0x04	; 4
    2066:	49 2f       	mov	r20, r25
    2068:	0e 94 72 29 	call	0x52e4	; 0x52e4 <DIO_enu_SetPinValue>
    DIO_enu_SetPinValue(LCD_U8_DATA_PORT, D4, (Copy_u8_Char >> SHIFT_0BIT) & MASK_BIT);
    206c:	89 a9       	ldd	r24, Y+49	; 0x31
    206e:	98 2f       	mov	r25, r24
    2070:	91 70       	andi	r25, 0x01	; 1
    2072:	80 e0       	ldi	r24, 0x00	; 0
    2074:	63 e0       	ldi	r22, 0x03	; 3
    2076:	49 2f       	mov	r20, r25
    2078:	0e 94 72 29 	call	0x52e4	; 0x52e4 <DIO_enu_SetPinValue>
    /* E = 1 */
    DIO_enu_SetPinValue(LCD_U8_E_PORT, LCD_U8_E_PIN, DIO_U8_HIGH);
    207c:	80 e0       	ldi	r24, 0x00	; 0
    207e:	62 e0       	ldi	r22, 0x02	; 2
    2080:	41 e0       	ldi	r20, 0x01	; 1
    2082:	0e 94 72 29 	call	0x52e4	; 0x52e4 <DIO_enu_SetPinValue>
    2086:	80 e0       	ldi	r24, 0x00	; 0
    2088:	90 e0       	ldi	r25, 0x00	; 0
    208a:	a0 e8       	ldi	r26, 0x80	; 128
    208c:	bf e3       	ldi	r27, 0x3F	; 63
    208e:	8d 8b       	std	Y+21, r24	; 0x15
    2090:	9e 8b       	std	Y+22, r25	; 0x16
    2092:	af 8b       	std	Y+23, r26	; 0x17
    2094:	b8 8f       	std	Y+24, r27	; 0x18
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    2096:	6d 89       	ldd	r22, Y+21	; 0x15
    2098:	7e 89       	ldd	r23, Y+22	; 0x16
    209a:	8f 89       	ldd	r24, Y+23	; 0x17
    209c:	98 8d       	ldd	r25, Y+24	; 0x18
    209e:	2b ea       	ldi	r18, 0xAB	; 171
    20a0:	3a ea       	ldi	r19, 0xAA	; 170
    20a2:	4a ea       	ldi	r20, 0xAA	; 170
    20a4:	50 e4       	ldi	r21, 0x40	; 64
    20a6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    20aa:	dc 01       	movw	r26, r24
    20ac:	cb 01       	movw	r24, r22
    20ae:	89 8b       	std	Y+17, r24	; 0x11
    20b0:	9a 8b       	std	Y+18, r25	; 0x12
    20b2:	ab 8b       	std	Y+19, r26	; 0x13
    20b4:	bc 8b       	std	Y+20, r27	; 0x14
	if (__tmp < 1.0)
    20b6:	69 89       	ldd	r22, Y+17	; 0x11
    20b8:	7a 89       	ldd	r23, Y+18	; 0x12
    20ba:	8b 89       	ldd	r24, Y+19	; 0x13
    20bc:	9c 89       	ldd	r25, Y+20	; 0x14
    20be:	20 e0       	ldi	r18, 0x00	; 0
    20c0:	30 e0       	ldi	r19, 0x00	; 0
    20c2:	40 e8       	ldi	r20, 0x80	; 128
    20c4:	5f e3       	ldi	r21, 0x3F	; 63
    20c6:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    20ca:	88 23       	and	r24, r24
    20cc:	1c f4       	brge	.+6      	; 0x20d4 <LCD_enu_SendChar+0x2b4>
		__ticks = 1;
    20ce:	81 e0       	ldi	r24, 0x01	; 1
    20d0:	88 8b       	std	Y+16, r24	; 0x10
    20d2:	91 c0       	rjmp	.+290    	; 0x21f6 <LCD_enu_SendChar+0x3d6>
	else if (__tmp > 255)
    20d4:	69 89       	ldd	r22, Y+17	; 0x11
    20d6:	7a 89       	ldd	r23, Y+18	; 0x12
    20d8:	8b 89       	ldd	r24, Y+19	; 0x13
    20da:	9c 89       	ldd	r25, Y+20	; 0x14
    20dc:	20 e0       	ldi	r18, 0x00	; 0
    20de:	30 e0       	ldi	r19, 0x00	; 0
    20e0:	4f e7       	ldi	r20, 0x7F	; 127
    20e2:	53 e4       	ldi	r21, 0x43	; 67
    20e4:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    20e8:	18 16       	cp	r1, r24
    20ea:	0c f0       	brlt	.+2      	; 0x20ee <LCD_enu_SendChar+0x2ce>
    20ec:	7b c0       	rjmp	.+246    	; 0x21e4 <LCD_enu_SendChar+0x3c4>
	{
		_delay_ms(__us / 1000.0);
    20ee:	6d 89       	ldd	r22, Y+21	; 0x15
    20f0:	7e 89       	ldd	r23, Y+22	; 0x16
    20f2:	8f 89       	ldd	r24, Y+23	; 0x17
    20f4:	98 8d       	ldd	r25, Y+24	; 0x18
    20f6:	20 e0       	ldi	r18, 0x00	; 0
    20f8:	30 e0       	ldi	r19, 0x00	; 0
    20fa:	4a e7       	ldi	r20, 0x7A	; 122
    20fc:	54 e4       	ldi	r21, 0x44	; 68
    20fe:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    2102:	dc 01       	movw	r26, r24
    2104:	cb 01       	movw	r24, r22
    2106:	8c 87       	std	Y+12, r24	; 0x0c
    2108:	9d 87       	std	Y+13, r25	; 0x0d
    210a:	ae 87       	std	Y+14, r26	; 0x0e
    210c:	bf 87       	std	Y+15, r27	; 0x0f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    210e:	6c 85       	ldd	r22, Y+12	; 0x0c
    2110:	7d 85       	ldd	r23, Y+13	; 0x0d
    2112:	8e 85       	ldd	r24, Y+14	; 0x0e
    2114:	9f 85       	ldd	r25, Y+15	; 0x0f
    2116:	20 e0       	ldi	r18, 0x00	; 0
    2118:	30 e0       	ldi	r19, 0x00	; 0
    211a:	4a e7       	ldi	r20, 0x7A	; 122
    211c:	55 e4       	ldi	r21, 0x45	; 69
    211e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2122:	dc 01       	movw	r26, r24
    2124:	cb 01       	movw	r24, r22
    2126:	88 87       	std	Y+8, r24	; 0x08
    2128:	99 87       	std	Y+9, r25	; 0x09
    212a:	aa 87       	std	Y+10, r26	; 0x0a
    212c:	bb 87       	std	Y+11, r27	; 0x0b
	if (__tmp < 1.0)
    212e:	68 85       	ldd	r22, Y+8	; 0x08
    2130:	79 85       	ldd	r23, Y+9	; 0x09
    2132:	8a 85       	ldd	r24, Y+10	; 0x0a
    2134:	9b 85       	ldd	r25, Y+11	; 0x0b
    2136:	20 e0       	ldi	r18, 0x00	; 0
    2138:	30 e0       	ldi	r19, 0x00	; 0
    213a:	40 e8       	ldi	r20, 0x80	; 128
    213c:	5f e3       	ldi	r21, 0x3F	; 63
    213e:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2142:	88 23       	and	r24, r24
    2144:	2c f4       	brge	.+10     	; 0x2150 <LCD_enu_SendChar+0x330>
		__ticks = 1;
    2146:	81 e0       	ldi	r24, 0x01	; 1
    2148:	90 e0       	ldi	r25, 0x00	; 0
    214a:	9f 83       	std	Y+7, r25	; 0x07
    214c:	8e 83       	std	Y+6, r24	; 0x06
    214e:	3f c0       	rjmp	.+126    	; 0x21ce <LCD_enu_SendChar+0x3ae>
	else if (__tmp > 65535)
    2150:	68 85       	ldd	r22, Y+8	; 0x08
    2152:	79 85       	ldd	r23, Y+9	; 0x09
    2154:	8a 85       	ldd	r24, Y+10	; 0x0a
    2156:	9b 85       	ldd	r25, Y+11	; 0x0b
    2158:	20 e0       	ldi	r18, 0x00	; 0
    215a:	3f ef       	ldi	r19, 0xFF	; 255
    215c:	4f e7       	ldi	r20, 0x7F	; 127
    215e:	57 e4       	ldi	r21, 0x47	; 71
    2160:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2164:	18 16       	cp	r1, r24
    2166:	4c f5       	brge	.+82     	; 0x21ba <LCD_enu_SendChar+0x39a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2168:	6c 85       	ldd	r22, Y+12	; 0x0c
    216a:	7d 85       	ldd	r23, Y+13	; 0x0d
    216c:	8e 85       	ldd	r24, Y+14	; 0x0e
    216e:	9f 85       	ldd	r25, Y+15	; 0x0f
    2170:	20 e0       	ldi	r18, 0x00	; 0
    2172:	30 e0       	ldi	r19, 0x00	; 0
    2174:	40 e2       	ldi	r20, 0x20	; 32
    2176:	51 e4       	ldi	r21, 0x41	; 65
    2178:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    217c:	dc 01       	movw	r26, r24
    217e:	cb 01       	movw	r24, r22
    2180:	bc 01       	movw	r22, r24
    2182:	cd 01       	movw	r24, r26
    2184:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2188:	dc 01       	movw	r26, r24
    218a:	cb 01       	movw	r24, r22
    218c:	9f 83       	std	Y+7, r25	; 0x07
    218e:	8e 83       	std	Y+6, r24	; 0x06
    2190:	0f c0       	rjmp	.+30     	; 0x21b0 <LCD_enu_SendChar+0x390>
    2192:	80 e9       	ldi	r24, 0x90	; 144
    2194:	91 e0       	ldi	r25, 0x01	; 1
    2196:	9d 83       	std	Y+5, r25	; 0x05
    2198:	8c 83       	std	Y+4, r24	; 0x04
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    219a:	8c 81       	ldd	r24, Y+4	; 0x04
    219c:	9d 81       	ldd	r25, Y+5	; 0x05
    219e:	01 97       	sbiw	r24, 0x01	; 1
    21a0:	f1 f7       	brne	.-4      	; 0x219e <LCD_enu_SendChar+0x37e>
    21a2:	9d 83       	std	Y+5, r25	; 0x05
    21a4:	8c 83       	std	Y+4, r24	; 0x04
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    21a6:	8e 81       	ldd	r24, Y+6	; 0x06
    21a8:	9f 81       	ldd	r25, Y+7	; 0x07
    21aa:	01 97       	sbiw	r24, 0x01	; 1
    21ac:	9f 83       	std	Y+7, r25	; 0x07
    21ae:	8e 83       	std	Y+6, r24	; 0x06
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    21b0:	8e 81       	ldd	r24, Y+6	; 0x06
    21b2:	9f 81       	ldd	r25, Y+7	; 0x07
    21b4:	00 97       	sbiw	r24, 0x00	; 0
    21b6:	69 f7       	brne	.-38     	; 0x2192 <LCD_enu_SendChar+0x372>
    21b8:	24 c0       	rjmp	.+72     	; 0x2202 <LCD_enu_SendChar+0x3e2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    21ba:	68 85       	ldd	r22, Y+8	; 0x08
    21bc:	79 85       	ldd	r23, Y+9	; 0x09
    21be:	8a 85       	ldd	r24, Y+10	; 0x0a
    21c0:	9b 85       	ldd	r25, Y+11	; 0x0b
    21c2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    21c6:	dc 01       	movw	r26, r24
    21c8:	cb 01       	movw	r24, r22
    21ca:	9f 83       	std	Y+7, r25	; 0x07
    21cc:	8e 83       	std	Y+6, r24	; 0x06
    21ce:	8e 81       	ldd	r24, Y+6	; 0x06
    21d0:	9f 81       	ldd	r25, Y+7	; 0x07
    21d2:	9b 83       	std	Y+3, r25	; 0x03
    21d4:	8a 83       	std	Y+2, r24	; 0x02
    21d6:	8a 81       	ldd	r24, Y+2	; 0x02
    21d8:	9b 81       	ldd	r25, Y+3	; 0x03
    21da:	01 97       	sbiw	r24, 0x01	; 1
    21dc:	f1 f7       	brne	.-4      	; 0x21da <LCD_enu_SendChar+0x3ba>
    21de:	9b 83       	std	Y+3, r25	; 0x03
    21e0:	8a 83       	std	Y+2, r24	; 0x02
    21e2:	0f c0       	rjmp	.+30     	; 0x2202 <LCD_enu_SendChar+0x3e2>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    21e4:	69 89       	ldd	r22, Y+17	; 0x11
    21e6:	7a 89       	ldd	r23, Y+18	; 0x12
    21e8:	8b 89       	ldd	r24, Y+19	; 0x13
    21ea:	9c 89       	ldd	r25, Y+20	; 0x14
    21ec:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    21f0:	dc 01       	movw	r26, r24
    21f2:	cb 01       	movw	r24, r22
    21f4:	88 8b       	std	Y+16, r24	; 0x10
    21f6:	88 89       	ldd	r24, Y+16	; 0x10
    21f8:	89 83       	std	Y+1, r24	; 0x01
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    21fa:	89 81       	ldd	r24, Y+1	; 0x01
    21fc:	8a 95       	dec	r24
    21fe:	f1 f7       	brne	.-4      	; 0x21fc <LCD_enu_SendChar+0x3dc>
    2200:	89 83       	std	Y+1, r24	; 0x01
    _delay_us(1);
    /* E = 0 */
    DIO_enu_SetPinValue(LCD_U8_E_PORT, LCD_U8_E_PIN, DIO_U8_LOW);
    2202:	80 e0       	ldi	r24, 0x00	; 0
    2204:	62 e0       	ldi	r22, 0x02	; 2
    2206:	40 e0       	ldi	r20, 0x00	; 0
    2208:	0e 94 72 29 	call	0x52e4	; 0x52e4 <DIO_enu_SetPinValue>
    return STATE_OK;
    220c:	81 e0       	ldi	r24, 0x01	; 1
#endif
}
    220e:	e1 96       	adiw	r28, 0x31	; 49
    2210:	0f b6       	in	r0, 0x3f	; 63
    2212:	f8 94       	cli
    2214:	de bf       	out	0x3e, r29	; 62
    2216:	0f be       	out	0x3f, r0	; 63
    2218:	cd bf       	out	0x3d, r28	; 61
    221a:	cf 91       	pop	r28
    221c:	df 91       	pop	r29
    221e:	08 95       	ret

00002220 <LCD_enu_SendString>:
ES_t LCD_enu_SendString(u8 *Copy_pu8_String)
{
    2220:	df 93       	push	r29
    2222:	cf 93       	push	r28
    2224:	00 d0       	rcall	.+0      	; 0x2226 <LCD_enu_SendString+0x6>
    2226:	00 d0       	rcall	.+0      	; 0x2228 <LCD_enu_SendString+0x8>
    2228:	cd b7       	in	r28, 0x3d	; 61
    222a:	de b7       	in	r29, 0x3e	; 62
    222c:	9c 83       	std	Y+4, r25	; 0x04
    222e:	8b 83       	std	Y+3, r24	; 0x03
    u8 Local_u8_errorState = STATE_OK;
    2230:	81 e0       	ldi	r24, 0x01	; 1
    2232:	8a 83       	std	Y+2, r24	; 0x02
    if (Copy_pu8_String != NULL)
    2234:	8b 81       	ldd	r24, Y+3	; 0x03
    2236:	9c 81       	ldd	r25, Y+4	; 0x04
    2238:	00 97       	sbiw	r24, 0x00	; 0
    223a:	e1 f0       	breq	.+56     	; 0x2274 <LCD_enu_SendString+0x54>
    {
        for (u8 i = 0; Copy_pu8_String[i] != '\0'; i++)
    223c:	19 82       	std	Y+1, r1	; 0x01
    223e:	0e c0       	rjmp	.+28     	; 0x225c <LCD_enu_SendString+0x3c>
        {
            LCD_enu_SendChar(Copy_pu8_String[i]);
    2240:	89 81       	ldd	r24, Y+1	; 0x01
    2242:	28 2f       	mov	r18, r24
    2244:	30 e0       	ldi	r19, 0x00	; 0
    2246:	8b 81       	ldd	r24, Y+3	; 0x03
    2248:	9c 81       	ldd	r25, Y+4	; 0x04
    224a:	fc 01       	movw	r30, r24
    224c:	e2 0f       	add	r30, r18
    224e:	f3 1f       	adc	r31, r19
    2250:	80 81       	ld	r24, Z
    2252:	0e 94 10 0f 	call	0x1e20	; 0x1e20 <LCD_enu_SendChar>
ES_t LCD_enu_SendString(u8 *Copy_pu8_String)
{
    u8 Local_u8_errorState = STATE_OK;
    if (Copy_pu8_String != NULL)
    {
        for (u8 i = 0; Copy_pu8_String[i] != '\0'; i++)
    2256:	89 81       	ldd	r24, Y+1	; 0x01
    2258:	8f 5f       	subi	r24, 0xFF	; 255
    225a:	89 83       	std	Y+1, r24	; 0x01
    225c:	89 81       	ldd	r24, Y+1	; 0x01
    225e:	28 2f       	mov	r18, r24
    2260:	30 e0       	ldi	r19, 0x00	; 0
    2262:	8b 81       	ldd	r24, Y+3	; 0x03
    2264:	9c 81       	ldd	r25, Y+4	; 0x04
    2266:	fc 01       	movw	r30, r24
    2268:	e2 0f       	add	r30, r18
    226a:	f3 1f       	adc	r31, r19
    226c:	80 81       	ld	r24, Z
    226e:	88 23       	and	r24, r24
    2270:	39 f7       	brne	.-50     	; 0x2240 <LCD_enu_SendString+0x20>
    2272:	01 c0       	rjmp	.+2      	; 0x2276 <LCD_enu_SendString+0x56>
            LCD_enu_SendChar(Copy_pu8_String[i]);
        }
    }
    else
    {
        Local_u8_errorState = STATE_NOT_OK;
    2274:	1a 82       	std	Y+2, r1	; 0x02
    }
    return Local_u8_errorState;
    2276:	8a 81       	ldd	r24, Y+2	; 0x02
}
    2278:	0f 90       	pop	r0
    227a:	0f 90       	pop	r0
    227c:	0f 90       	pop	r0
    227e:	0f 90       	pop	r0
    2280:	cf 91       	pop	r28
    2282:	df 91       	pop	r29
    2284:	08 95       	ret

00002286 <LCD_enu_SendNum>:
ES_t LCD_enu_SendNum(u32 Copy_u32_Num)
{
    2286:	0f 93       	push	r16
    2288:	1f 93       	push	r17
    228a:	df 93       	push	r29
    228c:	cf 93       	push	r28
    228e:	cd b7       	in	r28, 0x3d	; 61
    2290:	de b7       	in	r29, 0x3e	; 62
    2292:	60 97       	sbiw	r28, 0x10	; 16
    2294:	0f b6       	in	r0, 0x3f	; 63
    2296:	f8 94       	cli
    2298:	de bf       	out	0x3e, r29	; 62
    229a:	0f be       	out	0x3f, r0	; 63
    229c:	cd bf       	out	0x3d, r28	; 61
    229e:	6d 87       	std	Y+13, r22	; 0x0d
    22a0:	7e 87       	std	Y+14, r23	; 0x0e
    22a2:	8f 87       	std	Y+15, r24	; 0x0f
    22a4:	98 8b       	std	Y+16, r25	; 0x10
    u8 Local_u8_numArr[10], Local_u8_iterator1 = 0;
    22a6:	1a 82       	std	Y+2, r1	; 0x02
    s8 Local_u8_iterator2 = 0;
    22a8:	19 82       	std	Y+1, r1	; 0x01
    if (Copy_u32_Num == 0)
    22aa:	8d 85       	ldd	r24, Y+13	; 0x0d
    22ac:	9e 85       	ldd	r25, Y+14	; 0x0e
    22ae:	af 85       	ldd	r26, Y+15	; 0x0f
    22b0:	b8 89       	ldd	r27, Y+16	; 0x10
    22b2:	00 97       	sbiw	r24, 0x00	; 0
    22b4:	a1 05       	cpc	r26, r1
    22b6:	b1 05       	cpc	r27, r1
    22b8:	89 f5       	brne	.+98     	; 0x231c <LCD_enu_SendNum+0x96>
        LCD_enu_SendChar('0');
    22ba:	80 e3       	ldi	r24, 0x30	; 48
    22bc:	0e 94 10 0f 	call	0x1e20	; 0x1e20 <LCD_enu_SendChar>
    22c0:	4d c0       	rjmp	.+154    	; 0x235c <LCD_enu_SendNum+0xd6>
    else
    {
        while (Copy_u32_Num != 0)
        {
            Local_u8_numArr[Local_u8_iterator1] = Copy_u32_Num % 10;
    22c2:	8a 81       	ldd	r24, Y+2	; 0x02
    22c4:	08 2f       	mov	r16, r24
    22c6:	10 e0       	ldi	r17, 0x00	; 0
    22c8:	8d 85       	ldd	r24, Y+13	; 0x0d
    22ca:	9e 85       	ldd	r25, Y+14	; 0x0e
    22cc:	af 85       	ldd	r26, Y+15	; 0x0f
    22ce:	b8 89       	ldd	r27, Y+16	; 0x10
    22d0:	2a e0       	ldi	r18, 0x0A	; 10
    22d2:	30 e0       	ldi	r19, 0x00	; 0
    22d4:	40 e0       	ldi	r20, 0x00	; 0
    22d6:	50 e0       	ldi	r21, 0x00	; 0
    22d8:	bc 01       	movw	r22, r24
    22da:	cd 01       	movw	r24, r26
    22dc:	0e 94 7a 2e 	call	0x5cf4	; 0x5cf4 <__udivmodsi4>
    22e0:	dc 01       	movw	r26, r24
    22e2:	cb 01       	movw	r24, r22
    22e4:	28 2f       	mov	r18, r24
    22e6:	ce 01       	movw	r24, r28
    22e8:	03 96       	adiw	r24, 0x03	; 3
    22ea:	fc 01       	movw	r30, r24
    22ec:	e0 0f       	add	r30, r16
    22ee:	f1 1f       	adc	r31, r17
    22f0:	20 83       	st	Z, r18
            Copy_u32_Num /= 10;
    22f2:	8d 85       	ldd	r24, Y+13	; 0x0d
    22f4:	9e 85       	ldd	r25, Y+14	; 0x0e
    22f6:	af 85       	ldd	r26, Y+15	; 0x0f
    22f8:	b8 89       	ldd	r27, Y+16	; 0x10
    22fa:	2a e0       	ldi	r18, 0x0A	; 10
    22fc:	30 e0       	ldi	r19, 0x00	; 0
    22fe:	40 e0       	ldi	r20, 0x00	; 0
    2300:	50 e0       	ldi	r21, 0x00	; 0
    2302:	bc 01       	movw	r22, r24
    2304:	cd 01       	movw	r24, r26
    2306:	0e 94 7a 2e 	call	0x5cf4	; 0x5cf4 <__udivmodsi4>
    230a:	da 01       	movw	r26, r20
    230c:	c9 01       	movw	r24, r18
    230e:	8d 87       	std	Y+13, r24	; 0x0d
    2310:	9e 87       	std	Y+14, r25	; 0x0e
    2312:	af 87       	std	Y+15, r26	; 0x0f
    2314:	b8 8b       	std	Y+16, r27	; 0x10
            Local_u8_iterator1++;
    2316:	8a 81       	ldd	r24, Y+2	; 0x02
    2318:	8f 5f       	subi	r24, 0xFF	; 255
    231a:	8a 83       	std	Y+2, r24	; 0x02
    s8 Local_u8_iterator2 = 0;
    if (Copy_u32_Num == 0)
        LCD_enu_SendChar('0');
    else
    {
        while (Copy_u32_Num != 0)
    231c:	8d 85       	ldd	r24, Y+13	; 0x0d
    231e:	9e 85       	ldd	r25, Y+14	; 0x0e
    2320:	af 85       	ldd	r26, Y+15	; 0x0f
    2322:	b8 89       	ldd	r27, Y+16	; 0x10
    2324:	00 97       	sbiw	r24, 0x00	; 0
    2326:	a1 05       	cpc	r26, r1
    2328:	b1 05       	cpc	r27, r1
    232a:	59 f6       	brne	.-106    	; 0x22c2 <LCD_enu_SendNum+0x3c>
        {
            Local_u8_numArr[Local_u8_iterator1] = Copy_u32_Num % 10;
            Copy_u32_Num /= 10;
            Local_u8_iterator1++;
        }
        for (Local_u8_iterator2 = Local_u8_iterator1 - 1; Local_u8_iterator2 >= 0; Local_u8_iterator2--)
    232c:	8a 81       	ldd	r24, Y+2	; 0x02
    232e:	81 50       	subi	r24, 0x01	; 1
    2330:	89 83       	std	Y+1, r24	; 0x01
    2332:	11 c0       	rjmp	.+34     	; 0x2356 <LCD_enu_SendNum+0xd0>
        {
            LCD_enu_SendChar(Local_u8_numArr[Local_u8_iterator2] + '0');
    2334:	89 81       	ldd	r24, Y+1	; 0x01
    2336:	28 2f       	mov	r18, r24
    2338:	33 27       	eor	r19, r19
    233a:	27 fd       	sbrc	r18, 7
    233c:	30 95       	com	r19
    233e:	ce 01       	movw	r24, r28
    2340:	03 96       	adiw	r24, 0x03	; 3
    2342:	fc 01       	movw	r30, r24
    2344:	e2 0f       	add	r30, r18
    2346:	f3 1f       	adc	r31, r19
    2348:	80 81       	ld	r24, Z
    234a:	80 5d       	subi	r24, 0xD0	; 208
    234c:	0e 94 10 0f 	call	0x1e20	; 0x1e20 <LCD_enu_SendChar>
        {
            Local_u8_numArr[Local_u8_iterator1] = Copy_u32_Num % 10;
            Copy_u32_Num /= 10;
            Local_u8_iterator1++;
        }
        for (Local_u8_iterator2 = Local_u8_iterator1 - 1; Local_u8_iterator2 >= 0; Local_u8_iterator2--)
    2350:	89 81       	ldd	r24, Y+1	; 0x01
    2352:	81 50       	subi	r24, 0x01	; 1
    2354:	89 83       	std	Y+1, r24	; 0x01
    2356:	89 81       	ldd	r24, Y+1	; 0x01
    2358:	88 23       	and	r24, r24
    235a:	64 f7       	brge	.-40     	; 0x2334 <LCD_enu_SendNum+0xae>
        {
            LCD_enu_SendChar(Local_u8_numArr[Local_u8_iterator2] + '0');
        }
    }
    return STATE_OK;
    235c:	81 e0       	ldi	r24, 0x01	; 1
}
    235e:	60 96       	adiw	r28, 0x10	; 16
    2360:	0f b6       	in	r0, 0x3f	; 63
    2362:	f8 94       	cli
    2364:	de bf       	out	0x3e, r29	; 62
    2366:	0f be       	out	0x3f, r0	; 63
    2368:	cd bf       	out	0x3d, r28	; 61
    236a:	cf 91       	pop	r28
    236c:	df 91       	pop	r29
    236e:	1f 91       	pop	r17
    2370:	0f 91       	pop	r16
    2372:	08 95       	ret

00002374 <LCD_enu_SetCursor>:
ES_t LCD_enu_SetCursor(u8 Copy_u8_lineNum, u8 Copy_u8_Location)
{
    2374:	df 93       	push	r29
    2376:	cf 93       	push	r28
    2378:	00 d0       	rcall	.+0      	; 0x237a <LCD_enu_SetCursor+0x6>
    237a:	00 d0       	rcall	.+0      	; 0x237c <LCD_enu_SetCursor+0x8>
    237c:	0f 92       	push	r0
    237e:	cd b7       	in	r28, 0x3d	; 61
    2380:	de b7       	in	r29, 0x3e	; 62
    2382:	8a 83       	std	Y+2, r24	; 0x02
    2384:	6b 83       	std	Y+3, r22	; 0x03
    u8 Local_u8_errorState = STATE_OK;
    2386:	81 e0       	ldi	r24, 0x01	; 1
    2388:	89 83       	std	Y+1, r24	; 0x01
    if (Copy_u8_Location < MAX_NUM_OF_LOCATIONS)
    238a:	8b 81       	ldd	r24, Y+3	; 0x03
    238c:	88 32       	cpi	r24, 0x28	; 40
    238e:	d8 f4       	brcc	.+54     	; 0x23c6 <LCD_enu_SetCursor+0x52>
    {
        switch (Copy_u8_lineNum)
    2390:	8a 81       	ldd	r24, Y+2	; 0x02
    2392:	28 2f       	mov	r18, r24
    2394:	30 e0       	ldi	r19, 0x00	; 0
    2396:	3d 83       	std	Y+5, r19	; 0x05
    2398:	2c 83       	std	Y+4, r18	; 0x04
    239a:	8c 81       	ldd	r24, Y+4	; 0x04
    239c:	9d 81       	ldd	r25, Y+5	; 0x05
    239e:	00 97       	sbiw	r24, 0x00	; 0
    23a0:	31 f0       	breq	.+12     	; 0x23ae <LCD_enu_SetCursor+0x3a>
    23a2:	2c 81       	ldd	r18, Y+4	; 0x04
    23a4:	3d 81       	ldd	r19, Y+5	; 0x05
    23a6:	21 30       	cpi	r18, 0x01	; 1
    23a8:	31 05       	cpc	r19, r1
    23aa:	31 f0       	breq	.+12     	; 0x23b8 <LCD_enu_SetCursor+0x44>
    23ac:	0a c0       	rjmp	.+20     	; 0x23c2 <LCD_enu_SetCursor+0x4e>
        {
        case LINE1:LCD_enu_SendCmnd(ADDRESS_OF_LINE1 + Copy_u8_Location);break;
    23ae:	8b 81       	ldd	r24, Y+3	; 0x03
    23b0:	80 58       	subi	r24, 0x80	; 128
    23b2:	0e 94 10 0d 	call	0x1a20	; 0x1a20 <LCD_enu_SendCmnd>
    23b6:	08 c0       	rjmp	.+16     	; 0x23c8 <LCD_enu_SetCursor+0x54>
        case LINE2:LCD_enu_SendCmnd(ADDRESS_OF_LINE2 + Copy_u8_Location);break;
    23b8:	8b 81       	ldd	r24, Y+3	; 0x03
    23ba:	80 54       	subi	r24, 0x40	; 64
    23bc:	0e 94 10 0d 	call	0x1a20	; 0x1a20 <LCD_enu_SendCmnd>
    23c0:	03 c0       	rjmp	.+6      	; 0x23c8 <LCD_enu_SetCursor+0x54>
        default:Local_u8_errorState = STATE_NOT_OK;break;
    23c2:	19 82       	std	Y+1, r1	; 0x01
    23c4:	01 c0       	rjmp	.+2      	; 0x23c8 <LCD_enu_SetCursor+0x54>
        }
    }
    else
    {
        Local_u8_errorState = STATE_NOT_OK;
    23c6:	19 82       	std	Y+1, r1	; 0x01
    }
    return Local_u8_errorState;
    23c8:	89 81       	ldd	r24, Y+1	; 0x01
}
    23ca:	0f 90       	pop	r0
    23cc:	0f 90       	pop	r0
    23ce:	0f 90       	pop	r0
    23d0:	0f 90       	pop	r0
    23d2:	0f 90       	pop	r0
    23d4:	cf 91       	pop	r28
    23d6:	df 91       	pop	r29
    23d8:	08 95       	ret

000023da <LCD_enu_Init>:
ES_t LCD_enu_Init(void)
{
    23da:	0f 93       	push	r16
    23dc:	1f 93       	push	r17
    23de:	df 93       	push	r29
    23e0:	cf 93       	push	r28
    23e2:	cd b7       	in	r28, 0x3d	; 61
    23e4:	de b7       	in	r29, 0x3e	; 62
    23e6:	cc 54       	subi	r28, 0x4C	; 76
    23e8:	d0 40       	sbci	r29, 0x00	; 0
    23ea:	0f b6       	in	r0, 0x3f	; 63
    23ec:	f8 94       	cli
    23ee:	de bf       	out	0x3e, r29	; 62
    23f0:	0f be       	out	0x3f, r0	; 63
    23f2:	cd bf       	out	0x3d, r28	; 61
    DIO_enu_SetPinDirection(LCD_U8_RS_PORT, LCD_U8_RS_PIN, DIO_U8_OUTPUT);
    23f4:	80 e0       	ldi	r24, 0x00	; 0
    23f6:	61 e0       	ldi	r22, 0x01	; 1
    23f8:	41 e0       	ldi	r20, 0x01	; 1
    23fa:	0e 94 48 28 	call	0x5090	; 0x5090 <DIO_enu_SetPinDirection>
    DIO_enu_SetPinDirection(LCD_U8_RW_PORT, LCD_U8_RW_PIN, DIO_U8_OUTPUT);
    23fe:	80 e0       	ldi	r24, 0x00	; 0
    2400:	60 e0       	ldi	r22, 0x00	; 0
    2402:	41 e0       	ldi	r20, 0x01	; 1
    2404:	0e 94 48 28 	call	0x5090	; 0x5090 <DIO_enu_SetPinDirection>
    DIO_enu_SetPinDirection(LCD_U8_E_PORT, LCD_U8_E_PIN, DIO_U8_OUTPUT);
    2408:	80 e0       	ldi	r24, 0x00	; 0
    240a:	62 e0       	ldi	r22, 0x02	; 2
    240c:	41 e0       	ldi	r20, 0x01	; 1
    240e:	0e 94 48 28 	call	0x5090	; 0x5090 <DIO_enu_SetPinDirection>
    DIO_enu_SetPinDirection(LCD_U8_DATA_PORT, D7, DIO_U8_OUTPUT);
    2412:	80 e0       	ldi	r24, 0x00	; 0
    2414:	66 e0       	ldi	r22, 0x06	; 6
    2416:	41 e0       	ldi	r20, 0x01	; 1
    2418:	0e 94 48 28 	call	0x5090	; 0x5090 <DIO_enu_SetPinDirection>
    DIO_enu_SetPinDirection(LCD_U8_DATA_PORT, D6, DIO_U8_OUTPUT);
    241c:	80 e0       	ldi	r24, 0x00	; 0
    241e:	65 e0       	ldi	r22, 0x05	; 5
    2420:	41 e0       	ldi	r20, 0x01	; 1
    2422:	0e 94 48 28 	call	0x5090	; 0x5090 <DIO_enu_SetPinDirection>
    DIO_enu_SetPinDirection(LCD_U8_DATA_PORT, D5, DIO_U8_OUTPUT);
    2426:	80 e0       	ldi	r24, 0x00	; 0
    2428:	64 e0       	ldi	r22, 0x04	; 4
    242a:	41 e0       	ldi	r20, 0x01	; 1
    242c:	0e 94 48 28 	call	0x5090	; 0x5090 <DIO_enu_SetPinDirection>
    DIO_enu_SetPinDirection(LCD_U8_DATA_PORT, D4, DIO_U8_OUTPUT);
    2430:	80 e0       	ldi	r24, 0x00	; 0
    2432:	63 e0       	ldi	r22, 0x03	; 3
    2434:	41 e0       	ldi	r20, 0x01	; 1
    2436:	0e 94 48 28 	call	0x5090	; 0x5090 <DIO_enu_SetPinDirection>
    243a:	fe 01       	movw	r30, r28
    243c:	e7 5b       	subi	r30, 0xB7	; 183
    243e:	ff 4f       	sbci	r31, 0xFF	; 255
    2440:	80 e0       	ldi	r24, 0x00	; 0
    2442:	90 e0       	ldi	r25, 0x00	; 0
    2444:	ac e0       	ldi	r26, 0x0C	; 12
    2446:	b2 e4       	ldi	r27, 0x42	; 66
    2448:	80 83       	st	Z, r24
    244a:	91 83       	std	Z+1, r25	; 0x01
    244c:	a2 83       	std	Z+2, r26	; 0x02
    244e:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2450:	8e 01       	movw	r16, r28
    2452:	0b 5b       	subi	r16, 0xBB	; 187
    2454:	1f 4f       	sbci	r17, 0xFF	; 255
    2456:	fe 01       	movw	r30, r28
    2458:	e7 5b       	subi	r30, 0xB7	; 183
    245a:	ff 4f       	sbci	r31, 0xFF	; 255
    245c:	60 81       	ld	r22, Z
    245e:	71 81       	ldd	r23, Z+1	; 0x01
    2460:	82 81       	ldd	r24, Z+2	; 0x02
    2462:	93 81       	ldd	r25, Z+3	; 0x03
    2464:	20 e0       	ldi	r18, 0x00	; 0
    2466:	30 e0       	ldi	r19, 0x00	; 0
    2468:	4a e7       	ldi	r20, 0x7A	; 122
    246a:	55 e4       	ldi	r21, 0x45	; 69
    246c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2470:	dc 01       	movw	r26, r24
    2472:	cb 01       	movw	r24, r22
    2474:	f8 01       	movw	r30, r16
    2476:	80 83       	st	Z, r24
    2478:	91 83       	std	Z+1, r25	; 0x01
    247a:	a2 83       	std	Z+2, r26	; 0x02
    247c:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    247e:	fe 01       	movw	r30, r28
    2480:	eb 5b       	subi	r30, 0xBB	; 187
    2482:	ff 4f       	sbci	r31, 0xFF	; 255
    2484:	60 81       	ld	r22, Z
    2486:	71 81       	ldd	r23, Z+1	; 0x01
    2488:	82 81       	ldd	r24, Z+2	; 0x02
    248a:	93 81       	ldd	r25, Z+3	; 0x03
    248c:	20 e0       	ldi	r18, 0x00	; 0
    248e:	30 e0       	ldi	r19, 0x00	; 0
    2490:	40 e8       	ldi	r20, 0x80	; 128
    2492:	5f e3       	ldi	r21, 0x3F	; 63
    2494:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2498:	88 23       	and	r24, r24
    249a:	44 f4       	brge	.+16     	; 0x24ac <LCD_enu_Init+0xd2>
		__ticks = 1;
    249c:	fe 01       	movw	r30, r28
    249e:	ed 5b       	subi	r30, 0xBD	; 189
    24a0:	ff 4f       	sbci	r31, 0xFF	; 255
    24a2:	81 e0       	ldi	r24, 0x01	; 1
    24a4:	90 e0       	ldi	r25, 0x00	; 0
    24a6:	91 83       	std	Z+1, r25	; 0x01
    24a8:	80 83       	st	Z, r24
    24aa:	64 c0       	rjmp	.+200    	; 0x2574 <LCD_enu_Init+0x19a>
	else if (__tmp > 65535)
    24ac:	fe 01       	movw	r30, r28
    24ae:	eb 5b       	subi	r30, 0xBB	; 187
    24b0:	ff 4f       	sbci	r31, 0xFF	; 255
    24b2:	60 81       	ld	r22, Z
    24b4:	71 81       	ldd	r23, Z+1	; 0x01
    24b6:	82 81       	ldd	r24, Z+2	; 0x02
    24b8:	93 81       	ldd	r25, Z+3	; 0x03
    24ba:	20 e0       	ldi	r18, 0x00	; 0
    24bc:	3f ef       	ldi	r19, 0xFF	; 255
    24be:	4f e7       	ldi	r20, 0x7F	; 127
    24c0:	57 e4       	ldi	r21, 0x47	; 71
    24c2:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    24c6:	18 16       	cp	r1, r24
    24c8:	0c f0       	brlt	.+2      	; 0x24cc <LCD_enu_Init+0xf2>
    24ca:	43 c0       	rjmp	.+134    	; 0x2552 <LCD_enu_Init+0x178>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    24cc:	fe 01       	movw	r30, r28
    24ce:	e7 5b       	subi	r30, 0xB7	; 183
    24d0:	ff 4f       	sbci	r31, 0xFF	; 255
    24d2:	60 81       	ld	r22, Z
    24d4:	71 81       	ldd	r23, Z+1	; 0x01
    24d6:	82 81       	ldd	r24, Z+2	; 0x02
    24d8:	93 81       	ldd	r25, Z+3	; 0x03
    24da:	20 e0       	ldi	r18, 0x00	; 0
    24dc:	30 e0       	ldi	r19, 0x00	; 0
    24de:	40 e2       	ldi	r20, 0x20	; 32
    24e0:	51 e4       	ldi	r21, 0x41	; 65
    24e2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    24e6:	dc 01       	movw	r26, r24
    24e8:	cb 01       	movw	r24, r22
    24ea:	8e 01       	movw	r16, r28
    24ec:	0d 5b       	subi	r16, 0xBD	; 189
    24ee:	1f 4f       	sbci	r17, 0xFF	; 255
    24f0:	bc 01       	movw	r22, r24
    24f2:	cd 01       	movw	r24, r26
    24f4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    24f8:	dc 01       	movw	r26, r24
    24fa:	cb 01       	movw	r24, r22
    24fc:	f8 01       	movw	r30, r16
    24fe:	91 83       	std	Z+1, r25	; 0x01
    2500:	80 83       	st	Z, r24
    2502:	1f c0       	rjmp	.+62     	; 0x2542 <LCD_enu_Init+0x168>
    2504:	fe 01       	movw	r30, r28
    2506:	ef 5b       	subi	r30, 0xBF	; 191
    2508:	ff 4f       	sbci	r31, 0xFF	; 255
    250a:	80 e9       	ldi	r24, 0x90	; 144
    250c:	91 e0       	ldi	r25, 0x01	; 1
    250e:	91 83       	std	Z+1, r25	; 0x01
    2510:	80 83       	st	Z, r24
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    2512:	fe 01       	movw	r30, r28
    2514:	ef 5b       	subi	r30, 0xBF	; 191
    2516:	ff 4f       	sbci	r31, 0xFF	; 255
    2518:	80 81       	ld	r24, Z
    251a:	91 81       	ldd	r25, Z+1	; 0x01
    251c:	01 97       	sbiw	r24, 0x01	; 1
    251e:	f1 f7       	brne	.-4      	; 0x251c <LCD_enu_Init+0x142>
    2520:	fe 01       	movw	r30, r28
    2522:	ef 5b       	subi	r30, 0xBF	; 191
    2524:	ff 4f       	sbci	r31, 0xFF	; 255
    2526:	91 83       	std	Z+1, r25	; 0x01
    2528:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    252a:	de 01       	movw	r26, r28
    252c:	ad 5b       	subi	r26, 0xBD	; 189
    252e:	bf 4f       	sbci	r27, 0xFF	; 255
    2530:	fe 01       	movw	r30, r28
    2532:	ed 5b       	subi	r30, 0xBD	; 189
    2534:	ff 4f       	sbci	r31, 0xFF	; 255
    2536:	80 81       	ld	r24, Z
    2538:	91 81       	ldd	r25, Z+1	; 0x01
    253a:	01 97       	sbiw	r24, 0x01	; 1
    253c:	11 96       	adiw	r26, 0x01	; 1
    253e:	9c 93       	st	X, r25
    2540:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2542:	fe 01       	movw	r30, r28
    2544:	ed 5b       	subi	r30, 0xBD	; 189
    2546:	ff 4f       	sbci	r31, 0xFF	; 255
    2548:	80 81       	ld	r24, Z
    254a:	91 81       	ldd	r25, Z+1	; 0x01
    254c:	00 97       	sbiw	r24, 0x00	; 0
    254e:	d1 f6       	brne	.-76     	; 0x2504 <LCD_enu_Init+0x12a>
    2550:	24 c0       	rjmp	.+72     	; 0x259a <LCD_enu_Init+0x1c0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2552:	8e 01       	movw	r16, r28
    2554:	0d 5b       	subi	r16, 0xBD	; 189
    2556:	1f 4f       	sbci	r17, 0xFF	; 255
    2558:	fe 01       	movw	r30, r28
    255a:	eb 5b       	subi	r30, 0xBB	; 187
    255c:	ff 4f       	sbci	r31, 0xFF	; 255
    255e:	60 81       	ld	r22, Z
    2560:	71 81       	ldd	r23, Z+1	; 0x01
    2562:	82 81       	ldd	r24, Z+2	; 0x02
    2564:	93 81       	ldd	r25, Z+3	; 0x03
    2566:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    256a:	dc 01       	movw	r26, r24
    256c:	cb 01       	movw	r24, r22
    256e:	f8 01       	movw	r30, r16
    2570:	91 83       	std	Z+1, r25	; 0x01
    2572:	80 83       	st	Z, r24
    2574:	fe 01       	movw	r30, r28
    2576:	ed 5b       	subi	r30, 0xBD	; 189
    2578:	ff 4f       	sbci	r31, 0xFF	; 255
    257a:	80 81       	ld	r24, Z
    257c:	91 81       	ldd	r25, Z+1	; 0x01
    257e:	fe 01       	movw	r30, r28
    2580:	ff 96       	adiw	r30, 0x3f	; 63
    2582:	91 83       	std	Z+1, r25	; 0x01
    2584:	80 83       	st	Z, r24
    2586:	fe 01       	movw	r30, r28
    2588:	ff 96       	adiw	r30, 0x3f	; 63
    258a:	80 81       	ld	r24, Z
    258c:	91 81       	ldd	r25, Z+1	; 0x01
    258e:	01 97       	sbiw	r24, 0x01	; 1
    2590:	f1 f7       	brne	.-4      	; 0x258e <LCD_enu_Init+0x1b4>
    2592:	fe 01       	movw	r30, r28
    2594:	ff 96       	adiw	r30, 0x3f	; 63
    2596:	91 83       	std	Z+1, r25	; 0x01
    2598:	80 83       	st	Z, r24
    _delay_ms(2);
    LCD_enu_SendCmnd(ENTRY_MOOD);
    return STATE_OK;
#elif LCD_U8_MODE == LCD_U8_MODE_4BIT
    _delay_ms(35);
    LCD_enu_SendCmnd(FOURBIT_INIT1);
    259a:	83 e3       	ldi	r24, 0x33	; 51
    259c:	0e 94 10 0d 	call	0x1a20	; 0x1a20 <LCD_enu_SendCmnd>
    LCD_enu_SendCmnd(FOURBIT_INIT2);
    25a0:	82 e3       	ldi	r24, 0x32	; 50
    25a2:	0e 94 10 0d 	call	0x1a20	; 0x1a20 <LCD_enu_SendCmnd>
    LCD_enu_SendCmnd(FUN_SET_4BIT_2LINES_5X7);
    25a6:	88 e2       	ldi	r24, 0x28	; 40
    25a8:	0e 94 10 0d 	call	0x1a20	; 0x1a20 <LCD_enu_SendCmnd>
    25ac:	80 e0       	ldi	r24, 0x00	; 0
    25ae:	90 e0       	ldi	r25, 0x00	; 0
    25b0:	a0 e2       	ldi	r26, 0x20	; 32
    25b2:	b2 e4       	ldi	r27, 0x42	; 66
    25b4:	8b af       	std	Y+59, r24	; 0x3b
    25b6:	9c af       	std	Y+60, r25	; 0x3c
    25b8:	ad af       	std	Y+61, r26	; 0x3d
    25ba:	be af       	std	Y+62, r27	; 0x3e
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    25bc:	6b ad       	ldd	r22, Y+59	; 0x3b
    25be:	7c ad       	ldd	r23, Y+60	; 0x3c
    25c0:	8d ad       	ldd	r24, Y+61	; 0x3d
    25c2:	9e ad       	ldd	r25, Y+62	; 0x3e
    25c4:	2b ea       	ldi	r18, 0xAB	; 171
    25c6:	3a ea       	ldi	r19, 0xAA	; 170
    25c8:	4a ea       	ldi	r20, 0xAA	; 170
    25ca:	50 e4       	ldi	r21, 0x40	; 64
    25cc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    25d0:	dc 01       	movw	r26, r24
    25d2:	cb 01       	movw	r24, r22
    25d4:	8f ab       	std	Y+55, r24	; 0x37
    25d6:	98 af       	std	Y+56, r25	; 0x38
    25d8:	a9 af       	std	Y+57, r26	; 0x39
    25da:	ba af       	std	Y+58, r27	; 0x3a
	if (__tmp < 1.0)
    25dc:	6f a9       	ldd	r22, Y+55	; 0x37
    25de:	78 ad       	ldd	r23, Y+56	; 0x38
    25e0:	89 ad       	ldd	r24, Y+57	; 0x39
    25e2:	9a ad       	ldd	r25, Y+58	; 0x3a
    25e4:	20 e0       	ldi	r18, 0x00	; 0
    25e6:	30 e0       	ldi	r19, 0x00	; 0
    25e8:	40 e8       	ldi	r20, 0x80	; 128
    25ea:	5f e3       	ldi	r21, 0x3F	; 63
    25ec:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    25f0:	88 23       	and	r24, r24
    25f2:	1c f4       	brge	.+6      	; 0x25fa <LCD_enu_Init+0x220>
		__ticks = 1;
    25f4:	81 e0       	ldi	r24, 0x01	; 1
    25f6:	8e ab       	std	Y+54, r24	; 0x36
    25f8:	91 c0       	rjmp	.+290    	; 0x271c <LCD_enu_Init+0x342>
	else if (__tmp > 255)
    25fa:	6f a9       	ldd	r22, Y+55	; 0x37
    25fc:	78 ad       	ldd	r23, Y+56	; 0x38
    25fe:	89 ad       	ldd	r24, Y+57	; 0x39
    2600:	9a ad       	ldd	r25, Y+58	; 0x3a
    2602:	20 e0       	ldi	r18, 0x00	; 0
    2604:	30 e0       	ldi	r19, 0x00	; 0
    2606:	4f e7       	ldi	r20, 0x7F	; 127
    2608:	53 e4       	ldi	r21, 0x43	; 67
    260a:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    260e:	18 16       	cp	r1, r24
    2610:	0c f0       	brlt	.+2      	; 0x2614 <LCD_enu_Init+0x23a>
    2612:	7b c0       	rjmp	.+246    	; 0x270a <LCD_enu_Init+0x330>
	{
		_delay_ms(__us / 1000.0);
    2614:	6b ad       	ldd	r22, Y+59	; 0x3b
    2616:	7c ad       	ldd	r23, Y+60	; 0x3c
    2618:	8d ad       	ldd	r24, Y+61	; 0x3d
    261a:	9e ad       	ldd	r25, Y+62	; 0x3e
    261c:	20 e0       	ldi	r18, 0x00	; 0
    261e:	30 e0       	ldi	r19, 0x00	; 0
    2620:	4a e7       	ldi	r20, 0x7A	; 122
    2622:	54 e4       	ldi	r21, 0x44	; 68
    2624:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    2628:	dc 01       	movw	r26, r24
    262a:	cb 01       	movw	r24, r22
    262c:	8a ab       	std	Y+50, r24	; 0x32
    262e:	9b ab       	std	Y+51, r25	; 0x33
    2630:	ac ab       	std	Y+52, r26	; 0x34
    2632:	bd ab       	std	Y+53, r27	; 0x35
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2634:	6a a9       	ldd	r22, Y+50	; 0x32
    2636:	7b a9       	ldd	r23, Y+51	; 0x33
    2638:	8c a9       	ldd	r24, Y+52	; 0x34
    263a:	9d a9       	ldd	r25, Y+53	; 0x35
    263c:	20 e0       	ldi	r18, 0x00	; 0
    263e:	30 e0       	ldi	r19, 0x00	; 0
    2640:	4a e7       	ldi	r20, 0x7A	; 122
    2642:	55 e4       	ldi	r21, 0x45	; 69
    2644:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2648:	dc 01       	movw	r26, r24
    264a:	cb 01       	movw	r24, r22
    264c:	8e a7       	std	Y+46, r24	; 0x2e
    264e:	9f a7       	std	Y+47, r25	; 0x2f
    2650:	a8 ab       	std	Y+48, r26	; 0x30
    2652:	b9 ab       	std	Y+49, r27	; 0x31
	if (__tmp < 1.0)
    2654:	6e a5       	ldd	r22, Y+46	; 0x2e
    2656:	7f a5       	ldd	r23, Y+47	; 0x2f
    2658:	88 a9       	ldd	r24, Y+48	; 0x30
    265a:	99 a9       	ldd	r25, Y+49	; 0x31
    265c:	20 e0       	ldi	r18, 0x00	; 0
    265e:	30 e0       	ldi	r19, 0x00	; 0
    2660:	40 e8       	ldi	r20, 0x80	; 128
    2662:	5f e3       	ldi	r21, 0x3F	; 63
    2664:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2668:	88 23       	and	r24, r24
    266a:	2c f4       	brge	.+10     	; 0x2676 <LCD_enu_Init+0x29c>
		__ticks = 1;
    266c:	81 e0       	ldi	r24, 0x01	; 1
    266e:	90 e0       	ldi	r25, 0x00	; 0
    2670:	9d a7       	std	Y+45, r25	; 0x2d
    2672:	8c a7       	std	Y+44, r24	; 0x2c
    2674:	3f c0       	rjmp	.+126    	; 0x26f4 <LCD_enu_Init+0x31a>
	else if (__tmp > 65535)
    2676:	6e a5       	ldd	r22, Y+46	; 0x2e
    2678:	7f a5       	ldd	r23, Y+47	; 0x2f
    267a:	88 a9       	ldd	r24, Y+48	; 0x30
    267c:	99 a9       	ldd	r25, Y+49	; 0x31
    267e:	20 e0       	ldi	r18, 0x00	; 0
    2680:	3f ef       	ldi	r19, 0xFF	; 255
    2682:	4f e7       	ldi	r20, 0x7F	; 127
    2684:	57 e4       	ldi	r21, 0x47	; 71
    2686:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    268a:	18 16       	cp	r1, r24
    268c:	4c f5       	brge	.+82     	; 0x26e0 <LCD_enu_Init+0x306>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    268e:	6a a9       	ldd	r22, Y+50	; 0x32
    2690:	7b a9       	ldd	r23, Y+51	; 0x33
    2692:	8c a9       	ldd	r24, Y+52	; 0x34
    2694:	9d a9       	ldd	r25, Y+53	; 0x35
    2696:	20 e0       	ldi	r18, 0x00	; 0
    2698:	30 e0       	ldi	r19, 0x00	; 0
    269a:	40 e2       	ldi	r20, 0x20	; 32
    269c:	51 e4       	ldi	r21, 0x41	; 65
    269e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    26a2:	dc 01       	movw	r26, r24
    26a4:	cb 01       	movw	r24, r22
    26a6:	bc 01       	movw	r22, r24
    26a8:	cd 01       	movw	r24, r26
    26aa:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    26ae:	dc 01       	movw	r26, r24
    26b0:	cb 01       	movw	r24, r22
    26b2:	9d a7       	std	Y+45, r25	; 0x2d
    26b4:	8c a7       	std	Y+44, r24	; 0x2c
    26b6:	0f c0       	rjmp	.+30     	; 0x26d6 <LCD_enu_Init+0x2fc>
    26b8:	80 e9       	ldi	r24, 0x90	; 144
    26ba:	91 e0       	ldi	r25, 0x01	; 1
    26bc:	9b a7       	std	Y+43, r25	; 0x2b
    26be:	8a a7       	std	Y+42, r24	; 0x2a
    26c0:	8a a5       	ldd	r24, Y+42	; 0x2a
    26c2:	9b a5       	ldd	r25, Y+43	; 0x2b
    26c4:	01 97       	sbiw	r24, 0x01	; 1
    26c6:	f1 f7       	brne	.-4      	; 0x26c4 <LCD_enu_Init+0x2ea>
    26c8:	9b a7       	std	Y+43, r25	; 0x2b
    26ca:	8a a7       	std	Y+42, r24	; 0x2a
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    26cc:	8c a5       	ldd	r24, Y+44	; 0x2c
    26ce:	9d a5       	ldd	r25, Y+45	; 0x2d
    26d0:	01 97       	sbiw	r24, 0x01	; 1
    26d2:	9d a7       	std	Y+45, r25	; 0x2d
    26d4:	8c a7       	std	Y+44, r24	; 0x2c
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    26d6:	8c a5       	ldd	r24, Y+44	; 0x2c
    26d8:	9d a5       	ldd	r25, Y+45	; 0x2d
    26da:	00 97       	sbiw	r24, 0x00	; 0
    26dc:	69 f7       	brne	.-38     	; 0x26b8 <LCD_enu_Init+0x2de>
    26de:	24 c0       	rjmp	.+72     	; 0x2728 <LCD_enu_Init+0x34e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    26e0:	6e a5       	ldd	r22, Y+46	; 0x2e
    26e2:	7f a5       	ldd	r23, Y+47	; 0x2f
    26e4:	88 a9       	ldd	r24, Y+48	; 0x30
    26e6:	99 a9       	ldd	r25, Y+49	; 0x31
    26e8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    26ec:	dc 01       	movw	r26, r24
    26ee:	cb 01       	movw	r24, r22
    26f0:	9d a7       	std	Y+45, r25	; 0x2d
    26f2:	8c a7       	std	Y+44, r24	; 0x2c
    26f4:	8c a5       	ldd	r24, Y+44	; 0x2c
    26f6:	9d a5       	ldd	r25, Y+45	; 0x2d
    26f8:	99 a7       	std	Y+41, r25	; 0x29
    26fa:	88 a7       	std	Y+40, r24	; 0x28
    26fc:	88 a5       	ldd	r24, Y+40	; 0x28
    26fe:	99 a5       	ldd	r25, Y+41	; 0x29
    2700:	01 97       	sbiw	r24, 0x01	; 1
    2702:	f1 f7       	brne	.-4      	; 0x2700 <LCD_enu_Init+0x326>
    2704:	99 a7       	std	Y+41, r25	; 0x29
    2706:	88 a7       	std	Y+40, r24	; 0x28
    2708:	0f c0       	rjmp	.+30     	; 0x2728 <LCD_enu_Init+0x34e>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    270a:	6f a9       	ldd	r22, Y+55	; 0x37
    270c:	78 ad       	ldd	r23, Y+56	; 0x38
    270e:	89 ad       	ldd	r24, Y+57	; 0x39
    2710:	9a ad       	ldd	r25, Y+58	; 0x3a
    2712:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2716:	dc 01       	movw	r26, r24
    2718:	cb 01       	movw	r24, r22
    271a:	8e ab       	std	Y+54, r24	; 0x36
    271c:	8e a9       	ldd	r24, Y+54	; 0x36
    271e:	8f a3       	std	Y+39, r24	; 0x27
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    2720:	8f a1       	ldd	r24, Y+39	; 0x27
    2722:	8a 95       	dec	r24
    2724:	f1 f7       	brne	.-4      	; 0x2722 <LCD_enu_Init+0x348>
    2726:	8f a3       	std	Y+39, r24	; 0x27
    _delay_us(40);
    LCD_enu_SendCmnd(LCD_U8_CURSOR);
    2728:	8f e0       	ldi	r24, 0x0F	; 15
    272a:	0e 94 10 0d 	call	0x1a20	; 0x1a20 <LCD_enu_SendCmnd>
    272e:	80 e0       	ldi	r24, 0x00	; 0
    2730:	90 e0       	ldi	r25, 0x00	; 0
    2732:	a0 e2       	ldi	r26, 0x20	; 32
    2734:	b2 e4       	ldi	r27, 0x42	; 66
    2736:	8b a3       	std	Y+35, r24	; 0x23
    2738:	9c a3       	std	Y+36, r25	; 0x24
    273a:	ad a3       	std	Y+37, r26	; 0x25
    273c:	be a3       	std	Y+38, r27	; 0x26
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    273e:	6b a1       	ldd	r22, Y+35	; 0x23
    2740:	7c a1       	ldd	r23, Y+36	; 0x24
    2742:	8d a1       	ldd	r24, Y+37	; 0x25
    2744:	9e a1       	ldd	r25, Y+38	; 0x26
    2746:	2b ea       	ldi	r18, 0xAB	; 171
    2748:	3a ea       	ldi	r19, 0xAA	; 170
    274a:	4a ea       	ldi	r20, 0xAA	; 170
    274c:	50 e4       	ldi	r21, 0x40	; 64
    274e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2752:	dc 01       	movw	r26, r24
    2754:	cb 01       	movw	r24, r22
    2756:	8f 8f       	std	Y+31, r24	; 0x1f
    2758:	98 a3       	std	Y+32, r25	; 0x20
    275a:	a9 a3       	std	Y+33, r26	; 0x21
    275c:	ba a3       	std	Y+34, r27	; 0x22
	if (__tmp < 1.0)
    275e:	6f 8d       	ldd	r22, Y+31	; 0x1f
    2760:	78 a1       	ldd	r23, Y+32	; 0x20
    2762:	89 a1       	ldd	r24, Y+33	; 0x21
    2764:	9a a1       	ldd	r25, Y+34	; 0x22
    2766:	20 e0       	ldi	r18, 0x00	; 0
    2768:	30 e0       	ldi	r19, 0x00	; 0
    276a:	40 e8       	ldi	r20, 0x80	; 128
    276c:	5f e3       	ldi	r21, 0x3F	; 63
    276e:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2772:	88 23       	and	r24, r24
    2774:	1c f4       	brge	.+6      	; 0x277c <LCD_enu_Init+0x3a2>
		__ticks = 1;
    2776:	81 e0       	ldi	r24, 0x01	; 1
    2778:	8e 8f       	std	Y+30, r24	; 0x1e
    277a:	91 c0       	rjmp	.+290    	; 0x289e <LCD_enu_Init+0x4c4>
	else if (__tmp > 255)
    277c:	6f 8d       	ldd	r22, Y+31	; 0x1f
    277e:	78 a1       	ldd	r23, Y+32	; 0x20
    2780:	89 a1       	ldd	r24, Y+33	; 0x21
    2782:	9a a1       	ldd	r25, Y+34	; 0x22
    2784:	20 e0       	ldi	r18, 0x00	; 0
    2786:	30 e0       	ldi	r19, 0x00	; 0
    2788:	4f e7       	ldi	r20, 0x7F	; 127
    278a:	53 e4       	ldi	r21, 0x43	; 67
    278c:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2790:	18 16       	cp	r1, r24
    2792:	0c f0       	brlt	.+2      	; 0x2796 <LCD_enu_Init+0x3bc>
    2794:	7b c0       	rjmp	.+246    	; 0x288c <LCD_enu_Init+0x4b2>
	{
		_delay_ms(__us / 1000.0);
    2796:	6b a1       	ldd	r22, Y+35	; 0x23
    2798:	7c a1       	ldd	r23, Y+36	; 0x24
    279a:	8d a1       	ldd	r24, Y+37	; 0x25
    279c:	9e a1       	ldd	r25, Y+38	; 0x26
    279e:	20 e0       	ldi	r18, 0x00	; 0
    27a0:	30 e0       	ldi	r19, 0x00	; 0
    27a2:	4a e7       	ldi	r20, 0x7A	; 122
    27a4:	54 e4       	ldi	r21, 0x44	; 68
    27a6:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    27aa:	dc 01       	movw	r26, r24
    27ac:	cb 01       	movw	r24, r22
    27ae:	8a 8f       	std	Y+26, r24	; 0x1a
    27b0:	9b 8f       	std	Y+27, r25	; 0x1b
    27b2:	ac 8f       	std	Y+28, r26	; 0x1c
    27b4:	bd 8f       	std	Y+29, r27	; 0x1d
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    27b6:	6a 8d       	ldd	r22, Y+26	; 0x1a
    27b8:	7b 8d       	ldd	r23, Y+27	; 0x1b
    27ba:	8c 8d       	ldd	r24, Y+28	; 0x1c
    27bc:	9d 8d       	ldd	r25, Y+29	; 0x1d
    27be:	20 e0       	ldi	r18, 0x00	; 0
    27c0:	30 e0       	ldi	r19, 0x00	; 0
    27c2:	4a e7       	ldi	r20, 0x7A	; 122
    27c4:	55 e4       	ldi	r21, 0x45	; 69
    27c6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    27ca:	dc 01       	movw	r26, r24
    27cc:	cb 01       	movw	r24, r22
    27ce:	8e 8b       	std	Y+22, r24	; 0x16
    27d0:	9f 8b       	std	Y+23, r25	; 0x17
    27d2:	a8 8f       	std	Y+24, r26	; 0x18
    27d4:	b9 8f       	std	Y+25, r27	; 0x19
	if (__tmp < 1.0)
    27d6:	6e 89       	ldd	r22, Y+22	; 0x16
    27d8:	7f 89       	ldd	r23, Y+23	; 0x17
    27da:	88 8d       	ldd	r24, Y+24	; 0x18
    27dc:	99 8d       	ldd	r25, Y+25	; 0x19
    27de:	20 e0       	ldi	r18, 0x00	; 0
    27e0:	30 e0       	ldi	r19, 0x00	; 0
    27e2:	40 e8       	ldi	r20, 0x80	; 128
    27e4:	5f e3       	ldi	r21, 0x3F	; 63
    27e6:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    27ea:	88 23       	and	r24, r24
    27ec:	2c f4       	brge	.+10     	; 0x27f8 <LCD_enu_Init+0x41e>
		__ticks = 1;
    27ee:	81 e0       	ldi	r24, 0x01	; 1
    27f0:	90 e0       	ldi	r25, 0x00	; 0
    27f2:	9d 8b       	std	Y+21, r25	; 0x15
    27f4:	8c 8b       	std	Y+20, r24	; 0x14
    27f6:	3f c0       	rjmp	.+126    	; 0x2876 <LCD_enu_Init+0x49c>
	else if (__tmp > 65535)
    27f8:	6e 89       	ldd	r22, Y+22	; 0x16
    27fa:	7f 89       	ldd	r23, Y+23	; 0x17
    27fc:	88 8d       	ldd	r24, Y+24	; 0x18
    27fe:	99 8d       	ldd	r25, Y+25	; 0x19
    2800:	20 e0       	ldi	r18, 0x00	; 0
    2802:	3f ef       	ldi	r19, 0xFF	; 255
    2804:	4f e7       	ldi	r20, 0x7F	; 127
    2806:	57 e4       	ldi	r21, 0x47	; 71
    2808:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    280c:	18 16       	cp	r1, r24
    280e:	4c f5       	brge	.+82     	; 0x2862 <LCD_enu_Init+0x488>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2810:	6a 8d       	ldd	r22, Y+26	; 0x1a
    2812:	7b 8d       	ldd	r23, Y+27	; 0x1b
    2814:	8c 8d       	ldd	r24, Y+28	; 0x1c
    2816:	9d 8d       	ldd	r25, Y+29	; 0x1d
    2818:	20 e0       	ldi	r18, 0x00	; 0
    281a:	30 e0       	ldi	r19, 0x00	; 0
    281c:	40 e2       	ldi	r20, 0x20	; 32
    281e:	51 e4       	ldi	r21, 0x41	; 65
    2820:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2824:	dc 01       	movw	r26, r24
    2826:	cb 01       	movw	r24, r22
    2828:	bc 01       	movw	r22, r24
    282a:	cd 01       	movw	r24, r26
    282c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2830:	dc 01       	movw	r26, r24
    2832:	cb 01       	movw	r24, r22
    2834:	9d 8b       	std	Y+21, r25	; 0x15
    2836:	8c 8b       	std	Y+20, r24	; 0x14
    2838:	0f c0       	rjmp	.+30     	; 0x2858 <LCD_enu_Init+0x47e>
    283a:	80 e9       	ldi	r24, 0x90	; 144
    283c:	91 e0       	ldi	r25, 0x01	; 1
    283e:	9b 8b       	std	Y+19, r25	; 0x13
    2840:	8a 8b       	std	Y+18, r24	; 0x12
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    2842:	8a 89       	ldd	r24, Y+18	; 0x12
    2844:	9b 89       	ldd	r25, Y+19	; 0x13
    2846:	01 97       	sbiw	r24, 0x01	; 1
    2848:	f1 f7       	brne	.-4      	; 0x2846 <LCD_enu_Init+0x46c>
    284a:	9b 8b       	std	Y+19, r25	; 0x13
    284c:	8a 8b       	std	Y+18, r24	; 0x12
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    284e:	8c 89       	ldd	r24, Y+20	; 0x14
    2850:	9d 89       	ldd	r25, Y+21	; 0x15
    2852:	01 97       	sbiw	r24, 0x01	; 1
    2854:	9d 8b       	std	Y+21, r25	; 0x15
    2856:	8c 8b       	std	Y+20, r24	; 0x14
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2858:	8c 89       	ldd	r24, Y+20	; 0x14
    285a:	9d 89       	ldd	r25, Y+21	; 0x15
    285c:	00 97       	sbiw	r24, 0x00	; 0
    285e:	69 f7       	brne	.-38     	; 0x283a <LCD_enu_Init+0x460>
    2860:	24 c0       	rjmp	.+72     	; 0x28aa <LCD_enu_Init+0x4d0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2862:	6e 89       	ldd	r22, Y+22	; 0x16
    2864:	7f 89       	ldd	r23, Y+23	; 0x17
    2866:	88 8d       	ldd	r24, Y+24	; 0x18
    2868:	99 8d       	ldd	r25, Y+25	; 0x19
    286a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    286e:	dc 01       	movw	r26, r24
    2870:	cb 01       	movw	r24, r22
    2872:	9d 8b       	std	Y+21, r25	; 0x15
    2874:	8c 8b       	std	Y+20, r24	; 0x14
    2876:	8c 89       	ldd	r24, Y+20	; 0x14
    2878:	9d 89       	ldd	r25, Y+21	; 0x15
    287a:	99 8b       	std	Y+17, r25	; 0x11
    287c:	88 8b       	std	Y+16, r24	; 0x10
    287e:	88 89       	ldd	r24, Y+16	; 0x10
    2880:	99 89       	ldd	r25, Y+17	; 0x11
    2882:	01 97       	sbiw	r24, 0x01	; 1
    2884:	f1 f7       	brne	.-4      	; 0x2882 <LCD_enu_Init+0x4a8>
    2886:	99 8b       	std	Y+17, r25	; 0x11
    2888:	88 8b       	std	Y+16, r24	; 0x10
    288a:	0f c0       	rjmp	.+30     	; 0x28aa <LCD_enu_Init+0x4d0>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    288c:	6f 8d       	ldd	r22, Y+31	; 0x1f
    288e:	78 a1       	ldd	r23, Y+32	; 0x20
    2890:	89 a1       	ldd	r24, Y+33	; 0x21
    2892:	9a a1       	ldd	r25, Y+34	; 0x22
    2894:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2898:	dc 01       	movw	r26, r24
    289a:	cb 01       	movw	r24, r22
    289c:	8e 8f       	std	Y+30, r24	; 0x1e
    289e:	8e 8d       	ldd	r24, Y+30	; 0x1e
    28a0:	8f 87       	std	Y+15, r24	; 0x0f
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    28a2:	8f 85       	ldd	r24, Y+15	; 0x0f
    28a4:	8a 95       	dec	r24
    28a6:	f1 f7       	brne	.-4      	; 0x28a4 <LCD_enu_Init+0x4ca>
    28a8:	8f 87       	std	Y+15, r24	; 0x0f
    _delay_us(40);
    LCD_enu_SendCmnd(DISPLAY_CLEAR);
    28aa:	81 e0       	ldi	r24, 0x01	; 1
    28ac:	0e 94 10 0d 	call	0x1a20	; 0x1a20 <LCD_enu_SendCmnd>
    28b0:	80 e0       	ldi	r24, 0x00	; 0
    28b2:	90 e0       	ldi	r25, 0x00	; 0
    28b4:	a0 e0       	ldi	r26, 0x00	; 0
    28b6:	b0 e4       	ldi	r27, 0x40	; 64
    28b8:	8b 87       	std	Y+11, r24	; 0x0b
    28ba:	9c 87       	std	Y+12, r25	; 0x0c
    28bc:	ad 87       	std	Y+13, r26	; 0x0d
    28be:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    28c0:	6b 85       	ldd	r22, Y+11	; 0x0b
    28c2:	7c 85       	ldd	r23, Y+12	; 0x0c
    28c4:	8d 85       	ldd	r24, Y+13	; 0x0d
    28c6:	9e 85       	ldd	r25, Y+14	; 0x0e
    28c8:	20 e0       	ldi	r18, 0x00	; 0
    28ca:	30 e0       	ldi	r19, 0x00	; 0
    28cc:	4a e7       	ldi	r20, 0x7A	; 122
    28ce:	55 e4       	ldi	r21, 0x45	; 69
    28d0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    28d4:	dc 01       	movw	r26, r24
    28d6:	cb 01       	movw	r24, r22
    28d8:	8f 83       	std	Y+7, r24	; 0x07
    28da:	98 87       	std	Y+8, r25	; 0x08
    28dc:	a9 87       	std	Y+9, r26	; 0x09
    28de:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    28e0:	6f 81       	ldd	r22, Y+7	; 0x07
    28e2:	78 85       	ldd	r23, Y+8	; 0x08
    28e4:	89 85       	ldd	r24, Y+9	; 0x09
    28e6:	9a 85       	ldd	r25, Y+10	; 0x0a
    28e8:	20 e0       	ldi	r18, 0x00	; 0
    28ea:	30 e0       	ldi	r19, 0x00	; 0
    28ec:	40 e8       	ldi	r20, 0x80	; 128
    28ee:	5f e3       	ldi	r21, 0x3F	; 63
    28f0:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    28f4:	88 23       	and	r24, r24
    28f6:	2c f4       	brge	.+10     	; 0x2902 <LCD_enu_Init+0x528>
		__ticks = 1;
    28f8:	81 e0       	ldi	r24, 0x01	; 1
    28fa:	90 e0       	ldi	r25, 0x00	; 0
    28fc:	9e 83       	std	Y+6, r25	; 0x06
    28fe:	8d 83       	std	Y+5, r24	; 0x05
    2900:	3f c0       	rjmp	.+126    	; 0x2980 <LCD_enu_Init+0x5a6>
	else if (__tmp > 65535)
    2902:	6f 81       	ldd	r22, Y+7	; 0x07
    2904:	78 85       	ldd	r23, Y+8	; 0x08
    2906:	89 85       	ldd	r24, Y+9	; 0x09
    2908:	9a 85       	ldd	r25, Y+10	; 0x0a
    290a:	20 e0       	ldi	r18, 0x00	; 0
    290c:	3f ef       	ldi	r19, 0xFF	; 255
    290e:	4f e7       	ldi	r20, 0x7F	; 127
    2910:	57 e4       	ldi	r21, 0x47	; 71
    2912:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2916:	18 16       	cp	r1, r24
    2918:	4c f5       	brge	.+82     	; 0x296c <LCD_enu_Init+0x592>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    291a:	6b 85       	ldd	r22, Y+11	; 0x0b
    291c:	7c 85       	ldd	r23, Y+12	; 0x0c
    291e:	8d 85       	ldd	r24, Y+13	; 0x0d
    2920:	9e 85       	ldd	r25, Y+14	; 0x0e
    2922:	20 e0       	ldi	r18, 0x00	; 0
    2924:	30 e0       	ldi	r19, 0x00	; 0
    2926:	40 e2       	ldi	r20, 0x20	; 32
    2928:	51 e4       	ldi	r21, 0x41	; 65
    292a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    292e:	dc 01       	movw	r26, r24
    2930:	cb 01       	movw	r24, r22
    2932:	bc 01       	movw	r22, r24
    2934:	cd 01       	movw	r24, r26
    2936:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    293a:	dc 01       	movw	r26, r24
    293c:	cb 01       	movw	r24, r22
    293e:	9e 83       	std	Y+6, r25	; 0x06
    2940:	8d 83       	std	Y+5, r24	; 0x05
    2942:	0f c0       	rjmp	.+30     	; 0x2962 <LCD_enu_Init+0x588>
    2944:	80 e9       	ldi	r24, 0x90	; 144
    2946:	91 e0       	ldi	r25, 0x01	; 1
    2948:	9c 83       	std	Y+4, r25	; 0x04
    294a:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    294c:	8b 81       	ldd	r24, Y+3	; 0x03
    294e:	9c 81       	ldd	r25, Y+4	; 0x04
    2950:	01 97       	sbiw	r24, 0x01	; 1
    2952:	f1 f7       	brne	.-4      	; 0x2950 <LCD_enu_Init+0x576>
    2954:	9c 83       	std	Y+4, r25	; 0x04
    2956:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2958:	8d 81       	ldd	r24, Y+5	; 0x05
    295a:	9e 81       	ldd	r25, Y+6	; 0x06
    295c:	01 97       	sbiw	r24, 0x01	; 1
    295e:	9e 83       	std	Y+6, r25	; 0x06
    2960:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2962:	8d 81       	ldd	r24, Y+5	; 0x05
    2964:	9e 81       	ldd	r25, Y+6	; 0x06
    2966:	00 97       	sbiw	r24, 0x00	; 0
    2968:	69 f7       	brne	.-38     	; 0x2944 <LCD_enu_Init+0x56a>
    296a:	14 c0       	rjmp	.+40     	; 0x2994 <LCD_enu_Init+0x5ba>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    296c:	6f 81       	ldd	r22, Y+7	; 0x07
    296e:	78 85       	ldd	r23, Y+8	; 0x08
    2970:	89 85       	ldd	r24, Y+9	; 0x09
    2972:	9a 85       	ldd	r25, Y+10	; 0x0a
    2974:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2978:	dc 01       	movw	r26, r24
    297a:	cb 01       	movw	r24, r22
    297c:	9e 83       	std	Y+6, r25	; 0x06
    297e:	8d 83       	std	Y+5, r24	; 0x05
    2980:	8d 81       	ldd	r24, Y+5	; 0x05
    2982:	9e 81       	ldd	r25, Y+6	; 0x06
    2984:	9a 83       	std	Y+2, r25	; 0x02
    2986:	89 83       	std	Y+1, r24	; 0x01
    2988:	89 81       	ldd	r24, Y+1	; 0x01
    298a:	9a 81       	ldd	r25, Y+2	; 0x02
    298c:	01 97       	sbiw	r24, 0x01	; 1
    298e:	f1 f7       	brne	.-4      	; 0x298c <LCD_enu_Init+0x5b2>
    2990:	9a 83       	std	Y+2, r25	; 0x02
    2992:	89 83       	std	Y+1, r24	; 0x01
    _delay_ms(2);
    LCD_enu_SendCmnd(ENTRY_MOOD);
    2994:	86 e0       	ldi	r24, 0x06	; 6
    2996:	0e 94 10 0d 	call	0x1a20	; 0x1a20 <LCD_enu_SendCmnd>
    return STATE_OK;
    299a:	81 e0       	ldi	r24, 0x01	; 1
#endif
}
    299c:	c4 5b       	subi	r28, 0xB4	; 180
    299e:	df 4f       	sbci	r29, 0xFF	; 255
    29a0:	0f b6       	in	r0, 0x3f	; 63
    29a2:	f8 94       	cli
    29a4:	de bf       	out	0x3e, r29	; 62
    29a6:	0f be       	out	0x3f, r0	; 63
    29a8:	cd bf       	out	0x3d, r28	; 61
    29aa:	cf 91       	pop	r28
    29ac:	df 91       	pop	r29
    29ae:	1f 91       	pop	r17
    29b0:	0f 91       	pop	r16
    29b2:	08 95       	ret

000029b4 <LCD_enu_Clear>:
ES_t LCD_enu_Clear(void)
{
    29b4:	df 93       	push	r29
    29b6:	cf 93       	push	r28
    29b8:	cd b7       	in	r28, 0x3d	; 61
    29ba:	de b7       	in	r29, 0x3e	; 62
    29bc:	2e 97       	sbiw	r28, 0x0e	; 14
    29be:	0f b6       	in	r0, 0x3f	; 63
    29c0:	f8 94       	cli
    29c2:	de bf       	out	0x3e, r29	; 62
    29c4:	0f be       	out	0x3f, r0	; 63
    29c6:	cd bf       	out	0x3d, r28	; 61
    LCD_enu_SendCmnd(DISPLAY_CLEAR);
    29c8:	81 e0       	ldi	r24, 0x01	; 1
    29ca:	0e 94 10 0d 	call	0x1a20	; 0x1a20 <LCD_enu_SendCmnd>
    29ce:	80 e0       	ldi	r24, 0x00	; 0
    29d0:	90 e0       	ldi	r25, 0x00	; 0
    29d2:	a0 e0       	ldi	r26, 0x00	; 0
    29d4:	b0 e4       	ldi	r27, 0x40	; 64
    29d6:	8b 87       	std	Y+11, r24	; 0x0b
    29d8:	9c 87       	std	Y+12, r25	; 0x0c
    29da:	ad 87       	std	Y+13, r26	; 0x0d
    29dc:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    29de:	6b 85       	ldd	r22, Y+11	; 0x0b
    29e0:	7c 85       	ldd	r23, Y+12	; 0x0c
    29e2:	8d 85       	ldd	r24, Y+13	; 0x0d
    29e4:	9e 85       	ldd	r25, Y+14	; 0x0e
    29e6:	20 e0       	ldi	r18, 0x00	; 0
    29e8:	30 e0       	ldi	r19, 0x00	; 0
    29ea:	4a e7       	ldi	r20, 0x7A	; 122
    29ec:	55 e4       	ldi	r21, 0x45	; 69
    29ee:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    29f2:	dc 01       	movw	r26, r24
    29f4:	cb 01       	movw	r24, r22
    29f6:	8f 83       	std	Y+7, r24	; 0x07
    29f8:	98 87       	std	Y+8, r25	; 0x08
    29fa:	a9 87       	std	Y+9, r26	; 0x09
    29fc:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    29fe:	6f 81       	ldd	r22, Y+7	; 0x07
    2a00:	78 85       	ldd	r23, Y+8	; 0x08
    2a02:	89 85       	ldd	r24, Y+9	; 0x09
    2a04:	9a 85       	ldd	r25, Y+10	; 0x0a
    2a06:	20 e0       	ldi	r18, 0x00	; 0
    2a08:	30 e0       	ldi	r19, 0x00	; 0
    2a0a:	40 e8       	ldi	r20, 0x80	; 128
    2a0c:	5f e3       	ldi	r21, 0x3F	; 63
    2a0e:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2a12:	88 23       	and	r24, r24
    2a14:	2c f4       	brge	.+10     	; 0x2a20 <LCD_enu_Clear+0x6c>
		__ticks = 1;
    2a16:	81 e0       	ldi	r24, 0x01	; 1
    2a18:	90 e0       	ldi	r25, 0x00	; 0
    2a1a:	9e 83       	std	Y+6, r25	; 0x06
    2a1c:	8d 83       	std	Y+5, r24	; 0x05
    2a1e:	3f c0       	rjmp	.+126    	; 0x2a9e <LCD_enu_Clear+0xea>
	else if (__tmp > 65535)
    2a20:	6f 81       	ldd	r22, Y+7	; 0x07
    2a22:	78 85       	ldd	r23, Y+8	; 0x08
    2a24:	89 85       	ldd	r24, Y+9	; 0x09
    2a26:	9a 85       	ldd	r25, Y+10	; 0x0a
    2a28:	20 e0       	ldi	r18, 0x00	; 0
    2a2a:	3f ef       	ldi	r19, 0xFF	; 255
    2a2c:	4f e7       	ldi	r20, 0x7F	; 127
    2a2e:	57 e4       	ldi	r21, 0x47	; 71
    2a30:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2a34:	18 16       	cp	r1, r24
    2a36:	4c f5       	brge	.+82     	; 0x2a8a <LCD_enu_Clear+0xd6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2a38:	6b 85       	ldd	r22, Y+11	; 0x0b
    2a3a:	7c 85       	ldd	r23, Y+12	; 0x0c
    2a3c:	8d 85       	ldd	r24, Y+13	; 0x0d
    2a3e:	9e 85       	ldd	r25, Y+14	; 0x0e
    2a40:	20 e0       	ldi	r18, 0x00	; 0
    2a42:	30 e0       	ldi	r19, 0x00	; 0
    2a44:	40 e2       	ldi	r20, 0x20	; 32
    2a46:	51 e4       	ldi	r21, 0x41	; 65
    2a48:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2a4c:	dc 01       	movw	r26, r24
    2a4e:	cb 01       	movw	r24, r22
    2a50:	bc 01       	movw	r22, r24
    2a52:	cd 01       	movw	r24, r26
    2a54:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2a58:	dc 01       	movw	r26, r24
    2a5a:	cb 01       	movw	r24, r22
    2a5c:	9e 83       	std	Y+6, r25	; 0x06
    2a5e:	8d 83       	std	Y+5, r24	; 0x05
    2a60:	0f c0       	rjmp	.+30     	; 0x2a80 <LCD_enu_Clear+0xcc>
    2a62:	80 e9       	ldi	r24, 0x90	; 144
    2a64:	91 e0       	ldi	r25, 0x01	; 1
    2a66:	9c 83       	std	Y+4, r25	; 0x04
    2a68:	8b 83       	std	Y+3, r24	; 0x03
    2a6a:	8b 81       	ldd	r24, Y+3	; 0x03
    2a6c:	9c 81       	ldd	r25, Y+4	; 0x04
    2a6e:	01 97       	sbiw	r24, 0x01	; 1
    2a70:	f1 f7       	brne	.-4      	; 0x2a6e <LCD_enu_Clear+0xba>
    2a72:	9c 83       	std	Y+4, r25	; 0x04
    2a74:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2a76:	8d 81       	ldd	r24, Y+5	; 0x05
    2a78:	9e 81       	ldd	r25, Y+6	; 0x06
    2a7a:	01 97       	sbiw	r24, 0x01	; 1
    2a7c:	9e 83       	std	Y+6, r25	; 0x06
    2a7e:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2a80:	8d 81       	ldd	r24, Y+5	; 0x05
    2a82:	9e 81       	ldd	r25, Y+6	; 0x06
    2a84:	00 97       	sbiw	r24, 0x00	; 0
    2a86:	69 f7       	brne	.-38     	; 0x2a62 <LCD_enu_Clear+0xae>
    2a88:	14 c0       	rjmp	.+40     	; 0x2ab2 <LCD_enu_Clear+0xfe>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2a8a:	6f 81       	ldd	r22, Y+7	; 0x07
    2a8c:	78 85       	ldd	r23, Y+8	; 0x08
    2a8e:	89 85       	ldd	r24, Y+9	; 0x09
    2a90:	9a 85       	ldd	r25, Y+10	; 0x0a
    2a92:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2a96:	dc 01       	movw	r26, r24
    2a98:	cb 01       	movw	r24, r22
    2a9a:	9e 83       	std	Y+6, r25	; 0x06
    2a9c:	8d 83       	std	Y+5, r24	; 0x05
    2a9e:	8d 81       	ldd	r24, Y+5	; 0x05
    2aa0:	9e 81       	ldd	r25, Y+6	; 0x06
    2aa2:	9a 83       	std	Y+2, r25	; 0x02
    2aa4:	89 83       	std	Y+1, r24	; 0x01
    2aa6:	89 81       	ldd	r24, Y+1	; 0x01
    2aa8:	9a 81       	ldd	r25, Y+2	; 0x02
    2aaa:	01 97       	sbiw	r24, 0x01	; 1
    2aac:	f1 f7       	brne	.-4      	; 0x2aaa <LCD_enu_Clear+0xf6>
    2aae:	9a 83       	std	Y+2, r25	; 0x02
    2ab0:	89 83       	std	Y+1, r24	; 0x01
    _delay_ms(2);
    return STATE_OK;
    2ab2:	81 e0       	ldi	r24, 0x01	; 1
}
    2ab4:	2e 96       	adiw	r28, 0x0e	; 14
    2ab6:	0f b6       	in	r0, 0x3f	; 63
    2ab8:	f8 94       	cli
    2aba:	de bf       	out	0x3e, r29	; 62
    2abc:	0f be       	out	0x3f, r0	; 63
    2abe:	cd bf       	out	0x3d, r28	; 61
    2ac0:	cf 91       	pop	r28
    2ac2:	df 91       	pop	r29
    2ac4:	08 95       	ret

00002ac6 <LCD_enu_sendCustomChar>:
ES_t LCD_enu_sendCustomChar(u8 Copy_u8_charNum, u8 *Copy_pu8_charArray, u8 Copy_u8_lineNum, u8 Copy_u8_Location)
{
    2ac6:	df 93       	push	r29
    2ac8:	cf 93       	push	r28
    2aca:	cd b7       	in	r28, 0x3d	; 61
    2acc:	de b7       	in	r29, 0x3e	; 62
    2ace:	27 97       	sbiw	r28, 0x07	; 7
    2ad0:	0f b6       	in	r0, 0x3f	; 63
    2ad2:	f8 94       	cli
    2ad4:	de bf       	out	0x3e, r29	; 62
    2ad6:	0f be       	out	0x3f, r0	; 63
    2ad8:	cd bf       	out	0x3d, r28	; 61
    2ada:	8b 83       	std	Y+3, r24	; 0x03
    2adc:	7d 83       	std	Y+5, r23	; 0x05
    2ade:	6c 83       	std	Y+4, r22	; 0x04
    2ae0:	4e 83       	std	Y+6, r20	; 0x06
    2ae2:	2f 83       	std	Y+7, r18	; 0x07
    u8 Local_u8_errorState = STATE_OK;
    2ae4:	81 e0       	ldi	r24, 0x01	; 1
    2ae6:	8a 83       	std	Y+2, r24	; 0x02
    if ((Copy_pu8_charArray != NULL) && (Copy_u8_charNum < MAX_CHARACTERS) && (Copy_u8_lineNum < NUM_OF_LINES) && (Copy_u8_Location < MAX_NUM_OF_LOCATIONS))
    2ae8:	8c 81       	ldd	r24, Y+4	; 0x04
    2aea:	9d 81       	ldd	r25, Y+5	; 0x05
    2aec:	00 97       	sbiw	r24, 0x00	; 0
    2aee:	81 f1       	breq	.+96     	; 0x2b50 <LCD_enu_sendCustomChar+0x8a>
    2af0:	8b 81       	ldd	r24, Y+3	; 0x03
    2af2:	88 30       	cpi	r24, 0x08	; 8
    2af4:	68 f5       	brcc	.+90     	; 0x2b50 <LCD_enu_sendCustomChar+0x8a>
    2af6:	8e 81       	ldd	r24, Y+6	; 0x06
    2af8:	82 30       	cpi	r24, 0x02	; 2
    2afa:	50 f5       	brcc	.+84     	; 0x2b50 <LCD_enu_sendCustomChar+0x8a>
    2afc:	8f 81       	ldd	r24, Y+7	; 0x07
    2afe:	88 32       	cpi	r24, 0x28	; 40
    2b00:	38 f5       	brcc	.+78     	; 0x2b50 <LCD_enu_sendCustomChar+0x8a>
    {
        LCD_enu_SendCmnd(ADDRESS_OF_CGRAM + (Copy_u8_charNum * MAX_CHARACTERS));
    2b02:	8b 81       	ldd	r24, Y+3	; 0x03
    2b04:	88 2f       	mov	r24, r24
    2b06:	90 e0       	ldi	r25, 0x00	; 0
    2b08:	08 96       	adiw	r24, 0x08	; 8
    2b0a:	88 0f       	add	r24, r24
    2b0c:	99 1f       	adc	r25, r25
    2b0e:	88 0f       	add	r24, r24
    2b10:	99 1f       	adc	r25, r25
    2b12:	88 0f       	add	r24, r24
    2b14:	99 1f       	adc	r25, r25
    2b16:	0e 94 10 0d 	call	0x1a20	; 0x1a20 <LCD_enu_SendCmnd>
        for (u8 Local_u8_Counter = 0; Local_u8_Counter < MAX_CHARACTERS; Local_u8_Counter++)
    2b1a:	19 82       	std	Y+1, r1	; 0x01
    2b1c:	0e c0       	rjmp	.+28     	; 0x2b3a <LCD_enu_sendCustomChar+0x74>
        {
            LCD_enu_SendChar(Copy_pu8_charArray[Local_u8_Counter]);
    2b1e:	89 81       	ldd	r24, Y+1	; 0x01
    2b20:	28 2f       	mov	r18, r24
    2b22:	30 e0       	ldi	r19, 0x00	; 0
    2b24:	8c 81       	ldd	r24, Y+4	; 0x04
    2b26:	9d 81       	ldd	r25, Y+5	; 0x05
    2b28:	fc 01       	movw	r30, r24
    2b2a:	e2 0f       	add	r30, r18
    2b2c:	f3 1f       	adc	r31, r19
    2b2e:	80 81       	ld	r24, Z
    2b30:	0e 94 10 0f 	call	0x1e20	; 0x1e20 <LCD_enu_SendChar>
{
    u8 Local_u8_errorState = STATE_OK;
    if ((Copy_pu8_charArray != NULL) && (Copy_u8_charNum < MAX_CHARACTERS) && (Copy_u8_lineNum < NUM_OF_LINES) && (Copy_u8_Location < MAX_NUM_OF_LOCATIONS))
    {
        LCD_enu_SendCmnd(ADDRESS_OF_CGRAM + (Copy_u8_charNum * MAX_CHARACTERS));
        for (u8 Local_u8_Counter = 0; Local_u8_Counter < MAX_CHARACTERS; Local_u8_Counter++)
    2b34:	89 81       	ldd	r24, Y+1	; 0x01
    2b36:	8f 5f       	subi	r24, 0xFF	; 255
    2b38:	89 83       	std	Y+1, r24	; 0x01
    2b3a:	89 81       	ldd	r24, Y+1	; 0x01
    2b3c:	88 30       	cpi	r24, 0x08	; 8
    2b3e:	78 f3       	brcs	.-34     	; 0x2b1e <LCD_enu_sendCustomChar+0x58>
        {
            LCD_enu_SendChar(Copy_pu8_charArray[Local_u8_Counter]);
        }
        LCD_enu_SetCursor(Copy_u8_lineNum, Copy_u8_Location);
    2b40:	8e 81       	ldd	r24, Y+6	; 0x06
    2b42:	6f 81       	ldd	r22, Y+7	; 0x07
    2b44:	0e 94 ba 11 	call	0x2374	; 0x2374 <LCD_enu_SetCursor>
        LCD_enu_SendChar(Copy_u8_charNum);
    2b48:	8b 81       	ldd	r24, Y+3	; 0x03
    2b4a:	0e 94 10 0f 	call	0x1e20	; 0x1e20 <LCD_enu_SendChar>
    2b4e:	01 c0       	rjmp	.+2      	; 0x2b52 <LCD_enu_sendCustomChar+0x8c>
    }
    else
    {
        Local_u8_errorState = STATE_NOT_OK;
    2b50:	1a 82       	std	Y+2, r1	; 0x02
    }
    return Local_u8_errorState;
    2b52:	8a 81       	ldd	r24, Y+2	; 0x02
}
    2b54:	27 96       	adiw	r28, 0x07	; 7
    2b56:	0f b6       	in	r0, 0x3f	; 63
    2b58:	f8 94       	cli
    2b5a:	de bf       	out	0x3e, r29	; 62
    2b5c:	0f be       	out	0x3f, r0	; 63
    2b5e:	cd bf       	out	0x3d, r28	; 61
    2b60:	cf 91       	pop	r28
    2b62:	df 91       	pop	r29
    2b64:	08 95       	ret

00002b66 <Keypad_enu_Init>:
const u8 Keypad_Au8_Keys[4][4] = KEYPAD_KEYS;
const u8 Keypad_Au8_RowsPins[4] = {KEYPAD_U8_ROW1_PIN, KEYPAD_U8_ROW2_PIN, KEYPAD_U8_ROW3_PIN, KEYPAD_U8_ROW4_PIN};
const u8 Keypad_Au8_ColsPins[4] = {KEYPAD_U8_COLUMN1_PIN, KEYPAD_U8_COLUMN2_PIN, KEYPAD_U8_COLUMN3_PIN, KEYPAD_U8_COLUMN4_PIN};

ES_t Keypad_enu_Init()
{
    2b66:	df 93       	push	r29
    2b68:	cf 93       	push	r28
    2b6a:	0f 92       	push	r0
    2b6c:	cd b7       	in	r28, 0x3d	; 61
    2b6e:	de b7       	in	r29, 0x3e	; 62
    /*Configure Rows And Columns Pins*/
    for (u8 Local_u8_iterator = 0; Local_u8_iterator < 4; Local_u8_iterator++)
    2b70:	19 82       	std	Y+1, r1	; 0x01
    2b72:	33 c0       	rjmp	.+102    	; 0x2bda <Keypad_enu_Init+0x74>
    {
        DIO_enu_SetPinDirection(KEYPAD_U8_ROWS_PORT, Keypad_Au8_RowsPins[Local_u8_iterator], DIO_U8_OUTPUT);
    2b74:	89 81       	ldd	r24, Y+1	; 0x01
    2b76:	88 2f       	mov	r24, r24
    2b78:	90 e0       	ldi	r25, 0x00	; 0
    2b7a:	fc 01       	movw	r30, r24
    2b7c:	ef 5b       	subi	r30, 0xBF	; 191
    2b7e:	fe 4f       	sbci	r31, 0xFE	; 254
    2b80:	90 81       	ld	r25, Z
    2b82:	82 e0       	ldi	r24, 0x02	; 2
    2b84:	69 2f       	mov	r22, r25
    2b86:	41 e0       	ldi	r20, 0x01	; 1
    2b88:	0e 94 48 28 	call	0x5090	; 0x5090 <DIO_enu_SetPinDirection>
        DIO_enu_SetPinValue(KEYPAD_U8_ROWS_PORT, Keypad_Au8_RowsPins[Local_u8_iterator], DIO_U8_HIGH);
    2b8c:	89 81       	ldd	r24, Y+1	; 0x01
    2b8e:	88 2f       	mov	r24, r24
    2b90:	90 e0       	ldi	r25, 0x00	; 0
    2b92:	fc 01       	movw	r30, r24
    2b94:	ef 5b       	subi	r30, 0xBF	; 191
    2b96:	fe 4f       	sbci	r31, 0xFE	; 254
    2b98:	90 81       	ld	r25, Z
    2b9a:	82 e0       	ldi	r24, 0x02	; 2
    2b9c:	69 2f       	mov	r22, r25
    2b9e:	41 e0       	ldi	r20, 0x01	; 1
    2ba0:	0e 94 72 29 	call	0x52e4	; 0x52e4 <DIO_enu_SetPinValue>
        DIO_enu_SetPinDirection(KEYPAD_U8_COLUMNS_PORT, Keypad_Au8_ColsPins[Local_u8_iterator], DIO_U8_INPUT);
    2ba4:	89 81       	ldd	r24, Y+1	; 0x01
    2ba6:	88 2f       	mov	r24, r24
    2ba8:	90 e0       	ldi	r25, 0x00	; 0
    2baa:	fc 01       	movw	r30, r24
    2bac:	eb 5b       	subi	r30, 0xBB	; 187
    2bae:	fe 4f       	sbci	r31, 0xFE	; 254
    2bb0:	90 81       	ld	r25, Z
    2bb2:	82 e0       	ldi	r24, 0x02	; 2
    2bb4:	69 2f       	mov	r22, r25
    2bb6:	40 e0       	ldi	r20, 0x00	; 0
    2bb8:	0e 94 48 28 	call	0x5090	; 0x5090 <DIO_enu_SetPinDirection>
        DIO_enu_SetPinValue(KEYPAD_U8_COLUMNS_PORT, Keypad_Au8_ColsPins[Local_u8_iterator], DIO_U8_HIGH);
    2bbc:	89 81       	ldd	r24, Y+1	; 0x01
    2bbe:	88 2f       	mov	r24, r24
    2bc0:	90 e0       	ldi	r25, 0x00	; 0
    2bc2:	fc 01       	movw	r30, r24
    2bc4:	eb 5b       	subi	r30, 0xBB	; 187
    2bc6:	fe 4f       	sbci	r31, 0xFE	; 254
    2bc8:	90 81       	ld	r25, Z
    2bca:	82 e0       	ldi	r24, 0x02	; 2
    2bcc:	69 2f       	mov	r22, r25
    2bce:	41 e0       	ldi	r20, 0x01	; 1
    2bd0:	0e 94 72 29 	call	0x52e4	; 0x52e4 <DIO_enu_SetPinValue>
const u8 Keypad_Au8_ColsPins[4] = {KEYPAD_U8_COLUMN1_PIN, KEYPAD_U8_COLUMN2_PIN, KEYPAD_U8_COLUMN3_PIN, KEYPAD_U8_COLUMN4_PIN};

ES_t Keypad_enu_Init()
{
    /*Configure Rows And Columns Pins*/
    for (u8 Local_u8_iterator = 0; Local_u8_iterator < 4; Local_u8_iterator++)
    2bd4:	89 81       	ldd	r24, Y+1	; 0x01
    2bd6:	8f 5f       	subi	r24, 0xFF	; 255
    2bd8:	89 83       	std	Y+1, r24	; 0x01
    2bda:	89 81       	ldd	r24, Y+1	; 0x01
    2bdc:	84 30       	cpi	r24, 0x04	; 4
    2bde:	50 f2       	brcs	.-108    	; 0x2b74 <Keypad_enu_Init+0xe>
        DIO_enu_SetPinDirection(KEYPAD_U8_ROWS_PORT, Keypad_Au8_RowsPins[Local_u8_iterator], DIO_U8_OUTPUT);
        DIO_enu_SetPinValue(KEYPAD_U8_ROWS_PORT, Keypad_Au8_RowsPins[Local_u8_iterator], DIO_U8_HIGH);
        DIO_enu_SetPinDirection(KEYPAD_U8_COLUMNS_PORT, Keypad_Au8_ColsPins[Local_u8_iterator], DIO_U8_INPUT);
        DIO_enu_SetPinValue(KEYPAD_U8_COLUMNS_PORT, Keypad_Au8_ColsPins[Local_u8_iterator], DIO_U8_HIGH);
    }
    return STATE_OK;
    2be0:	81 e0       	ldi	r24, 0x01	; 1
}
    2be2:	0f 90       	pop	r0
    2be4:	cf 91       	pop	r28
    2be6:	df 91       	pop	r29
    2be8:	08 95       	ret

00002bea <Keypad_enu_getKey>:

ES_t Keypad_enu_getKey(u8 *Copy_pu8_ReturnedKey)
{
    2bea:	df 93       	push	r29
    2bec:	cf 93       	push	r28
    2bee:	cd b7       	in	r28, 0x3d	; 61
    2bf0:	de b7       	in	r29, 0x3e	; 62
    2bf2:	65 97       	sbiw	r28, 0x15	; 21
    2bf4:	0f b6       	in	r0, 0x3f	; 63
    2bf6:	f8 94       	cli
    2bf8:	de bf       	out	0x3e, r29	; 62
    2bfa:	0f be       	out	0x3f, r0	; 63
    2bfc:	cd bf       	out	0x3d, r28	; 61
    2bfe:	9d 8b       	std	Y+21, r25	; 0x15
    2c00:	8c 8b       	std	Y+20, r24	; 0x14
    u8 Local_u8_errorState = STATE_OK, Local_u8_rowsCounter, Local_u8_colsCounter, Local_u8_ReturnedState = 0, Local_u8_Flag = 0;
    2c02:	81 e0       	ldi	r24, 0x01	; 1
    2c04:	8a 8b       	std	Y+18, r24	; 0x12
    2c06:	1b 8a       	std	Y+19, r1	; 0x13
    2c08:	1f 86       	std	Y+15, r1	; 0x0f
    if (Copy_pu8_ReturnedKey != NULL)
    2c0a:	8c 89       	ldd	r24, Y+20	; 0x14
    2c0c:	9d 89       	ldd	r25, Y+21	; 0x15
    2c0e:	00 97       	sbiw	r24, 0x00	; 0
    2c10:	09 f4       	brne	.+2      	; 0x2c14 <Keypad_enu_getKey+0x2a>
    2c12:	f0 c0       	rjmp	.+480    	; 0x2df4 <Keypad_enu_getKey+0x20a>
    {
        *Copy_pu8_ReturnedKey = NO_KEY_PRESSED;
    2c14:	ec 89       	ldd	r30, Y+20	; 0x14
    2c16:	fd 89       	ldd	r31, Y+21	; 0x15
    2c18:	8f ef       	ldi	r24, 0xFF	; 255
    2c1a:	80 83       	st	Z, r24
        /*Activate Each Row*/
        for (Local_u8_rowsCounter = 0; Local_u8_rowsCounter < 4; Local_u8_rowsCounter++)
    2c1c:	19 8a       	std	Y+17, r1	; 0x11
    2c1e:	e5 c0       	rjmp	.+458    	; 0x2dea <Keypad_enu_getKey+0x200>
        {
            DIO_enu_SetPinValue(KEYPAD_U8_ROWS_PORT, Keypad_Au8_RowsPins[Local_u8_rowsCounter], DIO_U8_LOW);
    2c20:	89 89       	ldd	r24, Y+17	; 0x11
    2c22:	88 2f       	mov	r24, r24
    2c24:	90 e0       	ldi	r25, 0x00	; 0
    2c26:	fc 01       	movw	r30, r24
    2c28:	ef 5b       	subi	r30, 0xBF	; 191
    2c2a:	fe 4f       	sbci	r31, 0xFE	; 254
    2c2c:	90 81       	ld	r25, Z
    2c2e:	82 e0       	ldi	r24, 0x02	; 2
    2c30:	69 2f       	mov	r22, r25
    2c32:	40 e0       	ldi	r20, 0x00	; 0
    2c34:	0e 94 72 29 	call	0x52e4	; 0x52e4 <DIO_enu_SetPinValue>
            /*Check Which Input Pin Has Zero*/
            for (Local_u8_colsCounter = 0; Local_u8_colsCounter < 4; Local_u8_colsCounter++)
    2c38:	18 8a       	std	Y+16, r1	; 0x10
    2c3a:	c1 c0       	rjmp	.+386    	; 0x2dbe <Keypad_enu_getKey+0x1d4>
            {
                DIO_enu_GetPinValue(KEYPAD_U8_COLUMNS_PORT, Keypad_Au8_ColsPins[Local_u8_colsCounter], &Local_u8_ReturnedState);
    2c3c:	88 89       	ldd	r24, Y+16	; 0x10
    2c3e:	88 2f       	mov	r24, r24
    2c40:	90 e0       	ldi	r25, 0x00	; 0
    2c42:	fc 01       	movw	r30, r24
    2c44:	eb 5b       	subi	r30, 0xBB	; 187
    2c46:	fe 4f       	sbci	r31, 0xFE	; 254
    2c48:	90 81       	ld	r25, Z
    2c4a:	9e 01       	movw	r18, r28
    2c4c:	2d 5e       	subi	r18, 0xED	; 237
    2c4e:	3f 4f       	sbci	r19, 0xFF	; 255
    2c50:	82 e0       	ldi	r24, 0x02	; 2
    2c52:	69 2f       	mov	r22, r25
    2c54:	a9 01       	movw	r20, r18
    2c56:	0e 94 9c 2a 	call	0x5538	; 0x5538 <DIO_enu_GetPinValue>
                if (!Local_u8_ReturnedState) // Switch is Pressed
    2c5a:	8b 89       	ldd	r24, Y+19	; 0x13
    2c5c:	88 23       	and	r24, r24
    2c5e:	09 f0       	breq	.+2      	; 0x2c62 <Keypad_enu_getKey+0x78>
    2c60:	ab c0       	rjmp	.+342    	; 0x2db8 <Keypad_enu_getKey+0x1ce>
    2c62:	80 e0       	ldi	r24, 0x00	; 0
    2c64:	90 e0       	ldi	r25, 0x00	; 0
    2c66:	a0 ea       	ldi	r26, 0xA0	; 160
    2c68:	b1 e4       	ldi	r27, 0x41	; 65
    2c6a:	8b 87       	std	Y+11, r24	; 0x0b
    2c6c:	9c 87       	std	Y+12, r25	; 0x0c
    2c6e:	ad 87       	std	Y+13, r26	; 0x0d
    2c70:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2c72:	6b 85       	ldd	r22, Y+11	; 0x0b
    2c74:	7c 85       	ldd	r23, Y+12	; 0x0c
    2c76:	8d 85       	ldd	r24, Y+13	; 0x0d
    2c78:	9e 85       	ldd	r25, Y+14	; 0x0e
    2c7a:	20 e0       	ldi	r18, 0x00	; 0
    2c7c:	30 e0       	ldi	r19, 0x00	; 0
    2c7e:	4a e7       	ldi	r20, 0x7A	; 122
    2c80:	55 e4       	ldi	r21, 0x45	; 69
    2c82:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2c86:	dc 01       	movw	r26, r24
    2c88:	cb 01       	movw	r24, r22
    2c8a:	8f 83       	std	Y+7, r24	; 0x07
    2c8c:	98 87       	std	Y+8, r25	; 0x08
    2c8e:	a9 87       	std	Y+9, r26	; 0x09
    2c90:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2c92:	6f 81       	ldd	r22, Y+7	; 0x07
    2c94:	78 85       	ldd	r23, Y+8	; 0x08
    2c96:	89 85       	ldd	r24, Y+9	; 0x09
    2c98:	9a 85       	ldd	r25, Y+10	; 0x0a
    2c9a:	20 e0       	ldi	r18, 0x00	; 0
    2c9c:	30 e0       	ldi	r19, 0x00	; 0
    2c9e:	40 e8       	ldi	r20, 0x80	; 128
    2ca0:	5f e3       	ldi	r21, 0x3F	; 63
    2ca2:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2ca6:	88 23       	and	r24, r24
    2ca8:	2c f4       	brge	.+10     	; 0x2cb4 <Keypad_enu_getKey+0xca>
		__ticks = 1;
    2caa:	81 e0       	ldi	r24, 0x01	; 1
    2cac:	90 e0       	ldi	r25, 0x00	; 0
    2cae:	9e 83       	std	Y+6, r25	; 0x06
    2cb0:	8d 83       	std	Y+5, r24	; 0x05
    2cb2:	3f c0       	rjmp	.+126    	; 0x2d32 <Keypad_enu_getKey+0x148>
	else if (__tmp > 65535)
    2cb4:	6f 81       	ldd	r22, Y+7	; 0x07
    2cb6:	78 85       	ldd	r23, Y+8	; 0x08
    2cb8:	89 85       	ldd	r24, Y+9	; 0x09
    2cba:	9a 85       	ldd	r25, Y+10	; 0x0a
    2cbc:	20 e0       	ldi	r18, 0x00	; 0
    2cbe:	3f ef       	ldi	r19, 0xFF	; 255
    2cc0:	4f e7       	ldi	r20, 0x7F	; 127
    2cc2:	57 e4       	ldi	r21, 0x47	; 71
    2cc4:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2cc8:	18 16       	cp	r1, r24
    2cca:	4c f5       	brge	.+82     	; 0x2d1e <Keypad_enu_getKey+0x134>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2ccc:	6b 85       	ldd	r22, Y+11	; 0x0b
    2cce:	7c 85       	ldd	r23, Y+12	; 0x0c
    2cd0:	8d 85       	ldd	r24, Y+13	; 0x0d
    2cd2:	9e 85       	ldd	r25, Y+14	; 0x0e
    2cd4:	20 e0       	ldi	r18, 0x00	; 0
    2cd6:	30 e0       	ldi	r19, 0x00	; 0
    2cd8:	40 e2       	ldi	r20, 0x20	; 32
    2cda:	51 e4       	ldi	r21, 0x41	; 65
    2cdc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2ce0:	dc 01       	movw	r26, r24
    2ce2:	cb 01       	movw	r24, r22
    2ce4:	bc 01       	movw	r22, r24
    2ce6:	cd 01       	movw	r24, r26
    2ce8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2cec:	dc 01       	movw	r26, r24
    2cee:	cb 01       	movw	r24, r22
    2cf0:	9e 83       	std	Y+6, r25	; 0x06
    2cf2:	8d 83       	std	Y+5, r24	; 0x05
    2cf4:	0f c0       	rjmp	.+30     	; 0x2d14 <Keypad_enu_getKey+0x12a>
    2cf6:	80 e9       	ldi	r24, 0x90	; 144
    2cf8:	91 e0       	ldi	r25, 0x01	; 1
    2cfa:	9c 83       	std	Y+4, r25	; 0x04
    2cfc:	8b 83       	std	Y+3, r24	; 0x03
    2cfe:	8b 81       	ldd	r24, Y+3	; 0x03
    2d00:	9c 81       	ldd	r25, Y+4	; 0x04
    2d02:	01 97       	sbiw	r24, 0x01	; 1
    2d04:	f1 f7       	brne	.-4      	; 0x2d02 <Keypad_enu_getKey+0x118>
    2d06:	9c 83       	std	Y+4, r25	; 0x04
    2d08:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2d0a:	8d 81       	ldd	r24, Y+5	; 0x05
    2d0c:	9e 81       	ldd	r25, Y+6	; 0x06
    2d0e:	01 97       	sbiw	r24, 0x01	; 1
    2d10:	9e 83       	std	Y+6, r25	; 0x06
    2d12:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2d14:	8d 81       	ldd	r24, Y+5	; 0x05
    2d16:	9e 81       	ldd	r25, Y+6	; 0x06
    2d18:	00 97       	sbiw	r24, 0x00	; 0
    2d1a:	69 f7       	brne	.-38     	; 0x2cf6 <Keypad_enu_getKey+0x10c>
    2d1c:	14 c0       	rjmp	.+40     	; 0x2d46 <Keypad_enu_getKey+0x15c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2d1e:	6f 81       	ldd	r22, Y+7	; 0x07
    2d20:	78 85       	ldd	r23, Y+8	; 0x08
    2d22:	89 85       	ldd	r24, Y+9	; 0x09
    2d24:	9a 85       	ldd	r25, Y+10	; 0x0a
    2d26:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2d2a:	dc 01       	movw	r26, r24
    2d2c:	cb 01       	movw	r24, r22
    2d2e:	9e 83       	std	Y+6, r25	; 0x06
    2d30:	8d 83       	std	Y+5, r24	; 0x05
    2d32:	8d 81       	ldd	r24, Y+5	; 0x05
    2d34:	9e 81       	ldd	r25, Y+6	; 0x06
    2d36:	9a 83       	std	Y+2, r25	; 0x02
    2d38:	89 83       	std	Y+1, r24	; 0x01
    2d3a:	89 81       	ldd	r24, Y+1	; 0x01
    2d3c:	9a 81       	ldd	r25, Y+2	; 0x02
    2d3e:	01 97       	sbiw	r24, 0x01	; 1
    2d40:	f1 f7       	brne	.-4      	; 0x2d3e <Keypad_enu_getKey+0x154>
    2d42:	9a 83       	std	Y+2, r25	; 0x02
    2d44:	89 83       	std	Y+1, r24	; 0x01
                {
                    // Bouncing Handling
                    _delay_ms(20);
                    DIO_enu_GetPinValue(KEYPAD_U8_COLUMNS_PORT, Keypad_Au8_ColsPins[Local_u8_colsCounter], &Local_u8_ReturnedState);
    2d46:	88 89       	ldd	r24, Y+16	; 0x10
    2d48:	88 2f       	mov	r24, r24
    2d4a:	90 e0       	ldi	r25, 0x00	; 0
    2d4c:	fc 01       	movw	r30, r24
    2d4e:	eb 5b       	subi	r30, 0xBB	; 187
    2d50:	fe 4f       	sbci	r31, 0xFE	; 254
    2d52:	90 81       	ld	r25, Z
    2d54:	9e 01       	movw	r18, r28
    2d56:	2d 5e       	subi	r18, 0xED	; 237
    2d58:	3f 4f       	sbci	r19, 0xFF	; 255
    2d5a:	82 e0       	ldi	r24, 0x02	; 2
    2d5c:	69 2f       	mov	r22, r25
    2d5e:	a9 01       	movw	r20, r18
    2d60:	0e 94 9c 2a 	call	0x5538	; 0x5538 <DIO_enu_GetPinValue>
    2d64:	0f c0       	rjmp	.+30     	; 0x2d84 <Keypad_enu_getKey+0x19a>
                    // Check if pin still low
                    while (!Local_u8_ReturnedState)
                    {
                        DIO_enu_GetPinValue(KEYPAD_U8_COLUMNS_PORT, Keypad_Au8_ColsPins[Local_u8_colsCounter], &Local_u8_ReturnedState);
    2d66:	88 89       	ldd	r24, Y+16	; 0x10
    2d68:	88 2f       	mov	r24, r24
    2d6a:	90 e0       	ldi	r25, 0x00	; 0
    2d6c:	fc 01       	movw	r30, r24
    2d6e:	eb 5b       	subi	r30, 0xBB	; 187
    2d70:	fe 4f       	sbci	r31, 0xFE	; 254
    2d72:	90 81       	ld	r25, Z
    2d74:	9e 01       	movw	r18, r28
    2d76:	2d 5e       	subi	r18, 0xED	; 237
    2d78:	3f 4f       	sbci	r19, 0xFF	; 255
    2d7a:	82 e0       	ldi	r24, 0x02	; 2
    2d7c:	69 2f       	mov	r22, r25
    2d7e:	a9 01       	movw	r20, r18
    2d80:	0e 94 9c 2a 	call	0x5538	; 0x5538 <DIO_enu_GetPinValue>
                {
                    // Bouncing Handling
                    _delay_ms(20);
                    DIO_enu_GetPinValue(KEYPAD_U8_COLUMNS_PORT, Keypad_Au8_ColsPins[Local_u8_colsCounter], &Local_u8_ReturnedState);
                    // Check if pin still low
                    while (!Local_u8_ReturnedState)
    2d84:	8b 89       	ldd	r24, Y+19	; 0x13
    2d86:	88 23       	and	r24, r24
    2d88:	71 f3       	breq	.-36     	; 0x2d66 <Keypad_enu_getKey+0x17c>
                    {
                        DIO_enu_GetPinValue(KEYPAD_U8_COLUMNS_PORT, Keypad_Au8_ColsPins[Local_u8_colsCounter], &Local_u8_ReturnedState);
                    }
                    *Copy_pu8_ReturnedKey = Keypad_Au8_Keys[Local_u8_rowsCounter][Local_u8_colsCounter];
    2d8a:	89 89       	ldd	r24, Y+17	; 0x11
    2d8c:	48 2f       	mov	r20, r24
    2d8e:	50 e0       	ldi	r21, 0x00	; 0
    2d90:	88 89       	ldd	r24, Y+16	; 0x10
    2d92:	28 2f       	mov	r18, r24
    2d94:	30 e0       	ldi	r19, 0x00	; 0
    2d96:	ca 01       	movw	r24, r20
    2d98:	88 0f       	add	r24, r24
    2d9a:	99 1f       	adc	r25, r25
    2d9c:	88 0f       	add	r24, r24
    2d9e:	99 1f       	adc	r25, r25
    2da0:	82 0f       	add	r24, r18
    2da2:	93 1f       	adc	r25, r19
    2da4:	fc 01       	movw	r30, r24
    2da6:	ef 5c       	subi	r30, 0xCF	; 207
    2da8:	fe 4f       	sbci	r31, 0xFE	; 254
    2daa:	80 81       	ld	r24, Z
    2dac:	ec 89       	ldd	r30, Y+20	; 0x14
    2dae:	fd 89       	ldd	r31, Y+21	; 0x15
    2db0:	80 83       	st	Z, r24
                    Local_u8_Flag = 1;
    2db2:	81 e0       	ldi	r24, 0x01	; 1
    2db4:	8f 87       	std	Y+15, r24	; 0x0f
    2db6:	07 c0       	rjmp	.+14     	; 0x2dc6 <Keypad_enu_getKey+0x1dc>
        /*Activate Each Row*/
        for (Local_u8_rowsCounter = 0; Local_u8_rowsCounter < 4; Local_u8_rowsCounter++)
        {
            DIO_enu_SetPinValue(KEYPAD_U8_ROWS_PORT, Keypad_Au8_RowsPins[Local_u8_rowsCounter], DIO_U8_LOW);
            /*Check Which Input Pin Has Zero*/
            for (Local_u8_colsCounter = 0; Local_u8_colsCounter < 4; Local_u8_colsCounter++)
    2db8:	88 89       	ldd	r24, Y+16	; 0x10
    2dba:	8f 5f       	subi	r24, 0xFF	; 255
    2dbc:	88 8b       	std	Y+16, r24	; 0x10
    2dbe:	88 89       	ldd	r24, Y+16	; 0x10
    2dc0:	84 30       	cpi	r24, 0x04	; 4
    2dc2:	08 f4       	brcc	.+2      	; 0x2dc6 <Keypad_enu_getKey+0x1dc>
    2dc4:	3b cf       	rjmp	.-394    	; 0x2c3c <Keypad_enu_getKey+0x52>
                    Local_u8_Flag = 1;
                    break;
                }
            }
            // Deactivate the current Row
            DIO_enu_SetPinValue(KEYPAD_U8_ROWS_PORT, Keypad_Au8_RowsPins[Local_u8_rowsCounter], DIO_U8_HIGH);
    2dc6:	89 89       	ldd	r24, Y+17	; 0x11
    2dc8:	88 2f       	mov	r24, r24
    2dca:	90 e0       	ldi	r25, 0x00	; 0
    2dcc:	fc 01       	movw	r30, r24
    2dce:	ef 5b       	subi	r30, 0xBF	; 191
    2dd0:	fe 4f       	sbci	r31, 0xFE	; 254
    2dd2:	90 81       	ld	r25, Z
    2dd4:	82 e0       	ldi	r24, 0x02	; 2
    2dd6:	69 2f       	mov	r22, r25
    2dd8:	41 e0       	ldi	r20, 0x01	; 1
    2dda:	0e 94 72 29 	call	0x52e4	; 0x52e4 <DIO_enu_SetPinValue>
            if (Local_u8_Flag)
    2dde:	8f 85       	ldd	r24, Y+15	; 0x0f
    2de0:	88 23       	and	r24, r24
    2de2:	49 f4       	brne	.+18     	; 0x2df6 <Keypad_enu_getKey+0x20c>
    u8 Local_u8_errorState = STATE_OK, Local_u8_rowsCounter, Local_u8_colsCounter, Local_u8_ReturnedState = 0, Local_u8_Flag = 0;
    if (Copy_pu8_ReturnedKey != NULL)
    {
        *Copy_pu8_ReturnedKey = NO_KEY_PRESSED;
        /*Activate Each Row*/
        for (Local_u8_rowsCounter = 0; Local_u8_rowsCounter < 4; Local_u8_rowsCounter++)
    2de4:	89 89       	ldd	r24, Y+17	; 0x11
    2de6:	8f 5f       	subi	r24, 0xFF	; 255
    2de8:	89 8b       	std	Y+17, r24	; 0x11
    2dea:	89 89       	ldd	r24, Y+17	; 0x11
    2dec:	84 30       	cpi	r24, 0x04	; 4
    2dee:	08 f4       	brcc	.+2      	; 0x2df2 <Keypad_enu_getKey+0x208>
    2df0:	17 cf       	rjmp	.-466    	; 0x2c20 <Keypad_enu_getKey+0x36>
    2df2:	01 c0       	rjmp	.+2      	; 0x2df6 <Keypad_enu_getKey+0x20c>
            }
        }
    }
    else
    {
        Local_u8_errorState = STATE_NOT_OK;
    2df4:	1a 8a       	std	Y+18, r1	; 0x12
    }
    return Local_u8_errorState;
    2df6:	8a 89       	ldd	r24, Y+18	; 0x12
}
    2df8:	65 96       	adiw	r28, 0x15	; 21
    2dfa:	0f b6       	in	r0, 0x3f	; 63
    2dfc:	f8 94       	cli
    2dfe:	de bf       	out	0x3e, r29	; 62
    2e00:	0f be       	out	0x3f, r0	; 63
    2e02:	cd bf       	out	0x3d, r28	; 61
    2e04:	cf 91       	pop	r28
    2e06:	df 91       	pop	r29
    2e08:	08 95       	ret

00002e0a <EEPROM_enu_Write>:
#include"../../1-MCAL/I2C/I2C_Interface.h"

#include"EEPROM_Config.h"
#include"EEPROM_Private.h"

ES_t EEPROM_enu_Write(u16 Copy_u8_Location,u8 Copy_u8_Data){
    2e0a:	df 93       	push	r29
    2e0c:	cf 93       	push	r28
    2e0e:	cd b7       	in	r28, 0x3d	; 61
    2e10:	de b7       	in	r29, 0x3e	; 62
    2e12:	61 97       	sbiw	r28, 0x11	; 17
    2e14:	0f b6       	in	r0, 0x3f	; 63
    2e16:	f8 94       	cli
    2e18:	de bf       	out	0x3e, r29	; 62
    2e1a:	0f be       	out	0x3f, r0	; 63
    2e1c:	cd bf       	out	0x3d, r28	; 61
    2e1e:	98 8b       	std	Y+16, r25	; 0x10
    2e20:	8f 87       	std	Y+15, r24	; 0x0f
    2e22:	69 8b       	std	Y+17, r22	; 0x11
    I2C_enu_Start();
    2e24:	0e 94 3a 24 	call	0x4874	; 0x4874 <I2C_enu_Start>
    I2C_enu_writeData(0x50|(A2_PIN <<2)|(Copy_u8_Location>>8),(u8)Copy_u8_Location);
    2e28:	8f 85       	ldd	r24, Y+15	; 0x0f
    2e2a:	98 89       	ldd	r25, Y+16	; 0x10
    2e2c:	89 2f       	mov	r24, r25
    2e2e:	99 27       	eor	r25, r25
    2e30:	80 65       	ori	r24, 0x50	; 80
    2e32:	2f 85       	ldd	r18, Y+15	; 0x0f
    2e34:	62 2f       	mov	r22, r18
    2e36:	0e 94 61 24 	call	0x48c2	; 0x48c2 <I2C_enu_writeData>
    I2C_enu_writeData(NONE,Copy_u8_Data);
    2e3a:	88 ee       	ldi	r24, 0xE8	; 232
    2e3c:	93 e0       	ldi	r25, 0x03	; 3
    2e3e:	69 89       	ldd	r22, Y+17	; 0x11
    2e40:	0e 94 61 24 	call	0x48c2	; 0x48c2 <I2C_enu_writeData>
    I2C_enu_Stop();
    2e44:	0e 94 4b 24 	call	0x4896	; 0x4896 <I2C_enu_Stop>
    2e48:	80 e0       	ldi	r24, 0x00	; 0
    2e4a:	90 e0       	ldi	r25, 0x00	; 0
    2e4c:	a0 e2       	ldi	r26, 0x20	; 32
    2e4e:	b1 e4       	ldi	r27, 0x41	; 65
    2e50:	8b 87       	std	Y+11, r24	; 0x0b
    2e52:	9c 87       	std	Y+12, r25	; 0x0c
    2e54:	ad 87       	std	Y+13, r26	; 0x0d
    2e56:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2e58:	6b 85       	ldd	r22, Y+11	; 0x0b
    2e5a:	7c 85       	ldd	r23, Y+12	; 0x0c
    2e5c:	8d 85       	ldd	r24, Y+13	; 0x0d
    2e5e:	9e 85       	ldd	r25, Y+14	; 0x0e
    2e60:	20 e0       	ldi	r18, 0x00	; 0
    2e62:	30 e0       	ldi	r19, 0x00	; 0
    2e64:	4a e7       	ldi	r20, 0x7A	; 122
    2e66:	55 e4       	ldi	r21, 0x45	; 69
    2e68:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2e6c:	dc 01       	movw	r26, r24
    2e6e:	cb 01       	movw	r24, r22
    2e70:	8f 83       	std	Y+7, r24	; 0x07
    2e72:	98 87       	std	Y+8, r25	; 0x08
    2e74:	a9 87       	std	Y+9, r26	; 0x09
    2e76:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2e78:	6f 81       	ldd	r22, Y+7	; 0x07
    2e7a:	78 85       	ldd	r23, Y+8	; 0x08
    2e7c:	89 85       	ldd	r24, Y+9	; 0x09
    2e7e:	9a 85       	ldd	r25, Y+10	; 0x0a
    2e80:	20 e0       	ldi	r18, 0x00	; 0
    2e82:	30 e0       	ldi	r19, 0x00	; 0
    2e84:	40 e8       	ldi	r20, 0x80	; 128
    2e86:	5f e3       	ldi	r21, 0x3F	; 63
    2e88:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2e8c:	88 23       	and	r24, r24
    2e8e:	2c f4       	brge	.+10     	; 0x2e9a <EEPROM_enu_Write+0x90>
		__ticks = 1;
    2e90:	81 e0       	ldi	r24, 0x01	; 1
    2e92:	90 e0       	ldi	r25, 0x00	; 0
    2e94:	9e 83       	std	Y+6, r25	; 0x06
    2e96:	8d 83       	std	Y+5, r24	; 0x05
    2e98:	3f c0       	rjmp	.+126    	; 0x2f18 <EEPROM_enu_Write+0x10e>
	else if (__tmp > 65535)
    2e9a:	6f 81       	ldd	r22, Y+7	; 0x07
    2e9c:	78 85       	ldd	r23, Y+8	; 0x08
    2e9e:	89 85       	ldd	r24, Y+9	; 0x09
    2ea0:	9a 85       	ldd	r25, Y+10	; 0x0a
    2ea2:	20 e0       	ldi	r18, 0x00	; 0
    2ea4:	3f ef       	ldi	r19, 0xFF	; 255
    2ea6:	4f e7       	ldi	r20, 0x7F	; 127
    2ea8:	57 e4       	ldi	r21, 0x47	; 71
    2eaa:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2eae:	18 16       	cp	r1, r24
    2eb0:	4c f5       	brge	.+82     	; 0x2f04 <EEPROM_enu_Write+0xfa>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2eb2:	6b 85       	ldd	r22, Y+11	; 0x0b
    2eb4:	7c 85       	ldd	r23, Y+12	; 0x0c
    2eb6:	8d 85       	ldd	r24, Y+13	; 0x0d
    2eb8:	9e 85       	ldd	r25, Y+14	; 0x0e
    2eba:	20 e0       	ldi	r18, 0x00	; 0
    2ebc:	30 e0       	ldi	r19, 0x00	; 0
    2ebe:	40 e2       	ldi	r20, 0x20	; 32
    2ec0:	51 e4       	ldi	r21, 0x41	; 65
    2ec2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2ec6:	dc 01       	movw	r26, r24
    2ec8:	cb 01       	movw	r24, r22
    2eca:	bc 01       	movw	r22, r24
    2ecc:	cd 01       	movw	r24, r26
    2ece:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2ed2:	dc 01       	movw	r26, r24
    2ed4:	cb 01       	movw	r24, r22
    2ed6:	9e 83       	std	Y+6, r25	; 0x06
    2ed8:	8d 83       	std	Y+5, r24	; 0x05
    2eda:	0f c0       	rjmp	.+30     	; 0x2efa <EEPROM_enu_Write+0xf0>
    2edc:	80 e9       	ldi	r24, 0x90	; 144
    2ede:	91 e0       	ldi	r25, 0x01	; 1
    2ee0:	9c 83       	std	Y+4, r25	; 0x04
    2ee2:	8b 83       	std	Y+3, r24	; 0x03
    2ee4:	8b 81       	ldd	r24, Y+3	; 0x03
    2ee6:	9c 81       	ldd	r25, Y+4	; 0x04
    2ee8:	01 97       	sbiw	r24, 0x01	; 1
    2eea:	f1 f7       	brne	.-4      	; 0x2ee8 <EEPROM_enu_Write+0xde>
    2eec:	9c 83       	std	Y+4, r25	; 0x04
    2eee:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2ef0:	8d 81       	ldd	r24, Y+5	; 0x05
    2ef2:	9e 81       	ldd	r25, Y+6	; 0x06
    2ef4:	01 97       	sbiw	r24, 0x01	; 1
    2ef6:	9e 83       	std	Y+6, r25	; 0x06
    2ef8:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2efa:	8d 81       	ldd	r24, Y+5	; 0x05
    2efc:	9e 81       	ldd	r25, Y+6	; 0x06
    2efe:	00 97       	sbiw	r24, 0x00	; 0
    2f00:	69 f7       	brne	.-38     	; 0x2edc <EEPROM_enu_Write+0xd2>
    2f02:	14 c0       	rjmp	.+40     	; 0x2f2c <EEPROM_enu_Write+0x122>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2f04:	6f 81       	ldd	r22, Y+7	; 0x07
    2f06:	78 85       	ldd	r23, Y+8	; 0x08
    2f08:	89 85       	ldd	r24, Y+9	; 0x09
    2f0a:	9a 85       	ldd	r25, Y+10	; 0x0a
    2f0c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2f10:	dc 01       	movw	r26, r24
    2f12:	cb 01       	movw	r24, r22
    2f14:	9e 83       	std	Y+6, r25	; 0x06
    2f16:	8d 83       	std	Y+5, r24	; 0x05
    2f18:	8d 81       	ldd	r24, Y+5	; 0x05
    2f1a:	9e 81       	ldd	r25, Y+6	; 0x06
    2f1c:	9a 83       	std	Y+2, r25	; 0x02
    2f1e:	89 83       	std	Y+1, r24	; 0x01
    2f20:	89 81       	ldd	r24, Y+1	; 0x01
    2f22:	9a 81       	ldd	r25, Y+2	; 0x02
    2f24:	01 97       	sbiw	r24, 0x01	; 1
    2f26:	f1 f7       	brne	.-4      	; 0x2f24 <EEPROM_enu_Write+0x11a>
    2f28:	9a 83       	std	Y+2, r25	; 0x02
    2f2a:	89 83       	std	Y+1, r24	; 0x01
    _delay_ms(10);
    return STATE_OK;
    2f2c:	81 e0       	ldi	r24, 0x01	; 1
}
    2f2e:	61 96       	adiw	r28, 0x11	; 17
    2f30:	0f b6       	in	r0, 0x3f	; 63
    2f32:	f8 94       	cli
    2f34:	de bf       	out	0x3e, r29	; 62
    2f36:	0f be       	out	0x3f, r0	; 63
    2f38:	cd bf       	out	0x3d, r28	; 61
    2f3a:	cf 91       	pop	r28
    2f3c:	df 91       	pop	r29
    2f3e:	08 95       	ret

00002f40 <EEPROM_enu_Read>:
ES_t EEPROM_enu_Read(u16 Copy_u8_Location,u8 *Copy_u8_receivedData){
    2f40:	df 93       	push	r29
    2f42:	cf 93       	push	r28
    2f44:	00 d0       	rcall	.+0      	; 0x2f46 <EEPROM_enu_Read+0x6>
    2f46:	00 d0       	rcall	.+0      	; 0x2f48 <EEPROM_enu_Read+0x8>
    2f48:	0f 92       	push	r0
    2f4a:	cd b7       	in	r28, 0x3d	; 61
    2f4c:	de b7       	in	r29, 0x3e	; 62
    2f4e:	9b 83       	std	Y+3, r25	; 0x03
    2f50:	8a 83       	std	Y+2, r24	; 0x02
    2f52:	7d 83       	std	Y+5, r23	; 0x05
    2f54:	6c 83       	std	Y+4, r22	; 0x04
    u8 Local_u8_errorState = STATE_OK;
    2f56:	81 e0       	ldi	r24, 0x01	; 1
    2f58:	89 83       	std	Y+1, r24	; 0x01
    if (Copy_u8_receivedData != NULL)
    2f5a:	8c 81       	ldd	r24, Y+4	; 0x04
    2f5c:	9d 81       	ldd	r25, Y+5	; 0x05
    2f5e:	00 97       	sbiw	r24, 0x00	; 0
    2f60:	d1 f0       	breq	.+52     	; 0x2f96 <EEPROM_enu_Read+0x56>
    {
        I2C_enu_Start();
    2f62:	0e 94 3a 24 	call	0x4874	; 0x4874 <I2C_enu_Start>
        I2C_enu_writeData(0x50 | (A2_PIN << 2) | (Copy_u8_Location >> 8), (u8)Copy_u8_Location);
    2f66:	8a 81       	ldd	r24, Y+2	; 0x02
    2f68:	9b 81       	ldd	r25, Y+3	; 0x03
    2f6a:	89 2f       	mov	r24, r25
    2f6c:	99 27       	eor	r25, r25
    2f6e:	80 65       	ori	r24, 0x50	; 80
    2f70:	2a 81       	ldd	r18, Y+2	; 0x02
    2f72:	62 2f       	mov	r22, r18
    2f74:	0e 94 61 24 	call	0x48c2	; 0x48c2 <I2C_enu_writeData>
        I2C_enu_Start();
    2f78:	0e 94 3a 24 	call	0x4874	; 0x4874 <I2C_enu_Start>
        I2C_enu_readData(0x50 | (A2_PIN << 2) | (Copy_u8_Location >> 8), Copy_u8_receivedData);
    2f7c:	8a 81       	ldd	r24, Y+2	; 0x02
    2f7e:	9b 81       	ldd	r25, Y+3	; 0x03
    2f80:	89 2f       	mov	r24, r25
    2f82:	99 27       	eor	r25, r25
    2f84:	80 65       	ori	r24, 0x50	; 80
    2f86:	2c 81       	ldd	r18, Y+4	; 0x04
    2f88:	3d 81       	ldd	r19, Y+5	; 0x05
    2f8a:	b9 01       	movw	r22, r18
    2f8c:	0e 94 92 24 	call	0x4924	; 0x4924 <I2C_enu_readData>
        I2C_enu_Stop();
    2f90:	0e 94 4b 24 	call	0x4896	; 0x4896 <I2C_enu_Stop>
    2f94:	01 c0       	rjmp	.+2      	; 0x2f98 <EEPROM_enu_Read+0x58>
    }
    else
    {
        Local_u8_errorState = STATE_NOT_OK;
    2f96:	19 82       	std	Y+1, r1	; 0x01
    }
    return Local_u8_errorState;
    2f98:	89 81       	ldd	r24, Y+1	; 0x01
}
    2f9a:	0f 90       	pop	r0
    2f9c:	0f 90       	pop	r0
    2f9e:	0f 90       	pop	r0
    2fa0:	0f 90       	pop	r0
    2fa2:	0f 90       	pop	r0
    2fa4:	cf 91       	pop	r28
    2fa6:	df 91       	pop	r29
    2fa8:	08 95       	ret

00002faa <DC_Motor_enu_Init>:

#include "../../2-HAL/DC_Motor/DC_Motor_Config.h"
#include "../../2-HAL/DC_Motor/DC_Motor_Private.h"

ES_t DC_Motor_enu_Init(u8 Copy_u8_M1_State, u8 Copy_u8_M2_State)
{
    2faa:	df 93       	push	r29
    2fac:	cf 93       	push	r28
    2fae:	00 d0       	rcall	.+0      	; 0x2fb0 <DC_Motor_enu_Init+0x6>
    2fb0:	0f 92       	push	r0
    2fb2:	cd b7       	in	r28, 0x3d	; 61
    2fb4:	de b7       	in	r29, 0x3e	; 62
    2fb6:	8a 83       	std	Y+2, r24	; 0x02
    2fb8:	6b 83       	std	Y+3, r22	; 0x03
    u8 Local_u8_errorState = STATE_OK;
    2fba:	81 e0       	ldi	r24, 0x01	; 1
    2fbc:	89 83       	std	Y+1, r24	; 0x01
    if ((Copy_u8_M1_State == 1 || Copy_u8_M1_State == 0) && (Copy_u8_M2_State == 1 || Copy_u8_M2_State == 0))
    2fbe:	8a 81       	ldd	r24, Y+2	; 0x02
    2fc0:	81 30       	cpi	r24, 0x01	; 1
    2fc2:	19 f0       	breq	.+6      	; 0x2fca <DC_Motor_enu_Init+0x20>
    2fc4:	8a 81       	ldd	r24, Y+2	; 0x02
    2fc6:	88 23       	and	r24, r24
    2fc8:	59 f5       	brne	.+86     	; 0x3020 <DC_Motor_enu_Init+0x76>
    2fca:	8b 81       	ldd	r24, Y+3	; 0x03
    2fcc:	81 30       	cpi	r24, 0x01	; 1
    2fce:	19 f0       	breq	.+6      	; 0x2fd6 <DC_Motor_enu_Init+0x2c>
    2fd0:	8b 81       	ldd	r24, Y+3	; 0x03
    2fd2:	88 23       	and	r24, r24
    2fd4:	29 f5       	brne	.+74     	; 0x3020 <DC_Motor_enu_Init+0x76>
    {
        if (Copy_u8_M1_State == CONNECTED)
    2fd6:	8a 81       	ldd	r24, Y+2	; 0x02
    2fd8:	81 30       	cpi	r24, 0x01	; 1
    2fda:	79 f4       	brne	.+30     	; 0x2ffa <DC_Motor_enu_Init+0x50>
        {
            DIO_enu_SetPinDirection(MOTOR_ENA_PORT, MOTOR_ENA_PIN, DIO_U8_OUTPUT);
    2fdc:	82 e0       	ldi	r24, 0x02	; 2
    2fde:	64 e0       	ldi	r22, 0x04	; 4
    2fe0:	41 e0       	ldi	r20, 0x01	; 1
    2fe2:	0e 94 48 28 	call	0x5090	; 0x5090 <DIO_enu_SetPinDirection>
            DIO_enu_SetPinDirection(MOTOR_IN1_PORT, MOTOR_IN1_PIN, DIO_U8_OUTPUT);
    2fe6:	82 e0       	ldi	r24, 0x02	; 2
    2fe8:	60 e0       	ldi	r22, 0x00	; 0
    2fea:	41 e0       	ldi	r20, 0x01	; 1
    2fec:	0e 94 48 28 	call	0x5090	; 0x5090 <DIO_enu_SetPinDirection>
            DIO_enu_SetPinDirection(MOTOR_IN2_PORT, MOTOR_IN2_PIN, DIO_U8_OUTPUT);
    2ff0:	82 e0       	ldi	r24, 0x02	; 2
    2ff2:	61 e0       	ldi	r22, 0x01	; 1
    2ff4:	41 e0       	ldi	r20, 0x01	; 1
    2ff6:	0e 94 48 28 	call	0x5090	; 0x5090 <DIO_enu_SetPinDirection>
        }
        if (Copy_u8_M2_State == CONNECTED)
    2ffa:	8b 81       	ldd	r24, Y+3	; 0x03
    2ffc:	81 30       	cpi	r24, 0x01	; 1
    2ffe:	89 f4       	brne	.+34     	; 0x3022 <DC_Motor_enu_Init+0x78>
        {
            DIO_enu_SetPinDirection(MOTOR_ENB_PORT, MOTOR_ENB_PIN, DIO_U8_OUTPUT);
    3000:	82 e0       	ldi	r24, 0x02	; 2
    3002:	65 e0       	ldi	r22, 0x05	; 5
    3004:	41 e0       	ldi	r20, 0x01	; 1
    3006:	0e 94 48 28 	call	0x5090	; 0x5090 <DIO_enu_SetPinDirection>
            DIO_enu_SetPinDirection(MOTOR_IN3_PORT, MOTOR_IN3_PIN, DIO_U8_OUTPUT);
    300a:	82 e0       	ldi	r24, 0x02	; 2
    300c:	62 e0       	ldi	r22, 0x02	; 2
    300e:	41 e0       	ldi	r20, 0x01	; 1
    3010:	0e 94 48 28 	call	0x5090	; 0x5090 <DIO_enu_SetPinDirection>
            DIO_enu_SetPinDirection(MOTOR_IN4_PORT, MOTOR_IN4_PIN, DIO_U8_OUTPUT);
    3014:	82 e0       	ldi	r24, 0x02	; 2
    3016:	63 e0       	ldi	r22, 0x03	; 3
    3018:	41 e0       	ldi	r20, 0x01	; 1
    301a:	0e 94 48 28 	call	0x5090	; 0x5090 <DIO_enu_SetPinDirection>
    301e:	01 c0       	rjmp	.+2      	; 0x3022 <DC_Motor_enu_Init+0x78>
        }
    }
    else
    {
        Local_u8_errorState = STATE_NOT_OK;
    3020:	19 82       	std	Y+1, r1	; 0x01
    }
    return Local_u8_errorState;
    3022:	89 81       	ldd	r24, Y+1	; 0x01
}
    3024:	0f 90       	pop	r0
    3026:	0f 90       	pop	r0
    3028:	0f 90       	pop	r0
    302a:	cf 91       	pop	r28
    302c:	df 91       	pop	r29
    302e:	08 95       	ret

00003030 <DC_Motor_enu_Rotate>:
ES_t DC_Motor_enu_Rotate(u8 Copy_u8_Motor, u8 Copy_u8_Direction)
{
    3030:	df 93       	push	r29
    3032:	cf 93       	push	r28
    3034:	cd b7       	in	r28, 0x3d	; 61
    3036:	de b7       	in	r29, 0x3e	; 62
    3038:	29 97       	sbiw	r28, 0x09	; 9
    303a:	0f b6       	in	r0, 0x3f	; 63
    303c:	f8 94       	cli
    303e:	de bf       	out	0x3e, r29	; 62
    3040:	0f be       	out	0x3f, r0	; 63
    3042:	cd bf       	out	0x3d, r28	; 61
    3044:	8a 83       	std	Y+2, r24	; 0x02
    3046:	6b 83       	std	Y+3, r22	; 0x03
    u8 Local_u8_errorState = STATE_OK;
    3048:	81 e0       	ldi	r24, 0x01	; 1
    304a:	89 83       	std	Y+1, r24	; 0x01
    switch (Copy_u8_Motor)
    304c:	8a 81       	ldd	r24, Y+2	; 0x02
    304e:	28 2f       	mov	r18, r24
    3050:	30 e0       	ldi	r19, 0x00	; 0
    3052:	39 87       	std	Y+9, r19	; 0x09
    3054:	28 87       	std	Y+8, r18	; 0x08
    3056:	88 85       	ldd	r24, Y+8	; 0x08
    3058:	99 85       	ldd	r25, Y+9	; 0x09
    305a:	00 97       	sbiw	r24, 0x00	; 0
    305c:	31 f0       	breq	.+12     	; 0x306a <DC_Motor_enu_Rotate+0x3a>
    305e:	28 85       	ldd	r18, Y+8	; 0x08
    3060:	39 85       	ldd	r19, Y+9	; 0x09
    3062:	21 30       	cpi	r18, 0x01	; 1
    3064:	31 05       	cpc	r19, r1
    3066:	89 f1       	breq	.+98     	; 0x30ca <DC_Motor_enu_Rotate+0x9a>
    3068:	60 c0       	rjmp	.+192    	; 0x312a <DC_Motor_enu_Rotate+0xfa>
    {
    case MOTOR1:
        switch (Copy_u8_Direction)
    306a:	8b 81       	ldd	r24, Y+3	; 0x03
    306c:	28 2f       	mov	r18, r24
    306e:	30 e0       	ldi	r19, 0x00	; 0
    3070:	3f 83       	std	Y+7, r19	; 0x07
    3072:	2e 83       	std	Y+6, r18	; 0x06
    3074:	8e 81       	ldd	r24, Y+6	; 0x06
    3076:	9f 81       	ldd	r25, Y+7	; 0x07
    3078:	00 97       	sbiw	r24, 0x00	; 0
    307a:	a9 f0       	breq	.+42     	; 0x30a6 <DC_Motor_enu_Rotate+0x76>
    307c:	2e 81       	ldd	r18, Y+6	; 0x06
    307e:	3f 81       	ldd	r19, Y+7	; 0x07
    3080:	21 30       	cpi	r18, 0x01	; 1
    3082:	31 05       	cpc	r19, r1
    3084:	01 f5       	brne	.+64     	; 0x30c6 <DC_Motor_enu_Rotate+0x96>
        {
        case CW:
            DIO_enu_SetPinValue(MOTOR_ENA_PORT, MOTOR_ENA_PIN, DIO_U8_HIGH);
    3086:	82 e0       	ldi	r24, 0x02	; 2
    3088:	64 e0       	ldi	r22, 0x04	; 4
    308a:	41 e0       	ldi	r20, 0x01	; 1
    308c:	0e 94 72 29 	call	0x52e4	; 0x52e4 <DIO_enu_SetPinValue>
            DIO_enu_SetPinValue(MOTOR_IN1_PORT, MOTOR_IN1_PIN, DIO_U8_HIGH);
    3090:	82 e0       	ldi	r24, 0x02	; 2
    3092:	60 e0       	ldi	r22, 0x00	; 0
    3094:	41 e0       	ldi	r20, 0x01	; 1
    3096:	0e 94 72 29 	call	0x52e4	; 0x52e4 <DIO_enu_SetPinValue>
            DIO_enu_SetPinValue(MOTOR_IN2_PORT, MOTOR_IN2_PIN, DIO_U8_LOW);
    309a:	82 e0       	ldi	r24, 0x02	; 2
    309c:	61 e0       	ldi	r22, 0x01	; 1
    309e:	40 e0       	ldi	r20, 0x00	; 0
    30a0:	0e 94 72 29 	call	0x52e4	; 0x52e4 <DIO_enu_SetPinValue>
    30a4:	43 c0       	rjmp	.+134    	; 0x312c <DC_Motor_enu_Rotate+0xfc>
            break;
        case CCW:
            DIO_enu_SetPinValue(MOTOR_ENA_PORT, MOTOR_ENA_PIN, DIO_U8_HIGH);
    30a6:	82 e0       	ldi	r24, 0x02	; 2
    30a8:	64 e0       	ldi	r22, 0x04	; 4
    30aa:	41 e0       	ldi	r20, 0x01	; 1
    30ac:	0e 94 72 29 	call	0x52e4	; 0x52e4 <DIO_enu_SetPinValue>
            DIO_enu_SetPinValue(MOTOR_IN1_PORT, MOTOR_IN1_PIN, DIO_U8_LOW);
    30b0:	82 e0       	ldi	r24, 0x02	; 2
    30b2:	60 e0       	ldi	r22, 0x00	; 0
    30b4:	40 e0       	ldi	r20, 0x00	; 0
    30b6:	0e 94 72 29 	call	0x52e4	; 0x52e4 <DIO_enu_SetPinValue>
            DIO_enu_SetPinValue(MOTOR_IN2_PORT, MOTOR_IN2_PIN, DIO_U8_HIGH);
    30ba:	82 e0       	ldi	r24, 0x02	; 2
    30bc:	61 e0       	ldi	r22, 0x01	; 1
    30be:	41 e0       	ldi	r20, 0x01	; 1
    30c0:	0e 94 72 29 	call	0x52e4	; 0x52e4 <DIO_enu_SetPinValue>
    30c4:	33 c0       	rjmp	.+102    	; 0x312c <DC_Motor_enu_Rotate+0xfc>
            
            break;
        default:
            Local_u8_errorState = STATE_NOT_OK;
    30c6:	19 82       	std	Y+1, r1	; 0x01
    30c8:	31 c0       	rjmp	.+98     	; 0x312c <DC_Motor_enu_Rotate+0xfc>
            break;
        }
        break;
    case MOTOR2:
        switch (Copy_u8_Direction)
    30ca:	8b 81       	ldd	r24, Y+3	; 0x03
    30cc:	28 2f       	mov	r18, r24
    30ce:	30 e0       	ldi	r19, 0x00	; 0
    30d0:	3d 83       	std	Y+5, r19	; 0x05
    30d2:	2c 83       	std	Y+4, r18	; 0x04
    30d4:	8c 81       	ldd	r24, Y+4	; 0x04
    30d6:	9d 81       	ldd	r25, Y+5	; 0x05
    30d8:	00 97       	sbiw	r24, 0x00	; 0
    30da:	a9 f0       	breq	.+42     	; 0x3106 <DC_Motor_enu_Rotate+0xd6>
    30dc:	2c 81       	ldd	r18, Y+4	; 0x04
    30de:	3d 81       	ldd	r19, Y+5	; 0x05
    30e0:	21 30       	cpi	r18, 0x01	; 1
    30e2:	31 05       	cpc	r19, r1
    30e4:	01 f5       	brne	.+64     	; 0x3126 <DC_Motor_enu_Rotate+0xf6>
        {
        case CW:
            DIO_enu_SetPinValue(MOTOR_ENB_PORT, MOTOR_ENB_PIN, DIO_U8_HIGH);
    30e6:	82 e0       	ldi	r24, 0x02	; 2
    30e8:	65 e0       	ldi	r22, 0x05	; 5
    30ea:	41 e0       	ldi	r20, 0x01	; 1
    30ec:	0e 94 72 29 	call	0x52e4	; 0x52e4 <DIO_enu_SetPinValue>
            DIO_enu_SetPinValue(MOTOR_IN3_PORT, MOTOR_IN3_PIN, DIO_U8_HIGH);
    30f0:	82 e0       	ldi	r24, 0x02	; 2
    30f2:	62 e0       	ldi	r22, 0x02	; 2
    30f4:	41 e0       	ldi	r20, 0x01	; 1
    30f6:	0e 94 72 29 	call	0x52e4	; 0x52e4 <DIO_enu_SetPinValue>
            DIO_enu_SetPinValue(MOTOR_IN4_PORT, MOTOR_IN4_PIN, DIO_U8_LOW);
    30fa:	82 e0       	ldi	r24, 0x02	; 2
    30fc:	63 e0       	ldi	r22, 0x03	; 3
    30fe:	40 e0       	ldi	r20, 0x00	; 0
    3100:	0e 94 72 29 	call	0x52e4	; 0x52e4 <DIO_enu_SetPinValue>
    3104:	13 c0       	rjmp	.+38     	; 0x312c <DC_Motor_enu_Rotate+0xfc>
            break;
        case CCW:
            DIO_enu_SetPinValue(MOTOR_ENB_PORT, MOTOR_ENB_PIN, DIO_U8_HIGH);
    3106:	82 e0       	ldi	r24, 0x02	; 2
    3108:	65 e0       	ldi	r22, 0x05	; 5
    310a:	41 e0       	ldi	r20, 0x01	; 1
    310c:	0e 94 72 29 	call	0x52e4	; 0x52e4 <DIO_enu_SetPinValue>
            DIO_enu_SetPinValue(MOTOR_IN3_PORT, MOTOR_IN3_PIN, DIO_U8_LOW);
    3110:	82 e0       	ldi	r24, 0x02	; 2
    3112:	62 e0       	ldi	r22, 0x02	; 2
    3114:	40 e0       	ldi	r20, 0x00	; 0
    3116:	0e 94 72 29 	call	0x52e4	; 0x52e4 <DIO_enu_SetPinValue>
            DIO_enu_SetPinValue(MOTOR_IN4_PORT, MOTOR_IN4_PIN, DIO_U8_HIGH);
    311a:	82 e0       	ldi	r24, 0x02	; 2
    311c:	63 e0       	ldi	r22, 0x03	; 3
    311e:	41 e0       	ldi	r20, 0x01	; 1
    3120:	0e 94 72 29 	call	0x52e4	; 0x52e4 <DIO_enu_SetPinValue>
    3124:	03 c0       	rjmp	.+6      	; 0x312c <DC_Motor_enu_Rotate+0xfc>

            break;
        default:
            Local_u8_errorState = STATE_NOT_OK;
    3126:	19 82       	std	Y+1, r1	; 0x01
    3128:	01 c0       	rjmp	.+2      	; 0x312c <DC_Motor_enu_Rotate+0xfc>
            break;
        }
        break;
        break;
    default:
        Local_u8_errorState = STATE_NOT_OK;
    312a:	19 82       	std	Y+1, r1	; 0x01
        break;
    }
    return Local_u8_errorState;
    312c:	89 81       	ldd	r24, Y+1	; 0x01
}
    312e:	29 96       	adiw	r28, 0x09	; 9
    3130:	0f b6       	in	r0, 0x3f	; 63
    3132:	f8 94       	cli
    3134:	de bf       	out	0x3e, r29	; 62
    3136:	0f be       	out	0x3f, r0	; 63
    3138:	cd bf       	out	0x3d, r28	; 61
    313a:	cf 91       	pop	r28
    313c:	df 91       	pop	r29
    313e:	08 95       	ret

00003140 <DC_Motor_enu_Stop>:
ES_t DC_Motor_enu_Stop(u8 Copy_u8_Motor)
{
    3140:	df 93       	push	r29
    3142:	cf 93       	push	r28
    3144:	00 d0       	rcall	.+0      	; 0x3146 <DC_Motor_enu_Stop+0x6>
    3146:	cd b7       	in	r28, 0x3d	; 61
    3148:	de b7       	in	r29, 0x3e	; 62
    314a:	8a 83       	std	Y+2, r24	; 0x02
    u8 Local_u8_errorState = STATE_OK;
    314c:	81 e0       	ldi	r24, 0x01	; 1
    314e:	89 83       	std	Y+1, r24	; 0x01
    if (Copy_u8_Motor == MOTOR1)
    3150:	8a 81       	ldd	r24, Y+2	; 0x02
    3152:	88 23       	and	r24, r24
    3154:	31 f4       	brne	.+12     	; 0x3162 <DC_Motor_enu_Stop+0x22>
    {
        DIO_enu_SetPinValue(MOTOR_ENA_PORT, MOTOR_ENA_PIN, DIO_U8_LOW);
    3156:	82 e0       	ldi	r24, 0x02	; 2
    3158:	64 e0       	ldi	r22, 0x04	; 4
    315a:	40 e0       	ldi	r20, 0x00	; 0
    315c:	0e 94 72 29 	call	0x52e4	; 0x52e4 <DIO_enu_SetPinValue>
    3160:	0a c0       	rjmp	.+20     	; 0x3176 <DC_Motor_enu_Stop+0x36>
    }
    else if (Copy_u8_Motor == MOTOR2)
    3162:	8a 81       	ldd	r24, Y+2	; 0x02
    3164:	81 30       	cpi	r24, 0x01	; 1
    3166:	31 f4       	brne	.+12     	; 0x3174 <DC_Motor_enu_Stop+0x34>
    {
        DIO_enu_SetPinValue(MOTOR_ENB_PORT, MOTOR_ENB_PIN, DIO_U8_LOW);
    3168:	82 e0       	ldi	r24, 0x02	; 2
    316a:	65 e0       	ldi	r22, 0x05	; 5
    316c:	40 e0       	ldi	r20, 0x00	; 0
    316e:	0e 94 72 29 	call	0x52e4	; 0x52e4 <DIO_enu_SetPinValue>
    3172:	01 c0       	rjmp	.+2      	; 0x3176 <DC_Motor_enu_Stop+0x36>
    }
    else
    {
        Local_u8_errorState = STATE_NOT_OK;
    3174:	19 82       	std	Y+1, r1	; 0x01
    }
    return Local_u8_errorState;
    3176:	89 81       	ldd	r24, Y+1	; 0x01
}
    3178:	0f 90       	pop	r0
    317a:	0f 90       	pop	r0
    317c:	cf 91       	pop	r28
    317e:	df 91       	pop	r29
    3180:	08 95       	ret

00003182 <WDT_enu_Enable>:
#include"../../5-LIB/BIT_MATH.h"
#include"WDT_Config.h"
#include"WDT_Private.h"


ES_t WDT_enu_Enable(u8 Copy_u8_Time){
    3182:	df 93       	push	r29
    3184:	cf 93       	push	r28
    3186:	00 d0       	rcall	.+0      	; 0x3188 <WDT_enu_Enable+0x6>
    3188:	cd b7       	in	r28, 0x3d	; 61
    318a:	de b7       	in	r29, 0x3e	; 62
    318c:	8a 83       	std	Y+2, r24	; 0x02
    u8 Local_enu_errorState = STATE_OK;
    318e:	81 e0       	ldi	r24, 0x01	; 1
    3190:	89 83       	std	Y+1, r24	; 0x01
    if(Copy_u8_Time<8){
    3192:	8a 81       	ldd	r24, Y+2	; 0x02
    3194:	88 30       	cpi	r24, 0x08	; 8
    3196:	80 f4       	brcc	.+32     	; 0x31b8 <WDT_enu_Enable+0x36>
        /*Enable With Input Time*/
        WDT_WDTCR_REG |= Copy_u8_Time;
    3198:	a1 e4       	ldi	r26, 0x41	; 65
    319a:	b0 e0       	ldi	r27, 0x00	; 0
    319c:	e1 e4       	ldi	r30, 0x41	; 65
    319e:	f0 e0       	ldi	r31, 0x00	; 0
    31a0:	90 81       	ld	r25, Z
    31a2:	8a 81       	ldd	r24, Y+2	; 0x02
    31a4:	89 2b       	or	r24, r25
    31a6:	8c 93       	st	X, r24
        SET_BIT(WDT_WDTCR_REG,WDE);
    31a8:	a1 e4       	ldi	r26, 0x41	; 65
    31aa:	b0 e0       	ldi	r27, 0x00	; 0
    31ac:	e1 e4       	ldi	r30, 0x41	; 65
    31ae:	f0 e0       	ldi	r31, 0x00	; 0
    31b0:	80 81       	ld	r24, Z
    31b2:	88 60       	ori	r24, 0x08	; 8
    31b4:	8c 93       	st	X, r24
    31b6:	01 c0       	rjmp	.+2      	; 0x31ba <WDT_enu_Enable+0x38>
    }else{
        Local_enu_errorState = STATE_NOT_OK;
    31b8:	19 82       	std	Y+1, r1	; 0x01
    }
    return Local_enu_errorState;
    31ba:	89 81       	ldd	r24, Y+1	; 0x01

}
    31bc:	0f 90       	pop	r0
    31be:	0f 90       	pop	r0
    31c0:	cf 91       	pop	r28
    31c2:	df 91       	pop	r29
    31c4:	08 95       	ret

000031c6 <WDT_enu_Disable>:
ES_t WDT_enu_Disable(void){
    31c6:	df 93       	push	r29
    31c8:	cf 93       	push	r28
    31ca:	cd b7       	in	r28, 0x3d	; 61
    31cc:	de b7       	in	r29, 0x3e	; 62
    /*Disable Sequance*/
    WDT_WDTCR_REG |= ((1<<WDTOE) | (1<<WDE));
    31ce:	a1 e4       	ldi	r26, 0x41	; 65
    31d0:	b0 e0       	ldi	r27, 0x00	; 0
    31d2:	e1 e4       	ldi	r30, 0x41	; 65
    31d4:	f0 e0       	ldi	r31, 0x00	; 0
    31d6:	80 81       	ld	r24, Z
    31d8:	88 61       	ori	r24, 0x18	; 24
    31da:	8c 93       	st	X, r24
    WDT_WDTCR_REG = 0x00;
    31dc:	e1 e4       	ldi	r30, 0x41	; 65
    31de:	f0 e0       	ldi	r31, 0x00	; 0
    31e0:	10 82       	st	Z, r1
    return STATE_OK;
    31e2:	81 e0       	ldi	r24, 0x01	; 1
    31e4:	cf 91       	pop	r28
    31e6:	df 91       	pop	r29
    31e8:	08 95       	ret

000031ea <UART_enu_Init>:
#include"UART_Private.h"
static void(*UART_pf_TX)(void) =NULL;
static void(*UART_pf_RX)(void) =NULL;
static u8 *UART_pu8_String = NULL;

ES_t UART_enu_Init(void){
    31ea:	df 93       	push	r29
    31ec:	cf 93       	push	r28
    31ee:	00 d0       	rcall	.+0      	; 0x31f0 <UART_enu_Init+0x6>
    31f0:	00 d0       	rcall	.+0      	; 0x31f2 <UART_enu_Init+0x8>
    31f2:	cd b7       	in	r28, 0x3d	; 61
    31f4:	de b7       	in	r29, 0x3e	; 62
    u16 Local_u16_UBRRValue = 0;
    31f6:	1b 82       	std	Y+3, r1	; 0x03
    31f8:	1a 82       	std	Y+2, r1	; 0x02
    u8 Local_u8_UCSRCValue = UCSRC_INITIAL_VALUE;
    31fa:	80 e8       	ldi	r24, 0x80	; 128
    31fc:	89 83       	std	Y+1, r24	; 0x01
/****************** UART Mode ****************/
    #if UART_MODE == ASYNCH_NORMAL_MODE
    CLR_BIT(UART_UCSRA_REG,U2X);
    31fe:	ab e2       	ldi	r26, 0x2B	; 43
    3200:	b0 e0       	ldi	r27, 0x00	; 0
    3202:	eb e2       	ldi	r30, 0x2B	; 43
    3204:	f0 e0       	ldi	r31, 0x00	; 0
    3206:	80 81       	ld	r24, Z
    3208:	8d 7f       	andi	r24, 0xFD	; 253
    320a:	8c 93       	st	X, r24
    //CLR_BIT(UART_UCSRA_REG,MPCM);
    CLR_BIT(Local_u8_UCSRCValue,UMSEL);
    320c:	89 81       	ldd	r24, Y+1	; 0x01
    320e:	8f 7b       	andi	r24, 0xBF	; 191
    3210:	89 83       	std	Y+1, r24	; 0x01
    Local_u16_UBRRValue = (F_CPU/(16UL*UART_BAUD_RATE))-1;
    3212:	87 e6       	ldi	r24, 0x67	; 103
    3214:	90 e0       	ldi	r25, 0x00	; 0
    3216:	9b 83       	std	Y+3, r25	; 0x03
    3218:	8a 83       	std	Y+2, r24	; 0x02
    SET_BIT(Local_u8_UCSRCValue,UMSEL);
    Local_u16_boudRateValue = (F_CPU/(2UL*UART_BAUD_RATE))-1;
    #endif
/****************** UART Stop Bits ****************/
    #if UART_STOP_BITS == ONE_BIT
    CLR_BIT(Local_u8_UCSRCValue,USBS);
    321a:	89 81       	ldd	r24, Y+1	; 0x01
    321c:	87 7f       	andi	r24, 0xF7	; 247
    321e:	89 83       	std	Y+1, r24	; 0x01
    #elif UART_DATA_BITS == _7_BITS
    CLR_BIT(UART_UCSRB_REG,UCZ2);
    SET_BIT(Local_u8_UCSRCValue,UCZ1);
    CLR_BIT(Local_u8_UCSRCValue,UCZ0);
    #elif UART_DATA_BITS == _8_BITS
    CLR_BIT(UART_UCSRB_REG,UCZ2);
    3220:	aa e2       	ldi	r26, 0x2A	; 42
    3222:	b0 e0       	ldi	r27, 0x00	; 0
    3224:	ea e2       	ldi	r30, 0x2A	; 42
    3226:	f0 e0       	ldi	r31, 0x00	; 0
    3228:	80 81       	ld	r24, Z
    322a:	8b 7f       	andi	r24, 0xFB	; 251
    322c:	8c 93       	st	X, r24
    SET_BIT(Local_u8_UCSRCValue,UCZ1);
    322e:	89 81       	ldd	r24, Y+1	; 0x01
    3230:	84 60       	ori	r24, 0x04	; 4
    3232:	89 83       	std	Y+1, r24	; 0x01
    SET_BIT(Local_u8_UCSRCValue,UCZ0);
    3234:	89 81       	ldd	r24, Y+1	; 0x01
    3236:	82 60       	ori	r24, 0x02	; 2
    3238:	89 83       	std	Y+1, r24	; 0x01
    SET_BIT(Local_u8_UCSRCValue,UCZ1);
    SET_BIT(Local_u8_UCSRCValue,UCZ0);
    #endif
/******************UART Parity Bit****************/
    #if UART_PARITY_BIT == NONE
    CLR_BIT(Local_u8_UCSRCValue,UPM1);
    323a:	89 81       	ldd	r24, Y+1	; 0x01
    323c:	8f 7d       	andi	r24, 0xDF	; 223
    323e:	89 83       	std	Y+1, r24	; 0x01
    CLR_BIT(Local_u8_UCSRCValue,UPM0);
    3240:	89 81       	ldd	r24, Y+1	; 0x01
    3242:	8f 7e       	andi	r24, 0xEF	; 239
    3244:	89 83       	std	Y+1, r24	; 0x01
    #elif UART_PARITY_BIT == EVEN_PARITY
    SET_BIT(Local_u8_UCSRCValue,UPM1);
    CLR_BIT(Local_u8_UCSRCValue,UPM0);
    #endif   
/************** Update UCSRC REG ********************/
    UART_UCSRC_REG = Local_u8_UCSRCValue;
    3246:	e0 e4       	ldi	r30, 0x40	; 64
    3248:	f0 e0       	ldi	r31, 0x00	; 0
    324a:	89 81       	ldd	r24, Y+1	; 0x01
    324c:	80 83       	st	Z, r24
/************** Baud Rate Value***********************/
    UART_UBRRL_REG = (u8)Local_u16_UBRRValue;
    324e:	e9 e2       	ldi	r30, 0x29	; 41
    3250:	f0 e0       	ldi	r31, 0x00	; 0
    3252:	8a 81       	ldd	r24, Y+2	; 0x02
    3254:	80 83       	st	Z, r24
    UART_UBRRH_REG = (u8)(Local_u16_UBRRValue>>8);
    3256:	e0 e4       	ldi	r30, 0x40	; 64
    3258:	f0 e0       	ldi	r31, 0x00	; 0
    325a:	8a 81       	ldd	r24, Y+2	; 0x02
    325c:	9b 81       	ldd	r25, Y+3	; 0x03
    325e:	89 2f       	mov	r24, r25
    3260:	99 27       	eor	r25, r25
    3262:	80 83       	st	Z, r24
/************** Enable (RX-TX) ************************/
    SET_BIT(UART_UCSRB_REG,RXEN);
    3264:	aa e2       	ldi	r26, 0x2A	; 42
    3266:	b0 e0       	ldi	r27, 0x00	; 0
    3268:	ea e2       	ldi	r30, 0x2A	; 42
    326a:	f0 e0       	ldi	r31, 0x00	; 0
    326c:	80 81       	ld	r24, Z
    326e:	80 61       	ori	r24, 0x10	; 16
    3270:	8c 93       	st	X, r24
    SET_BIT(UART_UCSRB_REG,TXEN);
    3272:	aa e2       	ldi	r26, 0x2A	; 42
    3274:	b0 e0       	ldi	r27, 0x00	; 0
    3276:	ea e2       	ldi	r30, 0x2A	; 42
    3278:	f0 e0       	ldi	r31, 0x00	; 0
    327a:	80 81       	ld	r24, Z
    327c:	88 60       	ori	r24, 0x08	; 8
    327e:	8c 93       	st	X, r24
}
    3280:	0f 90       	pop	r0
    3282:	0f 90       	pop	r0
    3284:	0f 90       	pop	r0
    3286:	0f 90       	pop	r0
    3288:	cf 91       	pop	r28
    328a:	df 91       	pop	r29
    328c:	08 95       	ret

0000328e <UART_enu_sendChar>:
ES_t UART_enu_sendChar(u8 Copy_u8_Char){
    328e:	df 93       	push	r29
    3290:	cf 93       	push	r28
    3292:	00 d0       	rcall	.+0      	; 0x3294 <UART_enu_sendChar+0x6>
    3294:	cd b7       	in	r28, 0x3d	; 61
    3296:	de b7       	in	r29, 0x3e	; 62
    3298:	89 83       	std	Y+1, r24	; 0x01
    /*Wait Transmit register is empty*/
    while(!GET_BIT(UART_UCSRA_REG,UDRE));
    329a:	eb e2       	ldi	r30, 0x2B	; 43
    329c:	f0 e0       	ldi	r31, 0x00	; 0
    329e:	80 81       	ld	r24, Z
    32a0:	82 95       	swap	r24
    32a2:	86 95       	lsr	r24
    32a4:	87 70       	andi	r24, 0x07	; 7
    32a6:	88 2f       	mov	r24, r24
    32a8:	90 e0       	ldi	r25, 0x00	; 0
    32aa:	81 70       	andi	r24, 0x01	; 1
    32ac:	90 70       	andi	r25, 0x00	; 0
    32ae:	00 97       	sbiw	r24, 0x00	; 0
    32b0:	a1 f3       	breq	.-24     	; 0x329a <UART_enu_sendChar+0xc>
    /*Send Byte Value*/
    UART_UDR_REG = Copy_u8_Char;
    32b2:	ec e2       	ldi	r30, 0x2C	; 44
    32b4:	f0 e0       	ldi	r31, 0x00	; 0
    32b6:	89 81       	ldd	r24, Y+1	; 0x01
    32b8:	80 83       	st	Z, r24
}
    32ba:	0f 90       	pop	r0
    32bc:	0f 90       	pop	r0
    32be:	cf 91       	pop	r28
    32c0:	df 91       	pop	r29
    32c2:	08 95       	ret

000032c4 <UART_enu_recieveChar>:
ES_t UART_enu_recieveChar(u8 *Copy_pu8_recievedChar){
    32c4:	df 93       	push	r29
    32c6:	cf 93       	push	r28
    32c8:	00 d0       	rcall	.+0      	; 0x32ca <UART_enu_recieveChar+0x6>
    32ca:	0f 92       	push	r0
    32cc:	cd b7       	in	r28, 0x3d	; 61
    32ce:	de b7       	in	r29, 0x3e	; 62
    32d0:	9b 83       	std	Y+3, r25	; 0x03
    32d2:	8a 83       	std	Y+2, r24	; 0x02
    u8 Local_u8_errorState = STATE_OK;
    32d4:	81 e0       	ldi	r24, 0x01	; 1
    32d6:	89 83       	std	Y+1, r24	; 0x01
    if(Copy_pu8_recievedChar!= NULL){
    32d8:	8a 81       	ldd	r24, Y+2	; 0x02
    32da:	9b 81       	ldd	r25, Y+3	; 0x03
    32dc:	00 97       	sbiw	r24, 0x00	; 0
    32de:	61 f0       	breq	.+24     	; 0x32f8 <UART_enu_recieveChar+0x34>
        /*Wait The Data Is Recieved */
        while(!GET_BIT(UART_UCSRA_REG,RXC));
    32e0:	eb e2       	ldi	r30, 0x2B	; 43
    32e2:	f0 e0       	ldi	r31, 0x00	; 0
    32e4:	80 81       	ld	r24, Z
    32e6:	88 23       	and	r24, r24
    32e8:	dc f7       	brge	.-10     	; 0x32e0 <UART_enu_recieveChar+0x1c>
        *Copy_pu8_recievedChar = UART_UDR_REG;
    32ea:	ec e2       	ldi	r30, 0x2C	; 44
    32ec:	f0 e0       	ldi	r31, 0x00	; 0
    32ee:	80 81       	ld	r24, Z
    32f0:	ea 81       	ldd	r30, Y+2	; 0x02
    32f2:	fb 81       	ldd	r31, Y+3	; 0x03
    32f4:	80 83       	st	Z, r24
    32f6:	01 c0       	rjmp	.+2      	; 0x32fa <UART_enu_recieveChar+0x36>
    }else{
        Local_u8_errorState = STATE_NOT_OK;
    32f8:	19 82       	std	Y+1, r1	; 0x01
    }
    return Local_u8_errorState;
    32fa:	89 81       	ldd	r24, Y+1	; 0x01
}
    32fc:	0f 90       	pop	r0
    32fe:	0f 90       	pop	r0
    3300:	0f 90       	pop	r0
    3302:	cf 91       	pop	r28
    3304:	df 91       	pop	r29
    3306:	08 95       	ret

00003308 <UART_enu_sendString>:
ES_t UART_enu_sendString(u8 *Copy_pu8_String){
    3308:	df 93       	push	r29
    330a:	cf 93       	push	r28
    330c:	00 d0       	rcall	.+0      	; 0x330e <UART_enu_sendString+0x6>
    330e:	00 d0       	rcall	.+0      	; 0x3310 <UART_enu_sendString+0x8>
    3310:	cd b7       	in	r28, 0x3d	; 61
    3312:	de b7       	in	r29, 0x3e	; 62
    3314:	9c 83       	std	Y+4, r25	; 0x04
    3316:	8b 83       	std	Y+3, r24	; 0x03
    u8 Local_u8_errorState = STATE_OK;
    3318:	81 e0       	ldi	r24, 0x01	; 1
    331a:	8a 83       	std	Y+2, r24	; 0x02
    if(Copy_pu8_String!=NULL){
    331c:	8b 81       	ldd	r24, Y+3	; 0x03
    331e:	9c 81       	ldd	r25, Y+4	; 0x04
    3320:	00 97       	sbiw	r24, 0x00	; 0
    3322:	c9 f1       	breq	.+114    	; 0x3396 <UART_enu_sendString+0x8e>
    for(u8 Local_u8_Iterator =0;Copy_pu8_String[Local_u8_Iterator]!='\0';Local_u8_Iterator++){
    3324:	19 82       	std	Y+1, r1	; 0x01
    3326:	1b c0       	rjmp	.+54     	; 0x335e <UART_enu_sendString+0x56>
        /*Wait Transmit register is empty*/
        while(!GET_BIT(UART_UCSRA_REG,UDRE));
    3328:	eb e2       	ldi	r30, 0x2B	; 43
    332a:	f0 e0       	ldi	r31, 0x00	; 0
    332c:	80 81       	ld	r24, Z
    332e:	82 95       	swap	r24
    3330:	86 95       	lsr	r24
    3332:	87 70       	andi	r24, 0x07	; 7
    3334:	88 2f       	mov	r24, r24
    3336:	90 e0       	ldi	r25, 0x00	; 0
    3338:	81 70       	andi	r24, 0x01	; 1
    333a:	90 70       	andi	r25, 0x00	; 0
    333c:	00 97       	sbiw	r24, 0x00	; 0
    333e:	a1 f3       	breq	.-24     	; 0x3328 <UART_enu_sendString+0x20>
        UART_UDR_REG = Copy_pu8_String[Local_u8_Iterator];
    3340:	ac e2       	ldi	r26, 0x2C	; 44
    3342:	b0 e0       	ldi	r27, 0x00	; 0
    3344:	89 81       	ldd	r24, Y+1	; 0x01
    3346:	28 2f       	mov	r18, r24
    3348:	30 e0       	ldi	r19, 0x00	; 0
    334a:	8b 81       	ldd	r24, Y+3	; 0x03
    334c:	9c 81       	ldd	r25, Y+4	; 0x04
    334e:	fc 01       	movw	r30, r24
    3350:	e2 0f       	add	r30, r18
    3352:	f3 1f       	adc	r31, r19
    3354:	80 81       	ld	r24, Z
    3356:	8c 93       	st	X, r24
    return Local_u8_errorState;
}
ES_t UART_enu_sendString(u8 *Copy_pu8_String){
    u8 Local_u8_errorState = STATE_OK;
    if(Copy_pu8_String!=NULL){
    for(u8 Local_u8_Iterator =0;Copy_pu8_String[Local_u8_Iterator]!='\0';Local_u8_Iterator++){
    3358:	89 81       	ldd	r24, Y+1	; 0x01
    335a:	8f 5f       	subi	r24, 0xFF	; 255
    335c:	89 83       	std	Y+1, r24	; 0x01
    335e:	89 81       	ldd	r24, Y+1	; 0x01
    3360:	28 2f       	mov	r18, r24
    3362:	30 e0       	ldi	r19, 0x00	; 0
    3364:	8b 81       	ldd	r24, Y+3	; 0x03
    3366:	9c 81       	ldd	r25, Y+4	; 0x04
    3368:	fc 01       	movw	r30, r24
    336a:	e2 0f       	add	r30, r18
    336c:	f3 1f       	adc	r31, r19
    336e:	80 81       	ld	r24, Z
    3370:	88 23       	and	r24, r24
    3372:	d1 f6       	brne	.-76     	; 0x3328 <UART_enu_sendString+0x20>
        /*Wait Transmit register is empty*/
        while(!GET_BIT(UART_UCSRA_REG,UDRE));
        UART_UDR_REG = Copy_pu8_String[Local_u8_Iterator];
    }
    while((!GET_BIT(UART_UCSRA_REG,UDRE)));
    3374:	eb e2       	ldi	r30, 0x2B	; 43
    3376:	f0 e0       	ldi	r31, 0x00	; 0
    3378:	80 81       	ld	r24, Z
    337a:	82 95       	swap	r24
    337c:	86 95       	lsr	r24
    337e:	87 70       	andi	r24, 0x07	; 7
    3380:	88 2f       	mov	r24, r24
    3382:	90 e0       	ldi	r25, 0x00	; 0
    3384:	81 70       	andi	r24, 0x01	; 1
    3386:	90 70       	andi	r25, 0x00	; 0
    3388:	00 97       	sbiw	r24, 0x00	; 0
    338a:	a1 f3       	breq	.-24     	; 0x3374 <UART_enu_sendString+0x6c>
    UART_UDR_REG = '\r';
    338c:	ec e2       	ldi	r30, 0x2C	; 44
    338e:	f0 e0       	ldi	r31, 0x00	; 0
    3390:	8d e0       	ldi	r24, 0x0D	; 13
    3392:	80 83       	st	Z, r24
    3394:	01 c0       	rjmp	.+2      	; 0x3398 <UART_enu_sendString+0x90>
    }else{
        Local_u8_errorState = STATE_NOT_OK;
    3396:	1a 82       	std	Y+2, r1	; 0x02
    }
    return Local_u8_errorState;
    3398:	8a 81       	ldd	r24, Y+2	; 0x02
}
    339a:	0f 90       	pop	r0
    339c:	0f 90       	pop	r0
    339e:	0f 90       	pop	r0
    33a0:	0f 90       	pop	r0
    33a2:	cf 91       	pop	r28
    33a4:	df 91       	pop	r29
    33a6:	08 95       	ret

000033a8 <UART_enu_recieveString>:
ES_t UART_enu_recieveString(u8 *Copy_pu8_recievedString,u8 Copy_u8_messageSize){
    33a8:	df 93       	push	r29
    33aa:	cf 93       	push	r28
    33ac:	00 d0       	rcall	.+0      	; 0x33ae <UART_enu_recieveString+0x6>
    33ae:	00 d0       	rcall	.+0      	; 0x33b0 <UART_enu_recieveString+0x8>
    33b0:	0f 92       	push	r0
    33b2:	cd b7       	in	r28, 0x3d	; 61
    33b4:	de b7       	in	r29, 0x3e	; 62
    33b6:	9c 83       	std	Y+4, r25	; 0x04
    33b8:	8b 83       	std	Y+3, r24	; 0x03
    33ba:	6d 83       	std	Y+5, r22	; 0x05
    u8 Local_u8_Iterator = 0;
    33bc:	1a 82       	std	Y+2, r1	; 0x02
    u8 Local_u8_errorState = STATE_OK;
    33be:	81 e0       	ldi	r24, 0x01	; 1
    33c0:	89 83       	std	Y+1, r24	; 0x01
    if(Copy_pu8_recievedString!= NULL){
    33c2:	8b 81       	ldd	r24, Y+3	; 0x03
    33c4:	9c 81       	ldd	r25, Y+4	; 0x04
    33c6:	00 97       	sbiw	r24, 0x00	; 0
    33c8:	19 f1       	breq	.+70     	; 0x3410 <UART_enu_recieveString+0x68>
    33ca:	14 c0       	rjmp	.+40     	; 0x33f4 <UART_enu_recieveString+0x4c>
        while(Local_u8_Iterator < Copy_u8_messageSize){
            while(!GET_BIT(UART_UCSRA_REG,RXC));
    33cc:	eb e2       	ldi	r30, 0x2B	; 43
    33ce:	f0 e0       	ldi	r31, 0x00	; 0
    33d0:	80 81       	ld	r24, Z
    33d2:	88 23       	and	r24, r24
    33d4:	dc f7       	brge	.-10     	; 0x33cc <UART_enu_recieveString+0x24>
            Copy_pu8_recievedString[Local_u8_Iterator] = UART_UDR_REG;
    33d6:	8a 81       	ldd	r24, Y+2	; 0x02
    33d8:	28 2f       	mov	r18, r24
    33da:	30 e0       	ldi	r19, 0x00	; 0
    33dc:	8b 81       	ldd	r24, Y+3	; 0x03
    33de:	9c 81       	ldd	r25, Y+4	; 0x04
    33e0:	dc 01       	movw	r26, r24
    33e2:	a2 0f       	add	r26, r18
    33e4:	b3 1f       	adc	r27, r19
    33e6:	ec e2       	ldi	r30, 0x2C	; 44
    33e8:	f0 e0       	ldi	r31, 0x00	; 0
    33ea:	80 81       	ld	r24, Z
    33ec:	8c 93       	st	X, r24
            Local_u8_Iterator++;
    33ee:	8a 81       	ldd	r24, Y+2	; 0x02
    33f0:	8f 5f       	subi	r24, 0xFF	; 255
    33f2:	8a 83       	std	Y+2, r24	; 0x02
}
ES_t UART_enu_recieveString(u8 *Copy_pu8_recievedString,u8 Copy_u8_messageSize){
    u8 Local_u8_Iterator = 0;
    u8 Local_u8_errorState = STATE_OK;
    if(Copy_pu8_recievedString!= NULL){
        while(Local_u8_Iterator < Copy_u8_messageSize){
    33f4:	9a 81       	ldd	r25, Y+2	; 0x02
    33f6:	8d 81       	ldd	r24, Y+5	; 0x05
    33f8:	98 17       	cp	r25, r24
    33fa:	40 f3       	brcs	.-48     	; 0x33cc <UART_enu_recieveString+0x24>
            while(!GET_BIT(UART_UCSRA_REG,RXC));
            Copy_pu8_recievedString[Local_u8_Iterator] = UART_UDR_REG;
            Local_u8_Iterator++;
        }
        Copy_pu8_recievedString[Local_u8_Iterator] = '\0';
    33fc:	8a 81       	ldd	r24, Y+2	; 0x02
    33fe:	28 2f       	mov	r18, r24
    3400:	30 e0       	ldi	r19, 0x00	; 0
    3402:	8b 81       	ldd	r24, Y+3	; 0x03
    3404:	9c 81       	ldd	r25, Y+4	; 0x04
    3406:	fc 01       	movw	r30, r24
    3408:	e2 0f       	add	r30, r18
    340a:	f3 1f       	adc	r31, r19
    340c:	10 82       	st	Z, r1
    340e:	01 c0       	rjmp	.+2      	; 0x3412 <UART_enu_recieveString+0x6a>
    }else{
        Local_u8_errorState = STATE_NOT_OK;
    3410:	19 82       	std	Y+1, r1	; 0x01
    }
    return Local_u8_errorState;
    3412:	89 81       	ldd	r24, Y+1	; 0x01
}
    3414:	0f 90       	pop	r0
    3416:	0f 90       	pop	r0
    3418:	0f 90       	pop	r0
    341a:	0f 90       	pop	r0
    341c:	0f 90       	pop	r0
    341e:	cf 91       	pop	r28
    3420:	df 91       	pop	r29
    3422:	08 95       	ret

00003424 <UART_enu_sendNUmber>:
ES_t UART_enu_sendNUmber(s32 Copy_s32_Num){
    3424:	0f 93       	push	r16
    3426:	1f 93       	push	r17
    3428:	df 93       	push	r29
    342a:	cf 93       	push	r28
    342c:	cd b7       	in	r28, 0x3d	; 61
    342e:	de b7       	in	r29, 0x3e	; 62
    3430:	61 97       	sbiw	r28, 0x11	; 17
    3432:	0f b6       	in	r0, 0x3f	; 63
    3434:	f8 94       	cli
    3436:	de bf       	out	0x3e, r29	; 62
    3438:	0f be       	out	0x3f, r0	; 63
    343a:	cd bf       	out	0x3d, r28	; 61
    343c:	6e 87       	std	Y+14, r22	; 0x0e
    343e:	7f 87       	std	Y+15, r23	; 0x0f
    3440:	88 8b       	std	Y+16, r24	; 0x10
    3442:	99 8b       	std	Y+17, r25	; 0x11
    u8 Local_u8_numArr[10], Local_u8_iterator1 = 0,flag = 0;
    3444:	1b 82       	std	Y+3, r1	; 0x03
    3446:	1a 82       	std	Y+2, r1	; 0x02
    s8 Local_u8_iterator2 = 0;
    3448:	19 82       	std	Y+1, r1	; 0x01
    if(Copy_s32_Num < 0){
    344a:	8e 85       	ldd	r24, Y+14	; 0x0e
    344c:	9f 85       	ldd	r25, Y+15	; 0x0f
    344e:	a8 89       	ldd	r26, Y+16	; 0x10
    3450:	b9 89       	ldd	r27, Y+17	; 0x11
    3452:	bb 23       	and	r27, r27
    3454:	8c f4       	brge	.+34     	; 0x3478 <UART_enu_sendNUmber+0x54>
        Copy_s32_Num *= -1;
    3456:	8e 85       	ldd	r24, Y+14	; 0x0e
    3458:	9f 85       	ldd	r25, Y+15	; 0x0f
    345a:	a8 89       	ldd	r26, Y+16	; 0x10
    345c:	b9 89       	ldd	r27, Y+17	; 0x11
    345e:	b0 95       	com	r27
    3460:	a0 95       	com	r26
    3462:	90 95       	com	r25
    3464:	81 95       	neg	r24
    3466:	9f 4f       	sbci	r25, 0xFF	; 255
    3468:	af 4f       	sbci	r26, 0xFF	; 255
    346a:	bf 4f       	sbci	r27, 0xFF	; 255
    346c:	8e 87       	std	Y+14, r24	; 0x0e
    346e:	9f 87       	std	Y+15, r25	; 0x0f
    3470:	a8 8b       	std	Y+16, r26	; 0x10
    3472:	b9 8b       	std	Y+17, r27	; 0x11
        flag =1;
    3474:	81 e0       	ldi	r24, 0x01	; 1
    3476:	8a 83       	std	Y+2, r24	; 0x02
    }
    if (Copy_s32_Num == 0){
    3478:	8e 85       	ldd	r24, Y+14	; 0x0e
    347a:	9f 85       	ldd	r25, Y+15	; 0x0f
    347c:	a8 89       	ldd	r26, Y+16	; 0x10
    347e:	b9 89       	ldd	r27, Y+17	; 0x11
    3480:	00 97       	sbiw	r24, 0x00	; 0
    3482:	a1 05       	cpc	r26, r1
    3484:	b1 05       	cpc	r27, r1
    3486:	a9 f5       	brne	.+106    	; 0x34f2 <UART_enu_sendNUmber+0xce>
        UART_enu_sendChar('0');
    3488:	80 e3       	ldi	r24, 0x30	; 48
    348a:	0e 94 47 19 	call	0x328e	; 0x328e <UART_enu_sendChar>
        UART_enu_sendChar('\r');
    348e:	8d e0       	ldi	r24, 0x0D	; 13
    3490:	0e 94 47 19 	call	0x328e	; 0x328e <UART_enu_sendChar>
    3494:	60 c0       	rjmp	.+192    	; 0x3556 <UART_enu_sendNUmber+0x132>
    }
    else
    {
        while (Copy_s32_Num != 0)
        {
            Local_u8_numArr[Local_u8_iterator1] = (Copy_s32_Num % 10) + '0';
    3496:	8b 81       	ldd	r24, Y+3	; 0x03
    3498:	08 2f       	mov	r16, r24
    349a:	10 e0       	ldi	r17, 0x00	; 0
    349c:	8e 85       	ldd	r24, Y+14	; 0x0e
    349e:	9f 85       	ldd	r25, Y+15	; 0x0f
    34a0:	a8 89       	ldd	r26, Y+16	; 0x10
    34a2:	b9 89       	ldd	r27, Y+17	; 0x11
    34a4:	2a e0       	ldi	r18, 0x0A	; 10
    34a6:	30 e0       	ldi	r19, 0x00	; 0
    34a8:	40 e0       	ldi	r20, 0x00	; 0
    34aa:	50 e0       	ldi	r21, 0x00	; 0
    34ac:	bc 01       	movw	r22, r24
    34ae:	cd 01       	movw	r24, r26
    34b0:	0e 94 9c 2e 	call	0x5d38	; 0x5d38 <__divmodsi4>
    34b4:	dc 01       	movw	r26, r24
    34b6:	cb 01       	movw	r24, r22
    34b8:	28 2f       	mov	r18, r24
    34ba:	20 5d       	subi	r18, 0xD0	; 208
    34bc:	ce 01       	movw	r24, r28
    34be:	04 96       	adiw	r24, 0x04	; 4
    34c0:	fc 01       	movw	r30, r24
    34c2:	e0 0f       	add	r30, r16
    34c4:	f1 1f       	adc	r31, r17
    34c6:	20 83       	st	Z, r18
            Copy_s32_Num /= 10;
    34c8:	8e 85       	ldd	r24, Y+14	; 0x0e
    34ca:	9f 85       	ldd	r25, Y+15	; 0x0f
    34cc:	a8 89       	ldd	r26, Y+16	; 0x10
    34ce:	b9 89       	ldd	r27, Y+17	; 0x11
    34d0:	2a e0       	ldi	r18, 0x0A	; 10
    34d2:	30 e0       	ldi	r19, 0x00	; 0
    34d4:	40 e0       	ldi	r20, 0x00	; 0
    34d6:	50 e0       	ldi	r21, 0x00	; 0
    34d8:	bc 01       	movw	r22, r24
    34da:	cd 01       	movw	r24, r26
    34dc:	0e 94 9c 2e 	call	0x5d38	; 0x5d38 <__divmodsi4>
    34e0:	da 01       	movw	r26, r20
    34e2:	c9 01       	movw	r24, r18
    34e4:	8e 87       	std	Y+14, r24	; 0x0e
    34e6:	9f 87       	std	Y+15, r25	; 0x0f
    34e8:	a8 8b       	std	Y+16, r26	; 0x10
    34ea:	b9 8b       	std	Y+17, r27	; 0x11
            Local_u8_iterator1++;
    34ec:	8b 81       	ldd	r24, Y+3	; 0x03
    34ee:	8f 5f       	subi	r24, 0xFF	; 255
    34f0:	8b 83       	std	Y+3, r24	; 0x03
        UART_enu_sendChar('0');
        UART_enu_sendChar('\r');
    }
    else
    {
        while (Copy_s32_Num != 0)
    34f2:	8e 85       	ldd	r24, Y+14	; 0x0e
    34f4:	9f 85       	ldd	r25, Y+15	; 0x0f
    34f6:	a8 89       	ldd	r26, Y+16	; 0x10
    34f8:	b9 89       	ldd	r27, Y+17	; 0x11
    34fa:	00 97       	sbiw	r24, 0x00	; 0
    34fc:	a1 05       	cpc	r26, r1
    34fe:	b1 05       	cpc	r27, r1
    3500:	51 f6       	brne	.-108    	; 0x3496 <UART_enu_sendNUmber+0x72>
        {
            Local_u8_numArr[Local_u8_iterator1] = (Copy_s32_Num % 10) + '0';
            Copy_s32_Num /= 10;
            Local_u8_iterator1++;
        }
        if(flag){
    3502:	8a 81       	ldd	r24, Y+2	; 0x02
    3504:	88 23       	and	r24, r24
    3506:	69 f0       	breq	.+26     	; 0x3522 <UART_enu_sendNUmber+0xfe>
        Local_u8_numArr[Local_u8_iterator1] = '-';
    3508:	8b 81       	ldd	r24, Y+3	; 0x03
    350a:	28 2f       	mov	r18, r24
    350c:	30 e0       	ldi	r19, 0x00	; 0
    350e:	ce 01       	movw	r24, r28
    3510:	04 96       	adiw	r24, 0x04	; 4
    3512:	fc 01       	movw	r30, r24
    3514:	e2 0f       	add	r30, r18
    3516:	f3 1f       	adc	r31, r19
    3518:	8d e2       	ldi	r24, 0x2D	; 45
    351a:	80 83       	st	Z, r24
        Local_u8_iterator1++;
    351c:	8b 81       	ldd	r24, Y+3	; 0x03
    351e:	8f 5f       	subi	r24, 0xFF	; 255
    3520:	8b 83       	std	Y+3, r24	; 0x03
        }
        for (Local_u8_iterator2 = Local_u8_iterator1 - 1; Local_u8_iterator2 >= 0; Local_u8_iterator2--)
    3522:	8b 81       	ldd	r24, Y+3	; 0x03
    3524:	81 50       	subi	r24, 0x01	; 1
    3526:	89 83       	std	Y+1, r24	; 0x01
    3528:	10 c0       	rjmp	.+32     	; 0x354a <UART_enu_sendNUmber+0x126>
        {
            UART_enu_sendChar(Local_u8_numArr[Local_u8_iterator2]);
    352a:	89 81       	ldd	r24, Y+1	; 0x01
    352c:	28 2f       	mov	r18, r24
    352e:	33 27       	eor	r19, r19
    3530:	27 fd       	sbrc	r18, 7
    3532:	30 95       	com	r19
    3534:	ce 01       	movw	r24, r28
    3536:	04 96       	adiw	r24, 0x04	; 4
    3538:	fc 01       	movw	r30, r24
    353a:	e2 0f       	add	r30, r18
    353c:	f3 1f       	adc	r31, r19
    353e:	80 81       	ld	r24, Z
    3540:	0e 94 47 19 	call	0x328e	; 0x328e <UART_enu_sendChar>
        }
        if(flag){
        Local_u8_numArr[Local_u8_iterator1] = '-';
        Local_u8_iterator1++;
        }
        for (Local_u8_iterator2 = Local_u8_iterator1 - 1; Local_u8_iterator2 >= 0; Local_u8_iterator2--)
    3544:	89 81       	ldd	r24, Y+1	; 0x01
    3546:	81 50       	subi	r24, 0x01	; 1
    3548:	89 83       	std	Y+1, r24	; 0x01
    354a:	89 81       	ldd	r24, Y+1	; 0x01
    354c:	88 23       	and	r24, r24
    354e:	6c f7       	brge	.-38     	; 0x352a <UART_enu_sendNUmber+0x106>
        {
            UART_enu_sendChar(Local_u8_numArr[Local_u8_iterator2]);
        }
        UART_enu_sendChar('\r');
    3550:	8d e0       	ldi	r24, 0x0D	; 13
    3552:	0e 94 47 19 	call	0x328e	; 0x328e <UART_enu_sendChar>
    }
    return STATE_OK;
    3556:	81 e0       	ldi	r24, 0x01	; 1
}
    3558:	61 96       	adiw	r28, 0x11	; 17
    355a:	0f b6       	in	r0, 0x3f	; 63
    355c:	f8 94       	cli
    355e:	de bf       	out	0x3e, r29	; 62
    3560:	0f be       	out	0x3f, r0	; 63
    3562:	cd bf       	out	0x3d, r28	; 61
    3564:	cf 91       	pop	r28
    3566:	df 91       	pop	r29
    3568:	1f 91       	pop	r17
    356a:	0f 91       	pop	r16
    356c:	08 95       	ret

0000356e <__vector_13>:
/*************ISR(Recieve)**********/
ISR(UART_RX){
    356e:	1f 92       	push	r1
    3570:	0f 92       	push	r0
    3572:	0f b6       	in	r0, 0x3f	; 63
    3574:	0f 92       	push	r0
    3576:	11 24       	eor	r1, r1
    3578:	2f 93       	push	r18
    357a:	3f 93       	push	r19
    357c:	4f 93       	push	r20
    357e:	5f 93       	push	r21
    3580:	6f 93       	push	r22
    3582:	7f 93       	push	r23
    3584:	8f 93       	push	r24
    3586:	9f 93       	push	r25
    3588:	af 93       	push	r26
    358a:	bf 93       	push	r27
    358c:	ef 93       	push	r30
    358e:	ff 93       	push	r31
    3590:	df 93       	push	r29
    3592:	cf 93       	push	r28
    3594:	cd b7       	in	r28, 0x3d	; 61
    3596:	de b7       	in	r29, 0x3e	; 62
    if(UART_pf_RX != NULL)
    3598:	80 91 53 01 	lds	r24, 0x0153
    359c:	90 91 54 01 	lds	r25, 0x0154
    35a0:	00 97       	sbiw	r24, 0x00	; 0
    35a2:	29 f0       	breq	.+10     	; 0x35ae <__vector_13+0x40>
        UART_pf_RX();
    35a4:	e0 91 53 01 	lds	r30, 0x0153
    35a8:	f0 91 54 01 	lds	r31, 0x0154
    35ac:	09 95       	icall
}
    35ae:	cf 91       	pop	r28
    35b0:	df 91       	pop	r29
    35b2:	ff 91       	pop	r31
    35b4:	ef 91       	pop	r30
    35b6:	bf 91       	pop	r27
    35b8:	af 91       	pop	r26
    35ba:	9f 91       	pop	r25
    35bc:	8f 91       	pop	r24
    35be:	7f 91       	pop	r23
    35c0:	6f 91       	pop	r22
    35c2:	5f 91       	pop	r21
    35c4:	4f 91       	pop	r20
    35c6:	3f 91       	pop	r19
    35c8:	2f 91       	pop	r18
    35ca:	0f 90       	pop	r0
    35cc:	0f be       	out	0x3f, r0	; 63
    35ce:	0f 90       	pop	r0
    35d0:	1f 90       	pop	r1
    35d2:	18 95       	reti

000035d4 <__vector_15>:
/*************ISR(Transmit)**********/
ISR(UART_TX){
    35d4:	1f 92       	push	r1
    35d6:	0f 92       	push	r0
    35d8:	0f b6       	in	r0, 0x3f	; 63
    35da:	0f 92       	push	r0
    35dc:	11 24       	eor	r1, r1
    35de:	2f 93       	push	r18
    35e0:	3f 93       	push	r19
    35e2:	4f 93       	push	r20
    35e4:	5f 93       	push	r21
    35e6:	6f 93       	push	r22
    35e8:	7f 93       	push	r23
    35ea:	8f 93       	push	r24
    35ec:	9f 93       	push	r25
    35ee:	af 93       	push	r26
    35f0:	bf 93       	push	r27
    35f2:	ef 93       	push	r30
    35f4:	ff 93       	push	r31
    35f6:	df 93       	push	r29
    35f8:	cf 93       	push	r28
    35fa:	cd b7       	in	r28, 0x3d	; 61
    35fc:	de b7       	in	r29, 0x3e	; 62
    if(UART_pf_TX != NULL)
    35fe:	80 91 51 01 	lds	r24, 0x0151
    3602:	90 91 52 01 	lds	r25, 0x0152
    3606:	00 97       	sbiw	r24, 0x00	; 0
    3608:	29 f0       	breq	.+10     	; 0x3614 <__vector_15+0x40>
        UART_pf_RX();
    360a:	e0 91 53 01 	lds	r30, 0x0153
    360e:	f0 91 54 01 	lds	r31, 0x0154
    3612:	09 95       	icall

}
    3614:	cf 91       	pop	r28
    3616:	df 91       	pop	r29
    3618:	ff 91       	pop	r31
    361a:	ef 91       	pop	r30
    361c:	bf 91       	pop	r27
    361e:	af 91       	pop	r26
    3620:	9f 91       	pop	r25
    3622:	8f 91       	pop	r24
    3624:	7f 91       	pop	r23
    3626:	6f 91       	pop	r22
    3628:	5f 91       	pop	r21
    362a:	4f 91       	pop	r20
    362c:	3f 91       	pop	r19
    362e:	2f 91       	pop	r18
    3630:	0f 90       	pop	r0
    3632:	0f be       	out	0x3f, r0	; 63
    3634:	0f 90       	pop	r0
    3636:	1f 90       	pop	r1
    3638:	18 95       	reti

0000363a <Timers_enu_Init>:
/*Global Pointer To Function */
static  void(*Timers_pf_Timer0[2])(void) = {NULL};
static  void(*Timers_pf_Timer1[4])(void)= {NULL};
static  void(*Timers_pf_Timer2[2])(void)= {NULL};

ES_t Timers_enu_Init(u8 Copy_u8_TimerNo,u8 Copy_u8_Mode,u8 Copy_u8_Prescaler){
    363a:	df 93       	push	r29
    363c:	cf 93       	push	r28
    363e:	cd b7       	in	r28, 0x3d	; 61
    3640:	de b7       	in	r29, 0x3e	; 62
    3642:	2c 97       	sbiw	r28, 0x0c	; 12
    3644:	0f b6       	in	r0, 0x3f	; 63
    3646:	f8 94       	cli
    3648:	de bf       	out	0x3e, r29	; 62
    364a:	0f be       	out	0x3f, r0	; 63
    364c:	cd bf       	out	0x3d, r28	; 61
    364e:	8a 83       	std	Y+2, r24	; 0x02
    3650:	6b 83       	std	Y+3, r22	; 0x03
    3652:	4c 83       	std	Y+4, r20	; 0x04
u8 Local_u8_errorState = STATE_OK;
    3654:	81 e0       	ldi	r24, 0x01	; 1
    3656:	89 83       	std	Y+1, r24	; 0x01
if((Copy_u8_TimerNo<3)&& (Copy_u8_Mode < 9)&&(Copy_u8_Prescaler<8)){
    3658:	8a 81       	ldd	r24, Y+2	; 0x02
    365a:	83 30       	cpi	r24, 0x03	; 3
    365c:	08 f0       	brcs	.+2      	; 0x3660 <Timers_enu_Init+0x26>
    365e:	ca c2       	rjmp	.+1428   	; 0x3bf4 <Timers_enu_Init+0x5ba>
    3660:	8b 81       	ldd	r24, Y+3	; 0x03
    3662:	89 30       	cpi	r24, 0x09	; 9
    3664:	08 f0       	brcs	.+2      	; 0x3668 <Timers_enu_Init+0x2e>
    3666:	c6 c2       	rjmp	.+1420   	; 0x3bf4 <Timers_enu_Init+0x5ba>
    3668:	8c 81       	ldd	r24, Y+4	; 0x04
    366a:	88 30       	cpi	r24, 0x08	; 8
    366c:	08 f0       	brcs	.+2      	; 0x3670 <Timers_enu_Init+0x36>
    366e:	c2 c2       	rjmp	.+1412   	; 0x3bf4 <Timers_enu_Init+0x5ba>
    switch (Copy_u8_TimerNo)
    3670:	8a 81       	ldd	r24, Y+2	; 0x02
    3672:	28 2f       	mov	r18, r24
    3674:	30 e0       	ldi	r19, 0x00	; 0
    3676:	3c 87       	std	Y+12, r19	; 0x0c
    3678:	2b 87       	std	Y+11, r18	; 0x0b
    367a:	8b 85       	ldd	r24, Y+11	; 0x0b
    367c:	9c 85       	ldd	r25, Y+12	; 0x0c
    367e:	81 30       	cpi	r24, 0x01	; 1
    3680:	91 05       	cpc	r25, r1
    3682:	09 f4       	brne	.+2      	; 0x3686 <Timers_enu_Init+0x4c>
    3684:	d5 c0       	rjmp	.+426    	; 0x3830 <Timers_enu_Init+0x1f6>
    3686:	2b 85       	ldd	r18, Y+11	; 0x0b
    3688:	3c 85       	ldd	r19, Y+12	; 0x0c
    368a:	22 30       	cpi	r18, 0x02	; 2
    368c:	31 05       	cpc	r19, r1
    368e:	09 f4       	brne	.+2      	; 0x3692 <Timers_enu_Init+0x58>
    3690:	ea c1       	rjmp	.+980    	; 0x3a66 <Timers_enu_Init+0x42c>
    3692:	8b 85       	ldd	r24, Y+11	; 0x0b
    3694:	9c 85       	ldd	r25, Y+12	; 0x0c
    3696:	00 97       	sbiw	r24, 0x00	; 0
    3698:	09 f0       	breq	.+2      	; 0x369c <Timers_enu_Init+0x62>
    369a:	ad c2       	rjmp	.+1370   	; 0x3bf6 <Timers_enu_Init+0x5bc>
    {
    case TIMER0:
        switch (Copy_u8_Mode)
    369c:	8b 81       	ldd	r24, Y+3	; 0x03
    369e:	28 2f       	mov	r18, r24
    36a0:	30 e0       	ldi	r19, 0x00	; 0
    36a2:	3a 87       	std	Y+10, r19	; 0x0a
    36a4:	29 87       	std	Y+9, r18	; 0x09
    36a6:	89 85       	ldd	r24, Y+9	; 0x09
    36a8:	9a 85       	ldd	r25, Y+10	; 0x0a
    36aa:	83 30       	cpi	r24, 0x03	; 3
    36ac:	91 05       	cpc	r25, r1
    36ae:	09 f4       	brne	.+2      	; 0x36b2 <Timers_enu_Init+0x78>
    36b0:	40 c0       	rjmp	.+128    	; 0x3732 <Timers_enu_Init+0xf8>
    36b2:	29 85       	ldd	r18, Y+9	; 0x09
    36b4:	3a 85       	ldd	r19, Y+10	; 0x0a
    36b6:	24 30       	cpi	r18, 0x04	; 4
    36b8:	31 05       	cpc	r19, r1
    36ba:	54 f4       	brge	.+20     	; 0x36d0 <Timers_enu_Init+0x96>
    36bc:	89 85       	ldd	r24, Y+9	; 0x09
    36be:	9a 85       	ldd	r25, Y+10	; 0x0a
    36c0:	00 97       	sbiw	r24, 0x00	; 0
    36c2:	c9 f0       	breq	.+50     	; 0x36f6 <Timers_enu_Init+0xbc>
    36c4:	29 85       	ldd	r18, Y+9	; 0x09
    36c6:	3a 85       	ldd	r19, Y+10	; 0x0a
    36c8:	21 30       	cpi	r18, 0x01	; 1
    36ca:	31 05       	cpc	r19, r1
    36cc:	19 f1       	breq	.+70     	; 0x3714 <Timers_enu_Init+0xda>
    36ce:	a4 c0       	rjmp	.+328    	; 0x3818 <Timers_enu_Init+0x1de>
    36d0:	89 85       	ldd	r24, Y+9	; 0x09
    36d2:	9a 85       	ldd	r25, Y+10	; 0x0a
    36d4:	85 30       	cpi	r24, 0x05	; 5
    36d6:	91 05       	cpc	r25, r1
    36d8:	09 f4       	brne	.+2      	; 0x36dc <Timers_enu_Init+0xa2>
    36da:	65 c0       	rjmp	.+202    	; 0x37a6 <Timers_enu_Init+0x16c>
    36dc:	29 85       	ldd	r18, Y+9	; 0x09
    36de:	3a 85       	ldd	r19, Y+10	; 0x0a
    36e0:	25 30       	cpi	r18, 0x05	; 5
    36e2:	31 05       	cpc	r19, r1
    36e4:	0c f4       	brge	.+2      	; 0x36e8 <Timers_enu_Init+0xae>
    36e6:	42 c0       	rjmp	.+132    	; 0x376c <Timers_enu_Init+0x132>
    36e8:	89 85       	ldd	r24, Y+9	; 0x09
    36ea:	9a 85       	ldd	r25, Y+10	; 0x0a
    36ec:	86 30       	cpi	r24, 0x06	; 6
    36ee:	91 05       	cpc	r25, r1
    36f0:	09 f4       	brne	.+2      	; 0x36f4 <Timers_enu_Init+0xba>
    36f2:	76 c0       	rjmp	.+236    	; 0x37e0 <Timers_enu_Init+0x1a6>
    36f4:	91 c0       	rjmp	.+290    	; 0x3818 <Timers_enu_Init+0x1de>
        {
        case NORMAL_MODE:
            CLR_BIT(TIMER0_TCCR0_REG, WGM00);
    36f6:	a3 e5       	ldi	r26, 0x53	; 83
    36f8:	b0 e0       	ldi	r27, 0x00	; 0
    36fa:	e3 e5       	ldi	r30, 0x53	; 83
    36fc:	f0 e0       	ldi	r31, 0x00	; 0
    36fe:	80 81       	ld	r24, Z
    3700:	8f 7b       	andi	r24, 0xBF	; 191
    3702:	8c 93       	st	X, r24
            CLR_BIT(TIMER0_TCCR0_REG, WGM01);
    3704:	a3 e5       	ldi	r26, 0x53	; 83
    3706:	b0 e0       	ldi	r27, 0x00	; 0
    3708:	e3 e5       	ldi	r30, 0x53	; 83
    370a:	f0 e0       	ldi	r31, 0x00	; 0
    370c:	80 81       	ld	r24, Z
    370e:	87 7f       	andi	r24, 0xF7	; 247
    3710:	8c 93       	st	X, r24
    3712:	82 c0       	rjmp	.+260    	; 0x3818 <Timers_enu_Init+0x1de>
        break;
        case CTC_MODE:
            CLR_BIT(TIMER0_TCCR0_REG, WGM00);
    3714:	a3 e5       	ldi	r26, 0x53	; 83
    3716:	b0 e0       	ldi	r27, 0x00	; 0
    3718:	e3 e5       	ldi	r30, 0x53	; 83
    371a:	f0 e0       	ldi	r31, 0x00	; 0
    371c:	80 81       	ld	r24, Z
    371e:	8f 7b       	andi	r24, 0xBF	; 191
    3720:	8c 93       	st	X, r24
            SET_BIT(TIMER0_TCCR0_REG, WGM01);
    3722:	a3 e5       	ldi	r26, 0x53	; 83
    3724:	b0 e0       	ldi	r27, 0x00	; 0
    3726:	e3 e5       	ldi	r30, 0x53	; 83
    3728:	f0 e0       	ldi	r31, 0x00	; 0
    372a:	80 81       	ld	r24, Z
    372c:	88 60       	ori	r24, 0x08	; 8
    372e:	8c 93       	st	X, r24
    3730:	73 c0       	rjmp	.+230    	; 0x3818 <Timers_enu_Init+0x1de>
        break;
        case FAST_PWM_INVERTING:
            // Fast
            SET_BIT(TIMER0_TCCR0_REG, WGM00);
    3732:	a3 e5       	ldi	r26, 0x53	; 83
    3734:	b0 e0       	ldi	r27, 0x00	; 0
    3736:	e3 e5       	ldi	r30, 0x53	; 83
    3738:	f0 e0       	ldi	r31, 0x00	; 0
    373a:	80 81       	ld	r24, Z
    373c:	80 64       	ori	r24, 0x40	; 64
    373e:	8c 93       	st	X, r24
            SET_BIT(TIMER0_TCCR0_REG, WGM01);
    3740:	a3 e5       	ldi	r26, 0x53	; 83
    3742:	b0 e0       	ldi	r27, 0x00	; 0
    3744:	e3 e5       	ldi	r30, 0x53	; 83
    3746:	f0 e0       	ldi	r31, 0x00	; 0
    3748:	80 81       	ld	r24, Z
    374a:	88 60       	ori	r24, 0x08	; 8
    374c:	8c 93       	st	X, r24
            // Inverting
            SET_BIT(TIMER0_TCCR0_REG, COM01);
    374e:	a3 e5       	ldi	r26, 0x53	; 83
    3750:	b0 e0       	ldi	r27, 0x00	; 0
    3752:	e3 e5       	ldi	r30, 0x53	; 83
    3754:	f0 e0       	ldi	r31, 0x00	; 0
    3756:	80 81       	ld	r24, Z
    3758:	80 62       	ori	r24, 0x20	; 32
    375a:	8c 93       	st	X, r24
            SET_BIT(TIMER0_TCCR0_REG, COM00);
    375c:	a3 e5       	ldi	r26, 0x53	; 83
    375e:	b0 e0       	ldi	r27, 0x00	; 0
    3760:	e3 e5       	ldi	r30, 0x53	; 83
    3762:	f0 e0       	ldi	r31, 0x00	; 0
    3764:	80 81       	ld	r24, Z
    3766:	80 61       	ori	r24, 0x10	; 16
    3768:	8c 93       	st	X, r24
    376a:	56 c0       	rjmp	.+172    	; 0x3818 <Timers_enu_Init+0x1de>
        break;
        case FAST_PWM_NON_INVERTING:
            // Fast
            SET_BIT(TIMER0_TCCR0_REG, WGM00);
    376c:	a3 e5       	ldi	r26, 0x53	; 83
    376e:	b0 e0       	ldi	r27, 0x00	; 0
    3770:	e3 e5       	ldi	r30, 0x53	; 83
    3772:	f0 e0       	ldi	r31, 0x00	; 0
    3774:	80 81       	ld	r24, Z
    3776:	80 64       	ori	r24, 0x40	; 64
    3778:	8c 93       	st	X, r24
            SET_BIT(TIMER0_TCCR0_REG, WGM01);
    377a:	a3 e5       	ldi	r26, 0x53	; 83
    377c:	b0 e0       	ldi	r27, 0x00	; 0
    377e:	e3 e5       	ldi	r30, 0x53	; 83
    3780:	f0 e0       	ldi	r31, 0x00	; 0
    3782:	80 81       	ld	r24, Z
    3784:	88 60       	ori	r24, 0x08	; 8
    3786:	8c 93       	st	X, r24
            // Non Inverting
            SET_BIT(TIMER0_TCCR0_REG, COM01);
    3788:	a3 e5       	ldi	r26, 0x53	; 83
    378a:	b0 e0       	ldi	r27, 0x00	; 0
    378c:	e3 e5       	ldi	r30, 0x53	; 83
    378e:	f0 e0       	ldi	r31, 0x00	; 0
    3790:	80 81       	ld	r24, Z
    3792:	80 62       	ori	r24, 0x20	; 32
    3794:	8c 93       	st	X, r24
            CLR_BIT(TIMER0_TCCR0_REG, COM00);
    3796:	a3 e5       	ldi	r26, 0x53	; 83
    3798:	b0 e0       	ldi	r27, 0x00	; 0
    379a:	e3 e5       	ldi	r30, 0x53	; 83
    379c:	f0 e0       	ldi	r31, 0x00	; 0
    379e:	80 81       	ld	r24, Z
    37a0:	8f 7e       	andi	r24, 0xEF	; 239
    37a2:	8c 93       	st	X, r24
    37a4:	39 c0       	rjmp	.+114    	; 0x3818 <Timers_enu_Init+0x1de>
        break;
        case PHASE_CORRECT_PWM_INVERTING:
            // Phase Correct
            SET_BIT(TIMER0_TCCR0_REG, WGM00);
    37a6:	a3 e5       	ldi	r26, 0x53	; 83
    37a8:	b0 e0       	ldi	r27, 0x00	; 0
    37aa:	e3 e5       	ldi	r30, 0x53	; 83
    37ac:	f0 e0       	ldi	r31, 0x00	; 0
    37ae:	80 81       	ld	r24, Z
    37b0:	80 64       	ori	r24, 0x40	; 64
    37b2:	8c 93       	st	X, r24
            CLR_BIT(TIMER0_TCCR0_REG, WGM01);
    37b4:	a3 e5       	ldi	r26, 0x53	; 83
    37b6:	b0 e0       	ldi	r27, 0x00	; 0
    37b8:	e3 e5       	ldi	r30, 0x53	; 83
    37ba:	f0 e0       	ldi	r31, 0x00	; 0
    37bc:	80 81       	ld	r24, Z
    37be:	87 7f       	andi	r24, 0xF7	; 247
    37c0:	8c 93       	st	X, r24
            // Inverting
            SET_BIT(TIMER0_TCCR0_REG, COM01);
    37c2:	a3 e5       	ldi	r26, 0x53	; 83
    37c4:	b0 e0       	ldi	r27, 0x00	; 0
    37c6:	e3 e5       	ldi	r30, 0x53	; 83
    37c8:	f0 e0       	ldi	r31, 0x00	; 0
    37ca:	80 81       	ld	r24, Z
    37cc:	80 62       	ori	r24, 0x20	; 32
    37ce:	8c 93       	st	X, r24
            SET_BIT(TIMER0_TCCR0_REG, COM00);
    37d0:	a3 e5       	ldi	r26, 0x53	; 83
    37d2:	b0 e0       	ldi	r27, 0x00	; 0
    37d4:	e3 e5       	ldi	r30, 0x53	; 83
    37d6:	f0 e0       	ldi	r31, 0x00	; 0
    37d8:	80 81       	ld	r24, Z
    37da:	80 61       	ori	r24, 0x10	; 16
    37dc:	8c 93       	st	X, r24
    37de:	1c c0       	rjmp	.+56     	; 0x3818 <Timers_enu_Init+0x1de>
        break;
        case PHASE_CORRECT_PWM_NON_INVERTING:
            // Phase Correct
            SET_BIT(TIMER0_TCCR0_REG, WGM00);
    37e0:	a3 e5       	ldi	r26, 0x53	; 83
    37e2:	b0 e0       	ldi	r27, 0x00	; 0
    37e4:	e3 e5       	ldi	r30, 0x53	; 83
    37e6:	f0 e0       	ldi	r31, 0x00	; 0
    37e8:	80 81       	ld	r24, Z
    37ea:	80 64       	ori	r24, 0x40	; 64
    37ec:	8c 93       	st	X, r24
            CLR_BIT(TIMER0_TCCR0_REG, WGM01);
    37ee:	a3 e5       	ldi	r26, 0x53	; 83
    37f0:	b0 e0       	ldi	r27, 0x00	; 0
    37f2:	e3 e5       	ldi	r30, 0x53	; 83
    37f4:	f0 e0       	ldi	r31, 0x00	; 0
    37f6:	80 81       	ld	r24, Z
    37f8:	87 7f       	andi	r24, 0xF7	; 247
    37fa:	8c 93       	st	X, r24
            // NON Inverting
            SET_BIT(TIMER0_TCCR0_REG, COM01);
    37fc:	a3 e5       	ldi	r26, 0x53	; 83
    37fe:	b0 e0       	ldi	r27, 0x00	; 0
    3800:	e3 e5       	ldi	r30, 0x53	; 83
    3802:	f0 e0       	ldi	r31, 0x00	; 0
    3804:	80 81       	ld	r24, Z
    3806:	80 62       	ori	r24, 0x20	; 32
    3808:	8c 93       	st	X, r24
            CLR_BIT(TIMER0_TCCR0_REG, COM00);
    380a:	a3 e5       	ldi	r26, 0x53	; 83
    380c:	b0 e0       	ldi	r27, 0x00	; 0
    380e:	e3 e5       	ldi	r30, 0x53	; 83
    3810:	f0 e0       	ldi	r31, 0x00	; 0
    3812:	80 81       	ld	r24, Z
    3814:	8f 7e       	andi	r24, 0xEF	; 239
    3816:	8c 93       	st	X, r24
        break;
        }
    /*******Select Prescaler******/
    TIMER0_TCCR0_REG |= Copy_u8_Prescaler;
    3818:	a3 e5       	ldi	r26, 0x53	; 83
    381a:	b0 e0       	ldi	r27, 0x00	; 0
    381c:	e3 e5       	ldi	r30, 0x53	; 83
    381e:	f0 e0       	ldi	r31, 0x00	; 0
    3820:	90 81       	ld	r25, Z
    3822:	8c 81       	ldd	r24, Y+4	; 0x04
    3824:	89 2b       	or	r24, r25
    3826:	8c 93       	st	X, r24
    Timer0_u8_Prescaler = Copy_u8_Prescaler;
    3828:	8c 81       	ldd	r24, Y+4	; 0x04
    382a:	80 93 67 01 	sts	0x0167, r24
    382e:	e3 c1       	rjmp	.+966    	; 0x3bf6 <Timers_enu_Init+0x5bc>
    break;
    case TIMER1:
        switch (Copy_u8_Mode)
    3830:	8b 81       	ldd	r24, Y+3	; 0x03
    3832:	28 2f       	mov	r18, r24
    3834:	30 e0       	ldi	r19, 0x00	; 0
    3836:	38 87       	std	Y+8, r19	; 0x08
    3838:	2f 83       	std	Y+7, r18	; 0x07
    383a:	8f 81       	ldd	r24, Y+7	; 0x07
    383c:	98 85       	ldd	r25, Y+8	; 0x08
    383e:	87 30       	cpi	r24, 0x07	; 7
    3840:	91 05       	cpc	r25, r1
    3842:	09 f4       	brne	.+2      	; 0x3846 <Timers_enu_Init+0x20c>
    3844:	5c c0       	rjmp	.+184    	; 0x38fe <Timers_enu_Init+0x2c4>
    3846:	2f 81       	ldd	r18, Y+7	; 0x07
    3848:	38 85       	ldd	r19, Y+8	; 0x08
    384a:	28 30       	cpi	r18, 0x08	; 8
    384c:	31 05       	cpc	r19, r1
    384e:	54 f4       	brge	.+20     	; 0x3864 <Timers_enu_Init+0x22a>
    3850:	8f 81       	ldd	r24, Y+7	; 0x07
    3852:	98 85       	ldd	r25, Y+8	; 0x08
    3854:	00 97       	sbiw	r24, 0x00	; 0
    3856:	c9 f0       	breq	.+50     	; 0x388a <Timers_enu_Init+0x250>
    3858:	2f 81       	ldd	r18, Y+7	; 0x07
    385a:	38 85       	ldd	r19, Y+8	; 0x08
    385c:	21 30       	cpi	r18, 0x01	; 1
    385e:	31 05       	cpc	r19, r1
    3860:	89 f1       	breq	.+98     	; 0x38c4 <Timers_enu_Init+0x28a>
    3862:	f8 c0       	rjmp	.+496    	; 0x3a54 <Timers_enu_Init+0x41a>
    3864:	8f 81       	ldd	r24, Y+7	; 0x07
    3866:	98 85       	ldd	r25, Y+8	; 0x08
    3868:	89 30       	cpi	r24, 0x09	; 9
    386a:	91 05       	cpc	r25, r1
    386c:	09 f4       	brne	.+2      	; 0x3870 <Timers_enu_Init+0x236>
    386e:	9d c0       	rjmp	.+314    	; 0x39aa <Timers_enu_Init+0x370>
    3870:	2f 81       	ldd	r18, Y+7	; 0x07
    3872:	38 85       	ldd	r19, Y+8	; 0x08
    3874:	29 30       	cpi	r18, 0x09	; 9
    3876:	31 05       	cpc	r19, r1
    3878:	0c f4       	brge	.+2      	; 0x387c <Timers_enu_Init+0x242>
    387a:	6c c0       	rjmp	.+216    	; 0x3954 <Timers_enu_Init+0x31a>
    387c:	8f 81       	ldd	r24, Y+7	; 0x07
    387e:	98 85       	ldd	r25, Y+8	; 0x08
    3880:	8a 30       	cpi	r24, 0x0A	; 10
    3882:	91 05       	cpc	r25, r1
    3884:	09 f4       	brne	.+2      	; 0x3888 <Timers_enu_Init+0x24e>
    3886:	bc c0       	rjmp	.+376    	; 0x3a00 <Timers_enu_Init+0x3c6>
    3888:	e5 c0       	rjmp	.+458    	; 0x3a54 <Timers_enu_Init+0x41a>
        {
        case NORMAL_MODE:
            CLR_BIT(TIMER1_TCCR1A_REG, WGM10);
    388a:	af e4       	ldi	r26, 0x4F	; 79
    388c:	b0 e0       	ldi	r27, 0x00	; 0
    388e:	ef e4       	ldi	r30, 0x4F	; 79
    3890:	f0 e0       	ldi	r31, 0x00	; 0
    3892:	80 81       	ld	r24, Z
    3894:	8e 7f       	andi	r24, 0xFE	; 254
    3896:	8c 93       	st	X, r24
            CLR_BIT(TIMER1_TCCR1A_REG, WGM11);
    3898:	af e4       	ldi	r26, 0x4F	; 79
    389a:	b0 e0       	ldi	r27, 0x00	; 0
    389c:	ef e4       	ldi	r30, 0x4F	; 79
    389e:	f0 e0       	ldi	r31, 0x00	; 0
    38a0:	80 81       	ld	r24, Z
    38a2:	8d 7f       	andi	r24, 0xFD	; 253
    38a4:	8c 93       	st	X, r24
            CLR_BIT(TIMER1_TCCR1B_REG, WGM12);
    38a6:	ae e4       	ldi	r26, 0x4E	; 78
    38a8:	b0 e0       	ldi	r27, 0x00	; 0
    38aa:	ee e4       	ldi	r30, 0x4E	; 78
    38ac:	f0 e0       	ldi	r31, 0x00	; 0
    38ae:	80 81       	ld	r24, Z
    38b0:	87 7f       	andi	r24, 0xF7	; 247
    38b2:	8c 93       	st	X, r24
            CLR_BIT(TIMER1_TCCR1B_REG, WGM13);
    38b4:	ae e4       	ldi	r26, 0x4E	; 78
    38b6:	b0 e0       	ldi	r27, 0x00	; 0
    38b8:	ee e4       	ldi	r30, 0x4E	; 78
    38ba:	f0 e0       	ldi	r31, 0x00	; 0
    38bc:	80 81       	ld	r24, Z
    38be:	8f 7e       	andi	r24, 0xEF	; 239
    38c0:	8c 93       	st	X, r24
    38c2:	c8 c0       	rjmp	.+400    	; 0x3a54 <Timers_enu_Init+0x41a>
        break;
        case CTC_MODE_A:
            CLR_BIT(TIMER1_TCCR1A_REG, WGM10);
    38c4:	af e4       	ldi	r26, 0x4F	; 79
    38c6:	b0 e0       	ldi	r27, 0x00	; 0
    38c8:	ef e4       	ldi	r30, 0x4F	; 79
    38ca:	f0 e0       	ldi	r31, 0x00	; 0
    38cc:	80 81       	ld	r24, Z
    38ce:	8e 7f       	andi	r24, 0xFE	; 254
    38d0:	8c 93       	st	X, r24
            CLR_BIT(TIMER1_TCCR1A_REG, WGM11);
    38d2:	af e4       	ldi	r26, 0x4F	; 79
    38d4:	b0 e0       	ldi	r27, 0x00	; 0
    38d6:	ef e4       	ldi	r30, 0x4F	; 79
    38d8:	f0 e0       	ldi	r31, 0x00	; 0
    38da:	80 81       	ld	r24, Z
    38dc:	8d 7f       	andi	r24, 0xFD	; 253
    38de:	8c 93       	st	X, r24
            SET_BIT(TIMER1_TCCR1B_REG, WGM12);
    38e0:	ae e4       	ldi	r26, 0x4E	; 78
    38e2:	b0 e0       	ldi	r27, 0x00	; 0
    38e4:	ee e4       	ldi	r30, 0x4E	; 78
    38e6:	f0 e0       	ldi	r31, 0x00	; 0
    38e8:	80 81       	ld	r24, Z
    38ea:	88 60       	ori	r24, 0x08	; 8
    38ec:	8c 93       	st	X, r24
            CLR_BIT(TIMER1_TCCR1B_REG, WGM13);
    38ee:	ae e4       	ldi	r26, 0x4E	; 78
    38f0:	b0 e0       	ldi	r27, 0x00	; 0
    38f2:	ee e4       	ldi	r30, 0x4E	; 78
    38f4:	f0 e0       	ldi	r31, 0x00	; 0
    38f6:	80 81       	ld	r24, Z
    38f8:	8f 7e       	andi	r24, 0xEF	; 239
    38fa:	8c 93       	st	X, r24
    38fc:	ab c0       	rjmp	.+342    	; 0x3a54 <Timers_enu_Init+0x41a>
        break;
        case FAST_PWM_NON_INVERTING_COMA:
            CLR_BIT(TIMER1_TCCR1A_REG, WGM10);
    38fe:	af e4       	ldi	r26, 0x4F	; 79
    3900:	b0 e0       	ldi	r27, 0x00	; 0
    3902:	ef e4       	ldi	r30, 0x4F	; 79
    3904:	f0 e0       	ldi	r31, 0x00	; 0
    3906:	80 81       	ld	r24, Z
    3908:	8e 7f       	andi	r24, 0xFE	; 254
    390a:	8c 93       	st	X, r24
            SET_BIT(TIMER1_TCCR1A_REG, WGM11);
    390c:	af e4       	ldi	r26, 0x4F	; 79
    390e:	b0 e0       	ldi	r27, 0x00	; 0
    3910:	ef e4       	ldi	r30, 0x4F	; 79
    3912:	f0 e0       	ldi	r31, 0x00	; 0
    3914:	80 81       	ld	r24, Z
    3916:	82 60       	ori	r24, 0x02	; 2
    3918:	8c 93       	st	X, r24
            SET_BIT(TIMER1_TCCR1B_REG, WGM12);
    391a:	ae e4       	ldi	r26, 0x4E	; 78
    391c:	b0 e0       	ldi	r27, 0x00	; 0
    391e:	ee e4       	ldi	r30, 0x4E	; 78
    3920:	f0 e0       	ldi	r31, 0x00	; 0
    3922:	80 81       	ld	r24, Z
    3924:	88 60       	ori	r24, 0x08	; 8
    3926:	8c 93       	st	X, r24
            SET_BIT(TIMER1_TCCR1B_REG, WGM13);
    3928:	ae e4       	ldi	r26, 0x4E	; 78
    392a:	b0 e0       	ldi	r27, 0x00	; 0
    392c:	ee e4       	ldi	r30, 0x4E	; 78
    392e:	f0 e0       	ldi	r31, 0x00	; 0
    3930:	80 81       	ld	r24, Z
    3932:	80 61       	ori	r24, 0x10	; 16
    3934:	8c 93       	st	X, r24
            SET_BIT(TIMER1_TCCR1A_REG, COM1A1);
    3936:	af e4       	ldi	r26, 0x4F	; 79
    3938:	b0 e0       	ldi	r27, 0x00	; 0
    393a:	ef e4       	ldi	r30, 0x4F	; 79
    393c:	f0 e0       	ldi	r31, 0x00	; 0
    393e:	80 81       	ld	r24, Z
    3940:	80 68       	ori	r24, 0x80	; 128
    3942:	8c 93       	st	X, r24
            CLR_BIT(TIMER1_TCCR1A_REG, COM1A0);
    3944:	af e4       	ldi	r26, 0x4F	; 79
    3946:	b0 e0       	ldi	r27, 0x00	; 0
    3948:	ef e4       	ldi	r30, 0x4F	; 79
    394a:	f0 e0       	ldi	r31, 0x00	; 0
    394c:	80 81       	ld	r24, Z
    394e:	8f 7b       	andi	r24, 0xBF	; 191
    3950:	8c 93       	st	X, r24
    3952:	80 c0       	rjmp	.+256    	; 0x3a54 <Timers_enu_Init+0x41a>
        break;
        case FAST_PWM_NON_INVERTING_COMB:
            CLR_BIT(TIMER1_TCCR1A_REG, WGM10);
    3954:	af e4       	ldi	r26, 0x4F	; 79
    3956:	b0 e0       	ldi	r27, 0x00	; 0
    3958:	ef e4       	ldi	r30, 0x4F	; 79
    395a:	f0 e0       	ldi	r31, 0x00	; 0
    395c:	80 81       	ld	r24, Z
    395e:	8e 7f       	andi	r24, 0xFE	; 254
    3960:	8c 93       	st	X, r24
            SET_BIT(TIMER1_TCCR1A_REG, WGM11);
    3962:	af e4       	ldi	r26, 0x4F	; 79
    3964:	b0 e0       	ldi	r27, 0x00	; 0
    3966:	ef e4       	ldi	r30, 0x4F	; 79
    3968:	f0 e0       	ldi	r31, 0x00	; 0
    396a:	80 81       	ld	r24, Z
    396c:	82 60       	ori	r24, 0x02	; 2
    396e:	8c 93       	st	X, r24
            SET_BIT(TIMER1_TCCR1B_REG, WGM12);
    3970:	ae e4       	ldi	r26, 0x4E	; 78
    3972:	b0 e0       	ldi	r27, 0x00	; 0
    3974:	ee e4       	ldi	r30, 0x4E	; 78
    3976:	f0 e0       	ldi	r31, 0x00	; 0
    3978:	80 81       	ld	r24, Z
    397a:	88 60       	ori	r24, 0x08	; 8
    397c:	8c 93       	st	X, r24
            SET_BIT(TIMER1_TCCR1B_REG, WGM13);
    397e:	ae e4       	ldi	r26, 0x4E	; 78
    3980:	b0 e0       	ldi	r27, 0x00	; 0
    3982:	ee e4       	ldi	r30, 0x4E	; 78
    3984:	f0 e0       	ldi	r31, 0x00	; 0
    3986:	80 81       	ld	r24, Z
    3988:	80 61       	ori	r24, 0x10	; 16
    398a:	8c 93       	st	X, r24
            SET_BIT(TIMER1_TCCR1A_REG, COM1B1);
    398c:	af e4       	ldi	r26, 0x4F	; 79
    398e:	b0 e0       	ldi	r27, 0x00	; 0
    3990:	ef e4       	ldi	r30, 0x4F	; 79
    3992:	f0 e0       	ldi	r31, 0x00	; 0
    3994:	80 81       	ld	r24, Z
    3996:	80 62       	ori	r24, 0x20	; 32
    3998:	8c 93       	st	X, r24
            CLR_BIT(TIMER1_TCCR1A_REG, COM1B0);
    399a:	af e4       	ldi	r26, 0x4F	; 79
    399c:	b0 e0       	ldi	r27, 0x00	; 0
    399e:	ef e4       	ldi	r30, 0x4F	; 79
    39a0:	f0 e0       	ldi	r31, 0x00	; 0
    39a2:	80 81       	ld	r24, Z
    39a4:	8f 7e       	andi	r24, 0xEF	; 239
    39a6:	8c 93       	st	X, r24
    39a8:	55 c0       	rjmp	.+170    	; 0x3a54 <Timers_enu_Init+0x41a>
        break;
        case PHASE_CORRECT_PWM_NON_INVERTING_COMA:
            SET_BIT(TIMER1_TCCR1A_REG, WGM10);
    39aa:	af e4       	ldi	r26, 0x4F	; 79
    39ac:	b0 e0       	ldi	r27, 0x00	; 0
    39ae:	ef e4       	ldi	r30, 0x4F	; 79
    39b0:	f0 e0       	ldi	r31, 0x00	; 0
    39b2:	80 81       	ld	r24, Z
    39b4:	81 60       	ori	r24, 0x01	; 1
    39b6:	8c 93       	st	X, r24
            SET_BIT(TIMER1_TCCR1A_REG, WGM11);
    39b8:	af e4       	ldi	r26, 0x4F	; 79
    39ba:	b0 e0       	ldi	r27, 0x00	; 0
    39bc:	ef e4       	ldi	r30, 0x4F	; 79
    39be:	f0 e0       	ldi	r31, 0x00	; 0
    39c0:	80 81       	ld	r24, Z
    39c2:	82 60       	ori	r24, 0x02	; 2
    39c4:	8c 93       	st	X, r24
            CLR_BIT(TIMER1_TCCR1B_REG, WGM12);
    39c6:	ae e4       	ldi	r26, 0x4E	; 78
    39c8:	b0 e0       	ldi	r27, 0x00	; 0
    39ca:	ee e4       	ldi	r30, 0x4E	; 78
    39cc:	f0 e0       	ldi	r31, 0x00	; 0
    39ce:	80 81       	ld	r24, Z
    39d0:	87 7f       	andi	r24, 0xF7	; 247
    39d2:	8c 93       	st	X, r24
            SET_BIT(TIMER1_TCCR1B_REG, WGM13);
    39d4:	ae e4       	ldi	r26, 0x4E	; 78
    39d6:	b0 e0       	ldi	r27, 0x00	; 0
    39d8:	ee e4       	ldi	r30, 0x4E	; 78
    39da:	f0 e0       	ldi	r31, 0x00	; 0
    39dc:	80 81       	ld	r24, Z
    39de:	80 61       	ori	r24, 0x10	; 16
    39e0:	8c 93       	st	X, r24
            SET_BIT(TIMER1_TCCR1A_REG, COM1A1);
    39e2:	af e4       	ldi	r26, 0x4F	; 79
    39e4:	b0 e0       	ldi	r27, 0x00	; 0
    39e6:	ef e4       	ldi	r30, 0x4F	; 79
    39e8:	f0 e0       	ldi	r31, 0x00	; 0
    39ea:	80 81       	ld	r24, Z
    39ec:	80 68       	ori	r24, 0x80	; 128
    39ee:	8c 93       	st	X, r24
            CLR_BIT(TIMER1_TCCR1A_REG, COM1A0);
    39f0:	af e4       	ldi	r26, 0x4F	; 79
    39f2:	b0 e0       	ldi	r27, 0x00	; 0
    39f4:	ef e4       	ldi	r30, 0x4F	; 79
    39f6:	f0 e0       	ldi	r31, 0x00	; 0
    39f8:	80 81       	ld	r24, Z
    39fa:	8f 7b       	andi	r24, 0xBF	; 191
    39fc:	8c 93       	st	X, r24
    39fe:	2a c0       	rjmp	.+84     	; 0x3a54 <Timers_enu_Init+0x41a>
        break;
        case PHASE_CORRECT_PWM_NON_INVERTING_COMB:
            SET_BIT(TIMER1_TCCR1A_REG, WGM10);
    3a00:	af e4       	ldi	r26, 0x4F	; 79
    3a02:	b0 e0       	ldi	r27, 0x00	; 0
    3a04:	ef e4       	ldi	r30, 0x4F	; 79
    3a06:	f0 e0       	ldi	r31, 0x00	; 0
    3a08:	80 81       	ld	r24, Z
    3a0a:	81 60       	ori	r24, 0x01	; 1
    3a0c:	8c 93       	st	X, r24
            SET_BIT(TIMER1_TCCR1A_REG, WGM11);
    3a0e:	af e4       	ldi	r26, 0x4F	; 79
    3a10:	b0 e0       	ldi	r27, 0x00	; 0
    3a12:	ef e4       	ldi	r30, 0x4F	; 79
    3a14:	f0 e0       	ldi	r31, 0x00	; 0
    3a16:	80 81       	ld	r24, Z
    3a18:	82 60       	ori	r24, 0x02	; 2
    3a1a:	8c 93       	st	X, r24
            CLR_BIT(TIMER1_TCCR1B_REG, WGM12);
    3a1c:	ae e4       	ldi	r26, 0x4E	; 78
    3a1e:	b0 e0       	ldi	r27, 0x00	; 0
    3a20:	ee e4       	ldi	r30, 0x4E	; 78
    3a22:	f0 e0       	ldi	r31, 0x00	; 0
    3a24:	80 81       	ld	r24, Z
    3a26:	87 7f       	andi	r24, 0xF7	; 247
    3a28:	8c 93       	st	X, r24
            SET_BIT(TIMER1_TCCR1B_REG, WGM13);
    3a2a:	ae e4       	ldi	r26, 0x4E	; 78
    3a2c:	b0 e0       	ldi	r27, 0x00	; 0
    3a2e:	ee e4       	ldi	r30, 0x4E	; 78
    3a30:	f0 e0       	ldi	r31, 0x00	; 0
    3a32:	80 81       	ld	r24, Z
    3a34:	80 61       	ori	r24, 0x10	; 16
    3a36:	8c 93       	st	X, r24
            SET_BIT(TIMER1_TCCR1A_REG, COM1B1);
    3a38:	af e4       	ldi	r26, 0x4F	; 79
    3a3a:	b0 e0       	ldi	r27, 0x00	; 0
    3a3c:	ef e4       	ldi	r30, 0x4F	; 79
    3a3e:	f0 e0       	ldi	r31, 0x00	; 0
    3a40:	80 81       	ld	r24, Z
    3a42:	80 62       	ori	r24, 0x20	; 32
    3a44:	8c 93       	st	X, r24
            CLR_BIT(TIMER1_TCCR1A_REG, COM1B0);
    3a46:	af e4       	ldi	r26, 0x4F	; 79
    3a48:	b0 e0       	ldi	r27, 0x00	; 0
    3a4a:	ef e4       	ldi	r30, 0x4F	; 79
    3a4c:	f0 e0       	ldi	r31, 0x00	; 0
    3a4e:	80 81       	ld	r24, Z
    3a50:	8f 7e       	andi	r24, 0xEF	; 239
    3a52:	8c 93       	st	X, r24
        break;
        }
    /*******Select Prescaler******/
    TIMER1_TCCR1B_REG |= Copy_u8_Prescaler;
    3a54:	ae e4       	ldi	r26, 0x4E	; 78
    3a56:	b0 e0       	ldi	r27, 0x00	; 0
    3a58:	ee e4       	ldi	r30, 0x4E	; 78
    3a5a:	f0 e0       	ldi	r31, 0x00	; 0
    3a5c:	90 81       	ld	r25, Z
    3a5e:	8c 81       	ldd	r24, Y+4	; 0x04
    3a60:	89 2b       	or	r24, r25
    3a62:	8c 93       	st	X, r24
    3a64:	c8 c0       	rjmp	.+400    	; 0x3bf6 <Timers_enu_Init+0x5bc>
    break;
    case TIMER2:
        switch (Copy_u8_Mode)
    3a66:	8b 81       	ldd	r24, Y+3	; 0x03
    3a68:	28 2f       	mov	r18, r24
    3a6a:	30 e0       	ldi	r19, 0x00	; 0
    3a6c:	3e 83       	std	Y+6, r19	; 0x06
    3a6e:	2d 83       	std	Y+5, r18	; 0x05
    3a70:	8d 81       	ldd	r24, Y+5	; 0x05
    3a72:	9e 81       	ldd	r25, Y+6	; 0x06
    3a74:	83 30       	cpi	r24, 0x03	; 3
    3a76:	91 05       	cpc	r25, r1
    3a78:	09 f4       	brne	.+2      	; 0x3a7c <Timers_enu_Init+0x442>
    3a7a:	40 c0       	rjmp	.+128    	; 0x3afc <Timers_enu_Init+0x4c2>
    3a7c:	2d 81       	ldd	r18, Y+5	; 0x05
    3a7e:	3e 81       	ldd	r19, Y+6	; 0x06
    3a80:	24 30       	cpi	r18, 0x04	; 4
    3a82:	31 05       	cpc	r19, r1
    3a84:	54 f4       	brge	.+20     	; 0x3a9a <Timers_enu_Init+0x460>
    3a86:	8d 81       	ldd	r24, Y+5	; 0x05
    3a88:	9e 81       	ldd	r25, Y+6	; 0x06
    3a8a:	00 97       	sbiw	r24, 0x00	; 0
    3a8c:	c9 f0       	breq	.+50     	; 0x3ac0 <Timers_enu_Init+0x486>
    3a8e:	2d 81       	ldd	r18, Y+5	; 0x05
    3a90:	3e 81       	ldd	r19, Y+6	; 0x06
    3a92:	21 30       	cpi	r18, 0x01	; 1
    3a94:	31 05       	cpc	r19, r1
    3a96:	19 f1       	breq	.+70     	; 0x3ade <Timers_enu_Init+0x4a4>
    3a98:	a4 c0       	rjmp	.+328    	; 0x3be2 <Timers_enu_Init+0x5a8>
    3a9a:	8d 81       	ldd	r24, Y+5	; 0x05
    3a9c:	9e 81       	ldd	r25, Y+6	; 0x06
    3a9e:	85 30       	cpi	r24, 0x05	; 5
    3aa0:	91 05       	cpc	r25, r1
    3aa2:	09 f4       	brne	.+2      	; 0x3aa6 <Timers_enu_Init+0x46c>
    3aa4:	65 c0       	rjmp	.+202    	; 0x3b70 <Timers_enu_Init+0x536>
    3aa6:	2d 81       	ldd	r18, Y+5	; 0x05
    3aa8:	3e 81       	ldd	r19, Y+6	; 0x06
    3aaa:	25 30       	cpi	r18, 0x05	; 5
    3aac:	31 05       	cpc	r19, r1
    3aae:	0c f4       	brge	.+2      	; 0x3ab2 <Timers_enu_Init+0x478>
    3ab0:	42 c0       	rjmp	.+132    	; 0x3b36 <Timers_enu_Init+0x4fc>
    3ab2:	8d 81       	ldd	r24, Y+5	; 0x05
    3ab4:	9e 81       	ldd	r25, Y+6	; 0x06
    3ab6:	86 30       	cpi	r24, 0x06	; 6
    3ab8:	91 05       	cpc	r25, r1
    3aba:	09 f4       	brne	.+2      	; 0x3abe <Timers_enu_Init+0x484>
    3abc:	76 c0       	rjmp	.+236    	; 0x3baa <Timers_enu_Init+0x570>
    3abe:	91 c0       	rjmp	.+290    	; 0x3be2 <Timers_enu_Init+0x5a8>
        {
        case NORMAL_MODE:
            CLR_BIT(TIMER2_TCCR2_REG, WGM20);
    3ac0:	a5 e4       	ldi	r26, 0x45	; 69
    3ac2:	b0 e0       	ldi	r27, 0x00	; 0
    3ac4:	e5 e4       	ldi	r30, 0x45	; 69
    3ac6:	f0 e0       	ldi	r31, 0x00	; 0
    3ac8:	80 81       	ld	r24, Z
    3aca:	8f 7b       	andi	r24, 0xBF	; 191
    3acc:	8c 93       	st	X, r24
            CLR_BIT(TIMER2_TCCR2_REG, WGM21);
    3ace:	a5 e4       	ldi	r26, 0x45	; 69
    3ad0:	b0 e0       	ldi	r27, 0x00	; 0
    3ad2:	e5 e4       	ldi	r30, 0x45	; 69
    3ad4:	f0 e0       	ldi	r31, 0x00	; 0
    3ad6:	80 81       	ld	r24, Z
    3ad8:	87 7f       	andi	r24, 0xF7	; 247
    3ada:	8c 93       	st	X, r24
    3adc:	82 c0       	rjmp	.+260    	; 0x3be2 <Timers_enu_Init+0x5a8>
        break;
        case CTC_MODE:
            CLR_BIT(TIMER2_TCCR2_REG, WGM20);
    3ade:	a5 e4       	ldi	r26, 0x45	; 69
    3ae0:	b0 e0       	ldi	r27, 0x00	; 0
    3ae2:	e5 e4       	ldi	r30, 0x45	; 69
    3ae4:	f0 e0       	ldi	r31, 0x00	; 0
    3ae6:	80 81       	ld	r24, Z
    3ae8:	8f 7b       	andi	r24, 0xBF	; 191
    3aea:	8c 93       	st	X, r24
            SET_BIT(TIMER2_TCCR2_REG, WGM21);
    3aec:	a5 e4       	ldi	r26, 0x45	; 69
    3aee:	b0 e0       	ldi	r27, 0x00	; 0
    3af0:	e5 e4       	ldi	r30, 0x45	; 69
    3af2:	f0 e0       	ldi	r31, 0x00	; 0
    3af4:	80 81       	ld	r24, Z
    3af6:	88 60       	ori	r24, 0x08	; 8
    3af8:	8c 93       	st	X, r24
    3afa:	73 c0       	rjmp	.+230    	; 0x3be2 <Timers_enu_Init+0x5a8>
        break;
        case FAST_PWM_INVERTING:
            // Fast
            SET_BIT(TIMER2_TCCR2_REG, WGM20);
    3afc:	a5 e4       	ldi	r26, 0x45	; 69
    3afe:	b0 e0       	ldi	r27, 0x00	; 0
    3b00:	e5 e4       	ldi	r30, 0x45	; 69
    3b02:	f0 e0       	ldi	r31, 0x00	; 0
    3b04:	80 81       	ld	r24, Z
    3b06:	80 64       	ori	r24, 0x40	; 64
    3b08:	8c 93       	st	X, r24
            SET_BIT(TIMER2_TCCR2_REG, WGM21);
    3b0a:	a5 e4       	ldi	r26, 0x45	; 69
    3b0c:	b0 e0       	ldi	r27, 0x00	; 0
    3b0e:	e5 e4       	ldi	r30, 0x45	; 69
    3b10:	f0 e0       	ldi	r31, 0x00	; 0
    3b12:	80 81       	ld	r24, Z
    3b14:	88 60       	ori	r24, 0x08	; 8
    3b16:	8c 93       	st	X, r24
            // Inverting
            SET_BIT(TIMER2_TCCR2_REG, COM21);
    3b18:	a5 e4       	ldi	r26, 0x45	; 69
    3b1a:	b0 e0       	ldi	r27, 0x00	; 0
    3b1c:	e5 e4       	ldi	r30, 0x45	; 69
    3b1e:	f0 e0       	ldi	r31, 0x00	; 0
    3b20:	80 81       	ld	r24, Z
    3b22:	80 62       	ori	r24, 0x20	; 32
    3b24:	8c 93       	st	X, r24
            SET_BIT(TIMER2_TCCR2_REG, COM20);
    3b26:	a5 e4       	ldi	r26, 0x45	; 69
    3b28:	b0 e0       	ldi	r27, 0x00	; 0
    3b2a:	e5 e4       	ldi	r30, 0x45	; 69
    3b2c:	f0 e0       	ldi	r31, 0x00	; 0
    3b2e:	80 81       	ld	r24, Z
    3b30:	80 61       	ori	r24, 0x10	; 16
    3b32:	8c 93       	st	X, r24
    3b34:	56 c0       	rjmp	.+172    	; 0x3be2 <Timers_enu_Init+0x5a8>
        break;
        case FAST_PWM_NON_INVERTING:
            // Fast
            SET_BIT(TIMER2_TCCR2_REG, WGM20);
    3b36:	a5 e4       	ldi	r26, 0x45	; 69
    3b38:	b0 e0       	ldi	r27, 0x00	; 0
    3b3a:	e5 e4       	ldi	r30, 0x45	; 69
    3b3c:	f0 e0       	ldi	r31, 0x00	; 0
    3b3e:	80 81       	ld	r24, Z
    3b40:	80 64       	ori	r24, 0x40	; 64
    3b42:	8c 93       	st	X, r24
            SET_BIT(TIMER2_TCCR2_REG, WGM21);
    3b44:	a5 e4       	ldi	r26, 0x45	; 69
    3b46:	b0 e0       	ldi	r27, 0x00	; 0
    3b48:	e5 e4       	ldi	r30, 0x45	; 69
    3b4a:	f0 e0       	ldi	r31, 0x00	; 0
    3b4c:	80 81       	ld	r24, Z
    3b4e:	88 60       	ori	r24, 0x08	; 8
    3b50:	8c 93       	st	X, r24
            // Non Inverting
            SET_BIT(TIMER2_TCCR2_REG, COM21);
    3b52:	a5 e4       	ldi	r26, 0x45	; 69
    3b54:	b0 e0       	ldi	r27, 0x00	; 0
    3b56:	e5 e4       	ldi	r30, 0x45	; 69
    3b58:	f0 e0       	ldi	r31, 0x00	; 0
    3b5a:	80 81       	ld	r24, Z
    3b5c:	80 62       	ori	r24, 0x20	; 32
    3b5e:	8c 93       	st	X, r24
            CLR_BIT(TIMER2_TCCR2_REG, COM20);
    3b60:	a5 e4       	ldi	r26, 0x45	; 69
    3b62:	b0 e0       	ldi	r27, 0x00	; 0
    3b64:	e5 e4       	ldi	r30, 0x45	; 69
    3b66:	f0 e0       	ldi	r31, 0x00	; 0
    3b68:	80 81       	ld	r24, Z
    3b6a:	8f 7e       	andi	r24, 0xEF	; 239
    3b6c:	8c 93       	st	X, r24
    3b6e:	39 c0       	rjmp	.+114    	; 0x3be2 <Timers_enu_Init+0x5a8>
        break;
        case PHASE_CORRECT_PWM_INVERTING:
            // Phase Correct
            SET_BIT(TIMER2_TCCR2_REG, WGM20);
    3b70:	a5 e4       	ldi	r26, 0x45	; 69
    3b72:	b0 e0       	ldi	r27, 0x00	; 0
    3b74:	e5 e4       	ldi	r30, 0x45	; 69
    3b76:	f0 e0       	ldi	r31, 0x00	; 0
    3b78:	80 81       	ld	r24, Z
    3b7a:	80 64       	ori	r24, 0x40	; 64
    3b7c:	8c 93       	st	X, r24
            CLR_BIT(TIMER2_TCCR2_REG, WGM21);
    3b7e:	a5 e4       	ldi	r26, 0x45	; 69
    3b80:	b0 e0       	ldi	r27, 0x00	; 0
    3b82:	e5 e4       	ldi	r30, 0x45	; 69
    3b84:	f0 e0       	ldi	r31, 0x00	; 0
    3b86:	80 81       	ld	r24, Z
    3b88:	87 7f       	andi	r24, 0xF7	; 247
    3b8a:	8c 93       	st	X, r24
            // Inverting
            SET_BIT(TIMER2_TCCR2_REG, COM21);
    3b8c:	a5 e4       	ldi	r26, 0x45	; 69
    3b8e:	b0 e0       	ldi	r27, 0x00	; 0
    3b90:	e5 e4       	ldi	r30, 0x45	; 69
    3b92:	f0 e0       	ldi	r31, 0x00	; 0
    3b94:	80 81       	ld	r24, Z
    3b96:	80 62       	ori	r24, 0x20	; 32
    3b98:	8c 93       	st	X, r24
            SET_BIT(TIMER2_TCCR2_REG, COM20);
    3b9a:	a5 e4       	ldi	r26, 0x45	; 69
    3b9c:	b0 e0       	ldi	r27, 0x00	; 0
    3b9e:	e5 e4       	ldi	r30, 0x45	; 69
    3ba0:	f0 e0       	ldi	r31, 0x00	; 0
    3ba2:	80 81       	ld	r24, Z
    3ba4:	80 61       	ori	r24, 0x10	; 16
    3ba6:	8c 93       	st	X, r24
    3ba8:	1c c0       	rjmp	.+56     	; 0x3be2 <Timers_enu_Init+0x5a8>
        break;
        case PHASE_CORRECT_PWM_NON_INVERTING:
            // Phase Correct
            SET_BIT(TIMER2_TCCR2_REG, WGM20);
    3baa:	a5 e4       	ldi	r26, 0x45	; 69
    3bac:	b0 e0       	ldi	r27, 0x00	; 0
    3bae:	e5 e4       	ldi	r30, 0x45	; 69
    3bb0:	f0 e0       	ldi	r31, 0x00	; 0
    3bb2:	80 81       	ld	r24, Z
    3bb4:	80 64       	ori	r24, 0x40	; 64
    3bb6:	8c 93       	st	X, r24
            CLR_BIT(TIMER2_TCCR2_REG, WGM21);
    3bb8:	a5 e4       	ldi	r26, 0x45	; 69
    3bba:	b0 e0       	ldi	r27, 0x00	; 0
    3bbc:	e5 e4       	ldi	r30, 0x45	; 69
    3bbe:	f0 e0       	ldi	r31, 0x00	; 0
    3bc0:	80 81       	ld	r24, Z
    3bc2:	87 7f       	andi	r24, 0xF7	; 247
    3bc4:	8c 93       	st	X, r24
            // NON Inverting
            SET_BIT(TIMER2_TCCR2_REG, COM21);
    3bc6:	a5 e4       	ldi	r26, 0x45	; 69
    3bc8:	b0 e0       	ldi	r27, 0x00	; 0
    3bca:	e5 e4       	ldi	r30, 0x45	; 69
    3bcc:	f0 e0       	ldi	r31, 0x00	; 0
    3bce:	80 81       	ld	r24, Z
    3bd0:	80 62       	ori	r24, 0x20	; 32
    3bd2:	8c 93       	st	X, r24
            CLR_BIT(TIMER2_TCCR2_REG, COM20);
    3bd4:	a5 e4       	ldi	r26, 0x45	; 69
    3bd6:	b0 e0       	ldi	r27, 0x00	; 0
    3bd8:	e5 e4       	ldi	r30, 0x45	; 69
    3bda:	f0 e0       	ldi	r31, 0x00	; 0
    3bdc:	80 81       	ld	r24, Z
    3bde:	8f 7e       	andi	r24, 0xEF	; 239
    3be0:	8c 93       	st	X, r24
        break;
        }
    /*******Select Prescaler******/
    TIMER2_TCCR2_REG |= Copy_u8_Prescaler;
    3be2:	a5 e4       	ldi	r26, 0x45	; 69
    3be4:	b0 e0       	ldi	r27, 0x00	; 0
    3be6:	e5 e4       	ldi	r30, 0x45	; 69
    3be8:	f0 e0       	ldi	r31, 0x00	; 0
    3bea:	90 81       	ld	r25, Z
    3bec:	8c 81       	ldd	r24, Y+4	; 0x04
    3bee:	89 2b       	or	r24, r25
    3bf0:	8c 93       	st	X, r24
    3bf2:	01 c0       	rjmp	.+2      	; 0x3bf6 <Timers_enu_Init+0x5bc>
    break;
    }
}else{
    Local_u8_errorState = STATE_NOT_OK;
    3bf4:	19 82       	std	Y+1, r1	; 0x01
}
return Local_u8_errorState;
    3bf6:	89 81       	ldd	r24, Y+1	; 0x01
}
    3bf8:	2c 96       	adiw	r28, 0x0c	; 12
    3bfa:	0f b6       	in	r0, 0x3f	; 63
    3bfc:	f8 94       	cli
    3bfe:	de bf       	out	0x3e, r29	; 62
    3c00:	0f be       	out	0x3f, r0	; 63
    3c02:	cd bf       	out	0x3d, r28	; 61
    3c04:	cf 91       	pop	r28
    3c06:	df 91       	pop	r29
    3c08:	08 95       	ret

00003c0a <Timers_enu_SetCallBack>:
ES_t Timers_enu_SetCallBack(u8 Copy_u8_TimerNo,void(*Copy_pf)(void),u8 Copy_u8_Mode){
    3c0a:	df 93       	push	r29
    3c0c:	cf 93       	push	r28
    3c0e:	cd b7       	in	r28, 0x3d	; 61
    3c10:	de b7       	in	r29, 0x3e	; 62
    3c12:	2f 97       	sbiw	r28, 0x0f	; 15
    3c14:	0f b6       	in	r0, 0x3f	; 63
    3c16:	f8 94       	cli
    3c18:	de bf       	out	0x3e, r29	; 62
    3c1a:	0f be       	out	0x3f, r0	; 63
    3c1c:	cd bf       	out	0x3d, r28	; 61
    3c1e:	8a 83       	std	Y+2, r24	; 0x02
    3c20:	7c 83       	std	Y+4, r23	; 0x04
    3c22:	6b 83       	std	Y+3, r22	; 0x03
    3c24:	4d 83       	std	Y+5, r20	; 0x05
    u8 Local_u8_errorState = STATE_OK;
    3c26:	81 e0       	ldi	r24, 0x01	; 1
    3c28:	89 83       	std	Y+1, r24	; 0x01
    if((Copy_u8_TimerNo< 3)&(Copy_pf != NULL) && (Copy_u8_Mode< 3)){
    3c2a:	1f 86       	std	Y+15, r1	; 0x0f
    3c2c:	8a 81       	ldd	r24, Y+2	; 0x02
    3c2e:	83 30       	cpi	r24, 0x03	; 3
    3c30:	10 f4       	brcc	.+4      	; 0x3c36 <Timers_enu_SetCallBack+0x2c>
    3c32:	21 e0       	ldi	r18, 0x01	; 1
    3c34:	2f 87       	std	Y+15, r18	; 0x0f
    3c36:	1e 86       	std	Y+14, r1	; 0x0e
    3c38:	8b 81       	ldd	r24, Y+3	; 0x03
    3c3a:	9c 81       	ldd	r25, Y+4	; 0x04
    3c3c:	00 97       	sbiw	r24, 0x00	; 0
    3c3e:	11 f0       	breq	.+4      	; 0x3c44 <Timers_enu_SetCallBack+0x3a>
    3c40:	31 e0       	ldi	r19, 0x01	; 1
    3c42:	3e 87       	std	Y+14, r19	; 0x0e
    3c44:	8f 85       	ldd	r24, Y+15	; 0x0f
    3c46:	9e 85       	ldd	r25, Y+14	; 0x0e
    3c48:	89 23       	and	r24, r25
    3c4a:	91 e0       	ldi	r25, 0x01	; 1
    3c4c:	89 27       	eor	r24, r25
    3c4e:	88 23       	and	r24, r24
    3c50:	09 f0       	breq	.+2      	; 0x3c54 <Timers_enu_SetCallBack+0x4a>
    3c52:	a6 c0       	rjmp	.+332    	; 0x3da0 <Timers_enu_SetCallBack+0x196>
    3c54:	8d 81       	ldd	r24, Y+5	; 0x05
    3c56:	83 30       	cpi	r24, 0x03	; 3
    3c58:	08 f0       	brcs	.+2      	; 0x3c5c <Timers_enu_SetCallBack+0x52>
    3c5a:	a2 c0       	rjmp	.+324    	; 0x3da0 <Timers_enu_SetCallBack+0x196>
        switch (Copy_u8_TimerNo)
    3c5c:	8a 81       	ldd	r24, Y+2	; 0x02
    3c5e:	28 2f       	mov	r18, r24
    3c60:	30 e0       	ldi	r19, 0x00	; 0
    3c62:	3d 87       	std	Y+13, r19	; 0x0d
    3c64:	2c 87       	std	Y+12, r18	; 0x0c
    3c66:	8c 85       	ldd	r24, Y+12	; 0x0c
    3c68:	9d 85       	ldd	r25, Y+13	; 0x0d
    3c6a:	81 30       	cpi	r24, 0x01	; 1
    3c6c:	91 05       	cpc	r25, r1
    3c6e:	b1 f1       	breq	.+108    	; 0x3cdc <Timers_enu_SetCallBack+0xd2>
    3c70:	2c 85       	ldd	r18, Y+12	; 0x0c
    3c72:	3d 85       	ldd	r19, Y+13	; 0x0d
    3c74:	22 30       	cpi	r18, 0x02	; 2
    3c76:	31 05       	cpc	r19, r1
    3c78:	09 f4       	brne	.+2      	; 0x3c7c <Timers_enu_SetCallBack+0x72>
    3c7a:	67 c0       	rjmp	.+206    	; 0x3d4a <Timers_enu_SetCallBack+0x140>
    3c7c:	8c 85       	ldd	r24, Y+12	; 0x0c
    3c7e:	9d 85       	ldd	r25, Y+13	; 0x0d
    3c80:	00 97       	sbiw	r24, 0x00	; 0
    3c82:	09 f0       	breq	.+2      	; 0x3c86 <Timers_enu_SetCallBack+0x7c>
    3c84:	8e c0       	rjmp	.+284    	; 0x3da2 <Timers_enu_SetCallBack+0x198>
        {
        case TIMER0:
        switch (Copy_u8_Mode)
    3c86:	8d 81       	ldd	r24, Y+5	; 0x05
    3c88:	28 2f       	mov	r18, r24
    3c8a:	30 e0       	ldi	r19, 0x00	; 0
    3c8c:	3b 87       	std	Y+11, r19	; 0x0b
    3c8e:	2a 87       	std	Y+10, r18	; 0x0a
    3c90:	8a 85       	ldd	r24, Y+10	; 0x0a
    3c92:	9b 85       	ldd	r25, Y+11	; 0x0b
    3c94:	00 97       	sbiw	r24, 0x00	; 0
    3c96:	31 f0       	breq	.+12     	; 0x3ca4 <Timers_enu_SetCallBack+0x9a>
    3c98:	2a 85       	ldd	r18, Y+10	; 0x0a
    3c9a:	3b 85       	ldd	r19, Y+11	; 0x0b
    3c9c:	21 30       	cpi	r18, 0x01	; 1
    3c9e:	31 05       	cpc	r19, r1
    3ca0:	49 f0       	breq	.+18     	; 0x3cb4 <Timers_enu_SetCallBack+0xaa>
    3ca2:	0f c0       	rjmp	.+30     	; 0x3cc2 <Timers_enu_SetCallBack+0xb8>
        {
        // Enable Interrupts
        case NORMAL_MODE:SET_BIT(TIMER_TIMSK_REG, TOIE0);break;
    3ca4:	a9 e5       	ldi	r26, 0x59	; 89
    3ca6:	b0 e0       	ldi	r27, 0x00	; 0
    3ca8:	e9 e5       	ldi	r30, 0x59	; 89
    3caa:	f0 e0       	ldi	r31, 0x00	; 0
    3cac:	80 81       	ld	r24, Z
    3cae:	81 60       	ori	r24, 0x01	; 1
    3cb0:	8c 93       	st	X, r24
    3cb2:	07 c0       	rjmp	.+14     	; 0x3cc2 <Timers_enu_SetCallBack+0xb8>
        case CTC_MODE:SET_BIT(TIMER_TIMSK_REG, OCIE0);break;
    3cb4:	a9 e5       	ldi	r26, 0x59	; 89
    3cb6:	b0 e0       	ldi	r27, 0x00	; 0
    3cb8:	e9 e5       	ldi	r30, 0x59	; 89
    3cba:	f0 e0       	ldi	r31, 0x00	; 0
    3cbc:	80 81       	ld	r24, Z
    3cbe:	82 60       	ori	r24, 0x02	; 2
    3cc0:	8c 93       	st	X, r24
        }
        Timers_pf_Timer0[Copy_u8_Mode] = Copy_pf;
    3cc2:	8d 81       	ldd	r24, Y+5	; 0x05
    3cc4:	88 2f       	mov	r24, r24
    3cc6:	90 e0       	ldi	r25, 0x00	; 0
    3cc8:	88 0f       	add	r24, r24
    3cca:	99 1f       	adc	r25, r25
    3ccc:	fc 01       	movw	r30, r24
    3cce:	e9 5a       	subi	r30, 0xA9	; 169
    3cd0:	fe 4f       	sbci	r31, 0xFE	; 254
    3cd2:	8b 81       	ldd	r24, Y+3	; 0x03
    3cd4:	9c 81       	ldd	r25, Y+4	; 0x04
    3cd6:	91 83       	std	Z+1, r25	; 0x01
    3cd8:	80 83       	st	Z, r24
    3cda:	63 c0       	rjmp	.+198    	; 0x3da2 <Timers_enu_SetCallBack+0x198>
        break;
        case TIMER1:
        switch (Copy_u8_Mode)
    3cdc:	8d 81       	ldd	r24, Y+5	; 0x05
    3cde:	28 2f       	mov	r18, r24
    3ce0:	30 e0       	ldi	r19, 0x00	; 0
    3ce2:	39 87       	std	Y+9, r19	; 0x09
    3ce4:	28 87       	std	Y+8, r18	; 0x08
    3ce6:	88 85       	ldd	r24, Y+8	; 0x08
    3ce8:	99 85       	ldd	r25, Y+9	; 0x09
    3cea:	81 30       	cpi	r24, 0x01	; 1
    3cec:	91 05       	cpc	r25, r1
    3cee:	89 f0       	breq	.+34     	; 0x3d12 <Timers_enu_SetCallBack+0x108>
    3cf0:	28 85       	ldd	r18, Y+8	; 0x08
    3cf2:	39 85       	ldd	r19, Y+9	; 0x09
    3cf4:	22 30       	cpi	r18, 0x02	; 2
    3cf6:	31 05       	cpc	r19, r1
    3cf8:	a1 f0       	breq	.+40     	; 0x3d22 <Timers_enu_SetCallBack+0x118>
    3cfa:	88 85       	ldd	r24, Y+8	; 0x08
    3cfc:	99 85       	ldd	r25, Y+9	; 0x09
    3cfe:	00 97       	sbiw	r24, 0x00	; 0
    3d00:	b9 f4       	brne	.+46     	; 0x3d30 <Timers_enu_SetCallBack+0x126>
        {
        // Enable Interrupts
        case NORMAL_MODE:SET_BIT(TIMER_TIMSK_REG, TOIE1);break;
    3d02:	a9 e5       	ldi	r26, 0x59	; 89
    3d04:	b0 e0       	ldi	r27, 0x00	; 0
    3d06:	e9 e5       	ldi	r30, 0x59	; 89
    3d08:	f0 e0       	ldi	r31, 0x00	; 0
    3d0a:	80 81       	ld	r24, Z
    3d0c:	84 60       	ori	r24, 0x04	; 4
    3d0e:	8c 93       	st	X, r24
    3d10:	0f c0       	rjmp	.+30     	; 0x3d30 <Timers_enu_SetCallBack+0x126>
        case CTC_MODE_A:SET_BIT(TIMER_TIMSK_REG, OCIE1A);break;
    3d12:	a9 e5       	ldi	r26, 0x59	; 89
    3d14:	b0 e0       	ldi	r27, 0x00	; 0
    3d16:	e9 e5       	ldi	r30, 0x59	; 89
    3d18:	f0 e0       	ldi	r31, 0x00	; 0
    3d1a:	80 81       	ld	r24, Z
    3d1c:	80 61       	ori	r24, 0x10	; 16
    3d1e:	8c 93       	st	X, r24
    3d20:	07 c0       	rjmp	.+14     	; 0x3d30 <Timers_enu_SetCallBack+0x126>
        case CTC_MODE_B:SET_BIT(TIMER_TIMSK_REG, OCIE1B);break;
    3d22:	a9 e5       	ldi	r26, 0x59	; 89
    3d24:	b0 e0       	ldi	r27, 0x00	; 0
    3d26:	e9 e5       	ldi	r30, 0x59	; 89
    3d28:	f0 e0       	ldi	r31, 0x00	; 0
    3d2a:	80 81       	ld	r24, Z
    3d2c:	88 60       	ori	r24, 0x08	; 8
    3d2e:	8c 93       	st	X, r24
        }
        Timers_pf_Timer1[Copy_u8_Mode] = Copy_pf;
    3d30:	8d 81       	ldd	r24, Y+5	; 0x05
    3d32:	88 2f       	mov	r24, r24
    3d34:	90 e0       	ldi	r25, 0x00	; 0
    3d36:	88 0f       	add	r24, r24
    3d38:	99 1f       	adc	r25, r25
    3d3a:	fc 01       	movw	r30, r24
    3d3c:	e5 5a       	subi	r30, 0xA5	; 165
    3d3e:	fe 4f       	sbci	r31, 0xFE	; 254
    3d40:	8b 81       	ldd	r24, Y+3	; 0x03
    3d42:	9c 81       	ldd	r25, Y+4	; 0x04
    3d44:	91 83       	std	Z+1, r25	; 0x01
    3d46:	80 83       	st	Z, r24
    3d48:	2c c0       	rjmp	.+88     	; 0x3da2 <Timers_enu_SetCallBack+0x198>
        break;
        case TIMER2:
        switch (Copy_u8_Mode)
    3d4a:	8d 81       	ldd	r24, Y+5	; 0x05
    3d4c:	28 2f       	mov	r18, r24
    3d4e:	30 e0       	ldi	r19, 0x00	; 0
    3d50:	3f 83       	std	Y+7, r19	; 0x07
    3d52:	2e 83       	std	Y+6, r18	; 0x06
    3d54:	8e 81       	ldd	r24, Y+6	; 0x06
    3d56:	9f 81       	ldd	r25, Y+7	; 0x07
    3d58:	00 97       	sbiw	r24, 0x00	; 0
    3d5a:	31 f0       	breq	.+12     	; 0x3d68 <Timers_enu_SetCallBack+0x15e>
    3d5c:	2e 81       	ldd	r18, Y+6	; 0x06
    3d5e:	3f 81       	ldd	r19, Y+7	; 0x07
    3d60:	21 30       	cpi	r18, 0x01	; 1
    3d62:	31 05       	cpc	r19, r1
    3d64:	49 f0       	breq	.+18     	; 0x3d78 <Timers_enu_SetCallBack+0x16e>
    3d66:	0f c0       	rjmp	.+30     	; 0x3d86 <Timers_enu_SetCallBack+0x17c>
        {
        // Enable Interrupts
        case NORMAL_MODE:SET_BIT(TIMER_TIMSK_REG, TOIE2);break;
    3d68:	a9 e5       	ldi	r26, 0x59	; 89
    3d6a:	b0 e0       	ldi	r27, 0x00	; 0
    3d6c:	e9 e5       	ldi	r30, 0x59	; 89
    3d6e:	f0 e0       	ldi	r31, 0x00	; 0
    3d70:	80 81       	ld	r24, Z
    3d72:	80 64       	ori	r24, 0x40	; 64
    3d74:	8c 93       	st	X, r24
    3d76:	07 c0       	rjmp	.+14     	; 0x3d86 <Timers_enu_SetCallBack+0x17c>
        case CTC_MODE:SET_BIT(TIMER_TIMSK_REG, OCIE2);break;
    3d78:	a9 e5       	ldi	r26, 0x59	; 89
    3d7a:	b0 e0       	ldi	r27, 0x00	; 0
    3d7c:	e9 e5       	ldi	r30, 0x59	; 89
    3d7e:	f0 e0       	ldi	r31, 0x00	; 0
    3d80:	80 81       	ld	r24, Z
    3d82:	80 68       	ori	r24, 0x80	; 128
    3d84:	8c 93       	st	X, r24
        }
        Timers_pf_Timer2[Copy_u8_Mode] = Copy_pf;
    3d86:	8d 81       	ldd	r24, Y+5	; 0x05
    3d88:	88 2f       	mov	r24, r24
    3d8a:	90 e0       	ldi	r25, 0x00	; 0
    3d8c:	88 0f       	add	r24, r24
    3d8e:	99 1f       	adc	r25, r25
    3d90:	fc 01       	movw	r30, r24
    3d92:	ed 59       	subi	r30, 0x9D	; 157
    3d94:	fe 4f       	sbci	r31, 0xFE	; 254
    3d96:	8b 81       	ldd	r24, Y+3	; 0x03
    3d98:	9c 81       	ldd	r25, Y+4	; 0x04
    3d9a:	91 83       	std	Z+1, r25	; 0x01
    3d9c:	80 83       	st	Z, r24
    3d9e:	01 c0       	rjmp	.+2      	; 0x3da2 <Timers_enu_SetCallBack+0x198>
        break;
        }
        
    }else{
        Local_u8_errorState = STATE_NOT_OK;
    3da0:	19 82       	std	Y+1, r1	; 0x01
    }
    return Local_u8_errorState;
    3da2:	89 81       	ldd	r24, Y+1	; 0x01
}
    3da4:	2f 96       	adiw	r28, 0x0f	; 15
    3da6:	0f b6       	in	r0, 0x3f	; 63
    3da8:	f8 94       	cli
    3daa:	de bf       	out	0x3e, r29	; 62
    3dac:	0f be       	out	0x3f, r0	; 63
    3dae:	cd bf       	out	0x3d, r28	; 61
    3db0:	cf 91       	pop	r28
    3db2:	df 91       	pop	r29
    3db4:	08 95       	ret

00003db6 <Timers_enu_SetCLKSource>:
ES_t Timers_enu_SetCLKSource(u8 Copy_u8_TimerNo,u8 Copy_u8_CLK_Source){
    3db6:	df 93       	push	r29
    3db8:	cf 93       	push	r28
    3dba:	00 d0       	rcall	.+0      	; 0x3dbc <Timers_enu_SetCLKSource+0x6>
    3dbc:	00 d0       	rcall	.+0      	; 0x3dbe <Timers_enu_SetCLKSource+0x8>
    3dbe:	0f 92       	push	r0
    3dc0:	cd b7       	in	r28, 0x3d	; 61
    3dc2:	de b7       	in	r29, 0x3e	; 62
    3dc4:	8a 83       	std	Y+2, r24	; 0x02
    3dc6:	6b 83       	std	Y+3, r22	; 0x03
    u8 Local_u8_errorState = STATE_OK;
    3dc8:	81 e0       	ldi	r24, 0x01	; 1
    3dca:	89 83       	std	Y+1, r24	; 0x01
    if((Copy_u8_CLK_Source < 8) && (Copy_u8_TimerNo < 3)){
    3dcc:	8b 81       	ldd	r24, Y+3	; 0x03
    3dce:	88 30       	cpi	r24, 0x08	; 8
    3dd0:	08 f0       	brcs	.+2      	; 0x3dd4 <Timers_enu_SetCLKSource+0x1e>
    3dd2:	4a c0       	rjmp	.+148    	; 0x3e68 <Timers_enu_SetCLKSource+0xb2>
    3dd4:	8a 81       	ldd	r24, Y+2	; 0x02
    3dd6:	83 30       	cpi	r24, 0x03	; 3
    3dd8:	08 f0       	brcs	.+2      	; 0x3ddc <Timers_enu_SetCLKSource+0x26>
    3dda:	46 c0       	rjmp	.+140    	; 0x3e68 <Timers_enu_SetCLKSource+0xb2>
        switch (Copy_u8_TimerNo)
    3ddc:	8a 81       	ldd	r24, Y+2	; 0x02
    3dde:	28 2f       	mov	r18, r24
    3de0:	30 e0       	ldi	r19, 0x00	; 0
    3de2:	3d 83       	std	Y+5, r19	; 0x05
    3de4:	2c 83       	std	Y+4, r18	; 0x04
    3de6:	8c 81       	ldd	r24, Y+4	; 0x04
    3de8:	9d 81       	ldd	r25, Y+5	; 0x05
    3dea:	81 30       	cpi	r24, 0x01	; 1
    3dec:	91 05       	cpc	r25, r1
    3dee:	e1 f0       	breq	.+56     	; 0x3e28 <Timers_enu_SetCLKSource+0x72>
    3df0:	2c 81       	ldd	r18, Y+4	; 0x04
    3df2:	3d 81       	ldd	r19, Y+5	; 0x05
    3df4:	22 30       	cpi	r18, 0x02	; 2
    3df6:	31 05       	cpc	r19, r1
    3df8:	39 f1       	breq	.+78     	; 0x3e48 <Timers_enu_SetCLKSource+0x92>
    3dfa:	8c 81       	ldd	r24, Y+4	; 0x04
    3dfc:	9d 81       	ldd	r25, Y+5	; 0x05
    3dfe:	00 97       	sbiw	r24, 0x00	; 0
    3e00:	a1 f5       	brne	.+104    	; 0x3e6a <Timers_enu_SetCLKSource+0xb4>
        {
        case TIMER0:
            // Clear Old Value of Prescaler
            TIMER0_TCCR0_REG &= CLEAR_CLK_SOURCE;
    3e02:	a3 e5       	ldi	r26, 0x53	; 83
    3e04:	b0 e0       	ldi	r27, 0x00	; 0
    3e06:	e3 e5       	ldi	r30, 0x53	; 83
    3e08:	f0 e0       	ldi	r31, 0x00	; 0
    3e0a:	80 81       	ld	r24, Z
    3e0c:	88 7f       	andi	r24, 0xF8	; 248
    3e0e:	8c 93       	st	X, r24
            TIMER0_TCCR0_REG |= Copy_u8_CLK_Source;
    3e10:	a3 e5       	ldi	r26, 0x53	; 83
    3e12:	b0 e0       	ldi	r27, 0x00	; 0
    3e14:	e3 e5       	ldi	r30, 0x53	; 83
    3e16:	f0 e0       	ldi	r31, 0x00	; 0
    3e18:	90 81       	ld	r25, Z
    3e1a:	8b 81       	ldd	r24, Y+3	; 0x03
    3e1c:	89 2b       	or	r24, r25
    3e1e:	8c 93       	st	X, r24
            Timer0_u8_Prescaler = Copy_u8_CLK_Source;
    3e20:	8b 81       	ldd	r24, Y+3	; 0x03
    3e22:	80 93 67 01 	sts	0x0167, r24
    3e26:	21 c0       	rjmp	.+66     	; 0x3e6a <Timers_enu_SetCLKSource+0xb4>
        break;
        case TIMER1:
            // Clear Old Value of Prescaler
            TIMER1_TCCR1B_REG &= CLEAR_CLK_SOURCE;
    3e28:	ae e4       	ldi	r26, 0x4E	; 78
    3e2a:	b0 e0       	ldi	r27, 0x00	; 0
    3e2c:	ee e4       	ldi	r30, 0x4E	; 78
    3e2e:	f0 e0       	ldi	r31, 0x00	; 0
    3e30:	80 81       	ld	r24, Z
    3e32:	88 7f       	andi	r24, 0xF8	; 248
    3e34:	8c 93       	st	X, r24
            TIMER1_TCCR1B_REG |= Copy_u8_CLK_Source;
    3e36:	ae e4       	ldi	r26, 0x4E	; 78
    3e38:	b0 e0       	ldi	r27, 0x00	; 0
    3e3a:	ee e4       	ldi	r30, 0x4E	; 78
    3e3c:	f0 e0       	ldi	r31, 0x00	; 0
    3e3e:	90 81       	ld	r25, Z
    3e40:	8b 81       	ldd	r24, Y+3	; 0x03
    3e42:	89 2b       	or	r24, r25
    3e44:	8c 93       	st	X, r24
    3e46:	11 c0       	rjmp	.+34     	; 0x3e6a <Timers_enu_SetCLKSource+0xb4>
        break;
        case TIMER2:
            // Clear Old Value of Prescaler
            TIMER2_TCCR2_REG &= CLEAR_CLK_SOURCE;
    3e48:	a5 e4       	ldi	r26, 0x45	; 69
    3e4a:	b0 e0       	ldi	r27, 0x00	; 0
    3e4c:	e5 e4       	ldi	r30, 0x45	; 69
    3e4e:	f0 e0       	ldi	r31, 0x00	; 0
    3e50:	80 81       	ld	r24, Z
    3e52:	88 7f       	andi	r24, 0xF8	; 248
    3e54:	8c 93       	st	X, r24
            TIMER2_TCCR2_REG |= Copy_u8_CLK_Source;
    3e56:	a5 e4       	ldi	r26, 0x45	; 69
    3e58:	b0 e0       	ldi	r27, 0x00	; 0
    3e5a:	e5 e4       	ldi	r30, 0x45	; 69
    3e5c:	f0 e0       	ldi	r31, 0x00	; 0
    3e5e:	90 81       	ld	r25, Z
    3e60:	8b 81       	ldd	r24, Y+3	; 0x03
    3e62:	89 2b       	or	r24, r25
    3e64:	8c 93       	st	X, r24
    3e66:	01 c0       	rjmp	.+2      	; 0x3e6a <Timers_enu_SetCLKSource+0xb4>
        break;
        }
    }else{
        Local_u8_errorState = STATE_NOT_OK;
    3e68:	19 82       	std	Y+1, r1	; 0x01
    }
    return Local_u8_errorState;
    3e6a:	89 81       	ldd	r24, Y+1	; 0x01
}
    3e6c:	0f 90       	pop	r0
    3e6e:	0f 90       	pop	r0
    3e70:	0f 90       	pop	r0
    3e72:	0f 90       	pop	r0
    3e74:	0f 90       	pop	r0
    3e76:	cf 91       	pop	r28
    3e78:	df 91       	pop	r29
    3e7a:	08 95       	ret

00003e7c <Timers_enu_delay_ms>:
ES_t Timers_enu_delay_ms(u32 Copy_u32_Time)     // Using Timer 0 
{
    3e7c:	ef 92       	push	r14
    3e7e:	ff 92       	push	r15
    3e80:	0f 93       	push	r16
    3e82:	1f 93       	push	r17
    3e84:	df 93       	push	r29
    3e86:	cf 93       	push	r28
    3e88:	cd b7       	in	r28, 0x3d	; 61
    3e8a:	de b7       	in	r29, 0x3e	; 62
    3e8c:	2c 97       	sbiw	r28, 0x0c	; 12
    3e8e:	0f b6       	in	r0, 0x3f	; 63
    3e90:	f8 94       	cli
    3e92:	de bf       	out	0x3e, r29	; 62
    3e94:	0f be       	out	0x3f, r0	; 63
    3e96:	cd bf       	out	0x3d, r28	; 61
    3e98:	69 87       	std	Y+9, r22	; 0x09
    3e9a:	7a 87       	std	Y+10, r23	; 0x0a
    3e9c:	8b 87       	std	Y+11, r24	; 0x0b
    3e9e:	9c 87       	std	Y+12, r25	; 0x0c
    TIMER0_TCCR0_REG |= Timer0_u8_Prescaler;
    3ea0:	a3 e5       	ldi	r26, 0x53	; 83
    3ea2:	b0 e0       	ldi	r27, 0x00	; 0
    3ea4:	e3 e5       	ldi	r30, 0x53	; 83
    3ea6:	f0 e0       	ldi	r31, 0x00	; 0
    3ea8:	90 81       	ld	r25, Z
    3eaa:	80 91 67 01 	lds	r24, 0x0167
    3eae:	89 2b       	or	r24, r25
    3eb0:	8c 93       	st	X, r24
    u16 local_u16_OVF_Time = (256 * PRESCALER) / F_CPU;
    3eb2:	80 e8       	ldi	r24, 0x80	; 128
    3eb4:	90 e0       	ldi	r25, 0x00	; 0
    3eb6:	98 87       	std	Y+8, r25	; 0x08
    3eb8:	8f 83       	std	Y+7, r24	; 0x07
    u16 local_u16_NumOfOVF = (Copy_u32_Time * 1000UL) / local_u16_OVF_Time;
    3eba:	89 85       	ldd	r24, Y+9	; 0x09
    3ebc:	9a 85       	ldd	r25, Y+10	; 0x0a
    3ebe:	ab 85       	ldd	r26, Y+11	; 0x0b
    3ec0:	bc 85       	ldd	r27, Y+12	; 0x0c
    3ec2:	28 ee       	ldi	r18, 0xE8	; 232
    3ec4:	33 e0       	ldi	r19, 0x03	; 3
    3ec6:	40 e0       	ldi	r20, 0x00	; 0
    3ec8:	50 e0       	ldi	r21, 0x00	; 0
    3eca:	bc 01       	movw	r22, r24
    3ecc:	cd 01       	movw	r24, r26
    3ece:	0e 94 47 2e 	call	0x5c8e	; 0x5c8e <__mulsi3>
    3ed2:	7b 01       	movw	r14, r22
    3ed4:	8c 01       	movw	r16, r24
    3ed6:	8f 81       	ldd	r24, Y+7	; 0x07
    3ed8:	98 85       	ldd	r25, Y+8	; 0x08
    3eda:	9c 01       	movw	r18, r24
    3edc:	40 e0       	ldi	r20, 0x00	; 0
    3ede:	50 e0       	ldi	r21, 0x00	; 0
    3ee0:	c8 01       	movw	r24, r16
    3ee2:	b7 01       	movw	r22, r14
    3ee4:	0e 94 7a 2e 	call	0x5cf4	; 0x5cf4 <__udivmodsi4>
    3ee8:	da 01       	movw	r26, r20
    3eea:	c9 01       	movw	r24, r18
    3eec:	9e 83       	std	Y+6, r25	; 0x06
    3eee:	8d 83       	std	Y+5, r24	; 0x05
    u16 local_u16_proLoad = (((Copy_u32_Time * 1000UL) % local_u16_OVF_Time) * F_CPU) / PRESCALER;
    3ef0:	89 85       	ldd	r24, Y+9	; 0x09
    3ef2:	9a 85       	ldd	r25, Y+10	; 0x0a
    3ef4:	ab 85       	ldd	r26, Y+11	; 0x0b
    3ef6:	bc 85       	ldd	r27, Y+12	; 0x0c
    3ef8:	28 ee       	ldi	r18, 0xE8	; 232
    3efa:	33 e0       	ldi	r19, 0x03	; 3
    3efc:	40 e0       	ldi	r20, 0x00	; 0
    3efe:	50 e0       	ldi	r21, 0x00	; 0
    3f00:	bc 01       	movw	r22, r24
    3f02:	cd 01       	movw	r24, r26
    3f04:	0e 94 47 2e 	call	0x5c8e	; 0x5c8e <__mulsi3>
    3f08:	7b 01       	movw	r14, r22
    3f0a:	8c 01       	movw	r16, r24
    3f0c:	8f 81       	ldd	r24, Y+7	; 0x07
    3f0e:	98 85       	ldd	r25, Y+8	; 0x08
    3f10:	9c 01       	movw	r18, r24
    3f12:	40 e0       	ldi	r20, 0x00	; 0
    3f14:	50 e0       	ldi	r21, 0x00	; 0
    3f16:	c8 01       	movw	r24, r16
    3f18:	b7 01       	movw	r22, r14
    3f1a:	0e 94 7a 2e 	call	0x5cf4	; 0x5cf4 <__udivmodsi4>
    3f1e:	dc 01       	movw	r26, r24
    3f20:	cb 01       	movw	r24, r22
    3f22:	20 e0       	ldi	r18, 0x00	; 0
    3f24:	34 e2       	ldi	r19, 0x24	; 36
    3f26:	44 ef       	ldi	r20, 0xF4	; 244
    3f28:	50 e0       	ldi	r21, 0x00	; 0
    3f2a:	bc 01       	movw	r22, r24
    3f2c:	cd 01       	movw	r24, r26
    3f2e:	0e 94 47 2e 	call	0x5c8e	; 0x5c8e <__mulsi3>
    3f32:	dc 01       	movw	r26, r24
    3f34:	cb 01       	movw	r24, r22
    3f36:	20 e0       	ldi	r18, 0x00	; 0
    3f38:	32 e1       	ldi	r19, 0x12	; 18
    3f3a:	4a e7       	ldi	r20, 0x7A	; 122
    3f3c:	50 e0       	ldi	r21, 0x00	; 0
    3f3e:	bc 01       	movw	r22, r24
    3f40:	cd 01       	movw	r24, r26
    3f42:	0e 94 7a 2e 	call	0x5cf4	; 0x5cf4 <__udivmodsi4>
    3f46:	da 01       	movw	r26, r20
    3f48:	c9 01       	movw	r24, r18
    3f4a:	9c 83       	std	Y+4, r25	; 0x04
    3f4c:	8b 83       	std	Y+3, r24	; 0x03
    TIMER0_TCNT0_REG = 256 - local_u16_proLoad;
    3f4e:	e2 e5       	ldi	r30, 0x52	; 82
    3f50:	f0 e0       	ldi	r31, 0x00	; 0
    3f52:	8b 81       	ldd	r24, Y+3	; 0x03
    3f54:	81 95       	neg	r24
    3f56:	80 83       	st	Z, r24
    u16 local_u16_counter = 0;
    3f58:	1a 82       	std	Y+2, r1	; 0x02
    3f5a:	19 82       	std	Y+1, r1	; 0x01
    3f5c:	15 c0       	rjmp	.+42     	; 0x3f88 <Timers_enu_delay_ms+0x10c>
    while (local_u16_counter != (local_u16_NumOfOVF + 1))
    {
        while (GET_BIT(TIMER_TIFR_REG, TOV0) != 0)
        {
        SET_BIT(TIMER_TIFR_REG, TOV0);
    3f5e:	a8 e5       	ldi	r26, 0x58	; 88
    3f60:	b0 e0       	ldi	r27, 0x00	; 0
    3f62:	e8 e5       	ldi	r30, 0x58	; 88
    3f64:	f0 e0       	ldi	r31, 0x00	; 0
    3f66:	80 81       	ld	r24, Z
    3f68:	81 60       	ori	r24, 0x01	; 1
    3f6a:	8c 93       	st	X, r24
        local_u16_counter++;
    3f6c:	89 81       	ldd	r24, Y+1	; 0x01
    3f6e:	9a 81       	ldd	r25, Y+2	; 0x02
    3f70:	01 96       	adiw	r24, 0x01	; 1
    3f72:	9a 83       	std	Y+2, r25	; 0x02
    3f74:	89 83       	std	Y+1, r24	; 0x01
    u16 local_u16_proLoad = (((Copy_u32_Time * 1000UL) % local_u16_OVF_Time) * F_CPU) / PRESCALER;
    TIMER0_TCNT0_REG = 256 - local_u16_proLoad;
    u16 local_u16_counter = 0;
    while (local_u16_counter != (local_u16_NumOfOVF + 1))
    {
        while (GET_BIT(TIMER_TIFR_REG, TOV0) != 0)
    3f76:	e8 e5       	ldi	r30, 0x58	; 88
    3f78:	f0 e0       	ldi	r31, 0x00	; 0
    3f7a:	80 81       	ld	r24, Z
    3f7c:	88 2f       	mov	r24, r24
    3f7e:	90 e0       	ldi	r25, 0x00	; 0
    3f80:	81 70       	andi	r24, 0x01	; 1
    3f82:	90 70       	andi	r25, 0x00	; 0
    3f84:	88 23       	and	r24, r24
    3f86:	59 f7       	brne	.-42     	; 0x3f5e <Timers_enu_delay_ms+0xe2>
    u16 local_u16_OVF_Time = (256 * PRESCALER) / F_CPU;
    u16 local_u16_NumOfOVF = (Copy_u32_Time * 1000UL) / local_u16_OVF_Time;
    u16 local_u16_proLoad = (((Copy_u32_Time * 1000UL) % local_u16_OVF_Time) * F_CPU) / PRESCALER;
    TIMER0_TCNT0_REG = 256 - local_u16_proLoad;
    u16 local_u16_counter = 0;
    while (local_u16_counter != (local_u16_NumOfOVF + 1))
    3f88:	8d 81       	ldd	r24, Y+5	; 0x05
    3f8a:	9e 81       	ldd	r25, Y+6	; 0x06
    3f8c:	9c 01       	movw	r18, r24
    3f8e:	2f 5f       	subi	r18, 0xFF	; 255
    3f90:	3f 4f       	sbci	r19, 0xFF	; 255
    3f92:	89 81       	ldd	r24, Y+1	; 0x01
    3f94:	9a 81       	ldd	r25, Y+2	; 0x02
    3f96:	28 17       	cp	r18, r24
    3f98:	39 07       	cpc	r19, r25
    3f9a:	69 f7       	brne	.-38     	; 0x3f76 <Timers_enu_delay_ms+0xfa>
        {
        SET_BIT(TIMER_TIFR_REG, TOV0);
        local_u16_counter++;
        }
    }
    TIMER0_TCCR0_REG &= CLEAR_CLK_SOURCE;
    3f9c:	a3 e5       	ldi	r26, 0x53	; 83
    3f9e:	b0 e0       	ldi	r27, 0x00	; 0
    3fa0:	e3 e5       	ldi	r30, 0x53	; 83
    3fa2:	f0 e0       	ldi	r31, 0x00	; 0
    3fa4:	80 81       	ld	r24, Z
    3fa6:	88 7f       	andi	r24, 0xF8	; 248
    3fa8:	8c 93       	st	X, r24
    return STATE_OK;
    3faa:	81 e0       	ldi	r24, 0x01	; 1
}
    3fac:	2c 96       	adiw	r28, 0x0c	; 12
    3fae:	0f b6       	in	r0, 0x3f	; 63
    3fb0:	f8 94       	cli
    3fb2:	de bf       	out	0x3e, r29	; 62
    3fb4:	0f be       	out	0x3f, r0	; 63
    3fb6:	cd bf       	out	0x3d, r28	; 61
    3fb8:	cf 91       	pop	r28
    3fba:	df 91       	pop	r29
    3fbc:	1f 91       	pop	r17
    3fbe:	0f 91       	pop	r16
    3fc0:	ff 90       	pop	r15
    3fc2:	ef 90       	pop	r14
    3fc4:	08 95       	ret

00003fc6 <Timers_enu_SetTimerValue>:
ES_t Timers_enu_SetTimerValue(u8 Copy_u8_TimerNo,u16 Copy_u8_Value){
    3fc6:	df 93       	push	r29
    3fc8:	cf 93       	push	r28
    3fca:	00 d0       	rcall	.+0      	; 0x3fcc <Timers_enu_SetTimerValue+0x6>
    3fcc:	00 d0       	rcall	.+0      	; 0x3fce <Timers_enu_SetTimerValue+0x8>
    3fce:	00 d0       	rcall	.+0      	; 0x3fd0 <Timers_enu_SetTimerValue+0xa>
    3fd0:	cd b7       	in	r28, 0x3d	; 61
    3fd2:	de b7       	in	r29, 0x3e	; 62
    3fd4:	8a 83       	std	Y+2, r24	; 0x02
    3fd6:	7c 83       	std	Y+4, r23	; 0x04
    3fd8:	6b 83       	std	Y+3, r22	; 0x03
    u8 Local_u8_errorState = STATE_OK;
    3fda:	81 e0       	ldi	r24, 0x01	; 1
    3fdc:	89 83       	std	Y+1, r24	; 0x01
    if(Copy_u8_TimerNo < 3){
    3fde:	8a 81       	ldd	r24, Y+2	; 0x02
    3fe0:	83 30       	cpi	r24, 0x03	; 3
    3fe2:	20 f5       	brcc	.+72     	; 0x402c <Timers_enu_SetTimerValue+0x66>
        switch (Copy_u8_TimerNo)
    3fe4:	8a 81       	ldd	r24, Y+2	; 0x02
    3fe6:	28 2f       	mov	r18, r24
    3fe8:	30 e0       	ldi	r19, 0x00	; 0
    3fea:	3e 83       	std	Y+6, r19	; 0x06
    3fec:	2d 83       	std	Y+5, r18	; 0x05
    3fee:	8d 81       	ldd	r24, Y+5	; 0x05
    3ff0:	9e 81       	ldd	r25, Y+6	; 0x06
    3ff2:	81 30       	cpi	r24, 0x01	; 1
    3ff4:	91 05       	cpc	r25, r1
    3ff6:	71 f0       	breq	.+28     	; 0x4014 <Timers_enu_SetTimerValue+0x4e>
    3ff8:	2d 81       	ldd	r18, Y+5	; 0x05
    3ffa:	3e 81       	ldd	r19, Y+6	; 0x06
    3ffc:	22 30       	cpi	r18, 0x02	; 2
    3ffe:	31 05       	cpc	r19, r1
    4000:	81 f0       	breq	.+32     	; 0x4022 <Timers_enu_SetTimerValue+0x5c>
    4002:	8d 81       	ldd	r24, Y+5	; 0x05
    4004:	9e 81       	ldd	r25, Y+6	; 0x06
    4006:	00 97       	sbiw	r24, 0x00	; 0
    4008:	91 f4       	brne	.+36     	; 0x402e <Timers_enu_SetTimerValue+0x68>
        {
        case TIMER0:
            TIMER0_TCNT0_REG = Copy_u8_Value;
    400a:	e2 e5       	ldi	r30, 0x52	; 82
    400c:	f0 e0       	ldi	r31, 0x00	; 0
    400e:	8b 81       	ldd	r24, Y+3	; 0x03
    4010:	80 83       	st	Z, r24
    4012:	0d c0       	rjmp	.+26     	; 0x402e <Timers_enu_SetTimerValue+0x68>
        break;
        case TIMER1:
            TIMER1_TCNT1_REG = Copy_u8_Value;
    4014:	ec e4       	ldi	r30, 0x4C	; 76
    4016:	f0 e0       	ldi	r31, 0x00	; 0
    4018:	8b 81       	ldd	r24, Y+3	; 0x03
    401a:	9c 81       	ldd	r25, Y+4	; 0x04
    401c:	91 83       	std	Z+1, r25	; 0x01
    401e:	80 83       	st	Z, r24
    4020:	06 c0       	rjmp	.+12     	; 0x402e <Timers_enu_SetTimerValue+0x68>
        break;
        case TIMER2:
            TIMER2_TCNT2_REG = Copy_u8_Value;
    4022:	e4 e4       	ldi	r30, 0x44	; 68
    4024:	f0 e0       	ldi	r31, 0x00	; 0
    4026:	8b 81       	ldd	r24, Y+3	; 0x03
    4028:	80 83       	st	Z, r24
    402a:	01 c0       	rjmp	.+2      	; 0x402e <Timers_enu_SetTimerValue+0x68>
        break;
        }
    }else{
        Local_u8_errorState = STATE_NOT_OK;
    402c:	19 82       	std	Y+1, r1	; 0x01
    }
    return Local_u8_errorState;
    402e:	89 81       	ldd	r24, Y+1	; 0x01
}
    4030:	26 96       	adiw	r28, 0x06	; 6
    4032:	0f b6       	in	r0, 0x3f	; 63
    4034:	f8 94       	cli
    4036:	de bf       	out	0x3e, r29	; 62
    4038:	0f be       	out	0x3f, r0	; 63
    403a:	cd bf       	out	0x3d, r28	; 61
    403c:	cf 91       	pop	r28
    403e:	df 91       	pop	r29
    4040:	08 95       	ret

00004042 <Timers_enu_GetTimerValue>:
ES_t Timers_enu_GetTimerValue(u8 Copy_u8_TimerNo,u16 *Copy_u8_Value){
    4042:	df 93       	push	r29
    4044:	cf 93       	push	r28
    4046:	00 d0       	rcall	.+0      	; 0x4048 <Timers_enu_GetTimerValue+0x6>
    4048:	00 d0       	rcall	.+0      	; 0x404a <Timers_enu_GetTimerValue+0x8>
    404a:	00 d0       	rcall	.+0      	; 0x404c <Timers_enu_GetTimerValue+0xa>
    404c:	cd b7       	in	r28, 0x3d	; 61
    404e:	de b7       	in	r29, 0x3e	; 62
    4050:	8a 83       	std	Y+2, r24	; 0x02
    4052:	7c 83       	std	Y+4, r23	; 0x04
    4054:	6b 83       	std	Y+3, r22	; 0x03
    u8 Local_u8_errorState = STATE_OK;
    4056:	81 e0       	ldi	r24, 0x01	; 1
    4058:	89 83       	std	Y+1, r24	; 0x01
    if(Copy_u8_TimerNo < 3){
    405a:	8a 81       	ldd	r24, Y+2	; 0x02
    405c:	83 30       	cpi	r24, 0x03	; 3
    405e:	80 f5       	brcc	.+96     	; 0x40c0 <Timers_enu_GetTimerValue+0x7e>
        switch (Copy_u8_TimerNo)
    4060:	8a 81       	ldd	r24, Y+2	; 0x02
    4062:	28 2f       	mov	r18, r24
    4064:	30 e0       	ldi	r19, 0x00	; 0
    4066:	3e 83       	std	Y+6, r19	; 0x06
    4068:	2d 83       	std	Y+5, r18	; 0x05
    406a:	8d 81       	ldd	r24, Y+5	; 0x05
    406c:	9e 81       	ldd	r25, Y+6	; 0x06
    406e:	81 30       	cpi	r24, 0x01	; 1
    4070:	91 05       	cpc	r25, r1
    4072:	99 f0       	breq	.+38     	; 0x409a <Timers_enu_GetTimerValue+0x58>
    4074:	2d 81       	ldd	r18, Y+5	; 0x05
    4076:	3e 81       	ldd	r19, Y+6	; 0x06
    4078:	22 30       	cpi	r18, 0x02	; 2
    407a:	31 05       	cpc	r19, r1
    407c:	b9 f0       	breq	.+46     	; 0x40ac <Timers_enu_GetTimerValue+0x6a>
    407e:	8d 81       	ldd	r24, Y+5	; 0x05
    4080:	9e 81       	ldd	r25, Y+6	; 0x06
    4082:	00 97       	sbiw	r24, 0x00	; 0
    4084:	f1 f4       	brne	.+60     	; 0x40c2 <Timers_enu_GetTimerValue+0x80>
        {
        case TIMER0:
            *Copy_u8_Value = TIMER0_TCNT0_REG;
    4086:	e2 e5       	ldi	r30, 0x52	; 82
    4088:	f0 e0       	ldi	r31, 0x00	; 0
    408a:	80 81       	ld	r24, Z
    408c:	88 2f       	mov	r24, r24
    408e:	90 e0       	ldi	r25, 0x00	; 0
    4090:	eb 81       	ldd	r30, Y+3	; 0x03
    4092:	fc 81       	ldd	r31, Y+4	; 0x04
    4094:	91 83       	std	Z+1, r25	; 0x01
    4096:	80 83       	st	Z, r24
    4098:	14 c0       	rjmp	.+40     	; 0x40c2 <Timers_enu_GetTimerValue+0x80>
        break;
        case TIMER1:
            *Copy_u8_Value = TIMER1_TCNT1_REG;
    409a:	ec e4       	ldi	r30, 0x4C	; 76
    409c:	f0 e0       	ldi	r31, 0x00	; 0
    409e:	80 81       	ld	r24, Z
    40a0:	91 81       	ldd	r25, Z+1	; 0x01
    40a2:	eb 81       	ldd	r30, Y+3	; 0x03
    40a4:	fc 81       	ldd	r31, Y+4	; 0x04
    40a6:	91 83       	std	Z+1, r25	; 0x01
    40a8:	80 83       	st	Z, r24
    40aa:	0b c0       	rjmp	.+22     	; 0x40c2 <Timers_enu_GetTimerValue+0x80>
        break;
        case TIMER2:
            *Copy_u8_Value = TIMER2_TCNT2_REG;
    40ac:	e4 e4       	ldi	r30, 0x44	; 68
    40ae:	f0 e0       	ldi	r31, 0x00	; 0
    40b0:	80 81       	ld	r24, Z
    40b2:	88 2f       	mov	r24, r24
    40b4:	90 e0       	ldi	r25, 0x00	; 0
    40b6:	eb 81       	ldd	r30, Y+3	; 0x03
    40b8:	fc 81       	ldd	r31, Y+4	; 0x04
    40ba:	91 83       	std	Z+1, r25	; 0x01
    40bc:	80 83       	st	Z, r24
    40be:	01 c0       	rjmp	.+2      	; 0x40c2 <Timers_enu_GetTimerValue+0x80>
        break;
        }
    }else{
        Local_u8_errorState = STATE_NOT_OK;
    40c0:	19 82       	std	Y+1, r1	; 0x01
    }
    return Local_u8_errorState;
    40c2:	89 81       	ldd	r24, Y+1	; 0x01

}
    40c4:	26 96       	adiw	r28, 0x06	; 6
    40c6:	0f b6       	in	r0, 0x3f	; 63
    40c8:	f8 94       	cli
    40ca:	de bf       	out	0x3e, r29	; 62
    40cc:	0f be       	out	0x3f, r0	; 63
    40ce:	cd bf       	out	0x3d, r28	; 61
    40d0:	cf 91       	pop	r28
    40d2:	df 91       	pop	r29
    40d4:	08 95       	ret

000040d6 <Timers_enu_TimerSetCompareValue>:
ES_t Timers_enu_TimerSetCompareValue(u8 Copy_u8_TimerNo, u8 Copy_u8_Value){
    40d6:	df 93       	push	r29
    40d8:	cf 93       	push	r28
    40da:	00 d0       	rcall	.+0      	; 0x40dc <Timers_enu_TimerSetCompareValue+0x6>
    40dc:	00 d0       	rcall	.+0      	; 0x40de <Timers_enu_TimerSetCompareValue+0x8>
    40de:	0f 92       	push	r0
    40e0:	cd b7       	in	r28, 0x3d	; 61
    40e2:	de b7       	in	r29, 0x3e	; 62
    40e4:	8a 83       	std	Y+2, r24	; 0x02
    40e6:	6b 83       	std	Y+3, r22	; 0x03
    u8 Local_u8_errorState = STATE_OK;
    40e8:	81 e0       	ldi	r24, 0x01	; 1
    40ea:	89 83       	std	Y+1, r24	; 0x01
    switch (Copy_u8_TimerNo)
    40ec:	8a 81       	ldd	r24, Y+2	; 0x02
    40ee:	28 2f       	mov	r18, r24
    40f0:	30 e0       	ldi	r19, 0x00	; 0
    40f2:	3d 83       	std	Y+5, r19	; 0x05
    40f4:	2c 83       	std	Y+4, r18	; 0x04
    40f6:	8c 81       	ldd	r24, Y+4	; 0x04
    40f8:	9d 81       	ldd	r25, Y+5	; 0x05
    40fa:	00 97       	sbiw	r24, 0x00	; 0
    40fc:	31 f0       	breq	.+12     	; 0x410a <Timers_enu_TimerSetCompareValue+0x34>
    40fe:	2c 81       	ldd	r18, Y+4	; 0x04
    4100:	3d 81       	ldd	r19, Y+5	; 0x05
    4102:	22 30       	cpi	r18, 0x02	; 2
    4104:	31 05       	cpc	r19, r1
    4106:	31 f0       	breq	.+12     	; 0x4114 <Timers_enu_TimerSetCompareValue+0x3e>
    4108:	0a c0       	rjmp	.+20     	; 0x411e <Timers_enu_TimerSetCompareValue+0x48>
    {
    case TIMER0:TIMER0_OCR0_REG = Copy_u8_Value;break;
    410a:	ec e5       	ldi	r30, 0x5C	; 92
    410c:	f0 e0       	ldi	r31, 0x00	; 0
    410e:	8b 81       	ldd	r24, Y+3	; 0x03
    4110:	80 83       	st	Z, r24
    4112:	06 c0       	rjmp	.+12     	; 0x4120 <Timers_enu_TimerSetCompareValue+0x4a>
    case TIMER2:TIMER2_OCR2_REG = Copy_u8_Value;break;  
    4114:	e3 e4       	ldi	r30, 0x43	; 67
    4116:	f0 e0       	ldi	r31, 0x00	; 0
    4118:	8b 81       	ldd	r24, Y+3	; 0x03
    411a:	80 83       	st	Z, r24
    411c:	01 c0       	rjmp	.+2      	; 0x4120 <Timers_enu_TimerSetCompareValue+0x4a>
    default:Local_u8_errorState = STATE_NOT_OK;break;
    411e:	19 82       	std	Y+1, r1	; 0x01
    }
    return Local_u8_errorState;
    4120:	89 81       	ldd	r24, Y+1	; 0x01
}
    4122:	0f 90       	pop	r0
    4124:	0f 90       	pop	r0
    4126:	0f 90       	pop	r0
    4128:	0f 90       	pop	r0
    412a:	0f 90       	pop	r0
    412c:	cf 91       	pop	r28
    412e:	df 91       	pop	r29
    4130:	08 95       	ret

00004132 <Timers_enu_Timer1_setTopValue>:
ES_t Timers_enu_Timer1_setTopValue(u16 Copy_u16_Value){
    4132:	df 93       	push	r29
    4134:	cf 93       	push	r28
    4136:	00 d0       	rcall	.+0      	; 0x4138 <Timers_enu_Timer1_setTopValue+0x6>
    4138:	cd b7       	in	r28, 0x3d	; 61
    413a:	de b7       	in	r29, 0x3e	; 62
    413c:	9a 83       	std	Y+2, r25	; 0x02
    413e:	89 83       	std	Y+1, r24	; 0x01
        TIMER1_ICR1_REG = Copy_u16_Value;
    4140:	e6 e4       	ldi	r30, 0x46	; 70
    4142:	f0 e0       	ldi	r31, 0x00	; 0
    4144:	89 81       	ldd	r24, Y+1	; 0x01
    4146:	9a 81       	ldd	r25, Y+2	; 0x02
    4148:	91 83       	std	Z+1, r25	; 0x01
    414a:	80 83       	st	Z, r24
        return STATE_OK;
    414c:	81 e0       	ldi	r24, 0x01	; 1
}
    414e:	0f 90       	pop	r0
    4150:	0f 90       	pop	r0
    4152:	cf 91       	pop	r28
    4154:	df 91       	pop	r29
    4156:	08 95       	ret

00004158 <Timers_enu_Timer1SetCompareValue>:
ES_t Timers_enu_Timer1SetCompareValue(u8 Copy_u8_compareREG ,u16 Copy_u8_Value){
    4158:	df 93       	push	r29
    415a:	cf 93       	push	r28
    415c:	00 d0       	rcall	.+0      	; 0x415e <Timers_enu_Timer1SetCompareValue+0x6>
    415e:	00 d0       	rcall	.+0      	; 0x4160 <Timers_enu_Timer1SetCompareValue+0x8>
    4160:	00 d0       	rcall	.+0      	; 0x4162 <Timers_enu_Timer1SetCompareValue+0xa>
    4162:	cd b7       	in	r28, 0x3d	; 61
    4164:	de b7       	in	r29, 0x3e	; 62
    4166:	8a 83       	std	Y+2, r24	; 0x02
    4168:	7c 83       	std	Y+4, r23	; 0x04
    416a:	6b 83       	std	Y+3, r22	; 0x03
    u8 Local_u8_errorState = STATE_OK;
    416c:	81 e0       	ldi	r24, 0x01	; 1
    416e:	89 83       	std	Y+1, r24	; 0x01
    if(Copy_u8_compareREG < 2){
    4170:	8a 81       	ldd	r24, Y+2	; 0x02
    4172:	82 30       	cpi	r24, 0x02	; 2
    4174:	e8 f4       	brcc	.+58     	; 0x41b0 <Timers_enu_Timer1SetCompareValue+0x58>
        switch (Copy_u8_compareREG)
    4176:	8a 81       	ldd	r24, Y+2	; 0x02
    4178:	28 2f       	mov	r18, r24
    417a:	30 e0       	ldi	r19, 0x00	; 0
    417c:	3e 83       	std	Y+6, r19	; 0x06
    417e:	2d 83       	std	Y+5, r18	; 0x05
    4180:	8d 81       	ldd	r24, Y+5	; 0x05
    4182:	9e 81       	ldd	r25, Y+6	; 0x06
    4184:	00 97       	sbiw	r24, 0x00	; 0
    4186:	31 f0       	breq	.+12     	; 0x4194 <Timers_enu_Timer1SetCompareValue+0x3c>
    4188:	2d 81       	ldd	r18, Y+5	; 0x05
    418a:	3e 81       	ldd	r19, Y+6	; 0x06
    418c:	21 30       	cpi	r18, 0x01	; 1
    418e:	31 05       	cpc	r19, r1
    4190:	41 f0       	breq	.+16     	; 0x41a2 <Timers_enu_Timer1SetCompareValue+0x4a>
    4192:	0f c0       	rjmp	.+30     	; 0x41b2 <Timers_enu_Timer1SetCompareValue+0x5a>
        {
        case COMPARE_UNIT_A:
            TIMER1_OCR1A_REG = Copy_u8_Value;
    4194:	ea e4       	ldi	r30, 0x4A	; 74
    4196:	f0 e0       	ldi	r31, 0x00	; 0
    4198:	8b 81       	ldd	r24, Y+3	; 0x03
    419a:	9c 81       	ldd	r25, Y+4	; 0x04
    419c:	91 83       	std	Z+1, r25	; 0x01
    419e:	80 83       	st	Z, r24
    41a0:	08 c0       	rjmp	.+16     	; 0x41b2 <Timers_enu_Timer1SetCompareValue+0x5a>
        break;
        case COMPARE_UNIT_B:
            TIMER1_OCR1B_REG = Copy_u8_Value;
    41a2:	e8 e4       	ldi	r30, 0x48	; 72
    41a4:	f0 e0       	ldi	r31, 0x00	; 0
    41a6:	8b 81       	ldd	r24, Y+3	; 0x03
    41a8:	9c 81       	ldd	r25, Y+4	; 0x04
    41aa:	91 83       	std	Z+1, r25	; 0x01
    41ac:	80 83       	st	Z, r24
    41ae:	01 c0       	rjmp	.+2      	; 0x41b2 <Timers_enu_Timer1SetCompareValue+0x5a>
        break;
        }
    }else{
        Local_u8_errorState = STATE_NOT_OK;
    41b0:	19 82       	std	Y+1, r1	; 0x01
    }
    return Local_u8_errorState;
    41b2:	89 81       	ldd	r24, Y+1	; 0x01
}
    41b4:	26 96       	adiw	r28, 0x06	; 6
    41b6:	0f b6       	in	r0, 0x3f	; 63
    41b8:	f8 94       	cli
    41ba:	de bf       	out	0x3e, r29	; 62
    41bc:	0f be       	out	0x3f, r0	; 63
    41be:	cd bf       	out	0x3d, r28	; 61
    41c0:	cf 91       	pop	r28
    41c2:	df 91       	pop	r29
    41c4:	08 95       	ret

000041c6 <Timers_enu_Stop>:
ES_t Timers_enu_Stop(u8 Copy_u8_TimerNo){
    41c6:	df 93       	push	r29
    41c8:	cf 93       	push	r28
    41ca:	00 d0       	rcall	.+0      	; 0x41cc <Timers_enu_Stop+0x6>
    41cc:	00 d0       	rcall	.+0      	; 0x41ce <Timers_enu_Stop+0x8>
    41ce:	cd b7       	in	r28, 0x3d	; 61
    41d0:	de b7       	in	r29, 0x3e	; 62
    41d2:	8a 83       	std	Y+2, r24	; 0x02
    u8 Local_u8_errorState = STATE_OK;
    41d4:	81 e0       	ldi	r24, 0x01	; 1
    41d6:	89 83       	std	Y+1, r24	; 0x01
    if(Copy_u8_TimerNo<3){
    41d8:	8a 81       	ldd	r24, Y+2	; 0x02
    41da:	83 30       	cpi	r24, 0x03	; 3
    41dc:	08 f0       	brcs	.+2      	; 0x41e0 <Timers_enu_Stop+0x1a>
    41de:	4d c0       	rjmp	.+154    	; 0x427a <Timers_enu_Stop+0xb4>
        switch (Copy_u8_TimerNo)
    41e0:	8a 81       	ldd	r24, Y+2	; 0x02
    41e2:	28 2f       	mov	r18, r24
    41e4:	30 e0       	ldi	r19, 0x00	; 0
    41e6:	3c 83       	std	Y+4, r19	; 0x04
    41e8:	2b 83       	std	Y+3, r18	; 0x03
    41ea:	8b 81       	ldd	r24, Y+3	; 0x03
    41ec:	9c 81       	ldd	r25, Y+4	; 0x04
    41ee:	81 30       	cpi	r24, 0x01	; 1
    41f0:	91 05       	cpc	r25, r1
    41f2:	c9 f0       	breq	.+50     	; 0x4226 <Timers_enu_Stop+0x60>
    41f4:	eb 81       	ldd	r30, Y+3	; 0x03
    41f6:	fc 81       	ldd	r31, Y+4	; 0x04
    41f8:	e2 30       	cpi	r30, 0x02	; 2
    41fa:	f1 05       	cpc	r31, r1
    41fc:	79 f1       	breq	.+94     	; 0x425c <Timers_enu_Stop+0x96>
    41fe:	2b 81       	ldd	r18, Y+3	; 0x03
    4200:	3c 81       	ldd	r19, Y+4	; 0x04
    4202:	21 15       	cp	r18, r1
    4204:	31 05       	cpc	r19, r1
    4206:	d1 f5       	brne	.+116    	; 0x427c <Timers_enu_Stop+0xb6>
        {
        case TIMER0:
        TIMER0_TCCR0_REG &= CLEAR_CLK_SOURCE;
    4208:	a3 e5       	ldi	r26, 0x53	; 83
    420a:	b0 e0       	ldi	r27, 0x00	; 0
    420c:	e3 e5       	ldi	r30, 0x53	; 83
    420e:	f0 e0       	ldi	r31, 0x00	; 0
    4210:	80 81       	ld	r24, Z
    4212:	88 7f       	andi	r24, 0xF8	; 248
    4214:	8c 93       	st	X, r24
        TIMER0_TCNT0_REG = TIMER0_OCR0_REG = 0;
    4216:	a2 e5       	ldi	r26, 0x52	; 82
    4218:	b0 e0       	ldi	r27, 0x00	; 0
    421a:	ec e5       	ldi	r30, 0x5C	; 92
    421c:	f0 e0       	ldi	r31, 0x00	; 0
    421e:	10 82       	st	Z, r1
    4220:	80 81       	ld	r24, Z
    4222:	8c 93       	st	X, r24
    4224:	2b c0       	rjmp	.+86     	; 0x427c <Timers_enu_Stop+0xb6>
        break;
        case TIMER1:
        TIMER1_TCCR1B_REG &= CLEAR_CLK_SOURCE;
    4226:	ae e4       	ldi	r26, 0x4E	; 78
    4228:	b0 e0       	ldi	r27, 0x00	; 0
    422a:	ee e4       	ldi	r30, 0x4E	; 78
    422c:	f0 e0       	ldi	r31, 0x00	; 0
    422e:	80 81       	ld	r24, Z
    4230:	88 7f       	andi	r24, 0xF8	; 248
    4232:	8c 93       	st	X, r24
        TIMER1_TCNT1_REG = TIMER1_OCR1A_REG = TIMER1_OCR1B_REG = 0;
    4234:	2c e4       	ldi	r18, 0x4C	; 76
    4236:	30 e0       	ldi	r19, 0x00	; 0
    4238:	aa e4       	ldi	r26, 0x4A	; 74
    423a:	b0 e0       	ldi	r27, 0x00	; 0
    423c:	e8 e4       	ldi	r30, 0x48	; 72
    423e:	f0 e0       	ldi	r31, 0x00	; 0
    4240:	11 82       	std	Z+1, r1	; 0x01
    4242:	10 82       	st	Z, r1
    4244:	80 81       	ld	r24, Z
    4246:	91 81       	ldd	r25, Z+1	; 0x01
    4248:	11 96       	adiw	r26, 0x01	; 1
    424a:	9c 93       	st	X, r25
    424c:	8e 93       	st	-X, r24
    424e:	8d 91       	ld	r24, X+
    4250:	9c 91       	ld	r25, X
    4252:	11 97       	sbiw	r26, 0x01	; 1
    4254:	f9 01       	movw	r30, r18
    4256:	91 83       	std	Z+1, r25	; 0x01
    4258:	80 83       	st	Z, r24
    425a:	10 c0       	rjmp	.+32     	; 0x427c <Timers_enu_Stop+0xb6>
        break;
        case TIMER2:
        TIMER2_TCCR2_REG &= CLEAR_CLK_SOURCE;
    425c:	a5 e4       	ldi	r26, 0x45	; 69
    425e:	b0 e0       	ldi	r27, 0x00	; 0
    4260:	e5 e4       	ldi	r30, 0x45	; 69
    4262:	f0 e0       	ldi	r31, 0x00	; 0
    4264:	80 81       	ld	r24, Z
    4266:	88 7f       	andi	r24, 0xF8	; 248
    4268:	8c 93       	st	X, r24
        TIMER2_TCNT2_REG = TIMER2_OCR2_REG = 0;
    426a:	a4 e4       	ldi	r26, 0x44	; 68
    426c:	b0 e0       	ldi	r27, 0x00	; 0
    426e:	e3 e4       	ldi	r30, 0x43	; 67
    4270:	f0 e0       	ldi	r31, 0x00	; 0
    4272:	10 82       	st	Z, r1
    4274:	80 81       	ld	r24, Z
    4276:	8c 93       	st	X, r24
    4278:	01 c0       	rjmp	.+2      	; 0x427c <Timers_enu_Stop+0xb6>
        break;
        }
    }else{
        Local_u8_errorState =STATE_NOT_OK;
    427a:	19 82       	std	Y+1, r1	; 0x01
    }
    return Local_u8_errorState;
    427c:	89 81       	ldd	r24, Y+1	; 0x01
}
    427e:	0f 90       	pop	r0
    4280:	0f 90       	pop	r0
    4282:	0f 90       	pop	r0
    4284:	0f 90       	pop	r0
    4286:	cf 91       	pop	r28
    4288:	df 91       	pop	r29
    428a:	08 95       	ret

0000428c <Timers_enu_ICUReadValue>:

/*************** ICU ******************/
ES_t Timers_enu_ICUReadValue(u16 * Copy_ICR1_Value){
    428c:	df 93       	push	r29
    428e:	cf 93       	push	r28
    4290:	00 d0       	rcall	.+0      	; 0x4292 <Timers_enu_ICUReadValue+0x6>
    4292:	0f 92       	push	r0
    4294:	cd b7       	in	r28, 0x3d	; 61
    4296:	de b7       	in	r29, 0x3e	; 62
    4298:	9b 83       	std	Y+3, r25	; 0x03
    429a:	8a 83       	std	Y+2, r24	; 0x02
    u8 Local_u8_errorState = STATE_OK;
    429c:	81 e0       	ldi	r24, 0x01	; 1
    429e:	89 83       	std	Y+1, r24	; 0x01
    if(Copy_ICR1_Value != NULL){
    42a0:	8a 81       	ldd	r24, Y+2	; 0x02
    42a2:	9b 81       	ldd	r25, Y+3	; 0x03
    42a4:	00 97       	sbiw	r24, 0x00	; 0
    42a6:	49 f0       	breq	.+18     	; 0x42ba <Timers_enu_ICUReadValue+0x2e>
        *Copy_ICR1_Value = TIMER1_ICR1_REG;
    42a8:	e6 e4       	ldi	r30, 0x46	; 70
    42aa:	f0 e0       	ldi	r31, 0x00	; 0
    42ac:	80 81       	ld	r24, Z
    42ae:	91 81       	ldd	r25, Z+1	; 0x01
    42b0:	ea 81       	ldd	r30, Y+2	; 0x02
    42b2:	fb 81       	ldd	r31, Y+3	; 0x03
    42b4:	91 83       	std	Z+1, r25	; 0x01
    42b6:	80 83       	st	Z, r24
    42b8:	01 c0       	rjmp	.+2      	; 0x42bc <Timers_enu_ICUReadValue+0x30>
    }else{
        Local_u8_errorState = STATE_NOT_OK;
    42ba:	19 82       	std	Y+1, r1	; 0x01
    }
    return Local_u8_errorState;
    42bc:	89 81       	ldd	r24, Y+1	; 0x01
}
    42be:	0f 90       	pop	r0
    42c0:	0f 90       	pop	r0
    42c2:	0f 90       	pop	r0
    42c4:	cf 91       	pop	r28
    42c6:	df 91       	pop	r29
    42c8:	08 95       	ret

000042ca <Timers_enu_ICUSetTriggerEdge>:
ES_t Timers_enu_ICUSetTriggerEdge(u8 Copy_Trigger){
    42ca:	df 93       	push	r29
    42cc:	cf 93       	push	r28
    42ce:	00 d0       	rcall	.+0      	; 0x42d0 <Timers_enu_ICUSetTriggerEdge+0x6>
    42d0:	00 d0       	rcall	.+0      	; 0x42d2 <Timers_enu_ICUSetTriggerEdge+0x8>
    42d2:	cd b7       	in	r28, 0x3d	; 61
    42d4:	de b7       	in	r29, 0x3e	; 62
    42d6:	8a 83       	std	Y+2, r24	; 0x02
    u8 Local_u8_errorState = STATE_OK;
    42d8:	81 e0       	ldi	r24, 0x01	; 1
    42da:	89 83       	std	Y+1, r24	; 0x01
    switch (Copy_Trigger)
    42dc:	8a 81       	ldd	r24, Y+2	; 0x02
    42de:	28 2f       	mov	r18, r24
    42e0:	30 e0       	ldi	r19, 0x00	; 0
    42e2:	3c 83       	std	Y+4, r19	; 0x04
    42e4:	2b 83       	std	Y+3, r18	; 0x03
    42e6:	8b 81       	ldd	r24, Y+3	; 0x03
    42e8:	9c 81       	ldd	r25, Y+4	; 0x04
    42ea:	00 97       	sbiw	r24, 0x00	; 0
    42ec:	69 f0       	breq	.+26     	; 0x4308 <Timers_enu_ICUSetTriggerEdge+0x3e>
    42ee:	2b 81       	ldd	r18, Y+3	; 0x03
    42f0:	3c 81       	ldd	r19, Y+4	; 0x04
    42f2:	21 30       	cpi	r18, 0x01	; 1
    42f4:	31 05       	cpc	r19, r1
    42f6:	81 f4       	brne	.+32     	; 0x4318 <Timers_enu_ICUSetTriggerEdge+0x4e>
    {
    case ICU_RISING_EDGE:SET_BIT(TIMER1_TCCR1B_REG, ICES1);break;
    42f8:	ae e4       	ldi	r26, 0x4E	; 78
    42fa:	b0 e0       	ldi	r27, 0x00	; 0
    42fc:	ee e4       	ldi	r30, 0x4E	; 78
    42fe:	f0 e0       	ldi	r31, 0x00	; 0
    4300:	80 81       	ld	r24, Z
    4302:	80 64       	ori	r24, 0x40	; 64
    4304:	8c 93       	st	X, r24
    4306:	09 c0       	rjmp	.+18     	; 0x431a <Timers_enu_ICUSetTriggerEdge+0x50>
    case ICU_FALLING_EDGE:CLR_BIT(TIMER1_TCCR1B_REG, ICES1);break;
    4308:	ae e4       	ldi	r26, 0x4E	; 78
    430a:	b0 e0       	ldi	r27, 0x00	; 0
    430c:	ee e4       	ldi	r30, 0x4E	; 78
    430e:	f0 e0       	ldi	r31, 0x00	; 0
    4310:	80 81       	ld	r24, Z
    4312:	8f 7b       	andi	r24, 0xBF	; 191
    4314:	8c 93       	st	X, r24
    4316:	01 c0       	rjmp	.+2      	; 0x431a <Timers_enu_ICUSetTriggerEdge+0x50>
    default:Local_u8_errorState = STATE_NOT_OK ;break;
    4318:	19 82       	std	Y+1, r1	; 0x01
    }
    return Local_u8_errorState;
    431a:	89 81       	ldd	r24, Y+1	; 0x01
}
    431c:	0f 90       	pop	r0
    431e:	0f 90       	pop	r0
    4320:	0f 90       	pop	r0
    4322:	0f 90       	pop	r0
    4324:	cf 91       	pop	r28
    4326:	df 91       	pop	r29
    4328:	08 95       	ret

0000432a <Timers_enu_ICUSetCallBack>:
ES_t Timers_enu_ICUSetCallBack(void (*Copy_pf_ICU)(void)){
    432a:	df 93       	push	r29
    432c:	cf 93       	push	r28
    432e:	00 d0       	rcall	.+0      	; 0x4330 <Timers_enu_ICUSetCallBack+0x6>
    4330:	0f 92       	push	r0
    4332:	cd b7       	in	r28, 0x3d	; 61
    4334:	de b7       	in	r29, 0x3e	; 62
    4336:	9b 83       	std	Y+3, r25	; 0x03
    4338:	8a 83       	std	Y+2, r24	; 0x02
    u8 Local_u8_errorState = STATE_OK;
    433a:	81 e0       	ldi	r24, 0x01	; 1
    433c:	89 83       	std	Y+1, r24	; 0x01
    if(Copy_pf_ICU != NULL){
    433e:	8a 81       	ldd	r24, Y+2	; 0x02
    4340:	9b 81       	ldd	r25, Y+3	; 0x03
    4342:	00 97       	sbiw	r24, 0x00	; 0
    4344:	39 f0       	breq	.+14     	; 0x4354 <Timers_enu_ICUSetCallBack+0x2a>
        Timers_pf_Timer1[3]  = Copy_pf_ICU;
    4346:	8a 81       	ldd	r24, Y+2	; 0x02
    4348:	9b 81       	ldd	r25, Y+3	; 0x03
    434a:	90 93 62 01 	sts	0x0162, r25
    434e:	80 93 61 01 	sts	0x0161, r24
    4352:	01 c0       	rjmp	.+2      	; 0x4356 <Timers_enu_ICUSetCallBack+0x2c>
    }else{
        Local_u8_errorState =STATE_NOT_OK;
    4354:	19 82       	std	Y+1, r1	; 0x01
    }
    return Local_u8_errorState;
    4356:	89 81       	ldd	r24, Y+1	; 0x01
}
    4358:	0f 90       	pop	r0
    435a:	0f 90       	pop	r0
    435c:	0f 90       	pop	r0
    435e:	cf 91       	pop	r28
    4360:	df 91       	pop	r29
    4362:	08 95       	ret

00004364 <Timers_enu_ICUInterruptEnabled>:
ES_t Timers_enu_ICUInterruptEnabled(){
    4364:	df 93       	push	r29
    4366:	cf 93       	push	r28
    4368:	cd b7       	in	r28, 0x3d	; 61
    436a:	de b7       	in	r29, 0x3e	; 62
    SET_BIT(TIMER_TIMSK_REG,TICIE1);
    436c:	a9 e5       	ldi	r26, 0x59	; 89
    436e:	b0 e0       	ldi	r27, 0x00	; 0
    4370:	e9 e5       	ldi	r30, 0x59	; 89
    4372:	f0 e0       	ldi	r31, 0x00	; 0
    4374:	80 81       	ld	r24, Z
    4376:	80 62       	ori	r24, 0x20	; 32
    4378:	8c 93       	st	X, r24
    return STATE_OK;
    437a:	81 e0       	ldi	r24, 0x01	; 1
}
    437c:	cf 91       	pop	r28
    437e:	df 91       	pop	r29
    4380:	08 95       	ret

00004382 <Timers_enu_ICUInterruptDisabled>:
ES_t Timers_enu_ICUInterruptDisabled(){
    4382:	df 93       	push	r29
    4384:	cf 93       	push	r28
    4386:	cd b7       	in	r28, 0x3d	; 61
    4388:	de b7       	in	r29, 0x3e	; 62
    CLR_BIT(TIMER_TIMSK_REG,TICIE1);
    438a:	a9 e5       	ldi	r26, 0x59	; 89
    438c:	b0 e0       	ldi	r27, 0x00	; 0
    438e:	e9 e5       	ldi	r30, 0x59	; 89
    4390:	f0 e0       	ldi	r31, 0x00	; 0
    4392:	80 81       	ld	r24, Z
    4394:	8f 7d       	andi	r24, 0xDF	; 223
    4396:	8c 93       	st	X, r24
    return STATE_OK;
    4398:	81 e0       	ldi	r24, 0x01	; 1
}
    439a:	cf 91       	pop	r28
    439c:	df 91       	pop	r29
    439e:	08 95       	ret

000043a0 <__vector_4>:
/*****ISR(Timer2) CTC Mode*****/
ISR(TIMER2_COMP){
    43a0:	1f 92       	push	r1
    43a2:	0f 92       	push	r0
    43a4:	0f b6       	in	r0, 0x3f	; 63
    43a6:	0f 92       	push	r0
    43a8:	11 24       	eor	r1, r1
    43aa:	2f 93       	push	r18
    43ac:	3f 93       	push	r19
    43ae:	4f 93       	push	r20
    43b0:	5f 93       	push	r21
    43b2:	6f 93       	push	r22
    43b4:	7f 93       	push	r23
    43b6:	8f 93       	push	r24
    43b8:	9f 93       	push	r25
    43ba:	af 93       	push	r26
    43bc:	bf 93       	push	r27
    43be:	ef 93       	push	r30
    43c0:	ff 93       	push	r31
    43c2:	df 93       	push	r29
    43c4:	cf 93       	push	r28
    43c6:	cd b7       	in	r28, 0x3d	; 61
    43c8:	de b7       	in	r29, 0x3e	; 62
    if (Timers_pf_Timer2[CTC_MODE] != NULL)
    43ca:	80 91 65 01 	lds	r24, 0x0165
    43ce:	90 91 66 01 	lds	r25, 0x0166
    43d2:	00 97       	sbiw	r24, 0x00	; 0
    43d4:	29 f0       	breq	.+10     	; 0x43e0 <__vector_4+0x40>
        Timers_pf_Timer2[CTC_MODE]();
    43d6:	e0 91 65 01 	lds	r30, 0x0165
    43da:	f0 91 66 01 	lds	r31, 0x0166
    43de:	09 95       	icall
}
    43e0:	cf 91       	pop	r28
    43e2:	df 91       	pop	r29
    43e4:	ff 91       	pop	r31
    43e6:	ef 91       	pop	r30
    43e8:	bf 91       	pop	r27
    43ea:	af 91       	pop	r26
    43ec:	9f 91       	pop	r25
    43ee:	8f 91       	pop	r24
    43f0:	7f 91       	pop	r23
    43f2:	6f 91       	pop	r22
    43f4:	5f 91       	pop	r21
    43f6:	4f 91       	pop	r20
    43f8:	3f 91       	pop	r19
    43fa:	2f 91       	pop	r18
    43fc:	0f 90       	pop	r0
    43fe:	0f be       	out	0x3f, r0	; 63
    4400:	0f 90       	pop	r0
    4402:	1f 90       	pop	r1
    4404:	18 95       	reti

00004406 <__vector_5>:
/*****ISR(Timer1) Normal Mode*****/
ISR(TIMER2_OVF){
    4406:	1f 92       	push	r1
    4408:	0f 92       	push	r0
    440a:	0f b6       	in	r0, 0x3f	; 63
    440c:	0f 92       	push	r0
    440e:	11 24       	eor	r1, r1
    4410:	2f 93       	push	r18
    4412:	3f 93       	push	r19
    4414:	4f 93       	push	r20
    4416:	5f 93       	push	r21
    4418:	6f 93       	push	r22
    441a:	7f 93       	push	r23
    441c:	8f 93       	push	r24
    441e:	9f 93       	push	r25
    4420:	af 93       	push	r26
    4422:	bf 93       	push	r27
    4424:	ef 93       	push	r30
    4426:	ff 93       	push	r31
    4428:	df 93       	push	r29
    442a:	cf 93       	push	r28
    442c:	cd b7       	in	r28, 0x3d	; 61
    442e:	de b7       	in	r29, 0x3e	; 62
    if (Timers_pf_Timer2[NORMAL_MODE] != NULL)
    4430:	80 91 63 01 	lds	r24, 0x0163
    4434:	90 91 64 01 	lds	r25, 0x0164
    4438:	00 97       	sbiw	r24, 0x00	; 0
    443a:	29 f0       	breq	.+10     	; 0x4446 <__vector_5+0x40>
        Timers_pf_Timer2[NORMAL_MODE]();
    443c:	e0 91 63 01 	lds	r30, 0x0163
    4440:	f0 91 64 01 	lds	r31, 0x0164
    4444:	09 95       	icall
}
    4446:	cf 91       	pop	r28
    4448:	df 91       	pop	r29
    444a:	ff 91       	pop	r31
    444c:	ef 91       	pop	r30
    444e:	bf 91       	pop	r27
    4450:	af 91       	pop	r26
    4452:	9f 91       	pop	r25
    4454:	8f 91       	pop	r24
    4456:	7f 91       	pop	r23
    4458:	6f 91       	pop	r22
    445a:	5f 91       	pop	r21
    445c:	4f 91       	pop	r20
    445e:	3f 91       	pop	r19
    4460:	2f 91       	pop	r18
    4462:	0f 90       	pop	r0
    4464:	0f be       	out	0x3f, r0	; 63
    4466:	0f 90       	pop	r0
    4468:	1f 90       	pop	r1
    446a:	18 95       	reti

0000446c <__vector_6>:
/*****ISR(Timer1) ICU *****/
ISR(TIMER1_CAPT){
    446c:	1f 92       	push	r1
    446e:	0f 92       	push	r0
    4470:	0f b6       	in	r0, 0x3f	; 63
    4472:	0f 92       	push	r0
    4474:	11 24       	eor	r1, r1
    4476:	2f 93       	push	r18
    4478:	3f 93       	push	r19
    447a:	4f 93       	push	r20
    447c:	5f 93       	push	r21
    447e:	6f 93       	push	r22
    4480:	7f 93       	push	r23
    4482:	8f 93       	push	r24
    4484:	9f 93       	push	r25
    4486:	af 93       	push	r26
    4488:	bf 93       	push	r27
    448a:	ef 93       	push	r30
    448c:	ff 93       	push	r31
    448e:	df 93       	push	r29
    4490:	cf 93       	push	r28
    4492:	cd b7       	in	r28, 0x3d	; 61
    4494:	de b7       	in	r29, 0x3e	; 62
    if(Timers_pf_Timer1[3] != NULL)
    4496:	80 91 61 01 	lds	r24, 0x0161
    449a:	90 91 62 01 	lds	r25, 0x0162
    449e:	00 97       	sbiw	r24, 0x00	; 0
    44a0:	29 f0       	breq	.+10     	; 0x44ac <__vector_6+0x40>
        Timers_pf_Timer1[3]();
    44a2:	e0 91 61 01 	lds	r30, 0x0161
    44a6:	f0 91 62 01 	lds	r31, 0x0162
    44aa:	09 95       	icall
}
    44ac:	cf 91       	pop	r28
    44ae:	df 91       	pop	r29
    44b0:	ff 91       	pop	r31
    44b2:	ef 91       	pop	r30
    44b4:	bf 91       	pop	r27
    44b6:	af 91       	pop	r26
    44b8:	9f 91       	pop	r25
    44ba:	8f 91       	pop	r24
    44bc:	7f 91       	pop	r23
    44be:	6f 91       	pop	r22
    44c0:	5f 91       	pop	r21
    44c2:	4f 91       	pop	r20
    44c4:	3f 91       	pop	r19
    44c6:	2f 91       	pop	r18
    44c8:	0f 90       	pop	r0
    44ca:	0f be       	out	0x3f, r0	; 63
    44cc:	0f 90       	pop	r0
    44ce:	1f 90       	pop	r1
    44d0:	18 95       	reti

000044d2 <__vector_7>:
/*****ISR(Timer1) CTC Mode A*****/
ISR(TIMER1_COMPA){
    44d2:	1f 92       	push	r1
    44d4:	0f 92       	push	r0
    44d6:	0f b6       	in	r0, 0x3f	; 63
    44d8:	0f 92       	push	r0
    44da:	11 24       	eor	r1, r1
    44dc:	2f 93       	push	r18
    44de:	3f 93       	push	r19
    44e0:	4f 93       	push	r20
    44e2:	5f 93       	push	r21
    44e4:	6f 93       	push	r22
    44e6:	7f 93       	push	r23
    44e8:	8f 93       	push	r24
    44ea:	9f 93       	push	r25
    44ec:	af 93       	push	r26
    44ee:	bf 93       	push	r27
    44f0:	ef 93       	push	r30
    44f2:	ff 93       	push	r31
    44f4:	df 93       	push	r29
    44f6:	cf 93       	push	r28
    44f8:	cd b7       	in	r28, 0x3d	; 61
    44fa:	de b7       	in	r29, 0x3e	; 62
    if (Timers_pf_Timer1[CTC_MODE_A] != NULL)
    44fc:	80 91 5d 01 	lds	r24, 0x015D
    4500:	90 91 5e 01 	lds	r25, 0x015E
    4504:	00 97       	sbiw	r24, 0x00	; 0
    4506:	29 f0       	breq	.+10     	; 0x4512 <__vector_7+0x40>
        Timers_pf_Timer1[CTC_MODE_A]();
    4508:	e0 91 5d 01 	lds	r30, 0x015D
    450c:	f0 91 5e 01 	lds	r31, 0x015E
    4510:	09 95       	icall
}
    4512:	cf 91       	pop	r28
    4514:	df 91       	pop	r29
    4516:	ff 91       	pop	r31
    4518:	ef 91       	pop	r30
    451a:	bf 91       	pop	r27
    451c:	af 91       	pop	r26
    451e:	9f 91       	pop	r25
    4520:	8f 91       	pop	r24
    4522:	7f 91       	pop	r23
    4524:	6f 91       	pop	r22
    4526:	5f 91       	pop	r21
    4528:	4f 91       	pop	r20
    452a:	3f 91       	pop	r19
    452c:	2f 91       	pop	r18
    452e:	0f 90       	pop	r0
    4530:	0f be       	out	0x3f, r0	; 63
    4532:	0f 90       	pop	r0
    4534:	1f 90       	pop	r1
    4536:	18 95       	reti

00004538 <__vector_8>:
/*****ISR(Timer1) CTC Mode B*****/
ISR(TIMER1_COMPB){
    4538:	1f 92       	push	r1
    453a:	0f 92       	push	r0
    453c:	0f b6       	in	r0, 0x3f	; 63
    453e:	0f 92       	push	r0
    4540:	11 24       	eor	r1, r1
    4542:	2f 93       	push	r18
    4544:	3f 93       	push	r19
    4546:	4f 93       	push	r20
    4548:	5f 93       	push	r21
    454a:	6f 93       	push	r22
    454c:	7f 93       	push	r23
    454e:	8f 93       	push	r24
    4550:	9f 93       	push	r25
    4552:	af 93       	push	r26
    4554:	bf 93       	push	r27
    4556:	ef 93       	push	r30
    4558:	ff 93       	push	r31
    455a:	df 93       	push	r29
    455c:	cf 93       	push	r28
    455e:	cd b7       	in	r28, 0x3d	; 61
    4560:	de b7       	in	r29, 0x3e	; 62
    if (Timers_pf_Timer1[CTC_MODE_B] != NULL)
    4562:	80 91 5f 01 	lds	r24, 0x015F
    4566:	90 91 60 01 	lds	r25, 0x0160
    456a:	00 97       	sbiw	r24, 0x00	; 0
    456c:	29 f0       	breq	.+10     	; 0x4578 <__vector_8+0x40>
        Timers_pf_Timer1[CTC_MODE_B]();
    456e:	e0 91 5f 01 	lds	r30, 0x015F
    4572:	f0 91 60 01 	lds	r31, 0x0160
    4576:	09 95       	icall
}
    4578:	cf 91       	pop	r28
    457a:	df 91       	pop	r29
    457c:	ff 91       	pop	r31
    457e:	ef 91       	pop	r30
    4580:	bf 91       	pop	r27
    4582:	af 91       	pop	r26
    4584:	9f 91       	pop	r25
    4586:	8f 91       	pop	r24
    4588:	7f 91       	pop	r23
    458a:	6f 91       	pop	r22
    458c:	5f 91       	pop	r21
    458e:	4f 91       	pop	r20
    4590:	3f 91       	pop	r19
    4592:	2f 91       	pop	r18
    4594:	0f 90       	pop	r0
    4596:	0f be       	out	0x3f, r0	; 63
    4598:	0f 90       	pop	r0
    459a:	1f 90       	pop	r1
    459c:	18 95       	reti

0000459e <__vector_9>:
/*****ISR(Timer1) Normal Mode*****/
ISR(TIMER1_OVF){
    459e:	1f 92       	push	r1
    45a0:	0f 92       	push	r0
    45a2:	0f b6       	in	r0, 0x3f	; 63
    45a4:	0f 92       	push	r0
    45a6:	11 24       	eor	r1, r1
    45a8:	2f 93       	push	r18
    45aa:	3f 93       	push	r19
    45ac:	4f 93       	push	r20
    45ae:	5f 93       	push	r21
    45b0:	6f 93       	push	r22
    45b2:	7f 93       	push	r23
    45b4:	8f 93       	push	r24
    45b6:	9f 93       	push	r25
    45b8:	af 93       	push	r26
    45ba:	bf 93       	push	r27
    45bc:	ef 93       	push	r30
    45be:	ff 93       	push	r31
    45c0:	df 93       	push	r29
    45c2:	cf 93       	push	r28
    45c4:	cd b7       	in	r28, 0x3d	; 61
    45c6:	de b7       	in	r29, 0x3e	; 62
    if (Timers_pf_Timer1[NORMAL_MODE] != NULL)
    45c8:	80 91 5b 01 	lds	r24, 0x015B
    45cc:	90 91 5c 01 	lds	r25, 0x015C
    45d0:	00 97       	sbiw	r24, 0x00	; 0
    45d2:	29 f0       	breq	.+10     	; 0x45de <__vector_9+0x40>
        Timers_pf_Timer1[NORMAL_MODE]();
    45d4:	e0 91 5b 01 	lds	r30, 0x015B
    45d8:	f0 91 5c 01 	lds	r31, 0x015C
    45dc:	09 95       	icall
}
    45de:	cf 91       	pop	r28
    45e0:	df 91       	pop	r29
    45e2:	ff 91       	pop	r31
    45e4:	ef 91       	pop	r30
    45e6:	bf 91       	pop	r27
    45e8:	af 91       	pop	r26
    45ea:	9f 91       	pop	r25
    45ec:	8f 91       	pop	r24
    45ee:	7f 91       	pop	r23
    45f0:	6f 91       	pop	r22
    45f2:	5f 91       	pop	r21
    45f4:	4f 91       	pop	r20
    45f6:	3f 91       	pop	r19
    45f8:	2f 91       	pop	r18
    45fa:	0f 90       	pop	r0
    45fc:	0f be       	out	0x3f, r0	; 63
    45fe:	0f 90       	pop	r0
    4600:	1f 90       	pop	r1
    4602:	18 95       	reti

00004604 <__vector_10>:
/*****ISR(Timer0) CTC Mode*****/
ISR(TIMER0_COMP){
    4604:	1f 92       	push	r1
    4606:	0f 92       	push	r0
    4608:	0f b6       	in	r0, 0x3f	; 63
    460a:	0f 92       	push	r0
    460c:	11 24       	eor	r1, r1
    460e:	2f 93       	push	r18
    4610:	3f 93       	push	r19
    4612:	4f 93       	push	r20
    4614:	5f 93       	push	r21
    4616:	6f 93       	push	r22
    4618:	7f 93       	push	r23
    461a:	8f 93       	push	r24
    461c:	9f 93       	push	r25
    461e:	af 93       	push	r26
    4620:	bf 93       	push	r27
    4622:	ef 93       	push	r30
    4624:	ff 93       	push	r31
    4626:	df 93       	push	r29
    4628:	cf 93       	push	r28
    462a:	cd b7       	in	r28, 0x3d	; 61
    462c:	de b7       	in	r29, 0x3e	; 62
    if (Timers_pf_Timer0[CTC_MODE] != NULL)
    462e:	80 91 59 01 	lds	r24, 0x0159
    4632:	90 91 5a 01 	lds	r25, 0x015A
    4636:	00 97       	sbiw	r24, 0x00	; 0
    4638:	29 f0       	breq	.+10     	; 0x4644 <__vector_10+0x40>
        Timers_pf_Timer0[CTC_MODE]();
    463a:	e0 91 59 01 	lds	r30, 0x0159
    463e:	f0 91 5a 01 	lds	r31, 0x015A
    4642:	09 95       	icall
}
    4644:	cf 91       	pop	r28
    4646:	df 91       	pop	r29
    4648:	ff 91       	pop	r31
    464a:	ef 91       	pop	r30
    464c:	bf 91       	pop	r27
    464e:	af 91       	pop	r26
    4650:	9f 91       	pop	r25
    4652:	8f 91       	pop	r24
    4654:	7f 91       	pop	r23
    4656:	6f 91       	pop	r22
    4658:	5f 91       	pop	r21
    465a:	4f 91       	pop	r20
    465c:	3f 91       	pop	r19
    465e:	2f 91       	pop	r18
    4660:	0f 90       	pop	r0
    4662:	0f be       	out	0x3f, r0	; 63
    4664:	0f 90       	pop	r0
    4666:	1f 90       	pop	r1
    4668:	18 95       	reti

0000466a <__vector_11>:
/*****ISR(Timer0) Normal Mode*****/
ISR(TIMER0_OVF){
    466a:	1f 92       	push	r1
    466c:	0f 92       	push	r0
    466e:	0f b6       	in	r0, 0x3f	; 63
    4670:	0f 92       	push	r0
    4672:	11 24       	eor	r1, r1
    4674:	2f 93       	push	r18
    4676:	3f 93       	push	r19
    4678:	4f 93       	push	r20
    467a:	5f 93       	push	r21
    467c:	6f 93       	push	r22
    467e:	7f 93       	push	r23
    4680:	8f 93       	push	r24
    4682:	9f 93       	push	r25
    4684:	af 93       	push	r26
    4686:	bf 93       	push	r27
    4688:	ef 93       	push	r30
    468a:	ff 93       	push	r31
    468c:	df 93       	push	r29
    468e:	cf 93       	push	r28
    4690:	cd b7       	in	r28, 0x3d	; 61
    4692:	de b7       	in	r29, 0x3e	; 62
    if (Timers_pf_Timer0[NORMAL_MODE] != NULL)
    4694:	80 91 57 01 	lds	r24, 0x0157
    4698:	90 91 58 01 	lds	r25, 0x0158
    469c:	00 97       	sbiw	r24, 0x00	; 0
    469e:	29 f0       	breq	.+10     	; 0x46aa <__vector_11+0x40>
        Timers_pf_Timer0[NORMAL_MODE]();
    46a0:	e0 91 57 01 	lds	r30, 0x0157
    46a4:	f0 91 58 01 	lds	r31, 0x0158
    46a8:	09 95       	icall
}
    46aa:	cf 91       	pop	r28
    46ac:	df 91       	pop	r29
    46ae:	ff 91       	pop	r31
    46b0:	ef 91       	pop	r30
    46b2:	bf 91       	pop	r27
    46b4:	af 91       	pop	r26
    46b6:	9f 91       	pop	r25
    46b8:	8f 91       	pop	r24
    46ba:	7f 91       	pop	r23
    46bc:	6f 91       	pop	r22
    46be:	5f 91       	pop	r21
    46c0:	4f 91       	pop	r20
    46c2:	3f 91       	pop	r19
    46c4:	2f 91       	pop	r18
    46c6:	0f 90       	pop	r0
    46c8:	0f be       	out	0x3f, r0	; 63
    46ca:	0f 90       	pop	r0
    46cc:	1f 90       	pop	r1
    46ce:	18 95       	reti

000046d0 <SPI_enu_Init>:
#include"../../1-MCAL/DIO/DIO_interface.h"

#include"SPI_Config.h"
#include"SPI_Private.h"

ES_t SPI_enu_Init(void){
    46d0:	df 93       	push	r29
    46d2:	cf 93       	push	r28
    46d4:	cd b7       	in	r28, 0x3d	; 61
    46d6:	de b7       	in	r29, 0x3e	; 62
    //Mode
    #if SPI_MODE == SPI_MASTER
    //MOSI --> OUTPUT
    DIO_enu_SetPinDirection(DIO_U8_PORTB,DIO_U8_PIN5,DIO_U8_OUTPUT);
    46d8:	81 e0       	ldi	r24, 0x01	; 1
    46da:	65 e0       	ldi	r22, 0x05	; 5
    46dc:	41 e0       	ldi	r20, 0x01	; 1
    46de:	0e 94 48 28 	call	0x5090	; 0x5090 <DIO_enu_SetPinDirection>
    //MISO --> INPUT
    DIO_enu_SetPinDirection(DIO_U8_PORTB,DIO_U8_PIN6,DIO_U8_INPUT);
    46e2:	81 e0       	ldi	r24, 0x01	; 1
    46e4:	66 e0       	ldi	r22, 0x06	; 6
    46e6:	40 e0       	ldi	r20, 0x00	; 0
    46e8:	0e 94 48 28 	call	0x5090	; 0x5090 <DIO_enu_SetPinDirection>
    //CLK --> OUTPUT
    DIO_enu_SetPinDirection(DIO_U8_PORTB,DIO_U8_PIN7,DIO_U8_OUTPUT);
    46ec:	81 e0       	ldi	r24, 0x01	; 1
    46ee:	67 e0       	ldi	r22, 0x07	; 7
    46f0:	41 e0       	ldi	r20, 0x01	; 1
    46f2:	0e 94 48 28 	call	0x5090	; 0x5090 <DIO_enu_SetPinDirection>
    //SS --> OUTPUT
    DIO_enu_SetPinDirection(DIO_U8_PORTB,DIO_U8_PIN4,DIO_U8_OUTPUT);
    46f6:	81 e0       	ldi	r24, 0x01	; 1
    46f8:	64 e0       	ldi	r22, 0x04	; 4
    46fa:	41 e0       	ldi	r20, 0x01	; 1
    46fc:	0e 94 48 28 	call	0x5090	; 0x5090 <DIO_enu_SetPinDirection>
    DIO_enu_SetPinValue(DIO_U8_PORTB,DIO_U8_PIN4,DIO_U8_HIGH);
    4700:	81 e0       	ldi	r24, 0x01	; 1
    4702:	64 e0       	ldi	r22, 0x04	; 4
    4704:	41 e0       	ldi	r20, 0x01	; 1
    4706:	0e 94 72 29 	call	0x52e4	; 0x52e4 <DIO_enu_SetPinValue>
    SET_BIT(SPI_SPCR,MSTR);
    470a:	ad e2       	ldi	r26, 0x2D	; 45
    470c:	b0 e0       	ldi	r27, 0x00	; 0
    470e:	ed e2       	ldi	r30, 0x2D	; 45
    4710:	f0 e0       	ldi	r31, 0x00	; 0
    4712:	80 81       	ld	r24, Z
    4714:	80 61       	ori	r24, 0x10	; 16
    4716:	8c 93       	st	X, r24
    DIO_enu_SetPinDirection(DIO_U8_PORTB,DIO_U8_PIN4,DIO_U8_INPUT);
    CLR_BIT(SPI_SPCR,MSTR);
    #endif
    //Data Order
    #if SPI_DATA_ORDER == LSB
    SET_BIT(SPI_SPCR,DORD);
    4718:	ad e2       	ldi	r26, 0x2D	; 45
    471a:	b0 e0       	ldi	r27, 0x00	; 0
    471c:	ed e2       	ldi	r30, 0x2D	; 45
    471e:	f0 e0       	ldi	r31, 0x00	; 0
    4720:	80 81       	ld	r24, Z
    4722:	80 62       	ori	r24, 0x20	; 32
    4724:	8c 93       	st	X, r24
    #elif  SPI_DATA_ORDER == MSB
    CLR_BIT(SPI_SPCR,DORD);
    #endif
    //Clock Polarity 
    #if SPI_CLOCK_POLARITY == LEADING_RISING
    CLR_BIT(SPI_SPCR,CPOL);
    4726:	ad e2       	ldi	r26, 0x2D	; 45
    4728:	b0 e0       	ldi	r27, 0x00	; 0
    472a:	ed e2       	ldi	r30, 0x2D	; 45
    472c:	f0 e0       	ldi	r31, 0x00	; 0
    472e:	80 81       	ld	r24, Z
    4730:	87 7f       	andi	r24, 0xF7	; 247
    4732:	8c 93       	st	X, r24
    #endif
    //Clock Phase 
    #if SPI_CLOCK_PHASE== LEADING_SAMPLE
    CLR_BIT(SPI_SPCR,CPHA);
    #elif SPI_CLOCK_PHASE== LEADING_SETUP
    SET_BIT(SPI_SPCR,CPHA);
    4734:	ad e2       	ldi	r26, 0x2D	; 45
    4736:	b0 e0       	ldi	r27, 0x00	; 0
    4738:	ed e2       	ldi	r30, 0x2D	; 45
    473a:	f0 e0       	ldi	r31, 0x00	; 0
    473c:	80 81       	ld	r24, Z
    473e:	84 60       	ori	r24, 0x04	; 4
    4740:	8c 93       	st	X, r24
    #elif SPI_CLOCK_PRESCALER == DIV_64
    SET_BIT(SPI_SPCR,SPR0);
    SET_BIT(SPI_SPCR,SPR1);
    SET_BIT(SPI_SPSR,SPI2X);
    #elif SPI_CLOCK_PRESCALER == DIV_128
    SET_BIT(SPI_SPCR,SPR0);
    4742:	ad e2       	ldi	r26, 0x2D	; 45
    4744:	b0 e0       	ldi	r27, 0x00	; 0
    4746:	ed e2       	ldi	r30, 0x2D	; 45
    4748:	f0 e0       	ldi	r31, 0x00	; 0
    474a:	80 81       	ld	r24, Z
    474c:	81 60       	ori	r24, 0x01	; 1
    474e:	8c 93       	st	X, r24
    SET_BIT(SPI_SPCR,SPR1);
    4750:	ad e2       	ldi	r26, 0x2D	; 45
    4752:	b0 e0       	ldi	r27, 0x00	; 0
    4754:	ed e2       	ldi	r30, 0x2D	; 45
    4756:	f0 e0       	ldi	r31, 0x00	; 0
    4758:	80 81       	ld	r24, Z
    475a:	82 60       	ori	r24, 0x02	; 2
    475c:	8c 93       	st	X, r24
    CLR_BIT(SPI_SPSR,SPI2X);
    475e:	ae e2       	ldi	r26, 0x2E	; 46
    4760:	b0 e0       	ldi	r27, 0x00	; 0
    4762:	ee e2       	ldi	r30, 0x2E	; 46
    4764:	f0 e0       	ldi	r31, 0x00	; 0
    4766:	80 81       	ld	r24, Z
    4768:	8e 7f       	andi	r24, 0xFE	; 254
    476a:	8c 93       	st	X, r24
    #endif
    //Enable SPI
    SET_BIT(SPI_SPCR,SPE);
    476c:	ad e2       	ldi	r26, 0x2D	; 45
    476e:	b0 e0       	ldi	r27, 0x00	; 0
    4770:	ed e2       	ldi	r30, 0x2D	; 45
    4772:	f0 e0       	ldi	r31, 0x00	; 0
    4774:	80 81       	ld	r24, Z
    4776:	80 64       	ori	r24, 0x40	; 64
    4778:	8c 93       	st	X, r24
    return STATE_OK;
    477a:	81 e0       	ldi	r24, 0x01	; 1
}
    477c:	cf 91       	pop	r28
    477e:	df 91       	pop	r29
    4780:	08 95       	ret

00004782 <SPI_enu_Transceive>:
ES_t SPI_enu_Transceive(u8 Copy_u8_Data ,u8 *Copy_u8_recievedData){
    4782:	df 93       	push	r29
    4784:	cf 93       	push	r28
    4786:	00 d0       	rcall	.+0      	; 0x4788 <SPI_enu_Transceive+0x6>
    4788:	0f 92       	push	r0
    478a:	cd b7       	in	r28, 0x3d	; 61
    478c:	de b7       	in	r29, 0x3e	; 62
    478e:	89 83       	std	Y+1, r24	; 0x01
    4790:	7b 83       	std	Y+3, r23	; 0x03
    4792:	6a 83       	std	Y+2, r22	; 0x02
        //Send Data
        SPI_SPDR = Copy_u8_Data;
    4794:	ef e2       	ldi	r30, 0x2F	; 47
    4796:	f0 e0       	ldi	r31, 0x00	; 0
    4798:	89 81       	ldd	r24, Y+1	; 0x01
    479a:	80 83       	st	Z, r24
        while ((!GET_BIT(SPI_SPSR,SPIF)));
    479c:	ee e2       	ldi	r30, 0x2E	; 46
    479e:	f0 e0       	ldi	r31, 0x00	; 0
    47a0:	80 81       	ld	r24, Z
    47a2:	88 23       	and	r24, r24
    47a4:	dc f7       	brge	.-10     	; 0x479c <SPI_enu_Transceive+0x1a>
        //Receive Data
        *Copy_u8_recievedData = SPI_SPDR;
    47a6:	ef e2       	ldi	r30, 0x2F	; 47
    47a8:	f0 e0       	ldi	r31, 0x00	; 0
    47aa:	80 81       	ld	r24, Z
    47ac:	ea 81       	ldd	r30, Y+2	; 0x02
    47ae:	fb 81       	ldd	r31, Y+3	; 0x03
    47b0:	80 83       	st	Z, r24
        return STATE_OK;
    47b2:	81 e0       	ldi	r24, 0x01	; 1
}
    47b4:	0f 90       	pop	r0
    47b6:	0f 90       	pop	r0
    47b8:	0f 90       	pop	r0
    47ba:	cf 91       	pop	r28
    47bc:	df 91       	pop	r29
    47be:	08 95       	ret

000047c0 <SPI_enu_Disable>:
ES_t SPI_enu_Disable(void){
    47c0:	df 93       	push	r29
    47c2:	cf 93       	push	r28
    47c4:	cd b7       	in	r28, 0x3d	; 61
    47c6:	de b7       	in	r29, 0x3e	; 62
	CLR_BIT(SPI_SPCR,SPE);
    47c8:	ad e2       	ldi	r26, 0x2D	; 45
    47ca:	b0 e0       	ldi	r27, 0x00	; 0
    47cc:	ed e2       	ldi	r30, 0x2D	; 45
    47ce:	f0 e0       	ldi	r31, 0x00	; 0
    47d0:	80 81       	ld	r24, Z
    47d2:	8f 7b       	andi	r24, 0xBF	; 191
    47d4:	8c 93       	st	X, r24
	return STATE_OK;
    47d6:	81 e0       	ldi	r24, 0x01	; 1
}
    47d8:	cf 91       	pop	r28
    47da:	df 91       	pop	r29
    47dc:	08 95       	ret

000047de <I2C_enu_clearAndCheckFlag>:
#include"../../1-MCAL/WDT/WDT_Interface.h"

#include"I2C_Config.h"
#include"I2C_Private.h"

static void I2C_enu_clearAndCheckFlag(void){
    47de:	df 93       	push	r29
    47e0:	cf 93       	push	r28
    47e2:	cd b7       	in	r28, 0x3d	; 61
    47e4:	de b7       	in	r29, 0x3e	; 62
    //Clear Flag
    SET_BIT(I2C_TWCR,TWINT);
    47e6:	a6 e5       	ldi	r26, 0x56	; 86
    47e8:	b0 e0       	ldi	r27, 0x00	; 0
    47ea:	e6 e5       	ldi	r30, 0x56	; 86
    47ec:	f0 e0       	ldi	r31, 0x00	; 0
    47ee:	80 81       	ld	r24, Z
    47f0:	80 68       	ori	r24, 0x80	; 128
    47f2:	8c 93       	st	X, r24
    //Wait Flag
    while((!GET_BIT(I2C_TWCR,TWINT)));
    47f4:	e6 e5       	ldi	r30, 0x56	; 86
    47f6:	f0 e0       	ldi	r31, 0x00	; 0
    47f8:	80 81       	ld	r24, Z
    47fa:	88 23       	and	r24, r24
    47fc:	dc f7       	brge	.-10     	; 0x47f4 <I2C_enu_clearAndCheckFlag+0x16>
}
    47fe:	cf 91       	pop	r28
    4800:	df 91       	pop	r29
    4802:	08 95       	ret

00004804 <I2C_enu_Init>:
ES_t I2C_enu_Init(void){
    4804:	df 93       	push	r29
    4806:	cf 93       	push	r28
    4808:	cd b7       	in	r28, 0x3d	; 61
    480a:	de b7       	in	r29, 0x3e	; 62
    3- Enable ACK
    4- Enable I2C
*/
    #if I2C_MODE == I2C_MASTER
    //1-Select Prescaler
    CLR_BIT(I2C_TWSR,TWPS0);
    480c:	a1 e2       	ldi	r26, 0x21	; 33
    480e:	b0 e0       	ldi	r27, 0x00	; 0
    4810:	e1 e2       	ldi	r30, 0x21	; 33
    4812:	f0 e0       	ldi	r31, 0x00	; 0
    4814:	80 81       	ld	r24, Z
    4816:	8e 7f       	andi	r24, 0xFE	; 254
    4818:	8c 93       	st	X, r24
    CLR_BIT(I2C_TWSR,TWPS1);
    481a:	a1 e2       	ldi	r26, 0x21	; 33
    481c:	b0 e0       	ldi	r27, 0x00	; 0
    481e:	e1 e2       	ldi	r30, 0x21	; 33
    4820:	f0 e0       	ldi	r31, 0x00	; 0
    4822:	80 81       	ld	r24, Z
    4824:	8d 7f       	andi	r24, 0xFD	; 253
    4826:	8c 93       	st	X, r24
    //2-Set TWBR REG
    I2C_TWBR = ((F_CPU/I2C_SPEED)-16)/(2*I2C_PRESCALER);
    4828:	e0 e2       	ldi	r30, 0x20	; 32
    482a:	f0 e0       	ldi	r31, 0x00	; 0
    482c:	88 e3       	ldi	r24, 0x38	; 56
    482e:	80 83       	st	Z, r24
    //3- Enable ACK
    SET_BIT(I2C_TWCR,TWEA);
    4830:	a6 e5       	ldi	r26, 0x56	; 86
    4832:	b0 e0       	ldi	r27, 0x00	; 0
    4834:	e6 e5       	ldi	r30, 0x56	; 86
    4836:	f0 e0       	ldi	r31, 0x00	; 0
    4838:	80 81       	ld	r24, Z
    483a:	80 64       	ori	r24, 0x40	; 64
    483c:	8c 93       	st	X, r24
    //4- Enable I2C
    SET_BIT(I2C_TWCR,TWEN);
    483e:	a6 e5       	ldi	r26, 0x56	; 86
    4840:	b0 e0       	ldi	r27, 0x00	; 0
    4842:	e6 e5       	ldi	r30, 0x56	; 86
    4844:	f0 e0       	ldi	r31, 0x00	; 0
    4846:	80 81       	ld	r24, Z
    4848:	84 60       	ori	r24, 0x04	; 4
    484a:	8c 93       	st	X, r24
    //1- Enable ACK
    SET_BIT(I2C_TWCR,TWEA);
    //2- Enable I2C
    SET_BIT(I2C_TWCR,TWEN);
    #endif
    return STATE_OK;
    484c:	81 e0       	ldi	r24, 0x01	; 1
}
    484e:	cf 91       	pop	r28
    4850:	df 91       	pop	r29
    4852:	08 95       	ret

00004854 <I2C_enu_setSlaveAddress>:
ES_t I2C_enu_setSlaveAddress(u8 Copy_u8_slaveAddress){
    4854:	df 93       	push	r29
    4856:	cf 93       	push	r28
    4858:	0f 92       	push	r0
    485a:	cd b7       	in	r28, 0x3d	; 61
    485c:	de b7       	in	r29, 0x3e	; 62
    485e:	89 83       	std	Y+1, r24	; 0x01
    // Set Slave Address
    I2C_TWAR = (Copy_u8_slaveAddress<<1);
    4860:	e2 e2       	ldi	r30, 0x22	; 34
    4862:	f0 e0       	ldi	r31, 0x00	; 0
    4864:	89 81       	ldd	r24, Y+1	; 0x01
    4866:	88 0f       	add	r24, r24
    4868:	80 83       	st	Z, r24
    return STATE_OK;
    486a:	81 e0       	ldi	r24, 0x01	; 1
}
    486c:	0f 90       	pop	r0
    486e:	cf 91       	pop	r28
    4870:	df 91       	pop	r29
    4872:	08 95       	ret

00004874 <I2C_enu_Start>:
ES_t I2C_enu_Start(void){
    4874:	df 93       	push	r29
    4876:	cf 93       	push	r28
    4878:	cd b7       	in	r28, 0x3d	; 61
    487a:	de b7       	in	r29, 0x3e	; 62
    //1- Enable Start Condition
    SET_BIT(I2C_TWCR,TWSTA);
    487c:	a6 e5       	ldi	r26, 0x56	; 86
    487e:	b0 e0       	ldi	r27, 0x00	; 0
    4880:	e6 e5       	ldi	r30, 0x56	; 86
    4882:	f0 e0       	ldi	r31, 0x00	; 0
    4884:	80 81       	ld	r24, Z
    4886:	80 62       	ori	r24, 0x20	; 32
    4888:	8c 93       	st	X, r24
    I2C_enu_clearAndCheckFlag();
    488a:	0e 94 ef 23 	call	0x47de	; 0x47de <I2C_enu_clearAndCheckFlag>
    return STATE_OK;
    488e:	81 e0       	ldi	r24, 0x01	; 1
}
    4890:	cf 91       	pop	r28
    4892:	df 91       	pop	r29
    4894:	08 95       	ret

00004896 <I2C_enu_Stop>:
ES_t I2C_enu_Stop(void){
    4896:	df 93       	push	r29
    4898:	cf 93       	push	r28
    489a:	cd b7       	in	r28, 0x3d	; 61
    489c:	de b7       	in	r29, 0x3e	; 62
    //1- Enable Stop Condition
    SET_BIT(I2C_TWCR,TWSTO);
    489e:	a6 e5       	ldi	r26, 0x56	; 86
    48a0:	b0 e0       	ldi	r27, 0x00	; 0
    48a2:	e6 e5       	ldi	r30, 0x56	; 86
    48a4:	f0 e0       	ldi	r31, 0x00	; 0
    48a6:	80 81       	ld	r24, Z
    48a8:	80 61       	ori	r24, 0x10	; 16
    48aa:	8c 93       	st	X, r24
    //2- Clear Flag
    SET_BIT(I2C_TWCR,TWINT);
    48ac:	a6 e5       	ldi	r26, 0x56	; 86
    48ae:	b0 e0       	ldi	r27, 0x00	; 0
    48b0:	e6 e5       	ldi	r30, 0x56	; 86
    48b2:	f0 e0       	ldi	r31, 0x00	; 0
    48b4:	80 81       	ld	r24, Z
    48b6:	80 68       	ori	r24, 0x80	; 128
    48b8:	8c 93       	st	X, r24
    return STATE_OK;
    48ba:	81 e0       	ldi	r24, 0x01	; 1
}
    48bc:	cf 91       	pop	r28
    48be:	df 91       	pop	r29
    48c0:	08 95       	ret

000048c2 <I2C_enu_writeData>:
ES_t I2C_enu_writeData(u16 Copy_u8_slaveAddress ,u8 Copy_u8_Data){
    48c2:	df 93       	push	r29
    48c4:	cf 93       	push	r28
    48c6:	00 d0       	rcall	.+0      	; 0x48c8 <I2C_enu_writeData+0x6>
    48c8:	0f 92       	push	r0
    48ca:	cd b7       	in	r28, 0x3d	; 61
    48cc:	de b7       	in	r29, 0x3e	; 62
    48ce:	9a 83       	std	Y+2, r25	; 0x02
    48d0:	89 83       	std	Y+1, r24	; 0x01
    48d2:	6b 83       	std	Y+3, r22	; 0x03
    if (Copy_u8_slaveAddress != NONE)
    48d4:	89 81       	ldd	r24, Y+1	; 0x01
    48d6:	9a 81       	ldd	r25, Y+2	; 0x02
    48d8:	23 e0       	ldi	r18, 0x03	; 3
    48da:	88 3e       	cpi	r24, 0xE8	; 232
    48dc:	92 07       	cpc	r25, r18
    48de:	a9 f0       	breq	.+42     	; 0x490a <I2C_enu_writeData+0x48>
    {
        // 1- Write Slave Address
        I2C_TWDR = (Copy_u8_slaveAddress << 1);
    48e0:	e3 e2       	ldi	r30, 0x23	; 35
    48e2:	f0 e0       	ldi	r31, 0x00	; 0
    48e4:	89 81       	ldd	r24, Y+1	; 0x01
    48e6:	88 0f       	add	r24, r24
    48e8:	80 83       	st	Z, r24
        // 2-Set Write Operation
        CLR_BIT(I2C_TWDR, TWD0);
    48ea:	a3 e2       	ldi	r26, 0x23	; 35
    48ec:	b0 e0       	ldi	r27, 0x00	; 0
    48ee:	e3 e2       	ldi	r30, 0x23	; 35
    48f0:	f0 e0       	ldi	r31, 0x00	; 0
    48f2:	80 81       	ld	r24, Z
    48f4:	8e 7f       	andi	r24, 0xFE	; 254
    48f6:	8c 93       	st	X, r24
        // 3-Start Bit
        CLR_BIT(I2C_TWCR, TWSTA);
    48f8:	a6 e5       	ldi	r26, 0x56	; 86
    48fa:	b0 e0       	ldi	r27, 0x00	; 0
    48fc:	e6 e5       	ldi	r30, 0x56	; 86
    48fe:	f0 e0       	ldi	r31, 0x00	; 0
    4900:	80 81       	ld	r24, Z
    4902:	8f 7d       	andi	r24, 0xDF	; 223
    4904:	8c 93       	st	X, r24
        I2C_enu_clearAndCheckFlag();
    4906:	0e 94 ef 23 	call	0x47de	; 0x47de <I2C_enu_clearAndCheckFlag>
    }
        // 4- Write Data
        I2C_TWDR = Copy_u8_Data;
    490a:	e3 e2       	ldi	r30, 0x23	; 35
    490c:	f0 e0       	ldi	r31, 0x00	; 0
    490e:	8b 81       	ldd	r24, Y+3	; 0x03
    4910:	80 83       	st	Z, r24
        I2C_enu_clearAndCheckFlag();
    4912:	0e 94 ef 23 	call	0x47de	; 0x47de <I2C_enu_clearAndCheckFlag>
    return STATE_OK;
    4916:	81 e0       	ldi	r24, 0x01	; 1
}
    4918:	0f 90       	pop	r0
    491a:	0f 90       	pop	r0
    491c:	0f 90       	pop	r0
    491e:	cf 91       	pop	r28
    4920:	df 91       	pop	r29
    4922:	08 95       	ret

00004924 <I2C_enu_readData>:
ES_t I2C_enu_readData(u8 Copy_u8_slaveAddress,u8 *Copy_pu8_receivedByte){
    4924:	df 93       	push	r29
    4926:	cf 93       	push	r28
    4928:	00 d0       	rcall	.+0      	; 0x492a <I2C_enu_readData+0x6>
    492a:	00 d0       	rcall	.+0      	; 0x492c <I2C_enu_readData+0x8>
    492c:	cd b7       	in	r28, 0x3d	; 61
    492e:	de b7       	in	r29, 0x3e	; 62
    4930:	8a 83       	std	Y+2, r24	; 0x02
    4932:	7c 83       	std	Y+4, r23	; 0x04
    4934:	6b 83       	std	Y+3, r22	; 0x03
    u8 Local_u8_errorState = STATE_OK;
    4936:	81 e0       	ldi	r24, 0x01	; 1
    4938:	89 83       	std	Y+1, r24	; 0x01
    if(Copy_pu8_receivedByte != NULL){
    493a:	8b 81       	ldd	r24, Y+3	; 0x03
    493c:	9c 81       	ldd	r25, Y+4	; 0x04
    493e:	00 97       	sbiw	r24, 0x00	; 0
    4940:	39 f1       	breq	.+78     	; 0x4990 <I2C_enu_readData+0x6c>
        #if I2C_MODE == I2C_MASTER
        //1- Write Slave Address
        I2C_TWDR = (Copy_u8_slaveAddress<<1);
    4942:	e3 e2       	ldi	r30, 0x23	; 35
    4944:	f0 e0       	ldi	r31, 0x00	; 0
    4946:	8a 81       	ldd	r24, Y+2	; 0x02
    4948:	88 0f       	add	r24, r24
    494a:	80 83       	st	Z, r24
        //2- Set Read Operation
        SET_BIT(I2C_TWDR,TWD0);
    494c:	a3 e2       	ldi	r26, 0x23	; 35
    494e:	b0 e0       	ldi	r27, 0x00	; 0
    4950:	e3 e2       	ldi	r30, 0x23	; 35
    4952:	f0 e0       	ldi	r31, 0x00	; 0
    4954:	80 81       	ld	r24, Z
    4956:	81 60       	ori	r24, 0x01	; 1
    4958:	8c 93       	st	X, r24
        //3-Start Bit
        CLR_BIT(I2C_TWCR,TWSTA);
    495a:	a6 e5       	ldi	r26, 0x56	; 86
    495c:	b0 e0       	ldi	r27, 0x00	; 0
    495e:	e6 e5       	ldi	r30, 0x56	; 86
    4960:	f0 e0       	ldi	r31, 0x00	; 0
    4962:	80 81       	ld	r24, Z
    4964:	8f 7d       	andi	r24, 0xDF	; 223
    4966:	8c 93       	st	X, r24
        I2C_enu_clearAndCheckFlag();
    4968:	0e 94 ef 23 	call	0x47de	; 0x47de <I2C_enu_clearAndCheckFlag>
        //4- Check Data Received
        I2C_enu_clearAndCheckFlag();
    496c:	0e 94 ef 23 	call	0x47de	; 0x47de <I2C_enu_clearAndCheckFlag>
        //5-Read Data
        *Copy_pu8_receivedByte= I2C_TWDR;
    4970:	e3 e2       	ldi	r30, 0x23	; 35
    4972:	f0 e0       	ldi	r31, 0x00	; 0
    4974:	80 81       	ld	r24, Z
    4976:	eb 81       	ldd	r30, Y+3	; 0x03
    4978:	fc 81       	ldd	r31, Y+4	; 0x04
    497a:	80 83       	st	Z, r24
        //6- Send NACK
        CLR_BIT(I2C_TWCR,TWEA);
    497c:	a6 e5       	ldi	r26, 0x56	; 86
    497e:	b0 e0       	ldi	r27, 0x00	; 0
    4980:	e6 e5       	ldi	r30, 0x56	; 86
    4982:	f0 e0       	ldi	r31, 0x00	; 0
    4984:	80 81       	ld	r24, Z
    4986:	8f 7b       	andi	r24, 0xBF	; 191
    4988:	8c 93       	st	X, r24
        //7- Check Flag
        I2C_enu_clearAndCheckFlag();
    498a:	0e 94 ef 23 	call	0x47de	; 0x47de <I2C_enu_clearAndCheckFlag>
    498e:	01 c0       	rjmp	.+2      	; 0x4992 <I2C_enu_readData+0x6e>
        //Wait to recieve Data
        while( (TWSR & 0xf8) != 0x80);
        *Copy_pu8_receivedByte = I2C_TWDR;
        #endif
    }else{
        Local_u8_errorState = STATE_NOT_OK;
    4990:	19 82       	std	Y+1, r1	; 0x01
    }
    return Local_u8_errorState;
    4992:	89 81       	ldd	r24, Y+1	; 0x01

}
    4994:	0f 90       	pop	r0
    4996:	0f 90       	pop	r0
    4998:	0f 90       	pop	r0
    499a:	0f 90       	pop	r0
    499c:	cf 91       	pop	r28
    499e:	df 91       	pop	r29
    49a0:	08 95       	ret

000049a2 <GI_enu_Enable>:
#include"../../5-LIB/ERROR_STATE.h"
#include"../../5-LIB/BIT_MATH.h"

#include"GI_Private.h"

ES_t GI_enu_Enable(void){
    49a2:	df 93       	push	r29
    49a4:	cf 93       	push	r28
    49a6:	cd b7       	in	r28, 0x3d	; 61
    49a8:	de b7       	in	r29, 0x3e	; 62
    SET_BIT(EXTI_U8_SREG,EXTI_U8_IBIT);
    49aa:	af e5       	ldi	r26, 0x5F	; 95
    49ac:	b0 e0       	ldi	r27, 0x00	; 0
    49ae:	ef e5       	ldi	r30, 0x5F	; 95
    49b0:	f0 e0       	ldi	r31, 0x00	; 0
    49b2:	80 81       	ld	r24, Z
    49b4:	80 68       	ori	r24, 0x80	; 128
    49b6:	8c 93       	st	X, r24
    return STATE_OK;
    49b8:	81 e0       	ldi	r24, 0x01	; 1
}
    49ba:	cf 91       	pop	r28
    49bc:	df 91       	pop	r29
    49be:	08 95       	ret

000049c0 <GI_enu_Disable>:
ES_t GI_enu_Disable(void){
    49c0:	df 93       	push	r29
    49c2:	cf 93       	push	r28
    49c4:	cd b7       	in	r28, 0x3d	; 61
    49c6:	de b7       	in	r29, 0x3e	; 62
    CLR_BIT(EXTI_U8_SREG,EXTI_U8_IBIT);
    49c8:	af e5       	ldi	r26, 0x5F	; 95
    49ca:	b0 e0       	ldi	r27, 0x00	; 0
    49cc:	ef e5       	ldi	r30, 0x5F	; 95
    49ce:	f0 e0       	ldi	r31, 0x00	; 0
    49d0:	80 81       	ld	r24, Z
    49d2:	8f 77       	andi	r24, 0x7F	; 127
    49d4:	8c 93       	st	X, r24
    return STATE_OK;
    49d6:	81 e0       	ldi	r24, 0x01	; 1
}
    49d8:	cf 91       	pop	r28
    49da:	df 91       	pop	r29
    49dc:	08 95       	ret

000049de <EXTI_enu_Enable>:

/*Global Array of Pointers To Function*/
static void (*Apf_EXTI[NUM_OF_ISR_FUNCTIONS])(void) = {NULL};

ES_t EXTI_enu_Enable(u8 Copy_u8_EXTI_Index, u8 Copy_u8_EXTI_Edge)
{
    49de:	df 93       	push	r29
    49e0:	cf 93       	push	r28
    49e2:	cd b7       	in	r28, 0x3d	; 61
    49e4:	de b7       	in	r29, 0x3e	; 62
    49e6:	2b 97       	sbiw	r28, 0x0b	; 11
    49e8:	0f b6       	in	r0, 0x3f	; 63
    49ea:	f8 94       	cli
    49ec:	de bf       	out	0x3e, r29	; 62
    49ee:	0f be       	out	0x3f, r0	; 63
    49f0:	cd bf       	out	0x3d, r28	; 61
    49f2:	8a 83       	std	Y+2, r24	; 0x02
    49f4:	6b 83       	std	Y+3, r22	; 0x03
    u8 Local_u8_errorState = STATE_OK;
    49f6:	81 e0       	ldi	r24, 0x01	; 1
    49f8:	89 83       	std	Y+1, r24	; 0x01
    if (Copy_u8_EXTI_Index <= EXTI2 && Copy_u8_EXTI_Edge <= MAX_CHANGE_CASES)
    49fa:	8a 81       	ldd	r24, Y+2	; 0x02
    49fc:	83 30       	cpi	r24, 0x03	; 3
    49fe:	08 f0       	brcs	.+2      	; 0x4a02 <EXTI_enu_Enable+0x24>
    4a00:	07 c1       	rjmp	.+526    	; 0x4c10 <EXTI_enu_Enable+0x232>
    4a02:	8b 81       	ldd	r24, Y+3	; 0x03
    4a04:	84 30       	cpi	r24, 0x04	; 4
    4a06:	08 f0       	brcs	.+2      	; 0x4a0a <EXTI_enu_Enable+0x2c>
    4a08:	03 c1       	rjmp	.+518    	; 0x4c10 <EXTI_enu_Enable+0x232>
    {
        switch (Copy_u8_EXTI_Index)
    4a0a:	8a 81       	ldd	r24, Y+2	; 0x02
    4a0c:	28 2f       	mov	r18, r24
    4a0e:	30 e0       	ldi	r19, 0x00	; 0
    4a10:	3b 87       	std	Y+11, r19	; 0x0b
    4a12:	2a 87       	std	Y+10, r18	; 0x0a
    4a14:	8a 85       	ldd	r24, Y+10	; 0x0a
    4a16:	9b 85       	ldd	r25, Y+11	; 0x0b
    4a18:	81 30       	cpi	r24, 0x01	; 1
    4a1a:	91 05       	cpc	r25, r1
    4a1c:	09 f4       	brne	.+2      	; 0x4a20 <EXTI_enu_Enable+0x42>
    4a1e:	6d c0       	rjmp	.+218    	; 0x4afa <EXTI_enu_Enable+0x11c>
    4a20:	2a 85       	ldd	r18, Y+10	; 0x0a
    4a22:	3b 85       	ldd	r19, Y+11	; 0x0b
    4a24:	22 30       	cpi	r18, 0x02	; 2
    4a26:	31 05       	cpc	r19, r1
    4a28:	09 f4       	brne	.+2      	; 0x4a2c <EXTI_enu_Enable+0x4e>
    4a2a:	c9 c0       	rjmp	.+402    	; 0x4bbe <EXTI_enu_Enable+0x1e0>
    4a2c:	8a 85       	ldd	r24, Y+10	; 0x0a
    4a2e:	9b 85       	ldd	r25, Y+11	; 0x0b
    4a30:	00 97       	sbiw	r24, 0x00	; 0
    4a32:	09 f0       	breq	.+2      	; 0x4a36 <EXTI_enu_Enable+0x58>
    4a34:	ee c0       	rjmp	.+476    	; 0x4c12 <EXTI_enu_Enable+0x234>
        {
        case EXTI0:
            switch (Copy_u8_EXTI_Edge)
    4a36:	8b 81       	ldd	r24, Y+3	; 0x03
    4a38:	28 2f       	mov	r18, r24
    4a3a:	30 e0       	ldi	r19, 0x00	; 0
    4a3c:	39 87       	std	Y+9, r19	; 0x09
    4a3e:	28 87       	std	Y+8, r18	; 0x08
    4a40:	88 85       	ldd	r24, Y+8	; 0x08
    4a42:	99 85       	ldd	r25, Y+9	; 0x09
    4a44:	81 30       	cpi	r24, 0x01	; 1
    4a46:	91 05       	cpc	r25, r1
    4a48:	21 f1       	breq	.+72     	; 0x4a92 <EXTI_enu_Enable+0xb4>
    4a4a:	28 85       	ldd	r18, Y+8	; 0x08
    4a4c:	39 85       	ldd	r19, Y+9	; 0x09
    4a4e:	22 30       	cpi	r18, 0x02	; 2
    4a50:	31 05       	cpc	r19, r1
    4a52:	2c f4       	brge	.+10     	; 0x4a5e <EXTI_enu_Enable+0x80>
    4a54:	88 85       	ldd	r24, Y+8	; 0x08
    4a56:	99 85       	ldd	r25, Y+9	; 0x09
    4a58:	00 97       	sbiw	r24, 0x00	; 0
    4a5a:	61 f0       	breq	.+24     	; 0x4a74 <EXTI_enu_Enable+0x96>
    4a5c:	46 c0       	rjmp	.+140    	; 0x4aea <EXTI_enu_Enable+0x10c>
    4a5e:	28 85       	ldd	r18, Y+8	; 0x08
    4a60:	39 85       	ldd	r19, Y+9	; 0x09
    4a62:	22 30       	cpi	r18, 0x02	; 2
    4a64:	31 05       	cpc	r19, r1
    4a66:	21 f1       	breq	.+72     	; 0x4ab0 <EXTI_enu_Enable+0xd2>
    4a68:	88 85       	ldd	r24, Y+8	; 0x08
    4a6a:	99 85       	ldd	r25, Y+9	; 0x09
    4a6c:	83 30       	cpi	r24, 0x03	; 3
    4a6e:	91 05       	cpc	r25, r1
    4a70:	71 f1       	breq	.+92     	; 0x4ace <EXTI_enu_Enable+0xf0>
    4a72:	3b c0       	rjmp	.+118    	; 0x4aea <EXTI_enu_Enable+0x10c>
            {
            case LOW_LEVEL:
                CLR_BIT(EXTI_U8_MCUCR, EXTI_U8_ISC00);
    4a74:	a5 e5       	ldi	r26, 0x55	; 85
    4a76:	b0 e0       	ldi	r27, 0x00	; 0
    4a78:	e5 e5       	ldi	r30, 0x55	; 85
    4a7a:	f0 e0       	ldi	r31, 0x00	; 0
    4a7c:	80 81       	ld	r24, Z
    4a7e:	8e 7f       	andi	r24, 0xFE	; 254
    4a80:	8c 93       	st	X, r24
                CLR_BIT(EXTI_U8_MCUCR, EXTI_U8_ISC01);
    4a82:	a5 e5       	ldi	r26, 0x55	; 85
    4a84:	b0 e0       	ldi	r27, 0x00	; 0
    4a86:	e5 e5       	ldi	r30, 0x55	; 85
    4a88:	f0 e0       	ldi	r31, 0x00	; 0
    4a8a:	80 81       	ld	r24, Z
    4a8c:	8d 7f       	andi	r24, 0xFD	; 253
    4a8e:	8c 93       	st	X, r24
    4a90:	2c c0       	rjmp	.+88     	; 0x4aea <EXTI_enu_Enable+0x10c>
                break;
            case ANY_LOGICAL_CHANGE:
                SET_BIT(EXTI_U8_MCUCR, EXTI_U8_ISC00);
    4a92:	a5 e5       	ldi	r26, 0x55	; 85
    4a94:	b0 e0       	ldi	r27, 0x00	; 0
    4a96:	e5 e5       	ldi	r30, 0x55	; 85
    4a98:	f0 e0       	ldi	r31, 0x00	; 0
    4a9a:	80 81       	ld	r24, Z
    4a9c:	81 60       	ori	r24, 0x01	; 1
    4a9e:	8c 93       	st	X, r24
                CLR_BIT(EXTI_U8_MCUCR, EXTI_U8_ISC01);
    4aa0:	a5 e5       	ldi	r26, 0x55	; 85
    4aa2:	b0 e0       	ldi	r27, 0x00	; 0
    4aa4:	e5 e5       	ldi	r30, 0x55	; 85
    4aa6:	f0 e0       	ldi	r31, 0x00	; 0
    4aa8:	80 81       	ld	r24, Z
    4aaa:	8d 7f       	andi	r24, 0xFD	; 253
    4aac:	8c 93       	st	X, r24
    4aae:	1d c0       	rjmp	.+58     	; 0x4aea <EXTI_enu_Enable+0x10c>
                break;
            case FALLING_EDGE:
                CLR_BIT(EXTI_U8_MCUCR, EXTI_U8_ISC00);
    4ab0:	a5 e5       	ldi	r26, 0x55	; 85
    4ab2:	b0 e0       	ldi	r27, 0x00	; 0
    4ab4:	e5 e5       	ldi	r30, 0x55	; 85
    4ab6:	f0 e0       	ldi	r31, 0x00	; 0
    4ab8:	80 81       	ld	r24, Z
    4aba:	8e 7f       	andi	r24, 0xFE	; 254
    4abc:	8c 93       	st	X, r24
                SET_BIT(EXTI_U8_MCUCR, EXTI_U8_ISC01);
    4abe:	a5 e5       	ldi	r26, 0x55	; 85
    4ac0:	b0 e0       	ldi	r27, 0x00	; 0
    4ac2:	e5 e5       	ldi	r30, 0x55	; 85
    4ac4:	f0 e0       	ldi	r31, 0x00	; 0
    4ac6:	80 81       	ld	r24, Z
    4ac8:	82 60       	ori	r24, 0x02	; 2
    4aca:	8c 93       	st	X, r24
    4acc:	0e c0       	rjmp	.+28     	; 0x4aea <EXTI_enu_Enable+0x10c>
                break;
            case RISING_EDGE:
                SET_BIT(EXTI_U8_MCUCR, EXTI_U8_ISC00);
    4ace:	a5 e5       	ldi	r26, 0x55	; 85
    4ad0:	b0 e0       	ldi	r27, 0x00	; 0
    4ad2:	e5 e5       	ldi	r30, 0x55	; 85
    4ad4:	f0 e0       	ldi	r31, 0x00	; 0
    4ad6:	80 81       	ld	r24, Z
    4ad8:	81 60       	ori	r24, 0x01	; 1
    4ada:	8c 93       	st	X, r24
                SET_BIT(EXTI_U8_MCUCR, EXTI_U8_ISC01);
    4adc:	a5 e5       	ldi	r26, 0x55	; 85
    4ade:	b0 e0       	ldi	r27, 0x00	; 0
    4ae0:	e5 e5       	ldi	r30, 0x55	; 85
    4ae2:	f0 e0       	ldi	r31, 0x00	; 0
    4ae4:	80 81       	ld	r24, Z
    4ae6:	82 60       	ori	r24, 0x02	; 2
    4ae8:	8c 93       	st	X, r24
                break;
            }
            SET_BIT(EXTI_U8_GICR, EXTI_U8_IN0);
    4aea:	ab e5       	ldi	r26, 0x5B	; 91
    4aec:	b0 e0       	ldi	r27, 0x00	; 0
    4aee:	eb e5       	ldi	r30, 0x5B	; 91
    4af0:	f0 e0       	ldi	r31, 0x00	; 0
    4af2:	80 81       	ld	r24, Z
    4af4:	80 64       	ori	r24, 0x40	; 64
    4af6:	8c 93       	st	X, r24
    4af8:	8c c0       	rjmp	.+280    	; 0x4c12 <EXTI_enu_Enable+0x234>
            break;
        case EXTI1:
            switch (Copy_u8_EXTI_Edge)
    4afa:	8b 81       	ldd	r24, Y+3	; 0x03
    4afc:	28 2f       	mov	r18, r24
    4afe:	30 e0       	ldi	r19, 0x00	; 0
    4b00:	3f 83       	std	Y+7, r19	; 0x07
    4b02:	2e 83       	std	Y+6, r18	; 0x06
    4b04:	8e 81       	ldd	r24, Y+6	; 0x06
    4b06:	9f 81       	ldd	r25, Y+7	; 0x07
    4b08:	81 30       	cpi	r24, 0x01	; 1
    4b0a:	91 05       	cpc	r25, r1
    4b0c:	21 f1       	breq	.+72     	; 0x4b56 <EXTI_enu_Enable+0x178>
    4b0e:	2e 81       	ldd	r18, Y+6	; 0x06
    4b10:	3f 81       	ldd	r19, Y+7	; 0x07
    4b12:	22 30       	cpi	r18, 0x02	; 2
    4b14:	31 05       	cpc	r19, r1
    4b16:	2c f4       	brge	.+10     	; 0x4b22 <EXTI_enu_Enable+0x144>
    4b18:	8e 81       	ldd	r24, Y+6	; 0x06
    4b1a:	9f 81       	ldd	r25, Y+7	; 0x07
    4b1c:	00 97       	sbiw	r24, 0x00	; 0
    4b1e:	61 f0       	breq	.+24     	; 0x4b38 <EXTI_enu_Enable+0x15a>
    4b20:	46 c0       	rjmp	.+140    	; 0x4bae <EXTI_enu_Enable+0x1d0>
    4b22:	2e 81       	ldd	r18, Y+6	; 0x06
    4b24:	3f 81       	ldd	r19, Y+7	; 0x07
    4b26:	22 30       	cpi	r18, 0x02	; 2
    4b28:	31 05       	cpc	r19, r1
    4b2a:	21 f1       	breq	.+72     	; 0x4b74 <EXTI_enu_Enable+0x196>
    4b2c:	8e 81       	ldd	r24, Y+6	; 0x06
    4b2e:	9f 81       	ldd	r25, Y+7	; 0x07
    4b30:	83 30       	cpi	r24, 0x03	; 3
    4b32:	91 05       	cpc	r25, r1
    4b34:	71 f1       	breq	.+92     	; 0x4b92 <EXTI_enu_Enable+0x1b4>
    4b36:	3b c0       	rjmp	.+118    	; 0x4bae <EXTI_enu_Enable+0x1d0>
            {
            case LOW_LEVEL:
                CLR_BIT(EXTI_U8_MCUCR, EXTI_U8_ISC10);
    4b38:	a5 e5       	ldi	r26, 0x55	; 85
    4b3a:	b0 e0       	ldi	r27, 0x00	; 0
    4b3c:	e5 e5       	ldi	r30, 0x55	; 85
    4b3e:	f0 e0       	ldi	r31, 0x00	; 0
    4b40:	80 81       	ld	r24, Z
    4b42:	8b 7f       	andi	r24, 0xFB	; 251
    4b44:	8c 93       	st	X, r24
                CLR_BIT(EXTI_U8_MCUCR, EXTI_U8_ISC11);
    4b46:	a5 e5       	ldi	r26, 0x55	; 85
    4b48:	b0 e0       	ldi	r27, 0x00	; 0
    4b4a:	e5 e5       	ldi	r30, 0x55	; 85
    4b4c:	f0 e0       	ldi	r31, 0x00	; 0
    4b4e:	80 81       	ld	r24, Z
    4b50:	87 7f       	andi	r24, 0xF7	; 247
    4b52:	8c 93       	st	X, r24
    4b54:	2c c0       	rjmp	.+88     	; 0x4bae <EXTI_enu_Enable+0x1d0>
                break;
            case ANY_LOGICAL_CHANGE:
                SET_BIT(EXTI_U8_MCUCR, EXTI_U8_ISC10);
    4b56:	a5 e5       	ldi	r26, 0x55	; 85
    4b58:	b0 e0       	ldi	r27, 0x00	; 0
    4b5a:	e5 e5       	ldi	r30, 0x55	; 85
    4b5c:	f0 e0       	ldi	r31, 0x00	; 0
    4b5e:	80 81       	ld	r24, Z
    4b60:	84 60       	ori	r24, 0x04	; 4
    4b62:	8c 93       	st	X, r24
                CLR_BIT(EXTI_U8_MCUCR, EXTI_U8_ISC11);
    4b64:	a5 e5       	ldi	r26, 0x55	; 85
    4b66:	b0 e0       	ldi	r27, 0x00	; 0
    4b68:	e5 e5       	ldi	r30, 0x55	; 85
    4b6a:	f0 e0       	ldi	r31, 0x00	; 0
    4b6c:	80 81       	ld	r24, Z
    4b6e:	87 7f       	andi	r24, 0xF7	; 247
    4b70:	8c 93       	st	X, r24
    4b72:	1d c0       	rjmp	.+58     	; 0x4bae <EXTI_enu_Enable+0x1d0>
                break;
            case FALLING_EDGE:
                CLR_BIT(EXTI_U8_MCUCR, EXTI_U8_ISC10);
    4b74:	a5 e5       	ldi	r26, 0x55	; 85
    4b76:	b0 e0       	ldi	r27, 0x00	; 0
    4b78:	e5 e5       	ldi	r30, 0x55	; 85
    4b7a:	f0 e0       	ldi	r31, 0x00	; 0
    4b7c:	80 81       	ld	r24, Z
    4b7e:	8b 7f       	andi	r24, 0xFB	; 251
    4b80:	8c 93       	st	X, r24
                SET_BIT(EXTI_U8_MCUCR, EXTI_U8_ISC11);
    4b82:	a5 e5       	ldi	r26, 0x55	; 85
    4b84:	b0 e0       	ldi	r27, 0x00	; 0
    4b86:	e5 e5       	ldi	r30, 0x55	; 85
    4b88:	f0 e0       	ldi	r31, 0x00	; 0
    4b8a:	80 81       	ld	r24, Z
    4b8c:	88 60       	ori	r24, 0x08	; 8
    4b8e:	8c 93       	st	X, r24
    4b90:	0e c0       	rjmp	.+28     	; 0x4bae <EXTI_enu_Enable+0x1d0>
                break;
            case RISING_EDGE:
                SET_BIT(EXTI_U8_MCUCR, EXTI_U8_ISC10);
    4b92:	a5 e5       	ldi	r26, 0x55	; 85
    4b94:	b0 e0       	ldi	r27, 0x00	; 0
    4b96:	e5 e5       	ldi	r30, 0x55	; 85
    4b98:	f0 e0       	ldi	r31, 0x00	; 0
    4b9a:	80 81       	ld	r24, Z
    4b9c:	84 60       	ori	r24, 0x04	; 4
    4b9e:	8c 93       	st	X, r24
                SET_BIT(EXTI_U8_MCUCR, EXTI_U8_ISC11);
    4ba0:	a5 e5       	ldi	r26, 0x55	; 85
    4ba2:	b0 e0       	ldi	r27, 0x00	; 0
    4ba4:	e5 e5       	ldi	r30, 0x55	; 85
    4ba6:	f0 e0       	ldi	r31, 0x00	; 0
    4ba8:	80 81       	ld	r24, Z
    4baa:	88 60       	ori	r24, 0x08	; 8
    4bac:	8c 93       	st	X, r24
                break;
            }
            SET_BIT(EXTI_U8_GICR, EXTI_U8_IN1);
    4bae:	ab e5       	ldi	r26, 0x5B	; 91
    4bb0:	b0 e0       	ldi	r27, 0x00	; 0
    4bb2:	eb e5       	ldi	r30, 0x5B	; 91
    4bb4:	f0 e0       	ldi	r31, 0x00	; 0
    4bb6:	80 81       	ld	r24, Z
    4bb8:	80 68       	ori	r24, 0x80	; 128
    4bba:	8c 93       	st	X, r24
    4bbc:	2a c0       	rjmp	.+84     	; 0x4c12 <EXTI_enu_Enable+0x234>
            break;
        case EXTI2:
            switch (Copy_u8_EXTI_Edge)
    4bbe:	8b 81       	ldd	r24, Y+3	; 0x03
    4bc0:	28 2f       	mov	r18, r24
    4bc2:	30 e0       	ldi	r19, 0x00	; 0
    4bc4:	3d 83       	std	Y+5, r19	; 0x05
    4bc6:	2c 83       	std	Y+4, r18	; 0x04
    4bc8:	8c 81       	ldd	r24, Y+4	; 0x04
    4bca:	9d 81       	ldd	r25, Y+5	; 0x05
    4bcc:	82 30       	cpi	r24, 0x02	; 2
    4bce:	91 05       	cpc	r25, r1
    4bd0:	31 f0       	breq	.+12     	; 0x4bde <EXTI_enu_Enable+0x200>
    4bd2:	2c 81       	ldd	r18, Y+4	; 0x04
    4bd4:	3d 81       	ldd	r19, Y+5	; 0x05
    4bd6:	23 30       	cpi	r18, 0x03	; 3
    4bd8:	31 05       	cpc	r19, r1
    4bda:	49 f0       	breq	.+18     	; 0x4bee <EXTI_enu_Enable+0x210>
    4bdc:	10 c0       	rjmp	.+32     	; 0x4bfe <EXTI_enu_Enable+0x220>
            {
            case FALLING_EDGE:
                CLR_BIT(EXTI_U8_MCUCSR, EXTI_U8_ISC2);
    4bde:	a4 e5       	ldi	r26, 0x54	; 84
    4be0:	b0 e0       	ldi	r27, 0x00	; 0
    4be2:	e4 e5       	ldi	r30, 0x54	; 84
    4be4:	f0 e0       	ldi	r31, 0x00	; 0
    4be6:	80 81       	ld	r24, Z
    4be8:	8f 7b       	andi	r24, 0xBF	; 191
    4bea:	8c 93       	st	X, r24
    4bec:	09 c0       	rjmp	.+18     	; 0x4c00 <EXTI_enu_Enable+0x222>
                break;
            case RISING_EDGE:
                SET_BIT(EXTI_U8_MCUCSR, EXTI_U8_ISC2);
    4bee:	a4 e5       	ldi	r26, 0x54	; 84
    4bf0:	b0 e0       	ldi	r27, 0x00	; 0
    4bf2:	e4 e5       	ldi	r30, 0x54	; 84
    4bf4:	f0 e0       	ldi	r31, 0x00	; 0
    4bf6:	80 81       	ld	r24, Z
    4bf8:	80 64       	ori	r24, 0x40	; 64
    4bfa:	8c 93       	st	X, r24
    4bfc:	01 c0       	rjmp	.+2      	; 0x4c00 <EXTI_enu_Enable+0x222>
                break;
            default:
                Local_u8_errorState = STATE_NOT_OK;
    4bfe:	19 82       	std	Y+1, r1	; 0x01
                break;
            }
            SET_BIT(EXTI_U8_GICR, EXTI_U8_IN2);
    4c00:	ab e5       	ldi	r26, 0x5B	; 91
    4c02:	b0 e0       	ldi	r27, 0x00	; 0
    4c04:	eb e5       	ldi	r30, 0x5B	; 91
    4c06:	f0 e0       	ldi	r31, 0x00	; 0
    4c08:	80 81       	ld	r24, Z
    4c0a:	80 62       	ori	r24, 0x20	; 32
    4c0c:	8c 93       	st	X, r24
    4c0e:	01 c0       	rjmp	.+2      	; 0x4c12 <EXTI_enu_Enable+0x234>
            break;
        }
    }
    else
    {
        Local_u8_errorState = STATE_NOT_OK;
    4c10:	19 82       	std	Y+1, r1	; 0x01
    }
    return Local_u8_errorState;
    4c12:	89 81       	ldd	r24, Y+1	; 0x01
}
    4c14:	2b 96       	adiw	r28, 0x0b	; 11
    4c16:	0f b6       	in	r0, 0x3f	; 63
    4c18:	f8 94       	cli
    4c1a:	de bf       	out	0x3e, r29	; 62
    4c1c:	0f be       	out	0x3f, r0	; 63
    4c1e:	cd bf       	out	0x3d, r28	; 61
    4c20:	cf 91       	pop	r28
    4c22:	df 91       	pop	r29
    4c24:	08 95       	ret

00004c26 <EXTI_enu_Disable>:
ES_t EXTI_enu_Disable(u8 Copy_u8_EXTI_Index)
{
    4c26:	df 93       	push	r29
    4c28:	cf 93       	push	r28
    4c2a:	00 d0       	rcall	.+0      	; 0x4c2c <EXTI_enu_Disable+0x6>
    4c2c:	00 d0       	rcall	.+0      	; 0x4c2e <EXTI_enu_Disable+0x8>
    4c2e:	cd b7       	in	r28, 0x3d	; 61
    4c30:	de b7       	in	r29, 0x3e	; 62
    4c32:	8a 83       	std	Y+2, r24	; 0x02
    u8 Local_u8_errorState = STATE_OK;
    4c34:	81 e0       	ldi	r24, 0x01	; 1
    4c36:	89 83       	std	Y+1, r24	; 0x01
    if (Copy_u8_EXTI_Index <= EXTI2)
    4c38:	8a 81       	ldd	r24, Y+2	; 0x02
    4c3a:	83 30       	cpi	r24, 0x03	; 3
    4c3c:	58 f5       	brcc	.+86     	; 0x4c94 <EXTI_enu_Disable+0x6e>
    {
        switch (Copy_u8_EXTI_Index)
    4c3e:	8a 81       	ldd	r24, Y+2	; 0x02
    4c40:	28 2f       	mov	r18, r24
    4c42:	30 e0       	ldi	r19, 0x00	; 0
    4c44:	3c 83       	std	Y+4, r19	; 0x04
    4c46:	2b 83       	std	Y+3, r18	; 0x03
    4c48:	8b 81       	ldd	r24, Y+3	; 0x03
    4c4a:	9c 81       	ldd	r25, Y+4	; 0x04
    4c4c:	81 30       	cpi	r24, 0x01	; 1
    4c4e:	91 05       	cpc	r25, r1
    4c50:	89 f0       	breq	.+34     	; 0x4c74 <EXTI_enu_Disable+0x4e>
    4c52:	2b 81       	ldd	r18, Y+3	; 0x03
    4c54:	3c 81       	ldd	r19, Y+4	; 0x04
    4c56:	22 30       	cpi	r18, 0x02	; 2
    4c58:	31 05       	cpc	r19, r1
    4c5a:	a1 f0       	breq	.+40     	; 0x4c84 <EXTI_enu_Disable+0x5e>
    4c5c:	8b 81       	ldd	r24, Y+3	; 0x03
    4c5e:	9c 81       	ldd	r25, Y+4	; 0x04
    4c60:	00 97       	sbiw	r24, 0x00	; 0
    4c62:	c9 f4       	brne	.+50     	; 0x4c96 <EXTI_enu_Disable+0x70>
        {
        case EXTI0:
            CLR_BIT(EXTI_U8_GICR, EXTI_U8_IN0);
    4c64:	ab e5       	ldi	r26, 0x5B	; 91
    4c66:	b0 e0       	ldi	r27, 0x00	; 0
    4c68:	eb e5       	ldi	r30, 0x5B	; 91
    4c6a:	f0 e0       	ldi	r31, 0x00	; 0
    4c6c:	80 81       	ld	r24, Z
    4c6e:	8f 7b       	andi	r24, 0xBF	; 191
    4c70:	8c 93       	st	X, r24
    4c72:	11 c0       	rjmp	.+34     	; 0x4c96 <EXTI_enu_Disable+0x70>
            break;
        case EXTI1:
            CLR_BIT(EXTI_U8_GICR, EXTI_U8_IN1);
    4c74:	ab e5       	ldi	r26, 0x5B	; 91
    4c76:	b0 e0       	ldi	r27, 0x00	; 0
    4c78:	eb e5       	ldi	r30, 0x5B	; 91
    4c7a:	f0 e0       	ldi	r31, 0x00	; 0
    4c7c:	80 81       	ld	r24, Z
    4c7e:	8f 77       	andi	r24, 0x7F	; 127
    4c80:	8c 93       	st	X, r24
    4c82:	09 c0       	rjmp	.+18     	; 0x4c96 <EXTI_enu_Disable+0x70>
            break;
        case EXTI2:
            CLR_BIT(EXTI_U8_GICR, EXTI_U8_IN2);
    4c84:	ab e5       	ldi	r26, 0x5B	; 91
    4c86:	b0 e0       	ldi	r27, 0x00	; 0
    4c88:	eb e5       	ldi	r30, 0x5B	; 91
    4c8a:	f0 e0       	ldi	r31, 0x00	; 0
    4c8c:	80 81       	ld	r24, Z
    4c8e:	8f 7d       	andi	r24, 0xDF	; 223
    4c90:	8c 93       	st	X, r24
    4c92:	01 c0       	rjmp	.+2      	; 0x4c96 <EXTI_enu_Disable+0x70>
            break;
        }
    }
    else
    {
        Local_u8_errorState = STATE_NOT_OK;
    4c94:	19 82       	std	Y+1, r1	; 0x01
    }
    return Local_u8_errorState;
    4c96:	89 81       	ldd	r24, Y+1	; 0x01
}
    4c98:	0f 90       	pop	r0
    4c9a:	0f 90       	pop	r0
    4c9c:	0f 90       	pop	r0
    4c9e:	0f 90       	pop	r0
    4ca0:	cf 91       	pop	r28
    4ca2:	df 91       	pop	r29
    4ca4:	08 95       	ret

00004ca6 <EXTI_enu_setSenseControl>:
ES_t EXTI_enu_setSenseControl(u8 Copy_u8_EXTI_Index,u8 Copy_u8_EXTI_Edge){
    4ca6:	df 93       	push	r29
    4ca8:	cf 93       	push	r28
    4caa:	cd b7       	in	r28, 0x3d	; 61
    4cac:	de b7       	in	r29, 0x3e	; 62
    4cae:	2b 97       	sbiw	r28, 0x0b	; 11
    4cb0:	0f b6       	in	r0, 0x3f	; 63
    4cb2:	f8 94       	cli
    4cb4:	de bf       	out	0x3e, r29	; 62
    4cb6:	0f be       	out	0x3f, r0	; 63
    4cb8:	cd bf       	out	0x3d, r28	; 61
    4cba:	8a 83       	std	Y+2, r24	; 0x02
    4cbc:	6b 83       	std	Y+3, r22	; 0x03
    u8 Local_u8_errorState = STATE_OK;
    4cbe:	81 e0       	ldi	r24, 0x01	; 1
    4cc0:	89 83       	std	Y+1, r24	; 0x01
    if (Copy_u8_EXTI_Index <= EXTI2 && Copy_u8_EXTI_Edge <= MAX_CHANGE_CASES)
    4cc2:	8a 81       	ldd	r24, Y+2	; 0x02
    4cc4:	83 30       	cpi	r24, 0x03	; 3
    4cc6:	08 f0       	brcs	.+2      	; 0x4cca <EXTI_enu_setSenseControl+0x24>
    4cc8:	f2 c0       	rjmp	.+484    	; 0x4eae <EXTI_enu_setSenseControl+0x208>
    4cca:	8b 81       	ldd	r24, Y+3	; 0x03
    4ccc:	84 30       	cpi	r24, 0x04	; 4
    4cce:	08 f0       	brcs	.+2      	; 0x4cd2 <EXTI_enu_setSenseControl+0x2c>
    4cd0:	ee c0       	rjmp	.+476    	; 0x4eae <EXTI_enu_setSenseControl+0x208>
    {
        switch (Copy_u8_EXTI_Index)
    4cd2:	8a 81       	ldd	r24, Y+2	; 0x02
    4cd4:	28 2f       	mov	r18, r24
    4cd6:	30 e0       	ldi	r19, 0x00	; 0
    4cd8:	3b 87       	std	Y+11, r19	; 0x0b
    4cda:	2a 87       	std	Y+10, r18	; 0x0a
    4cdc:	8a 85       	ldd	r24, Y+10	; 0x0a
    4cde:	9b 85       	ldd	r25, Y+11	; 0x0b
    4ce0:	81 30       	cpi	r24, 0x01	; 1
    4ce2:	91 05       	cpc	r25, r1
    4ce4:	09 f4       	brne	.+2      	; 0x4ce8 <EXTI_enu_setSenseControl+0x42>
    4ce6:	66 c0       	rjmp	.+204    	; 0x4db4 <EXTI_enu_setSenseControl+0x10e>
    4ce8:	2a 85       	ldd	r18, Y+10	; 0x0a
    4cea:	3b 85       	ldd	r19, Y+11	; 0x0b
    4cec:	22 30       	cpi	r18, 0x02	; 2
    4cee:	31 05       	cpc	r19, r1
    4cf0:	09 f4       	brne	.+2      	; 0x4cf4 <EXTI_enu_setSenseControl+0x4e>
    4cf2:	bb c0       	rjmp	.+374    	; 0x4e6a <EXTI_enu_setSenseControl+0x1c4>
    4cf4:	8a 85       	ldd	r24, Y+10	; 0x0a
    4cf6:	9b 85       	ldd	r25, Y+11	; 0x0b
    4cf8:	00 97       	sbiw	r24, 0x00	; 0
    4cfa:	09 f0       	breq	.+2      	; 0x4cfe <EXTI_enu_setSenseControl+0x58>
    4cfc:	d9 c0       	rjmp	.+434    	; 0x4eb0 <EXTI_enu_setSenseControl+0x20a>
        {
        case EXTI0:
            switch (Copy_u8_EXTI_Edge)
    4cfe:	8b 81       	ldd	r24, Y+3	; 0x03
    4d00:	28 2f       	mov	r18, r24
    4d02:	30 e0       	ldi	r19, 0x00	; 0
    4d04:	39 87       	std	Y+9, r19	; 0x09
    4d06:	28 87       	std	Y+8, r18	; 0x08
    4d08:	88 85       	ldd	r24, Y+8	; 0x08
    4d0a:	99 85       	ldd	r25, Y+9	; 0x09
    4d0c:	81 30       	cpi	r24, 0x01	; 1
    4d0e:	91 05       	cpc	r25, r1
    4d10:	21 f1       	breq	.+72     	; 0x4d5a <EXTI_enu_setSenseControl+0xb4>
    4d12:	28 85       	ldd	r18, Y+8	; 0x08
    4d14:	39 85       	ldd	r19, Y+9	; 0x09
    4d16:	22 30       	cpi	r18, 0x02	; 2
    4d18:	31 05       	cpc	r19, r1
    4d1a:	2c f4       	brge	.+10     	; 0x4d26 <EXTI_enu_setSenseControl+0x80>
    4d1c:	88 85       	ldd	r24, Y+8	; 0x08
    4d1e:	99 85       	ldd	r25, Y+9	; 0x09
    4d20:	00 97       	sbiw	r24, 0x00	; 0
    4d22:	61 f0       	breq	.+24     	; 0x4d3c <EXTI_enu_setSenseControl+0x96>
    4d24:	c5 c0       	rjmp	.+394    	; 0x4eb0 <EXTI_enu_setSenseControl+0x20a>
    4d26:	28 85       	ldd	r18, Y+8	; 0x08
    4d28:	39 85       	ldd	r19, Y+9	; 0x09
    4d2a:	22 30       	cpi	r18, 0x02	; 2
    4d2c:	31 05       	cpc	r19, r1
    4d2e:	21 f1       	breq	.+72     	; 0x4d78 <EXTI_enu_setSenseControl+0xd2>
    4d30:	88 85       	ldd	r24, Y+8	; 0x08
    4d32:	99 85       	ldd	r25, Y+9	; 0x09
    4d34:	83 30       	cpi	r24, 0x03	; 3
    4d36:	91 05       	cpc	r25, r1
    4d38:	71 f1       	breq	.+92     	; 0x4d96 <EXTI_enu_setSenseControl+0xf0>
    4d3a:	ba c0       	rjmp	.+372    	; 0x4eb0 <EXTI_enu_setSenseControl+0x20a>
            {
            case LOW_LEVEL:
                CLR_BIT(EXTI_U8_MCUCR, EXTI_U8_ISC00);
    4d3c:	a5 e5       	ldi	r26, 0x55	; 85
    4d3e:	b0 e0       	ldi	r27, 0x00	; 0
    4d40:	e5 e5       	ldi	r30, 0x55	; 85
    4d42:	f0 e0       	ldi	r31, 0x00	; 0
    4d44:	80 81       	ld	r24, Z
    4d46:	8e 7f       	andi	r24, 0xFE	; 254
    4d48:	8c 93       	st	X, r24
                CLR_BIT(EXTI_U8_MCUCR, EXTI_U8_ISC01);
    4d4a:	a5 e5       	ldi	r26, 0x55	; 85
    4d4c:	b0 e0       	ldi	r27, 0x00	; 0
    4d4e:	e5 e5       	ldi	r30, 0x55	; 85
    4d50:	f0 e0       	ldi	r31, 0x00	; 0
    4d52:	80 81       	ld	r24, Z
    4d54:	8d 7f       	andi	r24, 0xFD	; 253
    4d56:	8c 93       	st	X, r24
    4d58:	ab c0       	rjmp	.+342    	; 0x4eb0 <EXTI_enu_setSenseControl+0x20a>
                break;
            case ANY_LOGICAL_CHANGE:
                SET_BIT(EXTI_U8_MCUCR, EXTI_U8_ISC00);
    4d5a:	a5 e5       	ldi	r26, 0x55	; 85
    4d5c:	b0 e0       	ldi	r27, 0x00	; 0
    4d5e:	e5 e5       	ldi	r30, 0x55	; 85
    4d60:	f0 e0       	ldi	r31, 0x00	; 0
    4d62:	80 81       	ld	r24, Z
    4d64:	81 60       	ori	r24, 0x01	; 1
    4d66:	8c 93       	st	X, r24
                CLR_BIT(EXTI_U8_MCUCR, EXTI_U8_ISC01);
    4d68:	a5 e5       	ldi	r26, 0x55	; 85
    4d6a:	b0 e0       	ldi	r27, 0x00	; 0
    4d6c:	e5 e5       	ldi	r30, 0x55	; 85
    4d6e:	f0 e0       	ldi	r31, 0x00	; 0
    4d70:	80 81       	ld	r24, Z
    4d72:	8d 7f       	andi	r24, 0xFD	; 253
    4d74:	8c 93       	st	X, r24
    4d76:	9c c0       	rjmp	.+312    	; 0x4eb0 <EXTI_enu_setSenseControl+0x20a>
                break;
            case FALLING_EDGE:
                CLR_BIT(EXTI_U8_MCUCR, EXTI_U8_ISC00);
    4d78:	a5 e5       	ldi	r26, 0x55	; 85
    4d7a:	b0 e0       	ldi	r27, 0x00	; 0
    4d7c:	e5 e5       	ldi	r30, 0x55	; 85
    4d7e:	f0 e0       	ldi	r31, 0x00	; 0
    4d80:	80 81       	ld	r24, Z
    4d82:	8e 7f       	andi	r24, 0xFE	; 254
    4d84:	8c 93       	st	X, r24
                SET_BIT(EXTI_U8_MCUCR, EXTI_U8_ISC01);
    4d86:	a5 e5       	ldi	r26, 0x55	; 85
    4d88:	b0 e0       	ldi	r27, 0x00	; 0
    4d8a:	e5 e5       	ldi	r30, 0x55	; 85
    4d8c:	f0 e0       	ldi	r31, 0x00	; 0
    4d8e:	80 81       	ld	r24, Z
    4d90:	82 60       	ori	r24, 0x02	; 2
    4d92:	8c 93       	st	X, r24
    4d94:	8d c0       	rjmp	.+282    	; 0x4eb0 <EXTI_enu_setSenseControl+0x20a>
                break;
            case RISING_EDGE:
                SET_BIT(EXTI_U8_MCUCR, EXTI_U8_ISC00);
    4d96:	a5 e5       	ldi	r26, 0x55	; 85
    4d98:	b0 e0       	ldi	r27, 0x00	; 0
    4d9a:	e5 e5       	ldi	r30, 0x55	; 85
    4d9c:	f0 e0       	ldi	r31, 0x00	; 0
    4d9e:	80 81       	ld	r24, Z
    4da0:	81 60       	ori	r24, 0x01	; 1
    4da2:	8c 93       	st	X, r24
                SET_BIT(EXTI_U8_MCUCR, EXTI_U8_ISC01);
    4da4:	a5 e5       	ldi	r26, 0x55	; 85
    4da6:	b0 e0       	ldi	r27, 0x00	; 0
    4da8:	e5 e5       	ldi	r30, 0x55	; 85
    4daa:	f0 e0       	ldi	r31, 0x00	; 0
    4dac:	80 81       	ld	r24, Z
    4dae:	82 60       	ori	r24, 0x02	; 2
    4db0:	8c 93       	st	X, r24
    4db2:	7e c0       	rjmp	.+252    	; 0x4eb0 <EXTI_enu_setSenseControl+0x20a>
                break;
            }
            break;
        case EXTI1:
            switch (Copy_u8_EXTI_Edge)
    4db4:	8b 81       	ldd	r24, Y+3	; 0x03
    4db6:	28 2f       	mov	r18, r24
    4db8:	30 e0       	ldi	r19, 0x00	; 0
    4dba:	3f 83       	std	Y+7, r19	; 0x07
    4dbc:	2e 83       	std	Y+6, r18	; 0x06
    4dbe:	8e 81       	ldd	r24, Y+6	; 0x06
    4dc0:	9f 81       	ldd	r25, Y+7	; 0x07
    4dc2:	81 30       	cpi	r24, 0x01	; 1
    4dc4:	91 05       	cpc	r25, r1
    4dc6:	21 f1       	breq	.+72     	; 0x4e10 <EXTI_enu_setSenseControl+0x16a>
    4dc8:	2e 81       	ldd	r18, Y+6	; 0x06
    4dca:	3f 81       	ldd	r19, Y+7	; 0x07
    4dcc:	22 30       	cpi	r18, 0x02	; 2
    4dce:	31 05       	cpc	r19, r1
    4dd0:	2c f4       	brge	.+10     	; 0x4ddc <EXTI_enu_setSenseControl+0x136>
    4dd2:	8e 81       	ldd	r24, Y+6	; 0x06
    4dd4:	9f 81       	ldd	r25, Y+7	; 0x07
    4dd6:	00 97       	sbiw	r24, 0x00	; 0
    4dd8:	61 f0       	breq	.+24     	; 0x4df2 <EXTI_enu_setSenseControl+0x14c>
    4dda:	6a c0       	rjmp	.+212    	; 0x4eb0 <EXTI_enu_setSenseControl+0x20a>
    4ddc:	2e 81       	ldd	r18, Y+6	; 0x06
    4dde:	3f 81       	ldd	r19, Y+7	; 0x07
    4de0:	22 30       	cpi	r18, 0x02	; 2
    4de2:	31 05       	cpc	r19, r1
    4de4:	21 f1       	breq	.+72     	; 0x4e2e <EXTI_enu_setSenseControl+0x188>
    4de6:	8e 81       	ldd	r24, Y+6	; 0x06
    4de8:	9f 81       	ldd	r25, Y+7	; 0x07
    4dea:	83 30       	cpi	r24, 0x03	; 3
    4dec:	91 05       	cpc	r25, r1
    4dee:	71 f1       	breq	.+92     	; 0x4e4c <EXTI_enu_setSenseControl+0x1a6>
    4df0:	5f c0       	rjmp	.+190    	; 0x4eb0 <EXTI_enu_setSenseControl+0x20a>
            {
            case LOW_LEVEL:
                CLR_BIT(EXTI_U8_MCUCR, EXTI_U8_ISC10);
    4df2:	a5 e5       	ldi	r26, 0x55	; 85
    4df4:	b0 e0       	ldi	r27, 0x00	; 0
    4df6:	e5 e5       	ldi	r30, 0x55	; 85
    4df8:	f0 e0       	ldi	r31, 0x00	; 0
    4dfa:	80 81       	ld	r24, Z
    4dfc:	8b 7f       	andi	r24, 0xFB	; 251
    4dfe:	8c 93       	st	X, r24
                CLR_BIT(EXTI_U8_MCUCR, EXTI_U8_ISC11);
    4e00:	a5 e5       	ldi	r26, 0x55	; 85
    4e02:	b0 e0       	ldi	r27, 0x00	; 0
    4e04:	e5 e5       	ldi	r30, 0x55	; 85
    4e06:	f0 e0       	ldi	r31, 0x00	; 0
    4e08:	80 81       	ld	r24, Z
    4e0a:	87 7f       	andi	r24, 0xF7	; 247
    4e0c:	8c 93       	st	X, r24
    4e0e:	50 c0       	rjmp	.+160    	; 0x4eb0 <EXTI_enu_setSenseControl+0x20a>
                break;
            case ANY_LOGICAL_CHANGE:
                SET_BIT(EXTI_U8_MCUCR, EXTI_U8_ISC10);
    4e10:	a5 e5       	ldi	r26, 0x55	; 85
    4e12:	b0 e0       	ldi	r27, 0x00	; 0
    4e14:	e5 e5       	ldi	r30, 0x55	; 85
    4e16:	f0 e0       	ldi	r31, 0x00	; 0
    4e18:	80 81       	ld	r24, Z
    4e1a:	84 60       	ori	r24, 0x04	; 4
    4e1c:	8c 93       	st	X, r24
                CLR_BIT(EXTI_U8_MCUCR, EXTI_U8_ISC11);
    4e1e:	a5 e5       	ldi	r26, 0x55	; 85
    4e20:	b0 e0       	ldi	r27, 0x00	; 0
    4e22:	e5 e5       	ldi	r30, 0x55	; 85
    4e24:	f0 e0       	ldi	r31, 0x00	; 0
    4e26:	80 81       	ld	r24, Z
    4e28:	87 7f       	andi	r24, 0xF7	; 247
    4e2a:	8c 93       	st	X, r24
    4e2c:	41 c0       	rjmp	.+130    	; 0x4eb0 <EXTI_enu_setSenseControl+0x20a>
                break;
            case FALLING_EDGE:
                CLR_BIT(EXTI_U8_MCUCR, EXTI_U8_ISC10);
    4e2e:	a5 e5       	ldi	r26, 0x55	; 85
    4e30:	b0 e0       	ldi	r27, 0x00	; 0
    4e32:	e5 e5       	ldi	r30, 0x55	; 85
    4e34:	f0 e0       	ldi	r31, 0x00	; 0
    4e36:	80 81       	ld	r24, Z
    4e38:	8b 7f       	andi	r24, 0xFB	; 251
    4e3a:	8c 93       	st	X, r24
                SET_BIT(EXTI_U8_MCUCR, EXTI_U8_ISC11);
    4e3c:	a5 e5       	ldi	r26, 0x55	; 85
    4e3e:	b0 e0       	ldi	r27, 0x00	; 0
    4e40:	e5 e5       	ldi	r30, 0x55	; 85
    4e42:	f0 e0       	ldi	r31, 0x00	; 0
    4e44:	80 81       	ld	r24, Z
    4e46:	88 60       	ori	r24, 0x08	; 8
    4e48:	8c 93       	st	X, r24
    4e4a:	32 c0       	rjmp	.+100    	; 0x4eb0 <EXTI_enu_setSenseControl+0x20a>
                break;
            case RISING_EDGE:
                SET_BIT(EXTI_U8_MCUCR, EXTI_U8_ISC10);
    4e4c:	a5 e5       	ldi	r26, 0x55	; 85
    4e4e:	b0 e0       	ldi	r27, 0x00	; 0
    4e50:	e5 e5       	ldi	r30, 0x55	; 85
    4e52:	f0 e0       	ldi	r31, 0x00	; 0
    4e54:	80 81       	ld	r24, Z
    4e56:	84 60       	ori	r24, 0x04	; 4
    4e58:	8c 93       	st	X, r24
                SET_BIT(EXTI_U8_MCUCR, EXTI_U8_ISC11);
    4e5a:	a5 e5       	ldi	r26, 0x55	; 85
    4e5c:	b0 e0       	ldi	r27, 0x00	; 0
    4e5e:	e5 e5       	ldi	r30, 0x55	; 85
    4e60:	f0 e0       	ldi	r31, 0x00	; 0
    4e62:	80 81       	ld	r24, Z
    4e64:	88 60       	ori	r24, 0x08	; 8
    4e66:	8c 93       	st	X, r24
    4e68:	23 c0       	rjmp	.+70     	; 0x4eb0 <EXTI_enu_setSenseControl+0x20a>
                break;
            }
            break;
        case EXTI2:
            switch (Copy_u8_EXTI_Edge)
    4e6a:	8b 81       	ldd	r24, Y+3	; 0x03
    4e6c:	28 2f       	mov	r18, r24
    4e6e:	30 e0       	ldi	r19, 0x00	; 0
    4e70:	3d 83       	std	Y+5, r19	; 0x05
    4e72:	2c 83       	std	Y+4, r18	; 0x04
    4e74:	8c 81       	ldd	r24, Y+4	; 0x04
    4e76:	9d 81       	ldd	r25, Y+5	; 0x05
    4e78:	82 30       	cpi	r24, 0x02	; 2
    4e7a:	91 05       	cpc	r25, r1
    4e7c:	31 f0       	breq	.+12     	; 0x4e8a <EXTI_enu_setSenseControl+0x1e4>
    4e7e:	2c 81       	ldd	r18, Y+4	; 0x04
    4e80:	3d 81       	ldd	r19, Y+5	; 0x05
    4e82:	23 30       	cpi	r18, 0x03	; 3
    4e84:	31 05       	cpc	r19, r1
    4e86:	49 f0       	breq	.+18     	; 0x4e9a <EXTI_enu_setSenseControl+0x1f4>
    4e88:	10 c0       	rjmp	.+32     	; 0x4eaa <EXTI_enu_setSenseControl+0x204>
            {
            case FALLING_EDGE:
                CLR_BIT(EXTI_U8_MCUCSR, EXTI_U8_ISC2);
    4e8a:	a4 e5       	ldi	r26, 0x54	; 84
    4e8c:	b0 e0       	ldi	r27, 0x00	; 0
    4e8e:	e4 e5       	ldi	r30, 0x54	; 84
    4e90:	f0 e0       	ldi	r31, 0x00	; 0
    4e92:	80 81       	ld	r24, Z
    4e94:	8f 7b       	andi	r24, 0xBF	; 191
    4e96:	8c 93       	st	X, r24
    4e98:	0b c0       	rjmp	.+22     	; 0x4eb0 <EXTI_enu_setSenseControl+0x20a>
                break;
            case RISING_EDGE:
                SET_BIT(EXTI_U8_MCUCSR, EXTI_U8_ISC2);
    4e9a:	a4 e5       	ldi	r26, 0x54	; 84
    4e9c:	b0 e0       	ldi	r27, 0x00	; 0
    4e9e:	e4 e5       	ldi	r30, 0x54	; 84
    4ea0:	f0 e0       	ldi	r31, 0x00	; 0
    4ea2:	80 81       	ld	r24, Z
    4ea4:	80 64       	ori	r24, 0x40	; 64
    4ea6:	8c 93       	st	X, r24
    4ea8:	03 c0       	rjmp	.+6      	; 0x4eb0 <EXTI_enu_setSenseControl+0x20a>
                break;
            default:
                Local_u8_errorState = STATE_NOT_OK;
    4eaa:	19 82       	std	Y+1, r1	; 0x01
    4eac:	01 c0       	rjmp	.+2      	; 0x4eb0 <EXTI_enu_setSenseControl+0x20a>
            break;
        }
    }
    else
    {
        Local_u8_errorState = STATE_NOT_OK;
    4eae:	19 82       	std	Y+1, r1	; 0x01
    }
    return Local_u8_errorState;
    4eb0:	89 81       	ldd	r24, Y+1	; 0x01
}
    4eb2:	2b 96       	adiw	r28, 0x0b	; 11
    4eb4:	0f b6       	in	r0, 0x3f	; 63
    4eb6:	f8 94       	cli
    4eb8:	de bf       	out	0x3e, r29	; 62
    4eba:	0f be       	out	0x3f, r0	; 63
    4ebc:	cd bf       	out	0x3d, r28	; 61
    4ebe:	cf 91       	pop	r28
    4ec0:	df 91       	pop	r29
    4ec2:	08 95       	ret

00004ec4 <EXTI_enu_setCallBack>:
ES_t EXTI_enu_setCallBack(void (*Copy_pf_ISR)(void), u8 Copy_u8_ISR_Index)
{
    4ec4:	df 93       	push	r29
    4ec6:	cf 93       	push	r28
    4ec8:	00 d0       	rcall	.+0      	; 0x4eca <EXTI_enu_setCallBack+0x6>
    4eca:	00 d0       	rcall	.+0      	; 0x4ecc <EXTI_enu_setCallBack+0x8>
    4ecc:	cd b7       	in	r28, 0x3d	; 61
    4ece:	de b7       	in	r29, 0x3e	; 62
    4ed0:	9b 83       	std	Y+3, r25	; 0x03
    4ed2:	8a 83       	std	Y+2, r24	; 0x02
    4ed4:	6c 83       	std	Y+4, r22	; 0x04
    u8 Local_u8_errorState = STATE_OK;
    4ed6:	81 e0       	ldi	r24, 0x01	; 1
    4ed8:	89 83       	std	Y+1, r24	; 0x01
    if (Copy_pf_ISR != NULL && Copy_u8_ISR_Index <= EXTI2)
    4eda:	8a 81       	ldd	r24, Y+2	; 0x02
    4edc:	9b 81       	ldd	r25, Y+3	; 0x03
    4ede:	00 97       	sbiw	r24, 0x00	; 0
    4ee0:	81 f0       	breq	.+32     	; 0x4f02 <EXTI_enu_setCallBack+0x3e>
    4ee2:	8c 81       	ldd	r24, Y+4	; 0x04
    4ee4:	83 30       	cpi	r24, 0x03	; 3
    4ee6:	68 f4       	brcc	.+26     	; 0x4f02 <EXTI_enu_setCallBack+0x3e>
    {
        Apf_EXTI[Copy_u8_ISR_Index] = Copy_pf_ISR;
    4ee8:	8c 81       	ldd	r24, Y+4	; 0x04
    4eea:	88 2f       	mov	r24, r24
    4eec:	90 e0       	ldi	r25, 0x00	; 0
    4eee:	88 0f       	add	r24, r24
    4ef0:	99 1f       	adc	r25, r25
    4ef2:	fc 01       	movw	r30, r24
    4ef4:	e8 59       	subi	r30, 0x98	; 152
    4ef6:	fe 4f       	sbci	r31, 0xFE	; 254
    4ef8:	8a 81       	ldd	r24, Y+2	; 0x02
    4efa:	9b 81       	ldd	r25, Y+3	; 0x03
    4efc:	91 83       	std	Z+1, r25	; 0x01
    4efe:	80 83       	st	Z, r24
    4f00:	01 c0       	rjmp	.+2      	; 0x4f04 <EXTI_enu_setCallBack+0x40>
    }
    else
    {
        Local_u8_errorState = STATE_NOT_OK;
    4f02:	19 82       	std	Y+1, r1	; 0x01
    }
    return Local_u8_errorState;
    4f04:	89 81       	ldd	r24, Y+1	; 0x01
}
    4f06:	0f 90       	pop	r0
    4f08:	0f 90       	pop	r0
    4f0a:	0f 90       	pop	r0
    4f0c:	0f 90       	pop	r0
    4f0e:	cf 91       	pop	r28
    4f10:	df 91       	pop	r29
    4f12:	08 95       	ret

00004f14 <__vector_1>:
ISR(EXTI_INT0)
{
    4f14:	1f 92       	push	r1
    4f16:	0f 92       	push	r0
    4f18:	0f b6       	in	r0, 0x3f	; 63
    4f1a:	0f 92       	push	r0
    4f1c:	11 24       	eor	r1, r1
    4f1e:	2f 93       	push	r18
    4f20:	3f 93       	push	r19
    4f22:	4f 93       	push	r20
    4f24:	5f 93       	push	r21
    4f26:	6f 93       	push	r22
    4f28:	7f 93       	push	r23
    4f2a:	8f 93       	push	r24
    4f2c:	9f 93       	push	r25
    4f2e:	af 93       	push	r26
    4f30:	bf 93       	push	r27
    4f32:	ef 93       	push	r30
    4f34:	ff 93       	push	r31
    4f36:	df 93       	push	r29
    4f38:	cf 93       	push	r28
    4f3a:	cd b7       	in	r28, 0x3d	; 61
    4f3c:	de b7       	in	r29, 0x3e	; 62
    if (Apf_EXTI[EXTI0] != NULL)
    4f3e:	80 91 68 01 	lds	r24, 0x0168
    4f42:	90 91 69 01 	lds	r25, 0x0169
    4f46:	00 97       	sbiw	r24, 0x00	; 0
    4f48:	29 f0       	breq	.+10     	; 0x4f54 <__vector_1+0x40>
        Apf_EXTI[EXTI0]();
    4f4a:	e0 91 68 01 	lds	r30, 0x0168
    4f4e:	f0 91 69 01 	lds	r31, 0x0169
    4f52:	09 95       	icall
}
    4f54:	cf 91       	pop	r28
    4f56:	df 91       	pop	r29
    4f58:	ff 91       	pop	r31
    4f5a:	ef 91       	pop	r30
    4f5c:	bf 91       	pop	r27
    4f5e:	af 91       	pop	r26
    4f60:	9f 91       	pop	r25
    4f62:	8f 91       	pop	r24
    4f64:	7f 91       	pop	r23
    4f66:	6f 91       	pop	r22
    4f68:	5f 91       	pop	r21
    4f6a:	4f 91       	pop	r20
    4f6c:	3f 91       	pop	r19
    4f6e:	2f 91       	pop	r18
    4f70:	0f 90       	pop	r0
    4f72:	0f be       	out	0x3f, r0	; 63
    4f74:	0f 90       	pop	r0
    4f76:	1f 90       	pop	r1
    4f78:	18 95       	reti

00004f7a <__vector_2>:
ISR(EXTI_INT1)
{
    4f7a:	1f 92       	push	r1
    4f7c:	0f 92       	push	r0
    4f7e:	0f b6       	in	r0, 0x3f	; 63
    4f80:	0f 92       	push	r0
    4f82:	11 24       	eor	r1, r1
    4f84:	2f 93       	push	r18
    4f86:	3f 93       	push	r19
    4f88:	4f 93       	push	r20
    4f8a:	5f 93       	push	r21
    4f8c:	6f 93       	push	r22
    4f8e:	7f 93       	push	r23
    4f90:	8f 93       	push	r24
    4f92:	9f 93       	push	r25
    4f94:	af 93       	push	r26
    4f96:	bf 93       	push	r27
    4f98:	ef 93       	push	r30
    4f9a:	ff 93       	push	r31
    4f9c:	df 93       	push	r29
    4f9e:	cf 93       	push	r28
    4fa0:	cd b7       	in	r28, 0x3d	; 61
    4fa2:	de b7       	in	r29, 0x3e	; 62
    if (Apf_EXTI[EXTI1] != NULL)
    4fa4:	80 91 6a 01 	lds	r24, 0x016A
    4fa8:	90 91 6b 01 	lds	r25, 0x016B
    4fac:	00 97       	sbiw	r24, 0x00	; 0
    4fae:	29 f0       	breq	.+10     	; 0x4fba <__vector_2+0x40>
        Apf_EXTI[EXTI1]();
    4fb0:	e0 91 6a 01 	lds	r30, 0x016A
    4fb4:	f0 91 6b 01 	lds	r31, 0x016B
    4fb8:	09 95       	icall
}
    4fba:	cf 91       	pop	r28
    4fbc:	df 91       	pop	r29
    4fbe:	ff 91       	pop	r31
    4fc0:	ef 91       	pop	r30
    4fc2:	bf 91       	pop	r27
    4fc4:	af 91       	pop	r26
    4fc6:	9f 91       	pop	r25
    4fc8:	8f 91       	pop	r24
    4fca:	7f 91       	pop	r23
    4fcc:	6f 91       	pop	r22
    4fce:	5f 91       	pop	r21
    4fd0:	4f 91       	pop	r20
    4fd2:	3f 91       	pop	r19
    4fd4:	2f 91       	pop	r18
    4fd6:	0f 90       	pop	r0
    4fd8:	0f be       	out	0x3f, r0	; 63
    4fda:	0f 90       	pop	r0
    4fdc:	1f 90       	pop	r1
    4fde:	18 95       	reti

00004fe0 <__vector_3>:

ISR(EXTI_INT2)
{
    4fe0:	1f 92       	push	r1
    4fe2:	0f 92       	push	r0
    4fe4:	0f b6       	in	r0, 0x3f	; 63
    4fe6:	0f 92       	push	r0
    4fe8:	11 24       	eor	r1, r1
    4fea:	2f 93       	push	r18
    4fec:	3f 93       	push	r19
    4fee:	4f 93       	push	r20
    4ff0:	5f 93       	push	r21
    4ff2:	6f 93       	push	r22
    4ff4:	7f 93       	push	r23
    4ff6:	8f 93       	push	r24
    4ff8:	9f 93       	push	r25
    4ffa:	af 93       	push	r26
    4ffc:	bf 93       	push	r27
    4ffe:	ef 93       	push	r30
    5000:	ff 93       	push	r31
    5002:	df 93       	push	r29
    5004:	cf 93       	push	r28
    5006:	cd b7       	in	r28, 0x3d	; 61
    5008:	de b7       	in	r29, 0x3e	; 62
    if (Apf_EXTI[EXTI2] != NULL)
    500a:	80 91 6c 01 	lds	r24, 0x016C
    500e:	90 91 6d 01 	lds	r25, 0x016D
    5012:	00 97       	sbiw	r24, 0x00	; 0
    5014:	29 f0       	breq	.+10     	; 0x5020 <__vector_3+0x40>
        Apf_EXTI[EXTI2]();
    5016:	e0 91 6c 01 	lds	r30, 0x016C
    501a:	f0 91 6d 01 	lds	r31, 0x016D
    501e:	09 95       	icall
}
    5020:	cf 91       	pop	r28
    5022:	df 91       	pop	r29
    5024:	ff 91       	pop	r31
    5026:	ef 91       	pop	r30
    5028:	bf 91       	pop	r27
    502a:	af 91       	pop	r26
    502c:	9f 91       	pop	r25
    502e:	8f 91       	pop	r24
    5030:	7f 91       	pop	r23
    5032:	6f 91       	pop	r22
    5034:	5f 91       	pop	r21
    5036:	4f 91       	pop	r20
    5038:	3f 91       	pop	r19
    503a:	2f 91       	pop	r18
    503c:	0f 90       	pop	r0
    503e:	0f be       	out	0x3f, r0	; 63
    5040:	0f 90       	pop	r0
    5042:	1f 90       	pop	r1
    5044:	18 95       	reti

00005046 <DIO_enu_Init>:
/*MCAL*/
#include"DIO_private.h"
#include"DIO_config.h"


ES_t DIO_enu_Init(void){
    5046:	df 93       	push	r29
    5048:	cf 93       	push	r28
    504a:	cd b7       	in	r28, 0x3d	; 61
    504c:	de b7       	in	r29, 0x3e	; 62
    DIO_U8_DDRA_REG = Conc(DIO_U8_PA7_INITIAL_DIRECTION,DIO_U8_PA6_INITIAL_DIRECTION,DIO_U8_PA5_INITIAL_DIRECTION,DIO_U8_PA4_INITIAL_DIRECTION,
    504e:	ea e3       	ldi	r30, 0x3A	; 58
    5050:	f0 e0       	ldi	r31, 0x00	; 0
    5052:	8f e7       	ldi	r24, 0x7F	; 127
    5054:	80 83       	st	Z, r24
                           DIO_U8_PA3_INITIAL_DIRECTION,DIO_U8_PA2_INITIAL_DIRECTION,DIO_U8_PA1_INITIAL_DIRECTION,DIO_U8_PA0_INITIAL_DIRECTION);
    DIO_U8_DDRB_REG = Conc(DIO_U8_PB7_INITIAL_DIRECTION,DIO_U8_PB6_INITIAL_DIRECTION,DIO_U8_PB5_INITIAL_DIRECTION,DIO_U8_PB4_INITIAL_DIRECTION,
    5056:	e7 e3       	ldi	r30, 0x37	; 55
    5058:	f0 e0       	ldi	r31, 0x00	; 0
    505a:	8d ef       	ldi	r24, 0xFD	; 253
    505c:	80 83       	st	Z, r24
                           DIO_U8_PB3_INITIAL_DIRECTION,DIO_U8_PB2_INITIAL_DIRECTION,DIO_U8_PB1_INITIAL_DIRECTION,DIO_U8_PB0_INITIAL_DIRECTION);

    DIO_U8_DDRC_REG = Conc(DIO_U8_PC7_INITIAL_DIRECTION,DIO_U8_PC6_INITIAL_DIRECTION,DIO_U8_PC5_INITIAL_DIRECTION,DIO_U8_PC4_INITIAL_DIRECTION,
    505e:	e4 e3       	ldi	r30, 0x34	; 52
    5060:	f0 e0       	ldi	r31, 0x00	; 0
    5062:	83 e1       	ldi	r24, 0x13	; 19
    5064:	80 83       	st	Z, r24
                           DIO_U8_PC3_INITIAL_DIRECTION,DIO_U8_PC2_INITIAL_DIRECTION,DIO_U8_PC1_INITIAL_DIRECTION,DIO_U8_PC0_INITIAL_DIRECTION);

    DIO_U8_DDRD_REG = Conc(DIO_U8_PD7_INITIAL_DIRECTION,DIO_U8_PD6_INITIAL_DIRECTION,DIO_U8_PD5_INITIAL_DIRECTION,DIO_U8_PD4_INITIAL_DIRECTION,
    5066:	e1 e3       	ldi	r30, 0x31	; 49
    5068:	f0 e0       	ldi	r31, 0x00	; 0
    506a:	10 82       	st	Z, r1
                           DIO_U8_PD3_INITIAL_DIRECTION,DIO_U8_PD2_INITIAL_DIRECTION,DIO_U8_PD1_INITIAL_DIRECTION,DIO_U8_PD0_INITIAL_DIRECTION);

    DIO_U8_PORTA_REG = Conc(DIO_U8_PA7_INITIAL_VALUE,DIO_U8_PA6_INITIAL_VALUE,DIO_U8_PA5_INITIAL_VALUE,DIO_U8_PA4_INITIAL_VALUE,
    506c:	eb e3       	ldi	r30, 0x3B	; 59
    506e:	f0 e0       	ldi	r31, 0x00	; 0
    5070:	10 82       	st	Z, r1
                            DIO_U8_PA3_INITIAL_VALUE,DIO_U8_PA2_INITIAL_VALUE,DIO_U8_PA1_INITIAL_VALUE,DIO_U8_PA0_INITIAL_VALUE);

    DIO_U8_PORTB_REG = Conc(DIO_U8_PB7_INITIAL_VALUE,DIO_U8_PB6_INITIAL_VALUE,DIO_U8_PB5_INITIAL_VALUE,DIO_U8_PB4_INITIAL_VALUE,
    5072:	e8 e3       	ldi	r30, 0x38	; 56
    5074:	f0 e0       	ldi	r31, 0x00	; 0
    5076:	84 ef       	ldi	r24, 0xF4	; 244
    5078:	80 83       	st	Z, r24
                            DIO_U8_PB3_INITIAL_VALUE,DIO_U8_PB2_INITIAL_VALUE,DIO_U8_PB1_INITIAL_VALUE,DIO_U8_PB0_INITIAL_VALUE);

    DIO_U8_PORTC_REG = Conc(DIO_U8_PC7_INITIAL_VALUE,DIO_U8_PC6_INITIAL_VALUE,DIO_U8_PC5_INITIAL_VALUE,DIO_U8_PC4_INITIAL_VALUE,
    507a:	e5 e3       	ldi	r30, 0x35	; 53
    507c:	f0 e0       	ldi	r31, 0x00	; 0
    507e:	10 82       	st	Z, r1
                            DIO_U8_PC3_INITIAL_VALUE,DIO_U8_PC2_INITIAL_VALUE,DIO_U8_PC1_INITIAL_VALUE,DIO_U8_PC0_INITIAL_VALUE);

    DIO_U8_PORTD_REG = Conc(DIO_U8_PD7_INITIAL_VALUE,DIO_U8_PD6_INITIAL_VALUE,DIO_U8_PD5_INITIAL_VALUE,DIO_U8_PD4_INITIAL_VALUE,
    5080:	e2 e3       	ldi	r30, 0x32	; 50
    5082:	f0 e0       	ldi	r31, 0x00	; 0
    5084:	8c e3       	ldi	r24, 0x3C	; 60
    5086:	80 83       	st	Z, r24
                            DIO_U8_PD3_INITIAL_VALUE,DIO_U8_PD2_INITIAL_VALUE,DIO_U8_PD1_INITIAL_VALUE,DIO_U8_PD0_INITIAL_VALUE);
    return STATE_OK;
    5088:	81 e0       	ldi	r24, 0x01	; 1
}
    508a:	cf 91       	pop	r28
    508c:	df 91       	pop	r29
    508e:	08 95       	ret

00005090 <DIO_enu_SetPinDirection>:
ES_t DIO_enu_SetPinDirection (u8 Copy_u8_PortId, u8 Copy_u8_PinId,u8 Copy_u8_PinDirection)
{
    5090:	df 93       	push	r29
    5092:	cf 93       	push	r28
    5094:	cd b7       	in	r28, 0x3d	; 61
    5096:	de b7       	in	r29, 0x3e	; 62
    5098:	2e 97       	sbiw	r28, 0x0e	; 14
    509a:	0f b6       	in	r0, 0x3f	; 63
    509c:	f8 94       	cli
    509e:	de bf       	out	0x3e, r29	; 62
    50a0:	0f be       	out	0x3f, r0	; 63
    50a2:	cd bf       	out	0x3d, r28	; 61
    50a4:	8a 83       	std	Y+2, r24	; 0x02
    50a6:	6b 83       	std	Y+3, r22	; 0x03
    50a8:	4c 83       	std	Y+4, r20	; 0x04
    u8 Local_u8_ErrorState = STATE_OK;
    50aa:	81 e0       	ldi	r24, 0x01	; 1
    50ac:	89 83       	std	Y+1, r24	; 0x01
    if((Copy_u8_PortId <= DIO_U8_PORTD) && (Copy_u8_PinId <= DIO_U8_PIN7) && ((Copy_u8_PinDirection == DIO_U8_OUTPUT)||(Copy_u8_PinDirection == DIO_U8_INPUT))){
    50ae:	8a 81       	ldd	r24, Y+2	; 0x02
    50b0:	84 30       	cpi	r24, 0x04	; 4
    50b2:	08 f0       	brcs	.+2      	; 0x50b6 <DIO_enu_SetPinDirection+0x26>
    50b4:	0c c1       	rjmp	.+536    	; 0x52ce <DIO_enu_SetPinDirection+0x23e>
    50b6:	8b 81       	ldd	r24, Y+3	; 0x03
    50b8:	88 30       	cpi	r24, 0x08	; 8
    50ba:	08 f0       	brcs	.+2      	; 0x50be <DIO_enu_SetPinDirection+0x2e>
    50bc:	08 c1       	rjmp	.+528    	; 0x52ce <DIO_enu_SetPinDirection+0x23e>
    50be:	8c 81       	ldd	r24, Y+4	; 0x04
    50c0:	81 30       	cpi	r24, 0x01	; 1
    50c2:	21 f0       	breq	.+8      	; 0x50cc <DIO_enu_SetPinDirection+0x3c>
    50c4:	8c 81       	ldd	r24, Y+4	; 0x04
    50c6:	88 23       	and	r24, r24
    50c8:	09 f0       	breq	.+2      	; 0x50cc <DIO_enu_SetPinDirection+0x3c>
    50ca:	01 c1       	rjmp	.+514    	; 0x52ce <DIO_enu_SetPinDirection+0x23e>
        switch (Copy_u8_PortId)
    50cc:	8a 81       	ldd	r24, Y+2	; 0x02
    50ce:	28 2f       	mov	r18, r24
    50d0:	30 e0       	ldi	r19, 0x00	; 0
    50d2:	3e 87       	std	Y+14, r19	; 0x0e
    50d4:	2d 87       	std	Y+13, r18	; 0x0d
    50d6:	8d 85       	ldd	r24, Y+13	; 0x0d
    50d8:	9e 85       	ldd	r25, Y+14	; 0x0e
    50da:	81 30       	cpi	r24, 0x01	; 1
    50dc:	91 05       	cpc	r25, r1
    50de:	09 f4       	brne	.+2      	; 0x50e2 <DIO_enu_SetPinDirection+0x52>
    50e0:	4f c0       	rjmp	.+158    	; 0x5180 <DIO_enu_SetPinDirection+0xf0>
    50e2:	2d 85       	ldd	r18, Y+13	; 0x0d
    50e4:	3e 85       	ldd	r19, Y+14	; 0x0e
    50e6:	22 30       	cpi	r18, 0x02	; 2
    50e8:	31 05       	cpc	r19, r1
    50ea:	2c f4       	brge	.+10     	; 0x50f6 <DIO_enu_SetPinDirection+0x66>
    50ec:	8d 85       	ldd	r24, Y+13	; 0x0d
    50ee:	9e 85       	ldd	r25, Y+14	; 0x0e
    50f0:	00 97       	sbiw	r24, 0x00	; 0
    50f2:	71 f0       	breq	.+28     	; 0x5110 <DIO_enu_SetPinDirection+0x80>
    50f4:	ed c0       	rjmp	.+474    	; 0x52d0 <DIO_enu_SetPinDirection+0x240>
    50f6:	2d 85       	ldd	r18, Y+13	; 0x0d
    50f8:	3e 85       	ldd	r19, Y+14	; 0x0e
    50fa:	22 30       	cpi	r18, 0x02	; 2
    50fc:	31 05       	cpc	r19, r1
    50fe:	09 f4       	brne	.+2      	; 0x5102 <DIO_enu_SetPinDirection+0x72>
    5100:	77 c0       	rjmp	.+238    	; 0x51f0 <DIO_enu_SetPinDirection+0x160>
    5102:	8d 85       	ldd	r24, Y+13	; 0x0d
    5104:	9e 85       	ldd	r25, Y+14	; 0x0e
    5106:	83 30       	cpi	r24, 0x03	; 3
    5108:	91 05       	cpc	r25, r1
    510a:	09 f4       	brne	.+2      	; 0x510e <DIO_enu_SetPinDirection+0x7e>
    510c:	a9 c0       	rjmp	.+338    	; 0x5260 <DIO_enu_SetPinDirection+0x1d0>
    510e:	e0 c0       	rjmp	.+448    	; 0x52d0 <DIO_enu_SetPinDirection+0x240>
        {
        case DIO_U8_PORTA:
            switch (Copy_u8_PinDirection)
    5110:	8c 81       	ldd	r24, Y+4	; 0x04
    5112:	28 2f       	mov	r18, r24
    5114:	30 e0       	ldi	r19, 0x00	; 0
    5116:	3c 87       	std	Y+12, r19	; 0x0c
    5118:	2b 87       	std	Y+11, r18	; 0x0b
    511a:	8b 85       	ldd	r24, Y+11	; 0x0b
    511c:	9c 85       	ldd	r25, Y+12	; 0x0c
    511e:	00 97       	sbiw	r24, 0x00	; 0
    5120:	d1 f0       	breq	.+52     	; 0x5156 <DIO_enu_SetPinDirection+0xc6>
    5122:	2b 85       	ldd	r18, Y+11	; 0x0b
    5124:	3c 85       	ldd	r19, Y+12	; 0x0c
    5126:	21 30       	cpi	r18, 0x01	; 1
    5128:	31 05       	cpc	r19, r1
    512a:	09 f0       	breq	.+2      	; 0x512e <DIO_enu_SetPinDirection+0x9e>
    512c:	d1 c0       	rjmp	.+418    	; 0x52d0 <DIO_enu_SetPinDirection+0x240>
            {
                case DIO_U8_OUTPUT:SET_BIT(DIO_U8_DDRA_REG,Copy_u8_PinId); break;
    512e:	aa e3       	ldi	r26, 0x3A	; 58
    5130:	b0 e0       	ldi	r27, 0x00	; 0
    5132:	ea e3       	ldi	r30, 0x3A	; 58
    5134:	f0 e0       	ldi	r31, 0x00	; 0
    5136:	80 81       	ld	r24, Z
    5138:	48 2f       	mov	r20, r24
    513a:	8b 81       	ldd	r24, Y+3	; 0x03
    513c:	28 2f       	mov	r18, r24
    513e:	30 e0       	ldi	r19, 0x00	; 0
    5140:	81 e0       	ldi	r24, 0x01	; 1
    5142:	90 e0       	ldi	r25, 0x00	; 0
    5144:	02 2e       	mov	r0, r18
    5146:	02 c0       	rjmp	.+4      	; 0x514c <DIO_enu_SetPinDirection+0xbc>
    5148:	88 0f       	add	r24, r24
    514a:	99 1f       	adc	r25, r25
    514c:	0a 94       	dec	r0
    514e:	e2 f7       	brpl	.-8      	; 0x5148 <DIO_enu_SetPinDirection+0xb8>
    5150:	84 2b       	or	r24, r20
    5152:	8c 93       	st	X, r24
    5154:	bd c0       	rjmp	.+378    	; 0x52d0 <DIO_enu_SetPinDirection+0x240>
                case DIO_U8_INPUT: CLR_BIT(DIO_U8_DDRA_REG,Copy_u8_PinId); break; 
    5156:	aa e3       	ldi	r26, 0x3A	; 58
    5158:	b0 e0       	ldi	r27, 0x00	; 0
    515a:	ea e3       	ldi	r30, 0x3A	; 58
    515c:	f0 e0       	ldi	r31, 0x00	; 0
    515e:	80 81       	ld	r24, Z
    5160:	48 2f       	mov	r20, r24
    5162:	8b 81       	ldd	r24, Y+3	; 0x03
    5164:	28 2f       	mov	r18, r24
    5166:	30 e0       	ldi	r19, 0x00	; 0
    5168:	81 e0       	ldi	r24, 0x01	; 1
    516a:	90 e0       	ldi	r25, 0x00	; 0
    516c:	02 2e       	mov	r0, r18
    516e:	02 c0       	rjmp	.+4      	; 0x5174 <DIO_enu_SetPinDirection+0xe4>
    5170:	88 0f       	add	r24, r24
    5172:	99 1f       	adc	r25, r25
    5174:	0a 94       	dec	r0
    5176:	e2 f7       	brpl	.-8      	; 0x5170 <DIO_enu_SetPinDirection+0xe0>
    5178:	80 95       	com	r24
    517a:	84 23       	and	r24, r20
    517c:	8c 93       	st	X, r24
    517e:	a8 c0       	rjmp	.+336    	; 0x52d0 <DIO_enu_SetPinDirection+0x240>
            }
        break;
        case DIO_U8_PORTB:
            switch (Copy_u8_PinDirection)
    5180:	8c 81       	ldd	r24, Y+4	; 0x04
    5182:	28 2f       	mov	r18, r24
    5184:	30 e0       	ldi	r19, 0x00	; 0
    5186:	3a 87       	std	Y+10, r19	; 0x0a
    5188:	29 87       	std	Y+9, r18	; 0x09
    518a:	89 85       	ldd	r24, Y+9	; 0x09
    518c:	9a 85       	ldd	r25, Y+10	; 0x0a
    518e:	00 97       	sbiw	r24, 0x00	; 0
    5190:	d1 f0       	breq	.+52     	; 0x51c6 <DIO_enu_SetPinDirection+0x136>
    5192:	29 85       	ldd	r18, Y+9	; 0x09
    5194:	3a 85       	ldd	r19, Y+10	; 0x0a
    5196:	21 30       	cpi	r18, 0x01	; 1
    5198:	31 05       	cpc	r19, r1
    519a:	09 f0       	breq	.+2      	; 0x519e <DIO_enu_SetPinDirection+0x10e>
    519c:	99 c0       	rjmp	.+306    	; 0x52d0 <DIO_enu_SetPinDirection+0x240>
            {
                case DIO_U8_OUTPUT:SET_BIT(DIO_U8_DDRB_REG,Copy_u8_PinId); break;
    519e:	a7 e3       	ldi	r26, 0x37	; 55
    51a0:	b0 e0       	ldi	r27, 0x00	; 0
    51a2:	e7 e3       	ldi	r30, 0x37	; 55
    51a4:	f0 e0       	ldi	r31, 0x00	; 0
    51a6:	80 81       	ld	r24, Z
    51a8:	48 2f       	mov	r20, r24
    51aa:	8b 81       	ldd	r24, Y+3	; 0x03
    51ac:	28 2f       	mov	r18, r24
    51ae:	30 e0       	ldi	r19, 0x00	; 0
    51b0:	81 e0       	ldi	r24, 0x01	; 1
    51b2:	90 e0       	ldi	r25, 0x00	; 0
    51b4:	02 2e       	mov	r0, r18
    51b6:	02 c0       	rjmp	.+4      	; 0x51bc <DIO_enu_SetPinDirection+0x12c>
    51b8:	88 0f       	add	r24, r24
    51ba:	99 1f       	adc	r25, r25
    51bc:	0a 94       	dec	r0
    51be:	e2 f7       	brpl	.-8      	; 0x51b8 <DIO_enu_SetPinDirection+0x128>
    51c0:	84 2b       	or	r24, r20
    51c2:	8c 93       	st	X, r24
    51c4:	85 c0       	rjmp	.+266    	; 0x52d0 <DIO_enu_SetPinDirection+0x240>
                case DIO_U8_INPUT: CLR_BIT(DIO_U8_DDRB_REG,Copy_u8_PinId); break; 
    51c6:	a7 e3       	ldi	r26, 0x37	; 55
    51c8:	b0 e0       	ldi	r27, 0x00	; 0
    51ca:	e7 e3       	ldi	r30, 0x37	; 55
    51cc:	f0 e0       	ldi	r31, 0x00	; 0
    51ce:	80 81       	ld	r24, Z
    51d0:	48 2f       	mov	r20, r24
    51d2:	8b 81       	ldd	r24, Y+3	; 0x03
    51d4:	28 2f       	mov	r18, r24
    51d6:	30 e0       	ldi	r19, 0x00	; 0
    51d8:	81 e0       	ldi	r24, 0x01	; 1
    51da:	90 e0       	ldi	r25, 0x00	; 0
    51dc:	02 2e       	mov	r0, r18
    51de:	02 c0       	rjmp	.+4      	; 0x51e4 <DIO_enu_SetPinDirection+0x154>
    51e0:	88 0f       	add	r24, r24
    51e2:	99 1f       	adc	r25, r25
    51e4:	0a 94       	dec	r0
    51e6:	e2 f7       	brpl	.-8      	; 0x51e0 <DIO_enu_SetPinDirection+0x150>
    51e8:	80 95       	com	r24
    51ea:	84 23       	and	r24, r20
    51ec:	8c 93       	st	X, r24
    51ee:	70 c0       	rjmp	.+224    	; 0x52d0 <DIO_enu_SetPinDirection+0x240>
            }
        break;
        case DIO_U8_PORTC:
            switch (Copy_u8_PinDirection)
    51f0:	8c 81       	ldd	r24, Y+4	; 0x04
    51f2:	28 2f       	mov	r18, r24
    51f4:	30 e0       	ldi	r19, 0x00	; 0
    51f6:	38 87       	std	Y+8, r19	; 0x08
    51f8:	2f 83       	std	Y+7, r18	; 0x07
    51fa:	8f 81       	ldd	r24, Y+7	; 0x07
    51fc:	98 85       	ldd	r25, Y+8	; 0x08
    51fe:	00 97       	sbiw	r24, 0x00	; 0
    5200:	d1 f0       	breq	.+52     	; 0x5236 <DIO_enu_SetPinDirection+0x1a6>
    5202:	2f 81       	ldd	r18, Y+7	; 0x07
    5204:	38 85       	ldd	r19, Y+8	; 0x08
    5206:	21 30       	cpi	r18, 0x01	; 1
    5208:	31 05       	cpc	r19, r1
    520a:	09 f0       	breq	.+2      	; 0x520e <DIO_enu_SetPinDirection+0x17e>
    520c:	61 c0       	rjmp	.+194    	; 0x52d0 <DIO_enu_SetPinDirection+0x240>
            {
                case DIO_U8_OUTPUT:SET_BIT(DIO_U8_DDRC_REG,Copy_u8_PinId); break;
    520e:	a4 e3       	ldi	r26, 0x34	; 52
    5210:	b0 e0       	ldi	r27, 0x00	; 0
    5212:	e4 e3       	ldi	r30, 0x34	; 52
    5214:	f0 e0       	ldi	r31, 0x00	; 0
    5216:	80 81       	ld	r24, Z
    5218:	48 2f       	mov	r20, r24
    521a:	8b 81       	ldd	r24, Y+3	; 0x03
    521c:	28 2f       	mov	r18, r24
    521e:	30 e0       	ldi	r19, 0x00	; 0
    5220:	81 e0       	ldi	r24, 0x01	; 1
    5222:	90 e0       	ldi	r25, 0x00	; 0
    5224:	02 2e       	mov	r0, r18
    5226:	02 c0       	rjmp	.+4      	; 0x522c <DIO_enu_SetPinDirection+0x19c>
    5228:	88 0f       	add	r24, r24
    522a:	99 1f       	adc	r25, r25
    522c:	0a 94       	dec	r0
    522e:	e2 f7       	brpl	.-8      	; 0x5228 <DIO_enu_SetPinDirection+0x198>
    5230:	84 2b       	or	r24, r20
    5232:	8c 93       	st	X, r24
    5234:	4d c0       	rjmp	.+154    	; 0x52d0 <DIO_enu_SetPinDirection+0x240>
                case DIO_U8_INPUT: CLR_BIT(DIO_U8_DDRC_REG,Copy_u8_PinId); break; 
    5236:	a4 e3       	ldi	r26, 0x34	; 52
    5238:	b0 e0       	ldi	r27, 0x00	; 0
    523a:	e4 e3       	ldi	r30, 0x34	; 52
    523c:	f0 e0       	ldi	r31, 0x00	; 0
    523e:	80 81       	ld	r24, Z
    5240:	48 2f       	mov	r20, r24
    5242:	8b 81       	ldd	r24, Y+3	; 0x03
    5244:	28 2f       	mov	r18, r24
    5246:	30 e0       	ldi	r19, 0x00	; 0
    5248:	81 e0       	ldi	r24, 0x01	; 1
    524a:	90 e0       	ldi	r25, 0x00	; 0
    524c:	02 2e       	mov	r0, r18
    524e:	02 c0       	rjmp	.+4      	; 0x5254 <DIO_enu_SetPinDirection+0x1c4>
    5250:	88 0f       	add	r24, r24
    5252:	99 1f       	adc	r25, r25
    5254:	0a 94       	dec	r0
    5256:	e2 f7       	brpl	.-8      	; 0x5250 <DIO_enu_SetPinDirection+0x1c0>
    5258:	80 95       	com	r24
    525a:	84 23       	and	r24, r20
    525c:	8c 93       	st	X, r24
    525e:	38 c0       	rjmp	.+112    	; 0x52d0 <DIO_enu_SetPinDirection+0x240>
            } 
        break;
        case DIO_U8_PORTD:
            switch (Copy_u8_PinDirection)
    5260:	8c 81       	ldd	r24, Y+4	; 0x04
    5262:	28 2f       	mov	r18, r24
    5264:	30 e0       	ldi	r19, 0x00	; 0
    5266:	3e 83       	std	Y+6, r19	; 0x06
    5268:	2d 83       	std	Y+5, r18	; 0x05
    526a:	8d 81       	ldd	r24, Y+5	; 0x05
    526c:	9e 81       	ldd	r25, Y+6	; 0x06
    526e:	00 97       	sbiw	r24, 0x00	; 0
    5270:	c9 f0       	breq	.+50     	; 0x52a4 <DIO_enu_SetPinDirection+0x214>
    5272:	2d 81       	ldd	r18, Y+5	; 0x05
    5274:	3e 81       	ldd	r19, Y+6	; 0x06
    5276:	21 30       	cpi	r18, 0x01	; 1
    5278:	31 05       	cpc	r19, r1
    527a:	51 f5       	brne	.+84     	; 0x52d0 <DIO_enu_SetPinDirection+0x240>
            {
                case DIO_U8_OUTPUT:SET_BIT(DIO_U8_DDRD_REG,Copy_u8_PinId); break;
    527c:	a1 e3       	ldi	r26, 0x31	; 49
    527e:	b0 e0       	ldi	r27, 0x00	; 0
    5280:	e1 e3       	ldi	r30, 0x31	; 49
    5282:	f0 e0       	ldi	r31, 0x00	; 0
    5284:	80 81       	ld	r24, Z
    5286:	48 2f       	mov	r20, r24
    5288:	8b 81       	ldd	r24, Y+3	; 0x03
    528a:	28 2f       	mov	r18, r24
    528c:	30 e0       	ldi	r19, 0x00	; 0
    528e:	81 e0       	ldi	r24, 0x01	; 1
    5290:	90 e0       	ldi	r25, 0x00	; 0
    5292:	02 2e       	mov	r0, r18
    5294:	02 c0       	rjmp	.+4      	; 0x529a <DIO_enu_SetPinDirection+0x20a>
    5296:	88 0f       	add	r24, r24
    5298:	99 1f       	adc	r25, r25
    529a:	0a 94       	dec	r0
    529c:	e2 f7       	brpl	.-8      	; 0x5296 <DIO_enu_SetPinDirection+0x206>
    529e:	84 2b       	or	r24, r20
    52a0:	8c 93       	st	X, r24
    52a2:	16 c0       	rjmp	.+44     	; 0x52d0 <DIO_enu_SetPinDirection+0x240>
                case DIO_U8_INPUT: CLR_BIT(DIO_U8_DDRD_REG,Copy_u8_PinId); break; 
    52a4:	a1 e3       	ldi	r26, 0x31	; 49
    52a6:	b0 e0       	ldi	r27, 0x00	; 0
    52a8:	e1 e3       	ldi	r30, 0x31	; 49
    52aa:	f0 e0       	ldi	r31, 0x00	; 0
    52ac:	80 81       	ld	r24, Z
    52ae:	48 2f       	mov	r20, r24
    52b0:	8b 81       	ldd	r24, Y+3	; 0x03
    52b2:	28 2f       	mov	r18, r24
    52b4:	30 e0       	ldi	r19, 0x00	; 0
    52b6:	81 e0       	ldi	r24, 0x01	; 1
    52b8:	90 e0       	ldi	r25, 0x00	; 0
    52ba:	02 2e       	mov	r0, r18
    52bc:	02 c0       	rjmp	.+4      	; 0x52c2 <DIO_enu_SetPinDirection+0x232>
    52be:	88 0f       	add	r24, r24
    52c0:	99 1f       	adc	r25, r25
    52c2:	0a 94       	dec	r0
    52c4:	e2 f7       	brpl	.-8      	; 0x52be <DIO_enu_SetPinDirection+0x22e>
    52c6:	80 95       	com	r24
    52c8:	84 23       	and	r24, r20
    52ca:	8c 93       	st	X, r24
    52cc:	01 c0       	rjmp	.+2      	; 0x52d0 <DIO_enu_SetPinDirection+0x240>
        break;
        }
    }
    else
    {
        Local_u8_ErrorState = STATE_NOT_OK;
    52ce:	19 82       	std	Y+1, r1	; 0x01
    }
    return Local_u8_ErrorState;
    52d0:	89 81       	ldd	r24, Y+1	; 0x01
}
    52d2:	2e 96       	adiw	r28, 0x0e	; 14
    52d4:	0f b6       	in	r0, 0x3f	; 63
    52d6:	f8 94       	cli
    52d8:	de bf       	out	0x3e, r29	; 62
    52da:	0f be       	out	0x3f, r0	; 63
    52dc:	cd bf       	out	0x3d, r28	; 61
    52de:	cf 91       	pop	r28
    52e0:	df 91       	pop	r29
    52e2:	08 95       	ret

000052e4 <DIO_enu_SetPinValue>:

ES_t DIO_enu_SetPinValue(u8 Copy_u8_PortId, u8 Copy_u8_PinId,u8 Copy_u8_PinValue){
    52e4:	df 93       	push	r29
    52e6:	cf 93       	push	r28
    52e8:	cd b7       	in	r28, 0x3d	; 61
    52ea:	de b7       	in	r29, 0x3e	; 62
    52ec:	2e 97       	sbiw	r28, 0x0e	; 14
    52ee:	0f b6       	in	r0, 0x3f	; 63
    52f0:	f8 94       	cli
    52f2:	de bf       	out	0x3e, r29	; 62
    52f4:	0f be       	out	0x3f, r0	; 63
    52f6:	cd bf       	out	0x3d, r28	; 61
    52f8:	8a 83       	std	Y+2, r24	; 0x02
    52fa:	6b 83       	std	Y+3, r22	; 0x03
    52fc:	4c 83       	std	Y+4, r20	; 0x04
    u8 Local_u8_ErrorState = STATE_OK;
    52fe:	81 e0       	ldi	r24, 0x01	; 1
    5300:	89 83       	std	Y+1, r24	; 0x01
    if((Copy_u8_PortId <= DIO_U8_PORTD) && (Copy_u8_PinId <= DIO_U8_PIN7) && ((Copy_u8_PinValue == DIO_U8_HIGH)||(Copy_u8_PinValue == DIO_U8_LOW))){
    5302:	8a 81       	ldd	r24, Y+2	; 0x02
    5304:	84 30       	cpi	r24, 0x04	; 4
    5306:	08 f0       	brcs	.+2      	; 0x530a <DIO_enu_SetPinValue+0x26>
    5308:	0c c1       	rjmp	.+536    	; 0x5522 <DIO_enu_SetPinValue+0x23e>
    530a:	8b 81       	ldd	r24, Y+3	; 0x03
    530c:	88 30       	cpi	r24, 0x08	; 8
    530e:	08 f0       	brcs	.+2      	; 0x5312 <DIO_enu_SetPinValue+0x2e>
    5310:	08 c1       	rjmp	.+528    	; 0x5522 <DIO_enu_SetPinValue+0x23e>
    5312:	8c 81       	ldd	r24, Y+4	; 0x04
    5314:	81 30       	cpi	r24, 0x01	; 1
    5316:	21 f0       	breq	.+8      	; 0x5320 <DIO_enu_SetPinValue+0x3c>
    5318:	8c 81       	ldd	r24, Y+4	; 0x04
    531a:	88 23       	and	r24, r24
    531c:	09 f0       	breq	.+2      	; 0x5320 <DIO_enu_SetPinValue+0x3c>
    531e:	01 c1       	rjmp	.+514    	; 0x5522 <DIO_enu_SetPinValue+0x23e>
        switch (Copy_u8_PortId)
    5320:	8a 81       	ldd	r24, Y+2	; 0x02
    5322:	28 2f       	mov	r18, r24
    5324:	30 e0       	ldi	r19, 0x00	; 0
    5326:	3e 87       	std	Y+14, r19	; 0x0e
    5328:	2d 87       	std	Y+13, r18	; 0x0d
    532a:	8d 85       	ldd	r24, Y+13	; 0x0d
    532c:	9e 85       	ldd	r25, Y+14	; 0x0e
    532e:	81 30       	cpi	r24, 0x01	; 1
    5330:	91 05       	cpc	r25, r1
    5332:	09 f4       	brne	.+2      	; 0x5336 <DIO_enu_SetPinValue+0x52>
    5334:	4f c0       	rjmp	.+158    	; 0x53d4 <DIO_enu_SetPinValue+0xf0>
    5336:	2d 85       	ldd	r18, Y+13	; 0x0d
    5338:	3e 85       	ldd	r19, Y+14	; 0x0e
    533a:	22 30       	cpi	r18, 0x02	; 2
    533c:	31 05       	cpc	r19, r1
    533e:	2c f4       	brge	.+10     	; 0x534a <DIO_enu_SetPinValue+0x66>
    5340:	8d 85       	ldd	r24, Y+13	; 0x0d
    5342:	9e 85       	ldd	r25, Y+14	; 0x0e
    5344:	00 97       	sbiw	r24, 0x00	; 0
    5346:	71 f0       	breq	.+28     	; 0x5364 <DIO_enu_SetPinValue+0x80>
    5348:	ed c0       	rjmp	.+474    	; 0x5524 <DIO_enu_SetPinValue+0x240>
    534a:	2d 85       	ldd	r18, Y+13	; 0x0d
    534c:	3e 85       	ldd	r19, Y+14	; 0x0e
    534e:	22 30       	cpi	r18, 0x02	; 2
    5350:	31 05       	cpc	r19, r1
    5352:	09 f4       	brne	.+2      	; 0x5356 <DIO_enu_SetPinValue+0x72>
    5354:	77 c0       	rjmp	.+238    	; 0x5444 <DIO_enu_SetPinValue+0x160>
    5356:	8d 85       	ldd	r24, Y+13	; 0x0d
    5358:	9e 85       	ldd	r25, Y+14	; 0x0e
    535a:	83 30       	cpi	r24, 0x03	; 3
    535c:	91 05       	cpc	r25, r1
    535e:	09 f4       	brne	.+2      	; 0x5362 <DIO_enu_SetPinValue+0x7e>
    5360:	a9 c0       	rjmp	.+338    	; 0x54b4 <DIO_enu_SetPinValue+0x1d0>
    5362:	e0 c0       	rjmp	.+448    	; 0x5524 <DIO_enu_SetPinValue+0x240>
        {
        case DIO_U8_PORTA:
            switch (Copy_u8_PinValue)
    5364:	8c 81       	ldd	r24, Y+4	; 0x04
    5366:	28 2f       	mov	r18, r24
    5368:	30 e0       	ldi	r19, 0x00	; 0
    536a:	3c 87       	std	Y+12, r19	; 0x0c
    536c:	2b 87       	std	Y+11, r18	; 0x0b
    536e:	8b 85       	ldd	r24, Y+11	; 0x0b
    5370:	9c 85       	ldd	r25, Y+12	; 0x0c
    5372:	00 97       	sbiw	r24, 0x00	; 0
    5374:	d1 f0       	breq	.+52     	; 0x53aa <DIO_enu_SetPinValue+0xc6>
    5376:	2b 85       	ldd	r18, Y+11	; 0x0b
    5378:	3c 85       	ldd	r19, Y+12	; 0x0c
    537a:	21 30       	cpi	r18, 0x01	; 1
    537c:	31 05       	cpc	r19, r1
    537e:	09 f0       	breq	.+2      	; 0x5382 <DIO_enu_SetPinValue+0x9e>
    5380:	d1 c0       	rjmp	.+418    	; 0x5524 <DIO_enu_SetPinValue+0x240>
            {
                case DIO_U8_HIGH:SET_BIT(DIO_U8_PORTA_REG,Copy_u8_PinId); break;
    5382:	ab e3       	ldi	r26, 0x3B	; 59
    5384:	b0 e0       	ldi	r27, 0x00	; 0
    5386:	eb e3       	ldi	r30, 0x3B	; 59
    5388:	f0 e0       	ldi	r31, 0x00	; 0
    538a:	80 81       	ld	r24, Z
    538c:	48 2f       	mov	r20, r24
    538e:	8b 81       	ldd	r24, Y+3	; 0x03
    5390:	28 2f       	mov	r18, r24
    5392:	30 e0       	ldi	r19, 0x00	; 0
    5394:	81 e0       	ldi	r24, 0x01	; 1
    5396:	90 e0       	ldi	r25, 0x00	; 0
    5398:	02 2e       	mov	r0, r18
    539a:	02 c0       	rjmp	.+4      	; 0x53a0 <DIO_enu_SetPinValue+0xbc>
    539c:	88 0f       	add	r24, r24
    539e:	99 1f       	adc	r25, r25
    53a0:	0a 94       	dec	r0
    53a2:	e2 f7       	brpl	.-8      	; 0x539c <DIO_enu_SetPinValue+0xb8>
    53a4:	84 2b       	or	r24, r20
    53a6:	8c 93       	st	X, r24
    53a8:	bd c0       	rjmp	.+378    	; 0x5524 <DIO_enu_SetPinValue+0x240>
                case DIO_U8_LOW: CLR_BIT(DIO_U8_PORTA_REG,Copy_u8_PinId); break; 
    53aa:	ab e3       	ldi	r26, 0x3B	; 59
    53ac:	b0 e0       	ldi	r27, 0x00	; 0
    53ae:	eb e3       	ldi	r30, 0x3B	; 59
    53b0:	f0 e0       	ldi	r31, 0x00	; 0
    53b2:	80 81       	ld	r24, Z
    53b4:	48 2f       	mov	r20, r24
    53b6:	8b 81       	ldd	r24, Y+3	; 0x03
    53b8:	28 2f       	mov	r18, r24
    53ba:	30 e0       	ldi	r19, 0x00	; 0
    53bc:	81 e0       	ldi	r24, 0x01	; 1
    53be:	90 e0       	ldi	r25, 0x00	; 0
    53c0:	02 2e       	mov	r0, r18
    53c2:	02 c0       	rjmp	.+4      	; 0x53c8 <DIO_enu_SetPinValue+0xe4>
    53c4:	88 0f       	add	r24, r24
    53c6:	99 1f       	adc	r25, r25
    53c8:	0a 94       	dec	r0
    53ca:	e2 f7       	brpl	.-8      	; 0x53c4 <DIO_enu_SetPinValue+0xe0>
    53cc:	80 95       	com	r24
    53ce:	84 23       	and	r24, r20
    53d0:	8c 93       	st	X, r24
    53d2:	a8 c0       	rjmp	.+336    	; 0x5524 <DIO_enu_SetPinValue+0x240>
            }
        break;
        case DIO_U8_PORTB:
            switch (Copy_u8_PinValue)
    53d4:	8c 81       	ldd	r24, Y+4	; 0x04
    53d6:	28 2f       	mov	r18, r24
    53d8:	30 e0       	ldi	r19, 0x00	; 0
    53da:	3a 87       	std	Y+10, r19	; 0x0a
    53dc:	29 87       	std	Y+9, r18	; 0x09
    53de:	89 85       	ldd	r24, Y+9	; 0x09
    53e0:	9a 85       	ldd	r25, Y+10	; 0x0a
    53e2:	00 97       	sbiw	r24, 0x00	; 0
    53e4:	d1 f0       	breq	.+52     	; 0x541a <DIO_enu_SetPinValue+0x136>
    53e6:	29 85       	ldd	r18, Y+9	; 0x09
    53e8:	3a 85       	ldd	r19, Y+10	; 0x0a
    53ea:	21 30       	cpi	r18, 0x01	; 1
    53ec:	31 05       	cpc	r19, r1
    53ee:	09 f0       	breq	.+2      	; 0x53f2 <DIO_enu_SetPinValue+0x10e>
    53f0:	99 c0       	rjmp	.+306    	; 0x5524 <DIO_enu_SetPinValue+0x240>
            {
                case DIO_U8_HIGH:SET_BIT(DIO_U8_PORTB_REG,Copy_u8_PinId); break;
    53f2:	a8 e3       	ldi	r26, 0x38	; 56
    53f4:	b0 e0       	ldi	r27, 0x00	; 0
    53f6:	e8 e3       	ldi	r30, 0x38	; 56
    53f8:	f0 e0       	ldi	r31, 0x00	; 0
    53fa:	80 81       	ld	r24, Z
    53fc:	48 2f       	mov	r20, r24
    53fe:	8b 81       	ldd	r24, Y+3	; 0x03
    5400:	28 2f       	mov	r18, r24
    5402:	30 e0       	ldi	r19, 0x00	; 0
    5404:	81 e0       	ldi	r24, 0x01	; 1
    5406:	90 e0       	ldi	r25, 0x00	; 0
    5408:	02 2e       	mov	r0, r18
    540a:	02 c0       	rjmp	.+4      	; 0x5410 <DIO_enu_SetPinValue+0x12c>
    540c:	88 0f       	add	r24, r24
    540e:	99 1f       	adc	r25, r25
    5410:	0a 94       	dec	r0
    5412:	e2 f7       	brpl	.-8      	; 0x540c <DIO_enu_SetPinValue+0x128>
    5414:	84 2b       	or	r24, r20
    5416:	8c 93       	st	X, r24
    5418:	85 c0       	rjmp	.+266    	; 0x5524 <DIO_enu_SetPinValue+0x240>
                case DIO_U8_LOW: CLR_BIT(DIO_U8_PORTB_REG,Copy_u8_PinId); break; 
    541a:	a8 e3       	ldi	r26, 0x38	; 56
    541c:	b0 e0       	ldi	r27, 0x00	; 0
    541e:	e8 e3       	ldi	r30, 0x38	; 56
    5420:	f0 e0       	ldi	r31, 0x00	; 0
    5422:	80 81       	ld	r24, Z
    5424:	48 2f       	mov	r20, r24
    5426:	8b 81       	ldd	r24, Y+3	; 0x03
    5428:	28 2f       	mov	r18, r24
    542a:	30 e0       	ldi	r19, 0x00	; 0
    542c:	81 e0       	ldi	r24, 0x01	; 1
    542e:	90 e0       	ldi	r25, 0x00	; 0
    5430:	02 2e       	mov	r0, r18
    5432:	02 c0       	rjmp	.+4      	; 0x5438 <DIO_enu_SetPinValue+0x154>
    5434:	88 0f       	add	r24, r24
    5436:	99 1f       	adc	r25, r25
    5438:	0a 94       	dec	r0
    543a:	e2 f7       	brpl	.-8      	; 0x5434 <DIO_enu_SetPinValue+0x150>
    543c:	80 95       	com	r24
    543e:	84 23       	and	r24, r20
    5440:	8c 93       	st	X, r24
    5442:	70 c0       	rjmp	.+224    	; 0x5524 <DIO_enu_SetPinValue+0x240>
            }
        break;
        case DIO_U8_PORTC:
            switch (Copy_u8_PinValue)
    5444:	8c 81       	ldd	r24, Y+4	; 0x04
    5446:	28 2f       	mov	r18, r24
    5448:	30 e0       	ldi	r19, 0x00	; 0
    544a:	38 87       	std	Y+8, r19	; 0x08
    544c:	2f 83       	std	Y+7, r18	; 0x07
    544e:	8f 81       	ldd	r24, Y+7	; 0x07
    5450:	98 85       	ldd	r25, Y+8	; 0x08
    5452:	00 97       	sbiw	r24, 0x00	; 0
    5454:	d1 f0       	breq	.+52     	; 0x548a <DIO_enu_SetPinValue+0x1a6>
    5456:	2f 81       	ldd	r18, Y+7	; 0x07
    5458:	38 85       	ldd	r19, Y+8	; 0x08
    545a:	21 30       	cpi	r18, 0x01	; 1
    545c:	31 05       	cpc	r19, r1
    545e:	09 f0       	breq	.+2      	; 0x5462 <DIO_enu_SetPinValue+0x17e>
    5460:	61 c0       	rjmp	.+194    	; 0x5524 <DIO_enu_SetPinValue+0x240>
            {
                case DIO_U8_HIGH:SET_BIT(DIO_U8_PORTC_REG,Copy_u8_PinId); break;
    5462:	a5 e3       	ldi	r26, 0x35	; 53
    5464:	b0 e0       	ldi	r27, 0x00	; 0
    5466:	e5 e3       	ldi	r30, 0x35	; 53
    5468:	f0 e0       	ldi	r31, 0x00	; 0
    546a:	80 81       	ld	r24, Z
    546c:	48 2f       	mov	r20, r24
    546e:	8b 81       	ldd	r24, Y+3	; 0x03
    5470:	28 2f       	mov	r18, r24
    5472:	30 e0       	ldi	r19, 0x00	; 0
    5474:	81 e0       	ldi	r24, 0x01	; 1
    5476:	90 e0       	ldi	r25, 0x00	; 0
    5478:	02 2e       	mov	r0, r18
    547a:	02 c0       	rjmp	.+4      	; 0x5480 <DIO_enu_SetPinValue+0x19c>
    547c:	88 0f       	add	r24, r24
    547e:	99 1f       	adc	r25, r25
    5480:	0a 94       	dec	r0
    5482:	e2 f7       	brpl	.-8      	; 0x547c <DIO_enu_SetPinValue+0x198>
    5484:	84 2b       	or	r24, r20
    5486:	8c 93       	st	X, r24
    5488:	4d c0       	rjmp	.+154    	; 0x5524 <DIO_enu_SetPinValue+0x240>
                case DIO_U8_LOW: CLR_BIT(DIO_U8_PORTC_REG,Copy_u8_PinId); break; 
    548a:	a5 e3       	ldi	r26, 0x35	; 53
    548c:	b0 e0       	ldi	r27, 0x00	; 0
    548e:	e5 e3       	ldi	r30, 0x35	; 53
    5490:	f0 e0       	ldi	r31, 0x00	; 0
    5492:	80 81       	ld	r24, Z
    5494:	48 2f       	mov	r20, r24
    5496:	8b 81       	ldd	r24, Y+3	; 0x03
    5498:	28 2f       	mov	r18, r24
    549a:	30 e0       	ldi	r19, 0x00	; 0
    549c:	81 e0       	ldi	r24, 0x01	; 1
    549e:	90 e0       	ldi	r25, 0x00	; 0
    54a0:	02 2e       	mov	r0, r18
    54a2:	02 c0       	rjmp	.+4      	; 0x54a8 <DIO_enu_SetPinValue+0x1c4>
    54a4:	88 0f       	add	r24, r24
    54a6:	99 1f       	adc	r25, r25
    54a8:	0a 94       	dec	r0
    54aa:	e2 f7       	brpl	.-8      	; 0x54a4 <DIO_enu_SetPinValue+0x1c0>
    54ac:	80 95       	com	r24
    54ae:	84 23       	and	r24, r20
    54b0:	8c 93       	st	X, r24
    54b2:	38 c0       	rjmp	.+112    	; 0x5524 <DIO_enu_SetPinValue+0x240>
            } 
        break;
        case DIO_U8_PORTD:
            switch (Copy_u8_PinValue)
    54b4:	8c 81       	ldd	r24, Y+4	; 0x04
    54b6:	28 2f       	mov	r18, r24
    54b8:	30 e0       	ldi	r19, 0x00	; 0
    54ba:	3e 83       	std	Y+6, r19	; 0x06
    54bc:	2d 83       	std	Y+5, r18	; 0x05
    54be:	8d 81       	ldd	r24, Y+5	; 0x05
    54c0:	9e 81       	ldd	r25, Y+6	; 0x06
    54c2:	00 97       	sbiw	r24, 0x00	; 0
    54c4:	c9 f0       	breq	.+50     	; 0x54f8 <DIO_enu_SetPinValue+0x214>
    54c6:	2d 81       	ldd	r18, Y+5	; 0x05
    54c8:	3e 81       	ldd	r19, Y+6	; 0x06
    54ca:	21 30       	cpi	r18, 0x01	; 1
    54cc:	31 05       	cpc	r19, r1
    54ce:	51 f5       	brne	.+84     	; 0x5524 <DIO_enu_SetPinValue+0x240>
            {
                case DIO_U8_HIGH:SET_BIT(DIO_U8_PORTD_REG,Copy_u8_PinId); break;
    54d0:	a2 e3       	ldi	r26, 0x32	; 50
    54d2:	b0 e0       	ldi	r27, 0x00	; 0
    54d4:	e2 e3       	ldi	r30, 0x32	; 50
    54d6:	f0 e0       	ldi	r31, 0x00	; 0
    54d8:	80 81       	ld	r24, Z
    54da:	48 2f       	mov	r20, r24
    54dc:	8b 81       	ldd	r24, Y+3	; 0x03
    54de:	28 2f       	mov	r18, r24
    54e0:	30 e0       	ldi	r19, 0x00	; 0
    54e2:	81 e0       	ldi	r24, 0x01	; 1
    54e4:	90 e0       	ldi	r25, 0x00	; 0
    54e6:	02 2e       	mov	r0, r18
    54e8:	02 c0       	rjmp	.+4      	; 0x54ee <DIO_enu_SetPinValue+0x20a>
    54ea:	88 0f       	add	r24, r24
    54ec:	99 1f       	adc	r25, r25
    54ee:	0a 94       	dec	r0
    54f0:	e2 f7       	brpl	.-8      	; 0x54ea <DIO_enu_SetPinValue+0x206>
    54f2:	84 2b       	or	r24, r20
    54f4:	8c 93       	st	X, r24
    54f6:	16 c0       	rjmp	.+44     	; 0x5524 <DIO_enu_SetPinValue+0x240>
                case DIO_U8_LOW: CLR_BIT(DIO_U8_PORTD_REG,Copy_u8_PinId); break; 
    54f8:	a2 e3       	ldi	r26, 0x32	; 50
    54fa:	b0 e0       	ldi	r27, 0x00	; 0
    54fc:	e2 e3       	ldi	r30, 0x32	; 50
    54fe:	f0 e0       	ldi	r31, 0x00	; 0
    5500:	80 81       	ld	r24, Z
    5502:	48 2f       	mov	r20, r24
    5504:	8b 81       	ldd	r24, Y+3	; 0x03
    5506:	28 2f       	mov	r18, r24
    5508:	30 e0       	ldi	r19, 0x00	; 0
    550a:	81 e0       	ldi	r24, 0x01	; 1
    550c:	90 e0       	ldi	r25, 0x00	; 0
    550e:	02 2e       	mov	r0, r18
    5510:	02 c0       	rjmp	.+4      	; 0x5516 <DIO_enu_SetPinValue+0x232>
    5512:	88 0f       	add	r24, r24
    5514:	99 1f       	adc	r25, r25
    5516:	0a 94       	dec	r0
    5518:	e2 f7       	brpl	.-8      	; 0x5512 <DIO_enu_SetPinValue+0x22e>
    551a:	80 95       	com	r24
    551c:	84 23       	and	r24, r20
    551e:	8c 93       	st	X, r24
    5520:	01 c0       	rjmp	.+2      	; 0x5524 <DIO_enu_SetPinValue+0x240>
        break;
        }
    }
    else
    {
        Local_u8_ErrorState = STATE_NOT_OK;
    5522:	19 82       	std	Y+1, r1	; 0x01
    }
    return Local_u8_ErrorState;
    5524:	89 81       	ldd	r24, Y+1	; 0x01
}
    5526:	2e 96       	adiw	r28, 0x0e	; 14
    5528:	0f b6       	in	r0, 0x3f	; 63
    552a:	f8 94       	cli
    552c:	de bf       	out	0x3e, r29	; 62
    552e:	0f be       	out	0x3f, r0	; 63
    5530:	cd bf       	out	0x3d, r28	; 61
    5532:	cf 91       	pop	r28
    5534:	df 91       	pop	r29
    5536:	08 95       	ret

00005538 <DIO_enu_GetPinValue>:

ES_t DIO_enu_GetPinValue(u8 Copy_u8_PortId, u8 Copy_u8_PinId,u8 * Copy_pu8_ReturnPinValue){
    5538:	df 93       	push	r29
    553a:	cf 93       	push	r28
    553c:	cd b7       	in	r28, 0x3d	; 61
    553e:	de b7       	in	r29, 0x3e	; 62
    5540:	27 97       	sbiw	r28, 0x07	; 7
    5542:	0f b6       	in	r0, 0x3f	; 63
    5544:	f8 94       	cli
    5546:	de bf       	out	0x3e, r29	; 62
    5548:	0f be       	out	0x3f, r0	; 63
    554a:	cd bf       	out	0x3d, r28	; 61
    554c:	8a 83       	std	Y+2, r24	; 0x02
    554e:	6b 83       	std	Y+3, r22	; 0x03
    5550:	5d 83       	std	Y+5, r21	; 0x05
    5552:	4c 83       	std	Y+4, r20	; 0x04
    u8 Local_u8_ErrorState = STATE_OK;
    5554:	81 e0       	ldi	r24, 0x01	; 1
    5556:	89 83       	std	Y+1, r24	; 0x01
    if((Copy_u8_PortId <= DIO_U8_PORTD) && (Copy_u8_PinId <= DIO_U8_PIN7) && (Copy_pu8_ReturnPinValue != NULL))
    5558:	8a 81       	ldd	r24, Y+2	; 0x02
    555a:	84 30       	cpi	r24, 0x04	; 4
    555c:	08 f0       	brcs	.+2      	; 0x5560 <DIO_enu_GetPinValue+0x28>
    555e:	7a c0       	rjmp	.+244    	; 0x5654 <DIO_enu_GetPinValue+0x11c>
    5560:	8b 81       	ldd	r24, Y+3	; 0x03
    5562:	88 30       	cpi	r24, 0x08	; 8
    5564:	08 f0       	brcs	.+2      	; 0x5568 <DIO_enu_GetPinValue+0x30>
    5566:	76 c0       	rjmp	.+236    	; 0x5654 <DIO_enu_GetPinValue+0x11c>
    5568:	8c 81       	ldd	r24, Y+4	; 0x04
    556a:	9d 81       	ldd	r25, Y+5	; 0x05
    556c:	00 97       	sbiw	r24, 0x00	; 0
    556e:	09 f4       	brne	.+2      	; 0x5572 <DIO_enu_GetPinValue+0x3a>
    5570:	71 c0       	rjmp	.+226    	; 0x5654 <DIO_enu_GetPinValue+0x11c>
    {
        switch (Copy_u8_PortId)
    5572:	8a 81       	ldd	r24, Y+2	; 0x02
    5574:	28 2f       	mov	r18, r24
    5576:	30 e0       	ldi	r19, 0x00	; 0
    5578:	3f 83       	std	Y+7, r19	; 0x07
    557a:	2e 83       	std	Y+6, r18	; 0x06
    557c:	4e 81       	ldd	r20, Y+6	; 0x06
    557e:	5f 81       	ldd	r21, Y+7	; 0x07
    5580:	41 30       	cpi	r20, 0x01	; 1
    5582:	51 05       	cpc	r21, r1
    5584:	59 f1       	breq	.+86     	; 0x55dc <DIO_enu_GetPinValue+0xa4>
    5586:	8e 81       	ldd	r24, Y+6	; 0x06
    5588:	9f 81       	ldd	r25, Y+7	; 0x07
    558a:	82 30       	cpi	r24, 0x02	; 2
    558c:	91 05       	cpc	r25, r1
    558e:	34 f4       	brge	.+12     	; 0x559c <DIO_enu_GetPinValue+0x64>
    5590:	2e 81       	ldd	r18, Y+6	; 0x06
    5592:	3f 81       	ldd	r19, Y+7	; 0x07
    5594:	21 15       	cp	r18, r1
    5596:	31 05       	cpc	r19, r1
    5598:	69 f0       	breq	.+26     	; 0x55b4 <DIO_enu_GetPinValue+0x7c>
    559a:	5d c0       	rjmp	.+186    	; 0x5656 <DIO_enu_GetPinValue+0x11e>
    559c:	4e 81       	ldd	r20, Y+6	; 0x06
    559e:	5f 81       	ldd	r21, Y+7	; 0x07
    55a0:	42 30       	cpi	r20, 0x02	; 2
    55a2:	51 05       	cpc	r21, r1
    55a4:	79 f1       	breq	.+94     	; 0x5604 <DIO_enu_GetPinValue+0xcc>
    55a6:	8e 81       	ldd	r24, Y+6	; 0x06
    55a8:	9f 81       	ldd	r25, Y+7	; 0x07
    55aa:	83 30       	cpi	r24, 0x03	; 3
    55ac:	91 05       	cpc	r25, r1
    55ae:	09 f4       	brne	.+2      	; 0x55b2 <DIO_enu_GetPinValue+0x7a>
    55b0:	3d c0       	rjmp	.+122    	; 0x562c <DIO_enu_GetPinValue+0xf4>
    55b2:	51 c0       	rjmp	.+162    	; 0x5656 <DIO_enu_GetPinValue+0x11e>
        {
            case DIO_U8_PORTA:*Copy_pu8_ReturnPinValue = GET_BIT(DIO_U8_PINA_REG,Copy_u8_PinId);break;
    55b4:	e9 e3       	ldi	r30, 0x39	; 57
    55b6:	f0 e0       	ldi	r31, 0x00	; 0
    55b8:	80 81       	ld	r24, Z
    55ba:	28 2f       	mov	r18, r24
    55bc:	30 e0       	ldi	r19, 0x00	; 0
    55be:	8b 81       	ldd	r24, Y+3	; 0x03
    55c0:	88 2f       	mov	r24, r24
    55c2:	90 e0       	ldi	r25, 0x00	; 0
    55c4:	a9 01       	movw	r20, r18
    55c6:	02 c0       	rjmp	.+4      	; 0x55cc <DIO_enu_GetPinValue+0x94>
    55c8:	55 95       	asr	r21
    55ca:	47 95       	ror	r20
    55cc:	8a 95       	dec	r24
    55ce:	e2 f7       	brpl	.-8      	; 0x55c8 <DIO_enu_GetPinValue+0x90>
    55d0:	ca 01       	movw	r24, r20
    55d2:	81 70       	andi	r24, 0x01	; 1
    55d4:	ec 81       	ldd	r30, Y+4	; 0x04
    55d6:	fd 81       	ldd	r31, Y+5	; 0x05
    55d8:	80 83       	st	Z, r24
    55da:	3d c0       	rjmp	.+122    	; 0x5656 <DIO_enu_GetPinValue+0x11e>
            case DIO_U8_PORTB:*Copy_pu8_ReturnPinValue = GET_BIT(DIO_U8_PINB_REG,Copy_u8_PinId);break;
    55dc:	e6 e3       	ldi	r30, 0x36	; 54
    55de:	f0 e0       	ldi	r31, 0x00	; 0
    55e0:	80 81       	ld	r24, Z
    55e2:	28 2f       	mov	r18, r24
    55e4:	30 e0       	ldi	r19, 0x00	; 0
    55e6:	8b 81       	ldd	r24, Y+3	; 0x03
    55e8:	88 2f       	mov	r24, r24
    55ea:	90 e0       	ldi	r25, 0x00	; 0
    55ec:	a9 01       	movw	r20, r18
    55ee:	02 c0       	rjmp	.+4      	; 0x55f4 <DIO_enu_GetPinValue+0xbc>
    55f0:	55 95       	asr	r21
    55f2:	47 95       	ror	r20
    55f4:	8a 95       	dec	r24
    55f6:	e2 f7       	brpl	.-8      	; 0x55f0 <DIO_enu_GetPinValue+0xb8>
    55f8:	ca 01       	movw	r24, r20
    55fa:	81 70       	andi	r24, 0x01	; 1
    55fc:	ec 81       	ldd	r30, Y+4	; 0x04
    55fe:	fd 81       	ldd	r31, Y+5	; 0x05
    5600:	80 83       	st	Z, r24
    5602:	29 c0       	rjmp	.+82     	; 0x5656 <DIO_enu_GetPinValue+0x11e>
            case DIO_U8_PORTC:*Copy_pu8_ReturnPinValue = GET_BIT(DIO_U8_PINC_REG,Copy_u8_PinId);break;
    5604:	e3 e3       	ldi	r30, 0x33	; 51
    5606:	f0 e0       	ldi	r31, 0x00	; 0
    5608:	80 81       	ld	r24, Z
    560a:	28 2f       	mov	r18, r24
    560c:	30 e0       	ldi	r19, 0x00	; 0
    560e:	8b 81       	ldd	r24, Y+3	; 0x03
    5610:	88 2f       	mov	r24, r24
    5612:	90 e0       	ldi	r25, 0x00	; 0
    5614:	a9 01       	movw	r20, r18
    5616:	02 c0       	rjmp	.+4      	; 0x561c <DIO_enu_GetPinValue+0xe4>
    5618:	55 95       	asr	r21
    561a:	47 95       	ror	r20
    561c:	8a 95       	dec	r24
    561e:	e2 f7       	brpl	.-8      	; 0x5618 <DIO_enu_GetPinValue+0xe0>
    5620:	ca 01       	movw	r24, r20
    5622:	81 70       	andi	r24, 0x01	; 1
    5624:	ec 81       	ldd	r30, Y+4	; 0x04
    5626:	fd 81       	ldd	r31, Y+5	; 0x05
    5628:	80 83       	st	Z, r24
    562a:	15 c0       	rjmp	.+42     	; 0x5656 <DIO_enu_GetPinValue+0x11e>
            case DIO_U8_PORTD:*Copy_pu8_ReturnPinValue = GET_BIT(DIO_U8_PIND_REG,Copy_u8_PinId);break;
    562c:	e0 e3       	ldi	r30, 0x30	; 48
    562e:	f0 e0       	ldi	r31, 0x00	; 0
    5630:	80 81       	ld	r24, Z
    5632:	28 2f       	mov	r18, r24
    5634:	30 e0       	ldi	r19, 0x00	; 0
    5636:	8b 81       	ldd	r24, Y+3	; 0x03
    5638:	88 2f       	mov	r24, r24
    563a:	90 e0       	ldi	r25, 0x00	; 0
    563c:	a9 01       	movw	r20, r18
    563e:	02 c0       	rjmp	.+4      	; 0x5644 <DIO_enu_GetPinValue+0x10c>
    5640:	55 95       	asr	r21
    5642:	47 95       	ror	r20
    5644:	8a 95       	dec	r24
    5646:	e2 f7       	brpl	.-8      	; 0x5640 <DIO_enu_GetPinValue+0x108>
    5648:	ca 01       	movw	r24, r20
    564a:	81 70       	andi	r24, 0x01	; 1
    564c:	ec 81       	ldd	r30, Y+4	; 0x04
    564e:	fd 81       	ldd	r31, Y+5	; 0x05
    5650:	80 83       	st	Z, r24
    5652:	01 c0       	rjmp	.+2      	; 0x5656 <DIO_enu_GetPinValue+0x11e>
        }
    }
    else
    {
        Local_u8_ErrorState = STATE_NOT_OK;
    5654:	19 82       	std	Y+1, r1	; 0x01
    }
    return Local_u8_ErrorState;
    5656:	89 81       	ldd	r24, Y+1	; 0x01
}
    5658:	27 96       	adiw	r28, 0x07	; 7
    565a:	0f b6       	in	r0, 0x3f	; 63
    565c:	f8 94       	cli
    565e:	de bf       	out	0x3e, r29	; 62
    5660:	0f be       	out	0x3f, r0	; 63
    5662:	cd bf       	out	0x3d, r28	; 61
    5664:	cf 91       	pop	r28
    5666:	df 91       	pop	r29
    5668:	08 95       	ret

0000566a <DIO_enu_SetPortDirection>:

ES_t DIO_enu_SetPortDirection(u8 Copy_u8_PortId, u8 Copy_u8_PortDirection){
    566a:	df 93       	push	r29
    566c:	cf 93       	push	r28
    566e:	cd b7       	in	r28, 0x3d	; 61
    5670:	de b7       	in	r29, 0x3e	; 62
    5672:	2d 97       	sbiw	r28, 0x0d	; 13
    5674:	0f b6       	in	r0, 0x3f	; 63
    5676:	f8 94       	cli
    5678:	de bf       	out	0x3e, r29	; 62
    567a:	0f be       	out	0x3f, r0	; 63
    567c:	cd bf       	out	0x3d, r28	; 61
    567e:	8a 83       	std	Y+2, r24	; 0x02
    5680:	6b 83       	std	Y+3, r22	; 0x03
    u8 Local_u8_ErrorState = STATE_OK;
    5682:	81 e0       	ldi	r24, 0x01	; 1
    5684:	89 83       	std	Y+1, r24	; 0x01
    if((Copy_u8_PortId <= DIO_U8_PORTD) &&((Copy_u8_PortDirection == DIO_U8_OUTPUT)||(Copy_u8_PortDirection == DIO_U8_INPUT))){
    5686:	8a 81       	ldd	r24, Y+2	; 0x02
    5688:	84 30       	cpi	r24, 0x04	; 4
    568a:	08 f0       	brcs	.+2      	; 0x568e <DIO_enu_SetPortDirection+0x24>
    568c:	84 c0       	rjmp	.+264    	; 0x5796 <DIO_enu_SetPortDirection+0x12c>
    568e:	8b 81       	ldd	r24, Y+3	; 0x03
    5690:	81 30       	cpi	r24, 0x01	; 1
    5692:	21 f0       	breq	.+8      	; 0x569c <DIO_enu_SetPortDirection+0x32>
    5694:	8b 81       	ldd	r24, Y+3	; 0x03
    5696:	88 23       	and	r24, r24
    5698:	09 f0       	breq	.+2      	; 0x569c <DIO_enu_SetPortDirection+0x32>
    569a:	7d c0       	rjmp	.+250    	; 0x5796 <DIO_enu_SetPortDirection+0x12c>
        switch (Copy_u8_PortId)
    569c:	8a 81       	ldd	r24, Y+2	; 0x02
    569e:	28 2f       	mov	r18, r24
    56a0:	30 e0       	ldi	r19, 0x00	; 0
    56a2:	3d 87       	std	Y+13, r19	; 0x0d
    56a4:	2c 87       	std	Y+12, r18	; 0x0c
    56a6:	8c 85       	ldd	r24, Y+12	; 0x0c
    56a8:	9d 85       	ldd	r25, Y+13	; 0x0d
    56aa:	81 30       	cpi	r24, 0x01	; 1
    56ac:	91 05       	cpc	r25, r1
    56ae:	71 f1       	breq	.+92     	; 0x570c <DIO_enu_SetPortDirection+0xa2>
    56b0:	2c 85       	ldd	r18, Y+12	; 0x0c
    56b2:	3d 85       	ldd	r19, Y+13	; 0x0d
    56b4:	22 30       	cpi	r18, 0x02	; 2
    56b6:	31 05       	cpc	r19, r1
    56b8:	2c f4       	brge	.+10     	; 0x56c4 <DIO_enu_SetPortDirection+0x5a>
    56ba:	8c 85       	ldd	r24, Y+12	; 0x0c
    56bc:	9d 85       	ldd	r25, Y+13	; 0x0d
    56be:	00 97       	sbiw	r24, 0x00	; 0
    56c0:	69 f0       	breq	.+26     	; 0x56dc <DIO_enu_SetPortDirection+0x72>
    56c2:	6a c0       	rjmp	.+212    	; 0x5798 <DIO_enu_SetPortDirection+0x12e>
    56c4:	2c 85       	ldd	r18, Y+12	; 0x0c
    56c6:	3d 85       	ldd	r19, Y+13	; 0x0d
    56c8:	22 30       	cpi	r18, 0x02	; 2
    56ca:	31 05       	cpc	r19, r1
    56cc:	b1 f1       	breq	.+108    	; 0x573a <DIO_enu_SetPortDirection+0xd0>
    56ce:	8c 85       	ldd	r24, Y+12	; 0x0c
    56d0:	9d 85       	ldd	r25, Y+13	; 0x0d
    56d2:	83 30       	cpi	r24, 0x03	; 3
    56d4:	91 05       	cpc	r25, r1
    56d6:	09 f4       	brne	.+2      	; 0x56da <DIO_enu_SetPortDirection+0x70>
    56d8:	47 c0       	rjmp	.+142    	; 0x5768 <DIO_enu_SetPortDirection+0xfe>
    56da:	5e c0       	rjmp	.+188    	; 0x5798 <DIO_enu_SetPortDirection+0x12e>
        {
        case DIO_U8_PORTA:
            switch (Copy_u8_PortDirection)
    56dc:	8b 81       	ldd	r24, Y+3	; 0x03
    56de:	28 2f       	mov	r18, r24
    56e0:	30 e0       	ldi	r19, 0x00	; 0
    56e2:	3b 87       	std	Y+11, r19	; 0x0b
    56e4:	2a 87       	std	Y+10, r18	; 0x0a
    56e6:	8a 85       	ldd	r24, Y+10	; 0x0a
    56e8:	9b 85       	ldd	r25, Y+11	; 0x0b
    56ea:	00 97       	sbiw	r24, 0x00	; 0
    56ec:	59 f0       	breq	.+22     	; 0x5704 <DIO_enu_SetPortDirection+0x9a>
    56ee:	2a 85       	ldd	r18, Y+10	; 0x0a
    56f0:	3b 85       	ldd	r19, Y+11	; 0x0b
    56f2:	21 30       	cpi	r18, 0x01	; 1
    56f4:	31 05       	cpc	r19, r1
    56f6:	09 f0       	breq	.+2      	; 0x56fa <DIO_enu_SetPortDirection+0x90>
    56f8:	4f c0       	rjmp	.+158    	; 0x5798 <DIO_enu_SetPortDirection+0x12e>
            {
            case DIO_U8_OUTPUT: DIO_U8_DDRA_REG = DIO_U8_SETPORT_OUTPUT; break;
    56fa:	ea e3       	ldi	r30, 0x3A	; 58
    56fc:	f0 e0       	ldi	r31, 0x00	; 0
    56fe:	8f ef       	ldi	r24, 0xFF	; 255
    5700:	80 83       	st	Z, r24
    5702:	4a c0       	rjmp	.+148    	; 0x5798 <DIO_enu_SetPortDirection+0x12e>
            case DIO_U8_INPUT: DIO_U8_DDRA_REG =  DIO_U8_SETPORT_INPUT; break;
    5704:	ea e3       	ldi	r30, 0x3A	; 58
    5706:	f0 e0       	ldi	r31, 0x00	; 0
    5708:	10 82       	st	Z, r1
    570a:	46 c0       	rjmp	.+140    	; 0x5798 <DIO_enu_SetPortDirection+0x12e>
            }
        break;
        case DIO_U8_PORTB:
            switch (Copy_u8_PortDirection)
    570c:	8b 81       	ldd	r24, Y+3	; 0x03
    570e:	28 2f       	mov	r18, r24
    5710:	30 e0       	ldi	r19, 0x00	; 0
    5712:	39 87       	std	Y+9, r19	; 0x09
    5714:	28 87       	std	Y+8, r18	; 0x08
    5716:	88 85       	ldd	r24, Y+8	; 0x08
    5718:	99 85       	ldd	r25, Y+9	; 0x09
    571a:	00 97       	sbiw	r24, 0x00	; 0
    571c:	51 f0       	breq	.+20     	; 0x5732 <DIO_enu_SetPortDirection+0xc8>
    571e:	28 85       	ldd	r18, Y+8	; 0x08
    5720:	39 85       	ldd	r19, Y+9	; 0x09
    5722:	21 30       	cpi	r18, 0x01	; 1
    5724:	31 05       	cpc	r19, r1
    5726:	c1 f5       	brne	.+112    	; 0x5798 <DIO_enu_SetPortDirection+0x12e>
                {
                case DIO_U8_OUTPUT: DIO_U8_DDRB_REG = DIO_U8_SETPORT_OUTPUT; break;
    5728:	e7 e3       	ldi	r30, 0x37	; 55
    572a:	f0 e0       	ldi	r31, 0x00	; 0
    572c:	8f ef       	ldi	r24, 0xFF	; 255
    572e:	80 83       	st	Z, r24
    5730:	33 c0       	rjmp	.+102    	; 0x5798 <DIO_enu_SetPortDirection+0x12e>
                case DIO_U8_INPUT: DIO_U8_DDRB_REG =  DIO_U8_SETPORT_INPUT; break;
    5732:	e7 e3       	ldi	r30, 0x37	; 55
    5734:	f0 e0       	ldi	r31, 0x00	; 0
    5736:	10 82       	st	Z, r1
    5738:	2f c0       	rjmp	.+94     	; 0x5798 <DIO_enu_SetPortDirection+0x12e>
                }
         break;
        case DIO_U8_PORTC:
            switch (Copy_u8_PortDirection)
    573a:	8b 81       	ldd	r24, Y+3	; 0x03
    573c:	28 2f       	mov	r18, r24
    573e:	30 e0       	ldi	r19, 0x00	; 0
    5740:	3f 83       	std	Y+7, r19	; 0x07
    5742:	2e 83       	std	Y+6, r18	; 0x06
    5744:	8e 81       	ldd	r24, Y+6	; 0x06
    5746:	9f 81       	ldd	r25, Y+7	; 0x07
    5748:	00 97       	sbiw	r24, 0x00	; 0
    574a:	51 f0       	breq	.+20     	; 0x5760 <DIO_enu_SetPortDirection+0xf6>
    574c:	2e 81       	ldd	r18, Y+6	; 0x06
    574e:	3f 81       	ldd	r19, Y+7	; 0x07
    5750:	21 30       	cpi	r18, 0x01	; 1
    5752:	31 05       	cpc	r19, r1
    5754:	09 f5       	brne	.+66     	; 0x5798 <DIO_enu_SetPortDirection+0x12e>
                {
                case DIO_U8_OUTPUT: DIO_U8_DDRC_REG = DIO_U8_SETPORT_OUTPUT; break;
    5756:	e4 e3       	ldi	r30, 0x34	; 52
    5758:	f0 e0       	ldi	r31, 0x00	; 0
    575a:	8f ef       	ldi	r24, 0xFF	; 255
    575c:	80 83       	st	Z, r24
    575e:	1c c0       	rjmp	.+56     	; 0x5798 <DIO_enu_SetPortDirection+0x12e>
                case DIO_U8_INPUT: DIO_U8_DDRC_REG = DIO_U8_SETPORT_INPUT; break;
    5760:	e4 e3       	ldi	r30, 0x34	; 52
    5762:	f0 e0       	ldi	r31, 0x00	; 0
    5764:	10 82       	st	Z, r1
    5766:	18 c0       	rjmp	.+48     	; 0x5798 <DIO_enu_SetPortDirection+0x12e>
                }
        break;
        case DIO_U8_PORTD:
            switch (Copy_u8_PortDirection)
    5768:	8b 81       	ldd	r24, Y+3	; 0x03
    576a:	28 2f       	mov	r18, r24
    576c:	30 e0       	ldi	r19, 0x00	; 0
    576e:	3d 83       	std	Y+5, r19	; 0x05
    5770:	2c 83       	std	Y+4, r18	; 0x04
    5772:	8c 81       	ldd	r24, Y+4	; 0x04
    5774:	9d 81       	ldd	r25, Y+5	; 0x05
    5776:	00 97       	sbiw	r24, 0x00	; 0
    5778:	51 f0       	breq	.+20     	; 0x578e <DIO_enu_SetPortDirection+0x124>
    577a:	2c 81       	ldd	r18, Y+4	; 0x04
    577c:	3d 81       	ldd	r19, Y+5	; 0x05
    577e:	21 30       	cpi	r18, 0x01	; 1
    5780:	31 05       	cpc	r19, r1
    5782:	51 f4       	brne	.+20     	; 0x5798 <DIO_enu_SetPortDirection+0x12e>
                {
                case DIO_U8_OUTPUT: DIO_U8_DDRD_REG = DIO_U8_SETPORT_OUTPUT; break;
    5784:	e1 e3       	ldi	r30, 0x31	; 49
    5786:	f0 e0       	ldi	r31, 0x00	; 0
    5788:	8f ef       	ldi	r24, 0xFF	; 255
    578a:	80 83       	st	Z, r24
    578c:	05 c0       	rjmp	.+10     	; 0x5798 <DIO_enu_SetPortDirection+0x12e>
                case DIO_U8_INPUT: DIO_U8_DDRD_REG = DIO_U8_SETPORT_INPUT; break;
    578e:	e1 e3       	ldi	r30, 0x31	; 49
    5790:	f0 e0       	ldi	r31, 0x00	; 0
    5792:	10 82       	st	Z, r1
    5794:	01 c0       	rjmp	.+2      	; 0x5798 <DIO_enu_SetPortDirection+0x12e>
                }
        break;
        }
    }else{
        Local_u8_ErrorState = STATE_NOT_OK;
    5796:	19 82       	std	Y+1, r1	; 0x01
    }
    return Local_u8_ErrorState;
    5798:	89 81       	ldd	r24, Y+1	; 0x01
}
    579a:	2d 96       	adiw	r28, 0x0d	; 13
    579c:	0f b6       	in	r0, 0x3f	; 63
    579e:	f8 94       	cli
    57a0:	de bf       	out	0x3e, r29	; 62
    57a2:	0f be       	out	0x3f, r0	; 63
    57a4:	cd bf       	out	0x3d, r28	; 61
    57a6:	cf 91       	pop	r28
    57a8:	df 91       	pop	r29
    57aa:	08 95       	ret

000057ac <DIO_enu_SetPortValue>:

ES_t DIO_enu_SetPortValue(u8 Copy_u8_PortId, u8 Copy_u8_PortValue){
    57ac:	df 93       	push	r29
    57ae:	cf 93       	push	r28
    57b0:	00 d0       	rcall	.+0      	; 0x57b2 <DIO_enu_SetPortValue+0x6>
    57b2:	00 d0       	rcall	.+0      	; 0x57b4 <DIO_enu_SetPortValue+0x8>
    57b4:	0f 92       	push	r0
    57b6:	cd b7       	in	r28, 0x3d	; 61
    57b8:	de b7       	in	r29, 0x3e	; 62
    57ba:	8a 83       	std	Y+2, r24	; 0x02
    57bc:	6b 83       	std	Y+3, r22	; 0x03
	u8 Local_u8_ErrorState = STATE_OK;
    57be:	81 e0       	ldi	r24, 0x01	; 1
    57c0:	89 83       	std	Y+1, r24	; 0x01
	    if((Copy_u8_PortId <= DIO_U8_PORTD)){
    57c2:	8a 81       	ldd	r24, Y+2	; 0x02
    57c4:	84 30       	cpi	r24, 0x04	; 4
    57c6:	98 f5       	brcc	.+102    	; 0x582e <DIO_enu_SetPortValue+0x82>
	        switch (Copy_u8_PortId)
    57c8:	8a 81       	ldd	r24, Y+2	; 0x02
    57ca:	28 2f       	mov	r18, r24
    57cc:	30 e0       	ldi	r19, 0x00	; 0
    57ce:	3d 83       	std	Y+5, r19	; 0x05
    57d0:	2c 83       	std	Y+4, r18	; 0x04
    57d2:	8c 81       	ldd	r24, Y+4	; 0x04
    57d4:	9d 81       	ldd	r25, Y+5	; 0x05
    57d6:	81 30       	cpi	r24, 0x01	; 1
    57d8:	91 05       	cpc	r25, r1
    57da:	d1 f0       	breq	.+52     	; 0x5810 <DIO_enu_SetPortValue+0x64>
    57dc:	2c 81       	ldd	r18, Y+4	; 0x04
    57de:	3d 81       	ldd	r19, Y+5	; 0x05
    57e0:	22 30       	cpi	r18, 0x02	; 2
    57e2:	31 05       	cpc	r19, r1
    57e4:	2c f4       	brge	.+10     	; 0x57f0 <DIO_enu_SetPortValue+0x44>
    57e6:	8c 81       	ldd	r24, Y+4	; 0x04
    57e8:	9d 81       	ldd	r25, Y+5	; 0x05
    57ea:	00 97       	sbiw	r24, 0x00	; 0
    57ec:	61 f0       	breq	.+24     	; 0x5806 <DIO_enu_SetPortValue+0x5a>
    57ee:	20 c0       	rjmp	.+64     	; 0x5830 <DIO_enu_SetPortValue+0x84>
    57f0:	2c 81       	ldd	r18, Y+4	; 0x04
    57f2:	3d 81       	ldd	r19, Y+5	; 0x05
    57f4:	22 30       	cpi	r18, 0x02	; 2
    57f6:	31 05       	cpc	r19, r1
    57f8:	81 f0       	breq	.+32     	; 0x581a <DIO_enu_SetPortValue+0x6e>
    57fa:	8c 81       	ldd	r24, Y+4	; 0x04
    57fc:	9d 81       	ldd	r25, Y+5	; 0x05
    57fe:	83 30       	cpi	r24, 0x03	; 3
    5800:	91 05       	cpc	r25, r1
    5802:	81 f0       	breq	.+32     	; 0x5824 <DIO_enu_SetPortValue+0x78>
    5804:	15 c0       	rjmp	.+42     	; 0x5830 <DIO_enu_SetPortValue+0x84>
	        {
	        case DIO_U8_PORTA:DIO_U8_PORTA_REG = Copy_u8_PortValue; break;
    5806:	eb e3       	ldi	r30, 0x3B	; 59
    5808:	f0 e0       	ldi	r31, 0x00	; 0
    580a:	8b 81       	ldd	r24, Y+3	; 0x03
    580c:	80 83       	st	Z, r24
    580e:	10 c0       	rjmp	.+32     	; 0x5830 <DIO_enu_SetPortValue+0x84>
	        case DIO_U8_PORTB:DIO_U8_PORTB_REG = Copy_u8_PortValue; break;
    5810:	e8 e3       	ldi	r30, 0x38	; 56
    5812:	f0 e0       	ldi	r31, 0x00	; 0
    5814:	8b 81       	ldd	r24, Y+3	; 0x03
    5816:	80 83       	st	Z, r24
    5818:	0b c0       	rjmp	.+22     	; 0x5830 <DIO_enu_SetPortValue+0x84>
	        case DIO_U8_PORTC:DIO_U8_PORTC_REG = Copy_u8_PortValue; break;
    581a:	e5 e3       	ldi	r30, 0x35	; 53
    581c:	f0 e0       	ldi	r31, 0x00	; 0
    581e:	8b 81       	ldd	r24, Y+3	; 0x03
    5820:	80 83       	st	Z, r24
    5822:	06 c0       	rjmp	.+12     	; 0x5830 <DIO_enu_SetPortValue+0x84>
	        case DIO_U8_PORTD:DIO_U8_PORTD_REG = Copy_u8_PortValue; break;
    5824:	e2 e3       	ldi	r30, 0x32	; 50
    5826:	f0 e0       	ldi	r31, 0x00	; 0
    5828:	8b 81       	ldd	r24, Y+3	; 0x03
    582a:	80 83       	st	Z, r24
    582c:	01 c0       	rjmp	.+2      	; 0x5830 <DIO_enu_SetPortValue+0x84>
	        }
	    }else{
	        Local_u8_ErrorState = STATE_NOT_OK;
    582e:	19 82       	std	Y+1, r1	; 0x01
	    }
	    return Local_u8_ErrorState;
    5830:	89 81       	ldd	r24, Y+1	; 0x01
}
    5832:	0f 90       	pop	r0
    5834:	0f 90       	pop	r0
    5836:	0f 90       	pop	r0
    5838:	0f 90       	pop	r0
    583a:	0f 90       	pop	r0
    583c:	cf 91       	pop	r28
    583e:	df 91       	pop	r29
    5840:	08 95       	ret

00005842 <DIO_enu_GetPortValue>:

ES_t DIO_enu_GetPortValue(u8 Copy_u8_PortId, u8 * Copy_u8_ReturnPortValue){
    5842:	df 93       	push	r29
    5844:	cf 93       	push	r28
    5846:	00 d0       	rcall	.+0      	; 0x5848 <DIO_enu_GetPortValue+0x6>
    5848:	00 d0       	rcall	.+0      	; 0x584a <DIO_enu_GetPortValue+0x8>
    584a:	00 d0       	rcall	.+0      	; 0x584c <DIO_enu_GetPortValue+0xa>
    584c:	cd b7       	in	r28, 0x3d	; 61
    584e:	de b7       	in	r29, 0x3e	; 62
    5850:	8a 83       	std	Y+2, r24	; 0x02
    5852:	7c 83       	std	Y+4, r23	; 0x04
    5854:	6b 83       	std	Y+3, r22	; 0x03
    u8 Local_u8_ErrorState = STATE_OK;
    5856:	81 e0       	ldi	r24, 0x01	; 1
    5858:	89 83       	std	Y+1, r24	; 0x01
    if((Copy_u8_PortId<= DIO_U8_PORTD) && (Copy_u8_ReturnPortValue != NULL)){
    585a:	8a 81       	ldd	r24, Y+2	; 0x02
    585c:	84 30       	cpi	r24, 0x04	; 4
    585e:	08 f0       	brcs	.+2      	; 0x5862 <DIO_enu_GetPortValue+0x20>
    5860:	3f c0       	rjmp	.+126    	; 0x58e0 <DIO_enu_GetPortValue+0x9e>
    5862:	8b 81       	ldd	r24, Y+3	; 0x03
    5864:	9c 81       	ldd	r25, Y+4	; 0x04
    5866:	00 97       	sbiw	r24, 0x00	; 0
    5868:	d9 f1       	breq	.+118    	; 0x58e0 <DIO_enu_GetPortValue+0x9e>
        switch (Copy_u8_PortId)
    586a:	8a 81       	ldd	r24, Y+2	; 0x02
    586c:	28 2f       	mov	r18, r24
    586e:	30 e0       	ldi	r19, 0x00	; 0
    5870:	3e 83       	std	Y+6, r19	; 0x06
    5872:	2d 83       	std	Y+5, r18	; 0x05
    5874:	8d 81       	ldd	r24, Y+5	; 0x05
    5876:	9e 81       	ldd	r25, Y+6	; 0x06
    5878:	81 30       	cpi	r24, 0x01	; 1
    587a:	91 05       	cpc	r25, r1
    587c:	e1 f0       	breq	.+56     	; 0x58b6 <DIO_enu_GetPortValue+0x74>
    587e:	2d 81       	ldd	r18, Y+5	; 0x05
    5880:	3e 81       	ldd	r19, Y+6	; 0x06
    5882:	22 30       	cpi	r18, 0x02	; 2
    5884:	31 05       	cpc	r19, r1
    5886:	2c f4       	brge	.+10     	; 0x5892 <DIO_enu_GetPortValue+0x50>
    5888:	8d 81       	ldd	r24, Y+5	; 0x05
    588a:	9e 81       	ldd	r25, Y+6	; 0x06
    588c:	00 97       	sbiw	r24, 0x00	; 0
    588e:	61 f0       	breq	.+24     	; 0x58a8 <DIO_enu_GetPortValue+0x66>
    5890:	28 c0       	rjmp	.+80     	; 0x58e2 <DIO_enu_GetPortValue+0xa0>
    5892:	2d 81       	ldd	r18, Y+5	; 0x05
    5894:	3e 81       	ldd	r19, Y+6	; 0x06
    5896:	22 30       	cpi	r18, 0x02	; 2
    5898:	31 05       	cpc	r19, r1
    589a:	a1 f0       	breq	.+40     	; 0x58c4 <DIO_enu_GetPortValue+0x82>
    589c:	8d 81       	ldd	r24, Y+5	; 0x05
    589e:	9e 81       	ldd	r25, Y+6	; 0x06
    58a0:	83 30       	cpi	r24, 0x03	; 3
    58a2:	91 05       	cpc	r25, r1
    58a4:	b1 f0       	breq	.+44     	; 0x58d2 <DIO_enu_GetPortValue+0x90>
    58a6:	1d c0       	rjmp	.+58     	; 0x58e2 <DIO_enu_GetPortValue+0xa0>
        {
        case DIO_U8_PORTA: *Copy_u8_ReturnPortValue = DIO_U8_PINA_REG;break;
    58a8:	e9 e3       	ldi	r30, 0x39	; 57
    58aa:	f0 e0       	ldi	r31, 0x00	; 0
    58ac:	80 81       	ld	r24, Z
    58ae:	eb 81       	ldd	r30, Y+3	; 0x03
    58b0:	fc 81       	ldd	r31, Y+4	; 0x04
    58b2:	80 83       	st	Z, r24
    58b4:	16 c0       	rjmp	.+44     	; 0x58e2 <DIO_enu_GetPortValue+0xa0>
        case DIO_U8_PORTB: *Copy_u8_ReturnPortValue = DIO_U8_PINB_REG;break;
    58b6:	e6 e3       	ldi	r30, 0x36	; 54
    58b8:	f0 e0       	ldi	r31, 0x00	; 0
    58ba:	80 81       	ld	r24, Z
    58bc:	eb 81       	ldd	r30, Y+3	; 0x03
    58be:	fc 81       	ldd	r31, Y+4	; 0x04
    58c0:	80 83       	st	Z, r24
    58c2:	0f c0       	rjmp	.+30     	; 0x58e2 <DIO_enu_GetPortValue+0xa0>
        case DIO_U8_PORTC: *Copy_u8_ReturnPortValue = DIO_U8_PINC_REG;break;
    58c4:	e3 e3       	ldi	r30, 0x33	; 51
    58c6:	f0 e0       	ldi	r31, 0x00	; 0
    58c8:	80 81       	ld	r24, Z
    58ca:	eb 81       	ldd	r30, Y+3	; 0x03
    58cc:	fc 81       	ldd	r31, Y+4	; 0x04
    58ce:	80 83       	st	Z, r24
    58d0:	08 c0       	rjmp	.+16     	; 0x58e2 <DIO_enu_GetPortValue+0xa0>
        case DIO_U8_PORTD: *Copy_u8_ReturnPortValue = DIO_U8_PIND_REG;break;
    58d2:	e0 e3       	ldi	r30, 0x30	; 48
    58d4:	f0 e0       	ldi	r31, 0x00	; 0
    58d6:	80 81       	ld	r24, Z
    58d8:	eb 81       	ldd	r30, Y+3	; 0x03
    58da:	fc 81       	ldd	r31, Y+4	; 0x04
    58dc:	80 83       	st	Z, r24
    58de:	01 c0       	rjmp	.+2      	; 0x58e2 <DIO_enu_GetPortValue+0xa0>
        }
    }
    else{
        Local_u8_ErrorState = STATE_NOT_OK;
    58e0:	19 82       	std	Y+1, r1	; 0x01
    }
    return Local_u8_ErrorState;
    58e2:	89 81       	ldd	r24, Y+1	; 0x01
}
    58e4:	26 96       	adiw	r28, 0x06	; 6
    58e6:	0f b6       	in	r0, 0x3f	; 63
    58e8:	f8 94       	cli
    58ea:	de bf       	out	0x3e, r29	; 62
    58ec:	0f be       	out	0x3f, r0	; 63
    58ee:	cd bf       	out	0x3d, r28	; 61
    58f0:	cf 91       	pop	r28
    58f2:	df 91       	pop	r29
    58f4:	08 95       	ret

000058f6 <DIO_enu_ToggPin>:
ES_t DIO_enu_ToggPin(u8 Copy_u8_PortId, u8 Copy_u8_PinId){
    58f6:	df 93       	push	r29
    58f8:	cf 93       	push	r28
    58fa:	00 d0       	rcall	.+0      	; 0x58fc <DIO_enu_ToggPin+0x6>
    58fc:	00 d0       	rcall	.+0      	; 0x58fe <DIO_enu_ToggPin+0x8>
    58fe:	0f 92       	push	r0
    5900:	cd b7       	in	r28, 0x3d	; 61
    5902:	de b7       	in	r29, 0x3e	; 62
    5904:	8a 83       	std	Y+2, r24	; 0x02
    5906:	6b 83       	std	Y+3, r22	; 0x03
    u8 Local_u8_errorState = STATE_OK;
    5908:	81 e0       	ldi	r24, 0x01	; 1
    590a:	89 83       	std	Y+1, r24	; 0x01
    if((Copy_u8_PortId <=DIO_U8_PORTD)&&(Copy_u8_PinId <= DIO_U8_PIN7)){
    590c:	8a 81       	ldd	r24, Y+2	; 0x02
    590e:	84 30       	cpi	r24, 0x04	; 4
    5910:	08 f0       	brcs	.+2      	; 0x5914 <DIO_enu_ToggPin+0x1e>
    5912:	73 c0       	rjmp	.+230    	; 0x59fa <DIO_enu_ToggPin+0x104>
    5914:	8b 81       	ldd	r24, Y+3	; 0x03
    5916:	88 30       	cpi	r24, 0x08	; 8
    5918:	08 f0       	brcs	.+2      	; 0x591c <DIO_enu_ToggPin+0x26>
    591a:	6f c0       	rjmp	.+222    	; 0x59fa <DIO_enu_ToggPin+0x104>
        switch (Copy_u8_PortId)
    591c:	8a 81       	ldd	r24, Y+2	; 0x02
    591e:	28 2f       	mov	r18, r24
    5920:	30 e0       	ldi	r19, 0x00	; 0
    5922:	3d 83       	std	Y+5, r19	; 0x05
    5924:	2c 83       	std	Y+4, r18	; 0x04
    5926:	8c 81       	ldd	r24, Y+4	; 0x04
    5928:	9d 81       	ldd	r25, Y+5	; 0x05
    592a:	81 30       	cpi	r24, 0x01	; 1
    592c:	91 05       	cpc	r25, r1
    592e:	49 f1       	breq	.+82     	; 0x5982 <DIO_enu_ToggPin+0x8c>
    5930:	2c 81       	ldd	r18, Y+4	; 0x04
    5932:	3d 81       	ldd	r19, Y+5	; 0x05
    5934:	22 30       	cpi	r18, 0x02	; 2
    5936:	31 05       	cpc	r19, r1
    5938:	2c f4       	brge	.+10     	; 0x5944 <DIO_enu_ToggPin+0x4e>
    593a:	8c 81       	ldd	r24, Y+4	; 0x04
    593c:	9d 81       	ldd	r25, Y+5	; 0x05
    593e:	00 97       	sbiw	r24, 0x00	; 0
    5940:	61 f0       	breq	.+24     	; 0x595a <DIO_enu_ToggPin+0x64>
    5942:	5c c0       	rjmp	.+184    	; 0x59fc <DIO_enu_ToggPin+0x106>
    5944:	2c 81       	ldd	r18, Y+4	; 0x04
    5946:	3d 81       	ldd	r19, Y+5	; 0x05
    5948:	22 30       	cpi	r18, 0x02	; 2
    594a:	31 05       	cpc	r19, r1
    594c:	71 f1       	breq	.+92     	; 0x59aa <DIO_enu_ToggPin+0xb4>
    594e:	8c 81       	ldd	r24, Y+4	; 0x04
    5950:	9d 81       	ldd	r25, Y+5	; 0x05
    5952:	83 30       	cpi	r24, 0x03	; 3
    5954:	91 05       	cpc	r25, r1
    5956:	e9 f1       	breq	.+122    	; 0x59d2 <DIO_enu_ToggPin+0xdc>
    5958:	51 c0       	rjmp	.+162    	; 0x59fc <DIO_enu_ToggPin+0x106>
	        {
	        case DIO_U8_PORTA:TOG_BIT(DIO_U8_PORTA_REG,Copy_u8_PinId); break;
    595a:	ab e3       	ldi	r26, 0x3B	; 59
    595c:	b0 e0       	ldi	r27, 0x00	; 0
    595e:	eb e3       	ldi	r30, 0x3B	; 59
    5960:	f0 e0       	ldi	r31, 0x00	; 0
    5962:	80 81       	ld	r24, Z
    5964:	48 2f       	mov	r20, r24
    5966:	8b 81       	ldd	r24, Y+3	; 0x03
    5968:	28 2f       	mov	r18, r24
    596a:	30 e0       	ldi	r19, 0x00	; 0
    596c:	81 e0       	ldi	r24, 0x01	; 1
    596e:	90 e0       	ldi	r25, 0x00	; 0
    5970:	02 2e       	mov	r0, r18
    5972:	02 c0       	rjmp	.+4      	; 0x5978 <DIO_enu_ToggPin+0x82>
    5974:	88 0f       	add	r24, r24
    5976:	99 1f       	adc	r25, r25
    5978:	0a 94       	dec	r0
    597a:	e2 f7       	brpl	.-8      	; 0x5974 <DIO_enu_ToggPin+0x7e>
    597c:	84 27       	eor	r24, r20
    597e:	8c 93       	st	X, r24
    5980:	3d c0       	rjmp	.+122    	; 0x59fc <DIO_enu_ToggPin+0x106>
	        case DIO_U8_PORTB:TOG_BIT(DIO_U8_PORTB_REG,Copy_u8_PinId); break;
    5982:	a8 e3       	ldi	r26, 0x38	; 56
    5984:	b0 e0       	ldi	r27, 0x00	; 0
    5986:	e8 e3       	ldi	r30, 0x38	; 56
    5988:	f0 e0       	ldi	r31, 0x00	; 0
    598a:	80 81       	ld	r24, Z
    598c:	48 2f       	mov	r20, r24
    598e:	8b 81       	ldd	r24, Y+3	; 0x03
    5990:	28 2f       	mov	r18, r24
    5992:	30 e0       	ldi	r19, 0x00	; 0
    5994:	81 e0       	ldi	r24, 0x01	; 1
    5996:	90 e0       	ldi	r25, 0x00	; 0
    5998:	02 2e       	mov	r0, r18
    599a:	02 c0       	rjmp	.+4      	; 0x59a0 <DIO_enu_ToggPin+0xaa>
    599c:	88 0f       	add	r24, r24
    599e:	99 1f       	adc	r25, r25
    59a0:	0a 94       	dec	r0
    59a2:	e2 f7       	brpl	.-8      	; 0x599c <DIO_enu_ToggPin+0xa6>
    59a4:	84 27       	eor	r24, r20
    59a6:	8c 93       	st	X, r24
    59a8:	29 c0       	rjmp	.+82     	; 0x59fc <DIO_enu_ToggPin+0x106>
	        case DIO_U8_PORTC:TOG_BIT(DIO_U8_PORTC_REG,Copy_u8_PinId); break;
    59aa:	a5 e3       	ldi	r26, 0x35	; 53
    59ac:	b0 e0       	ldi	r27, 0x00	; 0
    59ae:	e5 e3       	ldi	r30, 0x35	; 53
    59b0:	f0 e0       	ldi	r31, 0x00	; 0
    59b2:	80 81       	ld	r24, Z
    59b4:	48 2f       	mov	r20, r24
    59b6:	8b 81       	ldd	r24, Y+3	; 0x03
    59b8:	28 2f       	mov	r18, r24
    59ba:	30 e0       	ldi	r19, 0x00	; 0
    59bc:	81 e0       	ldi	r24, 0x01	; 1
    59be:	90 e0       	ldi	r25, 0x00	; 0
    59c0:	02 2e       	mov	r0, r18
    59c2:	02 c0       	rjmp	.+4      	; 0x59c8 <DIO_enu_ToggPin+0xd2>
    59c4:	88 0f       	add	r24, r24
    59c6:	99 1f       	adc	r25, r25
    59c8:	0a 94       	dec	r0
    59ca:	e2 f7       	brpl	.-8      	; 0x59c4 <DIO_enu_ToggPin+0xce>
    59cc:	84 27       	eor	r24, r20
    59ce:	8c 93       	st	X, r24
    59d0:	15 c0       	rjmp	.+42     	; 0x59fc <DIO_enu_ToggPin+0x106>
	        case DIO_U8_PORTD:TOG_BIT(DIO_U8_PORTD_REG,Copy_u8_PinId); break;
    59d2:	a2 e3       	ldi	r26, 0x32	; 50
    59d4:	b0 e0       	ldi	r27, 0x00	; 0
    59d6:	e2 e3       	ldi	r30, 0x32	; 50
    59d8:	f0 e0       	ldi	r31, 0x00	; 0
    59da:	80 81       	ld	r24, Z
    59dc:	48 2f       	mov	r20, r24
    59de:	8b 81       	ldd	r24, Y+3	; 0x03
    59e0:	28 2f       	mov	r18, r24
    59e2:	30 e0       	ldi	r19, 0x00	; 0
    59e4:	81 e0       	ldi	r24, 0x01	; 1
    59e6:	90 e0       	ldi	r25, 0x00	; 0
    59e8:	02 2e       	mov	r0, r18
    59ea:	02 c0       	rjmp	.+4      	; 0x59f0 <DIO_enu_ToggPin+0xfa>
    59ec:	88 0f       	add	r24, r24
    59ee:	99 1f       	adc	r25, r25
    59f0:	0a 94       	dec	r0
    59f2:	e2 f7       	brpl	.-8      	; 0x59ec <DIO_enu_ToggPin+0xf6>
    59f4:	84 27       	eor	r24, r20
    59f6:	8c 93       	st	X, r24
    59f8:	01 c0       	rjmp	.+2      	; 0x59fc <DIO_enu_ToggPin+0x106>
	        }
    }else{
        Local_u8_errorState = STATE_NOT_OK;
    59fa:	19 82       	std	Y+1, r1	; 0x01
    }
    return Local_u8_errorState;
    59fc:	89 81       	ldd	r24, Y+1	; 0x01


}
    59fe:	0f 90       	pop	r0
    5a00:	0f 90       	pop	r0
    5a02:	0f 90       	pop	r0
    5a04:	0f 90       	pop	r0
    5a06:	0f 90       	pop	r0
    5a08:	cf 91       	pop	r28
    5a0a:	df 91       	pop	r29
    5a0c:	08 95       	ret

00005a0e <ADC_enu_Init>:
#include"ADC_Config.h"
/********************Global Pointer to Notification Function***********************/
static void(* ADC_pf_Notification)(u16) = NULL;
/****************************ADC busy Flag*****************************************/
static u8 ADC_u8_busyFlag = 0;
ES_t ADC_enu_Init(void){
    5a0e:	df 93       	push	r29
    5a10:	cf 93       	push	r28
    5a12:	cd b7       	in	r28, 0x3d	; 61
    5a14:	de b7       	in	r29, 0x3e	; 62
/**********************Voltage Referance******************/
    #if ADC_REF_VOLTAGE == AVCC
    CLR_BIT(ADMUX_REG,REFS1);
    5a16:	a7 e2       	ldi	r26, 0x27	; 39
    5a18:	b0 e0       	ldi	r27, 0x00	; 0
    5a1a:	e7 e2       	ldi	r30, 0x27	; 39
    5a1c:	f0 e0       	ldi	r31, 0x00	; 0
    5a1e:	80 81       	ld	r24, Z
    5a20:	8f 77       	andi	r24, 0x7F	; 127
    5a22:	8c 93       	st	X, r24
    SET_BIT(ADMUX_REG,REFS0);
    5a24:	a7 e2       	ldi	r26, 0x27	; 39
    5a26:	b0 e0       	ldi	r27, 0x00	; 0
    5a28:	e7 e2       	ldi	r30, 0x27	; 39
    5a2a:	f0 e0       	ldi	r31, 0x00	; 0
    5a2c:	80 81       	ld	r24, Z
    5a2e:	80 64       	ori	r24, 0x40	; 64
    5a30:	8c 93       	st	X, r24
    SET_BIT(ADMUX_REG,REFS1);
    SET_BIT(ADMUX_REG,REFS0);
    #endif
/**********************Presentation************************/
    #if ADC_PRESENTATION_MODE == RIGHT_ADJUST
    CLR_BIT(ADMUX_REG,ADLAR);
    5a32:	a7 e2       	ldi	r26, 0x27	; 39
    5a34:	b0 e0       	ldi	r27, 0x00	; 0
    5a36:	e7 e2       	ldi	r30, 0x27	; 39
    5a38:	f0 e0       	ldi	r31, 0x00	; 0
    5a3a:	80 81       	ld	r24, Z
    5a3c:	8f 7d       	andi	r24, 0xDF	; 223
    5a3e:	8c 93       	st	X, r24
    #elif ADC_PRESENTATION_MODE == LEFT_ADJUST
    SET_BIT(ADMUX_REG,ADLAR);
    #endif
/****************Conversion Mode**************************/
    #if ADC_CONVERSION_MODE == DISABLE_AUTO_TRIGG
    CLR_BIT(ADCSRA_REG,ADATE);
    5a40:	a6 e2       	ldi	r26, 0x26	; 38
    5a42:	b0 e0       	ldi	r27, 0x00	; 0
    5a44:	e6 e2       	ldi	r30, 0x26	; 38
    5a46:	f0 e0       	ldi	r31, 0x00	; 0
    5a48:	80 81       	ld	r24, Z
    5a4a:	8f 7d       	andi	r24, 0xDF	; 223
    5a4c:	8c 93       	st	X, r24
    CLR_BIT(SFIOR_REG,ADTS2);
    SET_BIT(SFIOR_REG,ADTS1);
    CLR_BIT(SFIOR_REG,ADTS0);
    #endif
/*******************Division Factor*********************/
    ADCSRA_REG |= ADC_DIVISION_FACTOR;
    5a4e:	a6 e2       	ldi	r26, 0x26	; 38
    5a50:	b0 e0       	ldi	r27, 0x00	; 0
    5a52:	e6 e2       	ldi	r30, 0x26	; 38
    5a54:	f0 e0       	ldi	r31, 0x00	; 0
    5a56:	80 81       	ld	r24, Z
    5a58:	87 60       	ori	r24, 0x07	; 7
    5a5a:	8c 93       	st	X, r24
/******************* Enable ADC **********************/
    SET_BIT(ADCSRA_REG,ADEN);
    5a5c:	a6 e2       	ldi	r26, 0x26	; 38
    5a5e:	b0 e0       	ldi	r27, 0x00	; 0
    5a60:	e6 e2       	ldi	r30, 0x26	; 38
    5a62:	f0 e0       	ldi	r31, 0x00	; 0
    5a64:	80 81       	ld	r24, Z
    5a66:	80 68       	ori	r24, 0x80	; 128
    5a68:	8c 93       	st	X, r24
    return STATE_OK;
    5a6a:	81 e0       	ldi	r24, 0x01	; 1
}
    5a6c:	cf 91       	pop	r28
    5a6e:	df 91       	pop	r29
    5a70:	08 95       	ret

00005a72 <ADC_enu_GetDigitalValueSynchNonBlocking>:
ES_t ADC_enu_GetDigitalValueSynchNonBlocking(u8 Copy_u8_channelNb, u16 * Copy_pu16_DigitalValue){
    5a72:	df 93       	push	r29
    5a74:	cf 93       	push	r28
    5a76:	cd b7       	in	r28, 0x3d	; 61
    5a78:	de b7       	in	r29, 0x3e	; 62
    5a7a:	28 97       	sbiw	r28, 0x08	; 8
    5a7c:	0f b6       	in	r0, 0x3f	; 63
    5a7e:	f8 94       	cli
    5a80:	de bf       	out	0x3e, r29	; 62
    5a82:	0f be       	out	0x3f, r0	; 63
    5a84:	cd bf       	out	0x3d, r28	; 61
    5a86:	8e 83       	std	Y+6, r24	; 0x06
    5a88:	78 87       	std	Y+8, r23	; 0x08
    5a8a:	6f 83       	std	Y+7, r22	; 0x07
    u8 Local_u8_errorState = STATE_OK;
    5a8c:	81 e0       	ldi	r24, 0x01	; 1
    5a8e:	8d 83       	std	Y+5, r24	; 0x05
    u32 Local_u32_timeOutCounter = 0;
    5a90:	19 82       	std	Y+1, r1	; 0x01
    5a92:	1a 82       	std	Y+2, r1	; 0x02
    5a94:	1b 82       	std	Y+3, r1	; 0x03
    5a96:	1c 82       	std	Y+4, r1	; 0x04
    if((Copy_u8_channelNb<MAX_NUM_OF_CHANNELS) && (Copy_pu16_DigitalValue!= NULL) && (!ADC_u8_busyFlag) ){
    5a98:	8e 81       	ldd	r24, Y+6	; 0x06
    5a9a:	80 32       	cpi	r24, 0x20	; 32
    5a9c:	08 f0       	brcs	.+2      	; 0x5aa0 <ADC_enu_GetDigitalValueSynchNonBlocking+0x2e>
    5a9e:	65 c0       	rjmp	.+202    	; 0x5b6a <ADC_enu_GetDigitalValueSynchNonBlocking+0xf8>
    5aa0:	8f 81       	ldd	r24, Y+7	; 0x07
    5aa2:	98 85       	ldd	r25, Y+8	; 0x08
    5aa4:	00 97       	sbiw	r24, 0x00	; 0
    5aa6:	09 f4       	brne	.+2      	; 0x5aaa <ADC_enu_GetDigitalValueSynchNonBlocking+0x38>
    5aa8:	60 c0       	rjmp	.+192    	; 0x5b6a <ADC_enu_GetDigitalValueSynchNonBlocking+0xf8>
    5aaa:	80 91 70 01 	lds	r24, 0x0170
    5aae:	88 23       	and	r24, r24
    5ab0:	09 f0       	breq	.+2      	; 0x5ab4 <ADC_enu_GetDigitalValueSynchNonBlocking+0x42>
    5ab2:	5b c0       	rjmp	.+182    	; 0x5b6a <ADC_enu_GetDigitalValueSynchNonBlocking+0xf8>
        //Set busy Flag for ADC
        ADC_u8_busyFlag = 1;
    5ab4:	81 e0       	ldi	r24, 0x01	; 1
    5ab6:	80 93 70 01 	sts	0x0170, r24
        //Clear MUX4...0
        ADMUX_REG &= CLEAR_MUX_BITS;
    5aba:	a7 e2       	ldi	r26, 0x27	; 39
    5abc:	b0 e0       	ldi	r27, 0x00	; 0
    5abe:	e7 e2       	ldi	r30, 0x27	; 39
    5ac0:	f0 e0       	ldi	r31, 0x00	; 0
    5ac2:	80 81       	ld	r24, Z
    5ac4:	80 7e       	andi	r24, 0xE0	; 224
    5ac6:	8c 93       	st	X, r24
        //Select Channel
        ADMUX_REG |= Copy_u8_channelNb;
    5ac8:	a7 e2       	ldi	r26, 0x27	; 39
    5aca:	b0 e0       	ldi	r27, 0x00	; 0
    5acc:	e7 e2       	ldi	r30, 0x27	; 39
    5ace:	f0 e0       	ldi	r31, 0x00	; 0
    5ad0:	90 81       	ld	r25, Z
    5ad2:	8e 81       	ldd	r24, Y+6	; 0x06
    5ad4:	89 2b       	or	r24, r25
    5ad6:	8c 93       	st	X, r24
        //Start Conversion
        SET_BIT(ADCSRA_REG,ADSC);
    5ad8:	a6 e2       	ldi	r26, 0x26	; 38
    5ada:	b0 e0       	ldi	r27, 0x00	; 0
    5adc:	e6 e2       	ldi	r30, 0x26	; 38
    5ade:	f0 e0       	ldi	r31, 0x00	; 0
    5ae0:	80 81       	ld	r24, Z
    5ae2:	80 64       	ori	r24, 0x40	; 64
    5ae4:	8c 93       	st	X, r24
    5ae6:	0b c0       	rjmp	.+22     	; 0x5afe <ADC_enu_GetDigitalValueSynchNonBlocking+0x8c>
        //Wait -> ADC Flag = 1 (Timeout Mechanism)
        while((!GET_BIT(ADCSRA_REG,ADIF)) && (Local_u32_timeOutCounter<ADC_U32_TIMEOUT_MAX_VALUE))
        {Local_u32_timeOutCounter++;}
    5ae8:	89 81       	ldd	r24, Y+1	; 0x01
    5aea:	9a 81       	ldd	r25, Y+2	; 0x02
    5aec:	ab 81       	ldd	r26, Y+3	; 0x03
    5aee:	bc 81       	ldd	r27, Y+4	; 0x04
    5af0:	01 96       	adiw	r24, 0x01	; 1
    5af2:	a1 1d       	adc	r26, r1
    5af4:	b1 1d       	adc	r27, r1
    5af6:	89 83       	std	Y+1, r24	; 0x01
    5af8:	9a 83       	std	Y+2, r25	; 0x02
    5afa:	ab 83       	std	Y+3, r26	; 0x03
    5afc:	bc 83       	std	Y+4, r27	; 0x04
        //Select Channel
        ADMUX_REG |= Copy_u8_channelNb;
        //Start Conversion
        SET_BIT(ADCSRA_REG,ADSC);
        //Wait -> ADC Flag = 1 (Timeout Mechanism)
        while((!GET_BIT(ADCSRA_REG,ADIF)) && (Local_u32_timeOutCounter<ADC_U32_TIMEOUT_MAX_VALUE))
    5afe:	e6 e2       	ldi	r30, 0x26	; 38
    5b00:	f0 e0       	ldi	r31, 0x00	; 0
    5b02:	80 81       	ld	r24, Z
    5b04:	82 95       	swap	r24
    5b06:	8f 70       	andi	r24, 0x0F	; 15
    5b08:	88 2f       	mov	r24, r24
    5b0a:	90 e0       	ldi	r25, 0x00	; 0
    5b0c:	81 70       	andi	r24, 0x01	; 1
    5b0e:	90 70       	andi	r25, 0x00	; 0
    5b10:	00 97       	sbiw	r24, 0x00	; 0
    5b12:	61 f4       	brne	.+24     	; 0x5b2c <ADC_enu_GetDigitalValueSynchNonBlocking+0xba>
    5b14:	89 81       	ldd	r24, Y+1	; 0x01
    5b16:	9a 81       	ldd	r25, Y+2	; 0x02
    5b18:	ab 81       	ldd	r26, Y+3	; 0x03
    5b1a:	bc 81       	ldd	r27, Y+4	; 0x04
    5b1c:	80 35       	cpi	r24, 0x50	; 80
    5b1e:	23 ec       	ldi	r18, 0xC3	; 195
    5b20:	92 07       	cpc	r25, r18
    5b22:	20 e0       	ldi	r18, 0x00	; 0
    5b24:	a2 07       	cpc	r26, r18
    5b26:	20 e0       	ldi	r18, 0x00	; 0
    5b28:	b2 07       	cpc	r27, r18
    5b2a:	f0 f2       	brcs	.-68     	; 0x5ae8 <ADC_enu_GetDigitalValueSynchNonBlocking+0x76>
        {Local_u32_timeOutCounter++;}
        //Check For ADC Peripheral
        if(GET_BIT(ADCSRA_REG,ADIF)){
    5b2c:	e6 e2       	ldi	r30, 0x26	; 38
    5b2e:	f0 e0       	ldi	r31, 0x00	; 0
    5b30:	80 81       	ld	r24, Z
    5b32:	82 95       	swap	r24
    5b34:	8f 70       	andi	r24, 0x0F	; 15
    5b36:	88 2f       	mov	r24, r24
    5b38:	90 e0       	ldi	r25, 0x00	; 0
    5b3a:	81 70       	andi	r24, 0x01	; 1
    5b3c:	90 70       	andi	r25, 0x00	; 0
    5b3e:	88 23       	and	r24, r24
    5b40:	91 f0       	breq	.+36     	; 0x5b66 <ADC_enu_GetDigitalValueSynchNonBlocking+0xf4>
            //Clear ADC Flag & busy Flag
            ADC_u8_busyFlag = 0;
    5b42:	10 92 70 01 	sts	0x0170, r1
            SET_BIT(ADCSRA_REG,ADIF);
    5b46:	a6 e2       	ldi	r26, 0x26	; 38
    5b48:	b0 e0       	ldi	r27, 0x00	; 0
    5b4a:	e6 e2       	ldi	r30, 0x26	; 38
    5b4c:	f0 e0       	ldi	r31, 0x00	; 0
    5b4e:	80 81       	ld	r24, Z
    5b50:	80 61       	ori	r24, 0x10	; 16
    5b52:	8c 93       	st	X, r24
            //Read Digital Value
            *Copy_pu16_DigitalValue = ADC_REG;
    5b54:	e4 e2       	ldi	r30, 0x24	; 36
    5b56:	f0 e0       	ldi	r31, 0x00	; 0
    5b58:	80 81       	ld	r24, Z
    5b5a:	91 81       	ldd	r25, Z+1	; 0x01
    5b5c:	ef 81       	ldd	r30, Y+7	; 0x07
    5b5e:	f8 85       	ldd	r31, Y+8	; 0x08
    5b60:	91 83       	std	Z+1, r25	; 0x01
    5b62:	80 83       	st	Z, r24
    5b64:	03 c0       	rjmp	.+6      	; 0x5b6c <ADC_enu_GetDigitalValueSynchNonBlocking+0xfa>
        }else{
            Local_u8_errorState = STATE_NOT_OK;
    5b66:	1d 82       	std	Y+5, r1	; 0x05
    5b68:	01 c0       	rjmp	.+2      	; 0x5b6c <ADC_enu_GetDigitalValueSynchNonBlocking+0xfa>
        }
    }else{
        Local_u8_errorState = STATE_NOT_OK;
    5b6a:	1d 82       	std	Y+5, r1	; 0x05
    }
    return Local_u8_errorState;
    5b6c:	8d 81       	ldd	r24, Y+5	; 0x05
}
    5b6e:	28 96       	adiw	r28, 0x08	; 8
    5b70:	0f b6       	in	r0, 0x3f	; 63
    5b72:	f8 94       	cli
    5b74:	de bf       	out	0x3e, r29	; 62
    5b76:	0f be       	out	0x3f, r0	; 63
    5b78:	cd bf       	out	0x3d, r28	; 61
    5b7a:	cf 91       	pop	r28
    5b7c:	df 91       	pop	r29
    5b7e:	08 95       	ret

00005b80 <ADC_enu_GetDigitalValueASynch>:
ES_t ADC_enu_GetDigitalValueASynch(u8 Copy_u8_channelNb, void(* Copy_pf_Notification)(u16)){
    5b80:	df 93       	push	r29
    5b82:	cf 93       	push	r28
    5b84:	00 d0       	rcall	.+0      	; 0x5b86 <ADC_enu_GetDigitalValueASynch+0x6>
    5b86:	00 d0       	rcall	.+0      	; 0x5b88 <ADC_enu_GetDigitalValueASynch+0x8>
    5b88:	cd b7       	in	r28, 0x3d	; 61
    5b8a:	de b7       	in	r29, 0x3e	; 62
    5b8c:	8a 83       	std	Y+2, r24	; 0x02
    5b8e:	7c 83       	std	Y+4, r23	; 0x04
    5b90:	6b 83       	std	Y+3, r22	; 0x03
    u8 Local_u8_errorState = STATE_OK;
    5b92:	81 e0       	ldi	r24, 0x01	; 1
    5b94:	89 83       	std	Y+1, r24	; 0x01
    if((Copy_u8_channelNb<MAX_NUM_OF_CHANNELS) && (Copy_pf_Notification!= NULL) && (!ADC_u8_busyFlag)){
    5b96:	8a 81       	ldd	r24, Y+2	; 0x02
    5b98:	80 32       	cpi	r24, 0x20	; 32
    5b9a:	78 f5       	brcc	.+94     	; 0x5bfa <ADC_enu_GetDigitalValueASynch+0x7a>
    5b9c:	8b 81       	ldd	r24, Y+3	; 0x03
    5b9e:	9c 81       	ldd	r25, Y+4	; 0x04
    5ba0:	00 97       	sbiw	r24, 0x00	; 0
    5ba2:	59 f1       	breq	.+86     	; 0x5bfa <ADC_enu_GetDigitalValueASynch+0x7a>
    5ba4:	80 91 70 01 	lds	r24, 0x0170
    5ba8:	88 23       	and	r24, r24
    5baa:	39 f5       	brne	.+78     	; 0x5bfa <ADC_enu_GetDigitalValueASynch+0x7a>
        //Set busy Flag for ADC
        ADC_u8_busyFlag = 1;
    5bac:	81 e0       	ldi	r24, 0x01	; 1
    5bae:	80 93 70 01 	sts	0x0170, r24
        //update Global Pointer to Function
        ADC_pf_Notification = Copy_pf_Notification;
    5bb2:	8b 81       	ldd	r24, Y+3	; 0x03
    5bb4:	9c 81       	ldd	r25, Y+4	; 0x04
    5bb6:	90 93 6f 01 	sts	0x016F, r25
    5bba:	80 93 6e 01 	sts	0x016E, r24
        //Enable ADC Interrupt
        SET_BIT(ADCSRA_REG,ADIE);
    5bbe:	a6 e2       	ldi	r26, 0x26	; 38
    5bc0:	b0 e0       	ldi	r27, 0x00	; 0
    5bc2:	e6 e2       	ldi	r30, 0x26	; 38
    5bc4:	f0 e0       	ldi	r31, 0x00	; 0
    5bc6:	80 81       	ld	r24, Z
    5bc8:	88 60       	ori	r24, 0x08	; 8
    5bca:	8c 93       	st	X, r24
        //Clear MUX4...0
        ADMUX_REG &= CLEAR_MUX_BITS;
    5bcc:	a7 e2       	ldi	r26, 0x27	; 39
    5bce:	b0 e0       	ldi	r27, 0x00	; 0
    5bd0:	e7 e2       	ldi	r30, 0x27	; 39
    5bd2:	f0 e0       	ldi	r31, 0x00	; 0
    5bd4:	80 81       	ld	r24, Z
    5bd6:	80 7e       	andi	r24, 0xE0	; 224
    5bd8:	8c 93       	st	X, r24
        //Select Channel
        ADMUX_REG |= Copy_u8_channelNb;
    5bda:	a7 e2       	ldi	r26, 0x27	; 39
    5bdc:	b0 e0       	ldi	r27, 0x00	; 0
    5bde:	e7 e2       	ldi	r30, 0x27	; 39
    5be0:	f0 e0       	ldi	r31, 0x00	; 0
    5be2:	90 81       	ld	r25, Z
    5be4:	8a 81       	ldd	r24, Y+2	; 0x02
    5be6:	89 2b       	or	r24, r25
    5be8:	8c 93       	st	X, r24
        //Start Conversion
        SET_BIT(ADCSRA_REG,ADSC);
    5bea:	a6 e2       	ldi	r26, 0x26	; 38
    5bec:	b0 e0       	ldi	r27, 0x00	; 0
    5bee:	e6 e2       	ldi	r30, 0x26	; 38
    5bf0:	f0 e0       	ldi	r31, 0x00	; 0
    5bf2:	80 81       	ld	r24, Z
    5bf4:	80 64       	ori	r24, 0x40	; 64
    5bf6:	8c 93       	st	X, r24
    5bf8:	01 c0       	rjmp	.+2      	; 0x5bfc <ADC_enu_GetDigitalValueASynch+0x7c>
    }else{
        Local_u8_errorState= STATE_NOT_OK;
    5bfa:	19 82       	std	Y+1, r1	; 0x01
    }
    return Local_u8_errorState;
    5bfc:	89 81       	ldd	r24, Y+1	; 0x01
}
    5bfe:	0f 90       	pop	r0
    5c00:	0f 90       	pop	r0
    5c02:	0f 90       	pop	r0
    5c04:	0f 90       	pop	r0
    5c06:	cf 91       	pop	r28
    5c08:	df 91       	pop	r29
    5c0a:	08 95       	ret

00005c0c <__vector_16>:
/***************ISR Function OF ADC*************/
ISR(ADC){
    5c0c:	1f 92       	push	r1
    5c0e:	0f 92       	push	r0
    5c10:	0f b6       	in	r0, 0x3f	; 63
    5c12:	0f 92       	push	r0
    5c14:	11 24       	eor	r1, r1
    5c16:	2f 93       	push	r18
    5c18:	3f 93       	push	r19
    5c1a:	4f 93       	push	r20
    5c1c:	5f 93       	push	r21
    5c1e:	6f 93       	push	r22
    5c20:	7f 93       	push	r23
    5c22:	8f 93       	push	r24
    5c24:	9f 93       	push	r25
    5c26:	af 93       	push	r26
    5c28:	bf 93       	push	r27
    5c2a:	ef 93       	push	r30
    5c2c:	ff 93       	push	r31
    5c2e:	df 93       	push	r29
    5c30:	cf 93       	push	r28
    5c32:	cd b7       	in	r28, 0x3d	; 61
    5c34:	de b7       	in	r29, 0x3e	; 62
    if(ADC_pf_Notification !=NULL){
    5c36:	80 91 6e 01 	lds	r24, 0x016E
    5c3a:	90 91 6f 01 	lds	r25, 0x016F
    5c3e:	00 97       	sbiw	r24, 0x00	; 0
    5c40:	99 f0       	breq	.+38     	; 0x5c68 <__vector_16+0x5c>
        //Disable Interrupt & busy Flag
        CLR_BIT(ADCSRA_REG,ADIE);
    5c42:	a6 e2       	ldi	r26, 0x26	; 38
    5c44:	b0 e0       	ldi	r27, 0x00	; 0
    5c46:	e6 e2       	ldi	r30, 0x26	; 38
    5c48:	f0 e0       	ldi	r31, 0x00	; 0
    5c4a:	80 81       	ld	r24, Z
    5c4c:	87 7f       	andi	r24, 0xF7	; 247
    5c4e:	8c 93       	st	X, r24
        ADC_u8_busyFlag = 0;
    5c50:	10 92 70 01 	sts	0x0170, r1
        //Calling Notification Func
        ADC_pf_Notification(ADC_REG);
    5c54:	20 91 6e 01 	lds	r18, 0x016E
    5c58:	30 91 6f 01 	lds	r19, 0x016F
    5c5c:	e4 e2       	ldi	r30, 0x24	; 36
    5c5e:	f0 e0       	ldi	r31, 0x00	; 0
    5c60:	80 81       	ld	r24, Z
    5c62:	91 81       	ldd	r25, Z+1	; 0x01
    5c64:	f9 01       	movw	r30, r18
    5c66:	09 95       	icall
    }
    5c68:	cf 91       	pop	r28
    5c6a:	df 91       	pop	r29
    5c6c:	ff 91       	pop	r31
    5c6e:	ef 91       	pop	r30
    5c70:	bf 91       	pop	r27
    5c72:	af 91       	pop	r26
    5c74:	9f 91       	pop	r25
    5c76:	8f 91       	pop	r24
    5c78:	7f 91       	pop	r23
    5c7a:	6f 91       	pop	r22
    5c7c:	5f 91       	pop	r21
    5c7e:	4f 91       	pop	r20
    5c80:	3f 91       	pop	r19
    5c82:	2f 91       	pop	r18
    5c84:	0f 90       	pop	r0
    5c86:	0f be       	out	0x3f, r0	; 63
    5c88:	0f 90       	pop	r0
    5c8a:	1f 90       	pop	r1
    5c8c:	18 95       	reti

00005c8e <__mulsi3>:
    5c8e:	62 9f       	mul	r22, r18
    5c90:	d0 01       	movw	r26, r0
    5c92:	73 9f       	mul	r23, r19
    5c94:	f0 01       	movw	r30, r0
    5c96:	82 9f       	mul	r24, r18
    5c98:	e0 0d       	add	r30, r0
    5c9a:	f1 1d       	adc	r31, r1
    5c9c:	64 9f       	mul	r22, r20
    5c9e:	e0 0d       	add	r30, r0
    5ca0:	f1 1d       	adc	r31, r1
    5ca2:	92 9f       	mul	r25, r18
    5ca4:	f0 0d       	add	r31, r0
    5ca6:	83 9f       	mul	r24, r19
    5ca8:	f0 0d       	add	r31, r0
    5caa:	74 9f       	mul	r23, r20
    5cac:	f0 0d       	add	r31, r0
    5cae:	65 9f       	mul	r22, r21
    5cb0:	f0 0d       	add	r31, r0
    5cb2:	99 27       	eor	r25, r25
    5cb4:	72 9f       	mul	r23, r18
    5cb6:	b0 0d       	add	r27, r0
    5cb8:	e1 1d       	adc	r30, r1
    5cba:	f9 1f       	adc	r31, r25
    5cbc:	63 9f       	mul	r22, r19
    5cbe:	b0 0d       	add	r27, r0
    5cc0:	e1 1d       	adc	r30, r1
    5cc2:	f9 1f       	adc	r31, r25
    5cc4:	bd 01       	movw	r22, r26
    5cc6:	cf 01       	movw	r24, r30
    5cc8:	11 24       	eor	r1, r1
    5cca:	08 95       	ret

00005ccc <__udivmodhi4>:
    5ccc:	aa 1b       	sub	r26, r26
    5cce:	bb 1b       	sub	r27, r27
    5cd0:	51 e1       	ldi	r21, 0x11	; 17
    5cd2:	07 c0       	rjmp	.+14     	; 0x5ce2 <__udivmodhi4_ep>

00005cd4 <__udivmodhi4_loop>:
    5cd4:	aa 1f       	adc	r26, r26
    5cd6:	bb 1f       	adc	r27, r27
    5cd8:	a6 17       	cp	r26, r22
    5cda:	b7 07       	cpc	r27, r23
    5cdc:	10 f0       	brcs	.+4      	; 0x5ce2 <__udivmodhi4_ep>
    5cde:	a6 1b       	sub	r26, r22
    5ce0:	b7 0b       	sbc	r27, r23

00005ce2 <__udivmodhi4_ep>:
    5ce2:	88 1f       	adc	r24, r24
    5ce4:	99 1f       	adc	r25, r25
    5ce6:	5a 95       	dec	r21
    5ce8:	a9 f7       	brne	.-22     	; 0x5cd4 <__udivmodhi4_loop>
    5cea:	80 95       	com	r24
    5cec:	90 95       	com	r25
    5cee:	bc 01       	movw	r22, r24
    5cf0:	cd 01       	movw	r24, r26
    5cf2:	08 95       	ret

00005cf4 <__udivmodsi4>:
    5cf4:	a1 e2       	ldi	r26, 0x21	; 33
    5cf6:	1a 2e       	mov	r1, r26
    5cf8:	aa 1b       	sub	r26, r26
    5cfa:	bb 1b       	sub	r27, r27
    5cfc:	fd 01       	movw	r30, r26
    5cfe:	0d c0       	rjmp	.+26     	; 0x5d1a <__udivmodsi4_ep>

00005d00 <__udivmodsi4_loop>:
    5d00:	aa 1f       	adc	r26, r26
    5d02:	bb 1f       	adc	r27, r27
    5d04:	ee 1f       	adc	r30, r30
    5d06:	ff 1f       	adc	r31, r31
    5d08:	a2 17       	cp	r26, r18
    5d0a:	b3 07       	cpc	r27, r19
    5d0c:	e4 07       	cpc	r30, r20
    5d0e:	f5 07       	cpc	r31, r21
    5d10:	20 f0       	brcs	.+8      	; 0x5d1a <__udivmodsi4_ep>
    5d12:	a2 1b       	sub	r26, r18
    5d14:	b3 0b       	sbc	r27, r19
    5d16:	e4 0b       	sbc	r30, r20
    5d18:	f5 0b       	sbc	r31, r21

00005d1a <__udivmodsi4_ep>:
    5d1a:	66 1f       	adc	r22, r22
    5d1c:	77 1f       	adc	r23, r23
    5d1e:	88 1f       	adc	r24, r24
    5d20:	99 1f       	adc	r25, r25
    5d22:	1a 94       	dec	r1
    5d24:	69 f7       	brne	.-38     	; 0x5d00 <__udivmodsi4_loop>
    5d26:	60 95       	com	r22
    5d28:	70 95       	com	r23
    5d2a:	80 95       	com	r24
    5d2c:	90 95       	com	r25
    5d2e:	9b 01       	movw	r18, r22
    5d30:	ac 01       	movw	r20, r24
    5d32:	bd 01       	movw	r22, r26
    5d34:	cf 01       	movw	r24, r30
    5d36:	08 95       	ret

00005d38 <__divmodsi4>:
    5d38:	97 fb       	bst	r25, 7
    5d3a:	09 2e       	mov	r0, r25
    5d3c:	05 26       	eor	r0, r21
    5d3e:	0e d0       	rcall	.+28     	; 0x5d5c <__divmodsi4_neg1>
    5d40:	57 fd       	sbrc	r21, 7
    5d42:	04 d0       	rcall	.+8      	; 0x5d4c <__divmodsi4_neg2>
    5d44:	d7 df       	rcall	.-82     	; 0x5cf4 <__udivmodsi4>
    5d46:	0a d0       	rcall	.+20     	; 0x5d5c <__divmodsi4_neg1>
    5d48:	00 1c       	adc	r0, r0
    5d4a:	38 f4       	brcc	.+14     	; 0x5d5a <__divmodsi4_exit>

00005d4c <__divmodsi4_neg2>:
    5d4c:	50 95       	com	r21
    5d4e:	40 95       	com	r20
    5d50:	30 95       	com	r19
    5d52:	21 95       	neg	r18
    5d54:	3f 4f       	sbci	r19, 0xFF	; 255
    5d56:	4f 4f       	sbci	r20, 0xFF	; 255
    5d58:	5f 4f       	sbci	r21, 0xFF	; 255

00005d5a <__divmodsi4_exit>:
    5d5a:	08 95       	ret

00005d5c <__divmodsi4_neg1>:
    5d5c:	f6 f7       	brtc	.-4      	; 0x5d5a <__divmodsi4_exit>
    5d5e:	90 95       	com	r25
    5d60:	80 95       	com	r24
    5d62:	70 95       	com	r23
    5d64:	61 95       	neg	r22
    5d66:	7f 4f       	sbci	r23, 0xFF	; 255
    5d68:	8f 4f       	sbci	r24, 0xFF	; 255
    5d6a:	9f 4f       	sbci	r25, 0xFF	; 255
    5d6c:	08 95       	ret

00005d6e <__prologue_saves__>:
    5d6e:	2f 92       	push	r2
    5d70:	3f 92       	push	r3
    5d72:	4f 92       	push	r4
    5d74:	5f 92       	push	r5
    5d76:	6f 92       	push	r6
    5d78:	7f 92       	push	r7
    5d7a:	8f 92       	push	r8
    5d7c:	9f 92       	push	r9
    5d7e:	af 92       	push	r10
    5d80:	bf 92       	push	r11
    5d82:	cf 92       	push	r12
    5d84:	df 92       	push	r13
    5d86:	ef 92       	push	r14
    5d88:	ff 92       	push	r15
    5d8a:	0f 93       	push	r16
    5d8c:	1f 93       	push	r17
    5d8e:	cf 93       	push	r28
    5d90:	df 93       	push	r29
    5d92:	cd b7       	in	r28, 0x3d	; 61
    5d94:	de b7       	in	r29, 0x3e	; 62
    5d96:	ca 1b       	sub	r28, r26
    5d98:	db 0b       	sbc	r29, r27
    5d9a:	0f b6       	in	r0, 0x3f	; 63
    5d9c:	f8 94       	cli
    5d9e:	de bf       	out	0x3e, r29	; 62
    5da0:	0f be       	out	0x3f, r0	; 63
    5da2:	cd bf       	out	0x3d, r28	; 61
    5da4:	09 94       	ijmp

00005da6 <__epilogue_restores__>:
    5da6:	2a 88       	ldd	r2, Y+18	; 0x12
    5da8:	39 88       	ldd	r3, Y+17	; 0x11
    5daa:	48 88       	ldd	r4, Y+16	; 0x10
    5dac:	5f 84       	ldd	r5, Y+15	; 0x0f
    5dae:	6e 84       	ldd	r6, Y+14	; 0x0e
    5db0:	7d 84       	ldd	r7, Y+13	; 0x0d
    5db2:	8c 84       	ldd	r8, Y+12	; 0x0c
    5db4:	9b 84       	ldd	r9, Y+11	; 0x0b
    5db6:	aa 84       	ldd	r10, Y+10	; 0x0a
    5db8:	b9 84       	ldd	r11, Y+9	; 0x09
    5dba:	c8 84       	ldd	r12, Y+8	; 0x08
    5dbc:	df 80       	ldd	r13, Y+7	; 0x07
    5dbe:	ee 80       	ldd	r14, Y+6	; 0x06
    5dc0:	fd 80       	ldd	r15, Y+5	; 0x05
    5dc2:	0c 81       	ldd	r16, Y+4	; 0x04
    5dc4:	1b 81       	ldd	r17, Y+3	; 0x03
    5dc6:	aa 81       	ldd	r26, Y+2	; 0x02
    5dc8:	b9 81       	ldd	r27, Y+1	; 0x01
    5dca:	ce 0f       	add	r28, r30
    5dcc:	d1 1d       	adc	r29, r1
    5dce:	0f b6       	in	r0, 0x3f	; 63
    5dd0:	f8 94       	cli
    5dd2:	de bf       	out	0x3e, r29	; 62
    5dd4:	0f be       	out	0x3f, r0	; 63
    5dd6:	cd bf       	out	0x3d, r28	; 61
    5dd8:	ed 01       	movw	r28, r26
    5dda:	08 95       	ret

00005ddc <_exit>:
    5ddc:	f8 94       	cli

00005dde <__stop_program>:
    5dde:	ff cf       	rjmp	.-2      	; 0x5dde <__stop_program>
