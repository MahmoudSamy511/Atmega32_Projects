
ElectronicSwitches_Test.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00003e66  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         000000f0  00800060  00003e66  00003eda  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .stab         00003ae0  00000000  00000000  00003fcc  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      00001910  00000000  00000000  00007aac  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_aranges 00000160  00000000  00000000  000093bc  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_pubnames 0000018f  00000000  00000000  0000951c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00002045  00000000  00000000  000096ab  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00001101  00000000  00000000  0000b6f0  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000f82  00000000  00000000  0000c7f1  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000180  00000000  00000000  0000d774  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000002c2  00000000  00000000  0000d8f4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000088e  00000000  00000000  0000dbb6  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000050  00000000  00000000  0000e444  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
       8:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
       c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      10:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      14:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      18:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      1c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      20:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      24:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      28:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      2c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      30:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      34:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      38:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      3c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      40:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      44:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      48:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      4c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      50:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	11 e0       	ldi	r17, 0x01	; 1
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e6 e6       	ldi	r30, 0x66	; 102
      68:	fe e3       	ldi	r31, 0x3E	; 62
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a0 35       	cpi	r26, 0x50	; 80
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>
      76:	0e 94 d5 06 	call	0xdaa	; 0xdaa <main>
      7a:	0c 94 31 1f 	jmp	0x3e62	; 0x3e62 <_exit>

0000007e <__bad_interrupt>:
      7e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000082 <__fixunssfsi>:
      82:	ef 92       	push	r14
      84:	ff 92       	push	r15
      86:	0f 93       	push	r16
      88:	1f 93       	push	r17
      8a:	7b 01       	movw	r14, r22
      8c:	8c 01       	movw	r16, r24
      8e:	20 e0       	ldi	r18, 0x00	; 0
      90:	30 e0       	ldi	r19, 0x00	; 0
      92:	40 e0       	ldi	r20, 0x00	; 0
      94:	5f e4       	ldi	r21, 0x4F	; 79
      96:	0e 94 ed 03 	call	0x7da	; 0x7da <__gesf2>
      9a:	88 23       	and	r24, r24
      9c:	8c f0       	brlt	.+34     	; 0xc0 <__fixunssfsi+0x3e>
      9e:	c8 01       	movw	r24, r16
      a0:	b7 01       	movw	r22, r14
      a2:	20 e0       	ldi	r18, 0x00	; 0
      a4:	30 e0       	ldi	r19, 0x00	; 0
      a6:	40 e0       	ldi	r20, 0x00	; 0
      a8:	5f e4       	ldi	r21, 0x4F	; 79
      aa:	0e 94 b9 01 	call	0x372	; 0x372 <__subsf3>
      ae:	0e 94 4d 04 	call	0x89a	; 0x89a <__fixsfsi>
      b2:	9b 01       	movw	r18, r22
      b4:	ac 01       	movw	r20, r24
      b6:	20 50       	subi	r18, 0x00	; 0
      b8:	30 40       	sbci	r19, 0x00	; 0
      ba:	40 40       	sbci	r20, 0x00	; 0
      bc:	50 48       	sbci	r21, 0x80	; 128
      be:	06 c0       	rjmp	.+12     	; 0xcc <__fixunssfsi+0x4a>
      c0:	c8 01       	movw	r24, r16
      c2:	b7 01       	movw	r22, r14
      c4:	0e 94 4d 04 	call	0x89a	; 0x89a <__fixsfsi>
      c8:	9b 01       	movw	r18, r22
      ca:	ac 01       	movw	r20, r24
      cc:	b9 01       	movw	r22, r18
      ce:	ca 01       	movw	r24, r20
      d0:	1f 91       	pop	r17
      d2:	0f 91       	pop	r16
      d4:	ff 90       	pop	r15
      d6:	ef 90       	pop	r14
      d8:	08 95       	ret

000000da <_fpadd_parts>:
      da:	a0 e0       	ldi	r26, 0x00	; 0
      dc:	b0 e0       	ldi	r27, 0x00	; 0
      de:	e3 e7       	ldi	r30, 0x73	; 115
      e0:	f0 e0       	ldi	r31, 0x00	; 0
      e2:	0c 94 fa 1e 	jmp	0x3df4	; 0x3df4 <__prologue_saves__>
      e6:	dc 01       	movw	r26, r24
      e8:	2b 01       	movw	r4, r22
      ea:	fa 01       	movw	r30, r20
      ec:	9c 91       	ld	r25, X
      ee:	92 30       	cpi	r25, 0x02	; 2
      f0:	08 f4       	brcc	.+2      	; 0xf4 <_fpadd_parts+0x1a>
      f2:	39 c1       	rjmp	.+626    	; 0x366 <_fpadd_parts+0x28c>
      f4:	eb 01       	movw	r28, r22
      f6:	88 81       	ld	r24, Y
      f8:	82 30       	cpi	r24, 0x02	; 2
      fa:	08 f4       	brcc	.+2      	; 0xfe <_fpadd_parts+0x24>
      fc:	33 c1       	rjmp	.+614    	; 0x364 <_fpadd_parts+0x28a>
      fe:	94 30       	cpi	r25, 0x04	; 4
     100:	69 f4       	brne	.+26     	; 0x11c <_fpadd_parts+0x42>
     102:	84 30       	cpi	r24, 0x04	; 4
     104:	09 f0       	breq	.+2      	; 0x108 <_fpadd_parts+0x2e>
     106:	2f c1       	rjmp	.+606    	; 0x366 <_fpadd_parts+0x28c>
     108:	11 96       	adiw	r26, 0x01	; 1
     10a:	9c 91       	ld	r25, X
     10c:	11 97       	sbiw	r26, 0x01	; 1
     10e:	89 81       	ldd	r24, Y+1	; 0x01
     110:	98 17       	cp	r25, r24
     112:	09 f4       	brne	.+2      	; 0x116 <_fpadd_parts+0x3c>
     114:	28 c1       	rjmp	.+592    	; 0x366 <_fpadd_parts+0x28c>
     116:	af e1       	ldi	r26, 0x1F	; 31
     118:	b1 e0       	ldi	r27, 0x01	; 1
     11a:	25 c1       	rjmp	.+586    	; 0x366 <_fpadd_parts+0x28c>
     11c:	84 30       	cpi	r24, 0x04	; 4
     11e:	09 f4       	brne	.+2      	; 0x122 <_fpadd_parts+0x48>
     120:	21 c1       	rjmp	.+578    	; 0x364 <_fpadd_parts+0x28a>
     122:	82 30       	cpi	r24, 0x02	; 2
     124:	a9 f4       	brne	.+42     	; 0x150 <_fpadd_parts+0x76>
     126:	92 30       	cpi	r25, 0x02	; 2
     128:	09 f0       	breq	.+2      	; 0x12c <_fpadd_parts+0x52>
     12a:	1d c1       	rjmp	.+570    	; 0x366 <_fpadd_parts+0x28c>
     12c:	9a 01       	movw	r18, r20
     12e:	ad 01       	movw	r20, r26
     130:	88 e0       	ldi	r24, 0x08	; 8
     132:	ea 01       	movw	r28, r20
     134:	09 90       	ld	r0, Y+
     136:	ae 01       	movw	r20, r28
     138:	e9 01       	movw	r28, r18
     13a:	09 92       	st	Y+, r0
     13c:	9e 01       	movw	r18, r28
     13e:	81 50       	subi	r24, 0x01	; 1
     140:	c1 f7       	brne	.-16     	; 0x132 <_fpadd_parts+0x58>
     142:	e2 01       	movw	r28, r4
     144:	89 81       	ldd	r24, Y+1	; 0x01
     146:	11 96       	adiw	r26, 0x01	; 1
     148:	9c 91       	ld	r25, X
     14a:	89 23       	and	r24, r25
     14c:	81 83       	std	Z+1, r24	; 0x01
     14e:	08 c1       	rjmp	.+528    	; 0x360 <_fpadd_parts+0x286>
     150:	92 30       	cpi	r25, 0x02	; 2
     152:	09 f4       	brne	.+2      	; 0x156 <_fpadd_parts+0x7c>
     154:	07 c1       	rjmp	.+526    	; 0x364 <_fpadd_parts+0x28a>
     156:	12 96       	adiw	r26, 0x02	; 2
     158:	2d 90       	ld	r2, X+
     15a:	3c 90       	ld	r3, X
     15c:	13 97       	sbiw	r26, 0x03	; 3
     15e:	eb 01       	movw	r28, r22
     160:	8a 81       	ldd	r24, Y+2	; 0x02
     162:	9b 81       	ldd	r25, Y+3	; 0x03
     164:	14 96       	adiw	r26, 0x04	; 4
     166:	ad 90       	ld	r10, X+
     168:	bd 90       	ld	r11, X+
     16a:	cd 90       	ld	r12, X+
     16c:	dc 90       	ld	r13, X
     16e:	17 97       	sbiw	r26, 0x07	; 7
     170:	ec 80       	ldd	r14, Y+4	; 0x04
     172:	fd 80       	ldd	r15, Y+5	; 0x05
     174:	0e 81       	ldd	r16, Y+6	; 0x06
     176:	1f 81       	ldd	r17, Y+7	; 0x07
     178:	91 01       	movw	r18, r2
     17a:	28 1b       	sub	r18, r24
     17c:	39 0b       	sbc	r19, r25
     17e:	b9 01       	movw	r22, r18
     180:	37 ff       	sbrs	r19, 7
     182:	04 c0       	rjmp	.+8      	; 0x18c <_fpadd_parts+0xb2>
     184:	66 27       	eor	r22, r22
     186:	77 27       	eor	r23, r23
     188:	62 1b       	sub	r22, r18
     18a:	73 0b       	sbc	r23, r19
     18c:	60 32       	cpi	r22, 0x20	; 32
     18e:	71 05       	cpc	r23, r1
     190:	0c f0       	brlt	.+2      	; 0x194 <_fpadd_parts+0xba>
     192:	61 c0       	rjmp	.+194    	; 0x256 <_fpadd_parts+0x17c>
     194:	12 16       	cp	r1, r18
     196:	13 06       	cpc	r1, r19
     198:	6c f5       	brge	.+90     	; 0x1f4 <_fpadd_parts+0x11a>
     19a:	37 01       	movw	r6, r14
     19c:	48 01       	movw	r8, r16
     19e:	06 2e       	mov	r0, r22
     1a0:	04 c0       	rjmp	.+8      	; 0x1aa <_fpadd_parts+0xd0>
     1a2:	96 94       	lsr	r9
     1a4:	87 94       	ror	r8
     1a6:	77 94       	ror	r7
     1a8:	67 94       	ror	r6
     1aa:	0a 94       	dec	r0
     1ac:	d2 f7       	brpl	.-12     	; 0x1a2 <_fpadd_parts+0xc8>
     1ae:	21 e0       	ldi	r18, 0x01	; 1
     1b0:	30 e0       	ldi	r19, 0x00	; 0
     1b2:	40 e0       	ldi	r20, 0x00	; 0
     1b4:	50 e0       	ldi	r21, 0x00	; 0
     1b6:	04 c0       	rjmp	.+8      	; 0x1c0 <_fpadd_parts+0xe6>
     1b8:	22 0f       	add	r18, r18
     1ba:	33 1f       	adc	r19, r19
     1bc:	44 1f       	adc	r20, r20
     1be:	55 1f       	adc	r21, r21
     1c0:	6a 95       	dec	r22
     1c2:	d2 f7       	brpl	.-12     	; 0x1b8 <_fpadd_parts+0xde>
     1c4:	21 50       	subi	r18, 0x01	; 1
     1c6:	30 40       	sbci	r19, 0x00	; 0
     1c8:	40 40       	sbci	r20, 0x00	; 0
     1ca:	50 40       	sbci	r21, 0x00	; 0
     1cc:	2e 21       	and	r18, r14
     1ce:	3f 21       	and	r19, r15
     1d0:	40 23       	and	r20, r16
     1d2:	51 23       	and	r21, r17
     1d4:	21 15       	cp	r18, r1
     1d6:	31 05       	cpc	r19, r1
     1d8:	41 05       	cpc	r20, r1
     1da:	51 05       	cpc	r21, r1
     1dc:	21 f0       	breq	.+8      	; 0x1e6 <_fpadd_parts+0x10c>
     1de:	21 e0       	ldi	r18, 0x01	; 1
     1e0:	30 e0       	ldi	r19, 0x00	; 0
     1e2:	40 e0       	ldi	r20, 0x00	; 0
     1e4:	50 e0       	ldi	r21, 0x00	; 0
     1e6:	79 01       	movw	r14, r18
     1e8:	8a 01       	movw	r16, r20
     1ea:	e6 28       	or	r14, r6
     1ec:	f7 28       	or	r15, r7
     1ee:	08 29       	or	r16, r8
     1f0:	19 29       	or	r17, r9
     1f2:	3c c0       	rjmp	.+120    	; 0x26c <_fpadd_parts+0x192>
     1f4:	23 2b       	or	r18, r19
     1f6:	d1 f1       	breq	.+116    	; 0x26c <_fpadd_parts+0x192>
     1f8:	26 0e       	add	r2, r22
     1fa:	37 1e       	adc	r3, r23
     1fc:	35 01       	movw	r6, r10
     1fe:	46 01       	movw	r8, r12
     200:	06 2e       	mov	r0, r22
     202:	04 c0       	rjmp	.+8      	; 0x20c <_fpadd_parts+0x132>
     204:	96 94       	lsr	r9
     206:	87 94       	ror	r8
     208:	77 94       	ror	r7
     20a:	67 94       	ror	r6
     20c:	0a 94       	dec	r0
     20e:	d2 f7       	brpl	.-12     	; 0x204 <_fpadd_parts+0x12a>
     210:	21 e0       	ldi	r18, 0x01	; 1
     212:	30 e0       	ldi	r19, 0x00	; 0
     214:	40 e0       	ldi	r20, 0x00	; 0
     216:	50 e0       	ldi	r21, 0x00	; 0
     218:	04 c0       	rjmp	.+8      	; 0x222 <_fpadd_parts+0x148>
     21a:	22 0f       	add	r18, r18
     21c:	33 1f       	adc	r19, r19
     21e:	44 1f       	adc	r20, r20
     220:	55 1f       	adc	r21, r21
     222:	6a 95       	dec	r22
     224:	d2 f7       	brpl	.-12     	; 0x21a <_fpadd_parts+0x140>
     226:	21 50       	subi	r18, 0x01	; 1
     228:	30 40       	sbci	r19, 0x00	; 0
     22a:	40 40       	sbci	r20, 0x00	; 0
     22c:	50 40       	sbci	r21, 0x00	; 0
     22e:	2a 21       	and	r18, r10
     230:	3b 21       	and	r19, r11
     232:	4c 21       	and	r20, r12
     234:	5d 21       	and	r21, r13
     236:	21 15       	cp	r18, r1
     238:	31 05       	cpc	r19, r1
     23a:	41 05       	cpc	r20, r1
     23c:	51 05       	cpc	r21, r1
     23e:	21 f0       	breq	.+8      	; 0x248 <_fpadd_parts+0x16e>
     240:	21 e0       	ldi	r18, 0x01	; 1
     242:	30 e0       	ldi	r19, 0x00	; 0
     244:	40 e0       	ldi	r20, 0x00	; 0
     246:	50 e0       	ldi	r21, 0x00	; 0
     248:	59 01       	movw	r10, r18
     24a:	6a 01       	movw	r12, r20
     24c:	a6 28       	or	r10, r6
     24e:	b7 28       	or	r11, r7
     250:	c8 28       	or	r12, r8
     252:	d9 28       	or	r13, r9
     254:	0b c0       	rjmp	.+22     	; 0x26c <_fpadd_parts+0x192>
     256:	82 15       	cp	r24, r2
     258:	93 05       	cpc	r25, r3
     25a:	2c f0       	brlt	.+10     	; 0x266 <_fpadd_parts+0x18c>
     25c:	1c 01       	movw	r2, r24
     25e:	aa 24       	eor	r10, r10
     260:	bb 24       	eor	r11, r11
     262:	65 01       	movw	r12, r10
     264:	03 c0       	rjmp	.+6      	; 0x26c <_fpadd_parts+0x192>
     266:	ee 24       	eor	r14, r14
     268:	ff 24       	eor	r15, r15
     26a:	87 01       	movw	r16, r14
     26c:	11 96       	adiw	r26, 0x01	; 1
     26e:	9c 91       	ld	r25, X
     270:	d2 01       	movw	r26, r4
     272:	11 96       	adiw	r26, 0x01	; 1
     274:	8c 91       	ld	r24, X
     276:	98 17       	cp	r25, r24
     278:	09 f4       	brne	.+2      	; 0x27c <_fpadd_parts+0x1a2>
     27a:	45 c0       	rjmp	.+138    	; 0x306 <_fpadd_parts+0x22c>
     27c:	99 23       	and	r25, r25
     27e:	39 f0       	breq	.+14     	; 0x28e <_fpadd_parts+0x1b4>
     280:	a8 01       	movw	r20, r16
     282:	97 01       	movw	r18, r14
     284:	2a 19       	sub	r18, r10
     286:	3b 09       	sbc	r19, r11
     288:	4c 09       	sbc	r20, r12
     28a:	5d 09       	sbc	r21, r13
     28c:	06 c0       	rjmp	.+12     	; 0x29a <_fpadd_parts+0x1c0>
     28e:	a6 01       	movw	r20, r12
     290:	95 01       	movw	r18, r10
     292:	2e 19       	sub	r18, r14
     294:	3f 09       	sbc	r19, r15
     296:	40 0b       	sbc	r20, r16
     298:	51 0b       	sbc	r21, r17
     29a:	57 fd       	sbrc	r21, 7
     29c:	08 c0       	rjmp	.+16     	; 0x2ae <_fpadd_parts+0x1d4>
     29e:	11 82       	std	Z+1, r1	; 0x01
     2a0:	33 82       	std	Z+3, r3	; 0x03
     2a2:	22 82       	std	Z+2, r2	; 0x02
     2a4:	24 83       	std	Z+4, r18	; 0x04
     2a6:	35 83       	std	Z+5, r19	; 0x05
     2a8:	46 83       	std	Z+6, r20	; 0x06
     2aa:	57 83       	std	Z+7, r21	; 0x07
     2ac:	1d c0       	rjmp	.+58     	; 0x2e8 <_fpadd_parts+0x20e>
     2ae:	81 e0       	ldi	r24, 0x01	; 1
     2b0:	81 83       	std	Z+1, r24	; 0x01
     2b2:	33 82       	std	Z+3, r3	; 0x03
     2b4:	22 82       	std	Z+2, r2	; 0x02
     2b6:	88 27       	eor	r24, r24
     2b8:	99 27       	eor	r25, r25
     2ba:	dc 01       	movw	r26, r24
     2bc:	82 1b       	sub	r24, r18
     2be:	93 0b       	sbc	r25, r19
     2c0:	a4 0b       	sbc	r26, r20
     2c2:	b5 0b       	sbc	r27, r21
     2c4:	84 83       	std	Z+4, r24	; 0x04
     2c6:	95 83       	std	Z+5, r25	; 0x05
     2c8:	a6 83       	std	Z+6, r26	; 0x06
     2ca:	b7 83       	std	Z+7, r27	; 0x07
     2cc:	0d c0       	rjmp	.+26     	; 0x2e8 <_fpadd_parts+0x20e>
     2ce:	22 0f       	add	r18, r18
     2d0:	33 1f       	adc	r19, r19
     2d2:	44 1f       	adc	r20, r20
     2d4:	55 1f       	adc	r21, r21
     2d6:	24 83       	std	Z+4, r18	; 0x04
     2d8:	35 83       	std	Z+5, r19	; 0x05
     2da:	46 83       	std	Z+6, r20	; 0x06
     2dc:	57 83       	std	Z+7, r21	; 0x07
     2de:	82 81       	ldd	r24, Z+2	; 0x02
     2e0:	93 81       	ldd	r25, Z+3	; 0x03
     2e2:	01 97       	sbiw	r24, 0x01	; 1
     2e4:	93 83       	std	Z+3, r25	; 0x03
     2e6:	82 83       	std	Z+2, r24	; 0x02
     2e8:	24 81       	ldd	r18, Z+4	; 0x04
     2ea:	35 81       	ldd	r19, Z+5	; 0x05
     2ec:	46 81       	ldd	r20, Z+6	; 0x06
     2ee:	57 81       	ldd	r21, Z+7	; 0x07
     2f0:	da 01       	movw	r26, r20
     2f2:	c9 01       	movw	r24, r18
     2f4:	01 97       	sbiw	r24, 0x01	; 1
     2f6:	a1 09       	sbc	r26, r1
     2f8:	b1 09       	sbc	r27, r1
     2fa:	8f 5f       	subi	r24, 0xFF	; 255
     2fc:	9f 4f       	sbci	r25, 0xFF	; 255
     2fe:	af 4f       	sbci	r26, 0xFF	; 255
     300:	bf 43       	sbci	r27, 0x3F	; 63
     302:	28 f3       	brcs	.-54     	; 0x2ce <_fpadd_parts+0x1f4>
     304:	0b c0       	rjmp	.+22     	; 0x31c <_fpadd_parts+0x242>
     306:	91 83       	std	Z+1, r25	; 0x01
     308:	33 82       	std	Z+3, r3	; 0x03
     30a:	22 82       	std	Z+2, r2	; 0x02
     30c:	ea 0c       	add	r14, r10
     30e:	fb 1c       	adc	r15, r11
     310:	0c 1d       	adc	r16, r12
     312:	1d 1d       	adc	r17, r13
     314:	e4 82       	std	Z+4, r14	; 0x04
     316:	f5 82       	std	Z+5, r15	; 0x05
     318:	06 83       	std	Z+6, r16	; 0x06
     31a:	17 83       	std	Z+7, r17	; 0x07
     31c:	83 e0       	ldi	r24, 0x03	; 3
     31e:	80 83       	st	Z, r24
     320:	24 81       	ldd	r18, Z+4	; 0x04
     322:	35 81       	ldd	r19, Z+5	; 0x05
     324:	46 81       	ldd	r20, Z+6	; 0x06
     326:	57 81       	ldd	r21, Z+7	; 0x07
     328:	57 ff       	sbrs	r21, 7
     32a:	1a c0       	rjmp	.+52     	; 0x360 <_fpadd_parts+0x286>
     32c:	c9 01       	movw	r24, r18
     32e:	aa 27       	eor	r26, r26
     330:	97 fd       	sbrc	r25, 7
     332:	a0 95       	com	r26
     334:	ba 2f       	mov	r27, r26
     336:	81 70       	andi	r24, 0x01	; 1
     338:	90 70       	andi	r25, 0x00	; 0
     33a:	a0 70       	andi	r26, 0x00	; 0
     33c:	b0 70       	andi	r27, 0x00	; 0
     33e:	56 95       	lsr	r21
     340:	47 95       	ror	r20
     342:	37 95       	ror	r19
     344:	27 95       	ror	r18
     346:	82 2b       	or	r24, r18
     348:	93 2b       	or	r25, r19
     34a:	a4 2b       	or	r26, r20
     34c:	b5 2b       	or	r27, r21
     34e:	84 83       	std	Z+4, r24	; 0x04
     350:	95 83       	std	Z+5, r25	; 0x05
     352:	a6 83       	std	Z+6, r26	; 0x06
     354:	b7 83       	std	Z+7, r27	; 0x07
     356:	82 81       	ldd	r24, Z+2	; 0x02
     358:	93 81       	ldd	r25, Z+3	; 0x03
     35a:	01 96       	adiw	r24, 0x01	; 1
     35c:	93 83       	std	Z+3, r25	; 0x03
     35e:	82 83       	std	Z+2, r24	; 0x02
     360:	df 01       	movw	r26, r30
     362:	01 c0       	rjmp	.+2      	; 0x366 <_fpadd_parts+0x28c>
     364:	d2 01       	movw	r26, r4
     366:	cd 01       	movw	r24, r26
     368:	cd b7       	in	r28, 0x3d	; 61
     36a:	de b7       	in	r29, 0x3e	; 62
     36c:	e2 e1       	ldi	r30, 0x12	; 18
     36e:	0c 94 16 1f 	jmp	0x3e2c	; 0x3e2c <__epilogue_restores__>

00000372 <__subsf3>:
     372:	a0 e2       	ldi	r26, 0x20	; 32
     374:	b0 e0       	ldi	r27, 0x00	; 0
     376:	ef eb       	ldi	r30, 0xBF	; 191
     378:	f1 e0       	ldi	r31, 0x01	; 1
     37a:	0c 94 06 1f 	jmp	0x3e0c	; 0x3e0c <__prologue_saves__+0x18>
     37e:	69 83       	std	Y+1, r22	; 0x01
     380:	7a 83       	std	Y+2, r23	; 0x02
     382:	8b 83       	std	Y+3, r24	; 0x03
     384:	9c 83       	std	Y+4, r25	; 0x04
     386:	2d 83       	std	Y+5, r18	; 0x05
     388:	3e 83       	std	Y+6, r19	; 0x06
     38a:	4f 83       	std	Y+7, r20	; 0x07
     38c:	58 87       	std	Y+8, r21	; 0x08
     38e:	e9 e0       	ldi	r30, 0x09	; 9
     390:	ee 2e       	mov	r14, r30
     392:	f1 2c       	mov	r15, r1
     394:	ec 0e       	add	r14, r28
     396:	fd 1e       	adc	r15, r29
     398:	ce 01       	movw	r24, r28
     39a:	01 96       	adiw	r24, 0x01	; 1
     39c:	b7 01       	movw	r22, r14
     39e:	0e 94 76 05 	call	0xaec	; 0xaec <__unpack_f>
     3a2:	8e 01       	movw	r16, r28
     3a4:	0f 5e       	subi	r16, 0xEF	; 239
     3a6:	1f 4f       	sbci	r17, 0xFF	; 255
     3a8:	ce 01       	movw	r24, r28
     3aa:	05 96       	adiw	r24, 0x05	; 5
     3ac:	b8 01       	movw	r22, r16
     3ae:	0e 94 76 05 	call	0xaec	; 0xaec <__unpack_f>
     3b2:	8a 89       	ldd	r24, Y+18	; 0x12
     3b4:	91 e0       	ldi	r25, 0x01	; 1
     3b6:	89 27       	eor	r24, r25
     3b8:	8a 8b       	std	Y+18, r24	; 0x12
     3ba:	c7 01       	movw	r24, r14
     3bc:	b8 01       	movw	r22, r16
     3be:	ae 01       	movw	r20, r28
     3c0:	47 5e       	subi	r20, 0xE7	; 231
     3c2:	5f 4f       	sbci	r21, 0xFF	; 255
     3c4:	0e 94 6d 00 	call	0xda	; 0xda <_fpadd_parts>
     3c8:	0e 94 a1 04 	call	0x942	; 0x942 <__pack_f>
     3cc:	a0 96       	adiw	r28, 0x20	; 32
     3ce:	e6 e0       	ldi	r30, 0x06	; 6
     3d0:	0c 94 22 1f 	jmp	0x3e44	; 0x3e44 <__epilogue_restores__+0x18>

000003d4 <__addsf3>:
     3d4:	a0 e2       	ldi	r26, 0x20	; 32
     3d6:	b0 e0       	ldi	r27, 0x00	; 0
     3d8:	e0 ef       	ldi	r30, 0xF0	; 240
     3da:	f1 e0       	ldi	r31, 0x01	; 1
     3dc:	0c 94 06 1f 	jmp	0x3e0c	; 0x3e0c <__prologue_saves__+0x18>
     3e0:	69 83       	std	Y+1, r22	; 0x01
     3e2:	7a 83       	std	Y+2, r23	; 0x02
     3e4:	8b 83       	std	Y+3, r24	; 0x03
     3e6:	9c 83       	std	Y+4, r25	; 0x04
     3e8:	2d 83       	std	Y+5, r18	; 0x05
     3ea:	3e 83       	std	Y+6, r19	; 0x06
     3ec:	4f 83       	std	Y+7, r20	; 0x07
     3ee:	58 87       	std	Y+8, r21	; 0x08
     3f0:	f9 e0       	ldi	r31, 0x09	; 9
     3f2:	ef 2e       	mov	r14, r31
     3f4:	f1 2c       	mov	r15, r1
     3f6:	ec 0e       	add	r14, r28
     3f8:	fd 1e       	adc	r15, r29
     3fa:	ce 01       	movw	r24, r28
     3fc:	01 96       	adiw	r24, 0x01	; 1
     3fe:	b7 01       	movw	r22, r14
     400:	0e 94 76 05 	call	0xaec	; 0xaec <__unpack_f>
     404:	8e 01       	movw	r16, r28
     406:	0f 5e       	subi	r16, 0xEF	; 239
     408:	1f 4f       	sbci	r17, 0xFF	; 255
     40a:	ce 01       	movw	r24, r28
     40c:	05 96       	adiw	r24, 0x05	; 5
     40e:	b8 01       	movw	r22, r16
     410:	0e 94 76 05 	call	0xaec	; 0xaec <__unpack_f>
     414:	c7 01       	movw	r24, r14
     416:	b8 01       	movw	r22, r16
     418:	ae 01       	movw	r20, r28
     41a:	47 5e       	subi	r20, 0xE7	; 231
     41c:	5f 4f       	sbci	r21, 0xFF	; 255
     41e:	0e 94 6d 00 	call	0xda	; 0xda <_fpadd_parts>
     422:	0e 94 a1 04 	call	0x942	; 0x942 <__pack_f>
     426:	a0 96       	adiw	r28, 0x20	; 32
     428:	e6 e0       	ldi	r30, 0x06	; 6
     42a:	0c 94 22 1f 	jmp	0x3e44	; 0x3e44 <__epilogue_restores__+0x18>

0000042e <__mulsf3>:
     42e:	a0 e2       	ldi	r26, 0x20	; 32
     430:	b0 e0       	ldi	r27, 0x00	; 0
     432:	ed e1       	ldi	r30, 0x1D	; 29
     434:	f2 e0       	ldi	r31, 0x02	; 2
     436:	0c 94 fa 1e 	jmp	0x3df4	; 0x3df4 <__prologue_saves__>
     43a:	69 83       	std	Y+1, r22	; 0x01
     43c:	7a 83       	std	Y+2, r23	; 0x02
     43e:	8b 83       	std	Y+3, r24	; 0x03
     440:	9c 83       	std	Y+4, r25	; 0x04
     442:	2d 83       	std	Y+5, r18	; 0x05
     444:	3e 83       	std	Y+6, r19	; 0x06
     446:	4f 83       	std	Y+7, r20	; 0x07
     448:	58 87       	std	Y+8, r21	; 0x08
     44a:	ce 01       	movw	r24, r28
     44c:	01 96       	adiw	r24, 0x01	; 1
     44e:	be 01       	movw	r22, r28
     450:	67 5f       	subi	r22, 0xF7	; 247
     452:	7f 4f       	sbci	r23, 0xFF	; 255
     454:	0e 94 76 05 	call	0xaec	; 0xaec <__unpack_f>
     458:	ce 01       	movw	r24, r28
     45a:	05 96       	adiw	r24, 0x05	; 5
     45c:	be 01       	movw	r22, r28
     45e:	6f 5e       	subi	r22, 0xEF	; 239
     460:	7f 4f       	sbci	r23, 0xFF	; 255
     462:	0e 94 76 05 	call	0xaec	; 0xaec <__unpack_f>
     466:	99 85       	ldd	r25, Y+9	; 0x09
     468:	92 30       	cpi	r25, 0x02	; 2
     46a:	88 f0       	brcs	.+34     	; 0x48e <__mulsf3+0x60>
     46c:	89 89       	ldd	r24, Y+17	; 0x11
     46e:	82 30       	cpi	r24, 0x02	; 2
     470:	c8 f0       	brcs	.+50     	; 0x4a4 <__mulsf3+0x76>
     472:	94 30       	cpi	r25, 0x04	; 4
     474:	19 f4       	brne	.+6      	; 0x47c <__mulsf3+0x4e>
     476:	82 30       	cpi	r24, 0x02	; 2
     478:	51 f4       	brne	.+20     	; 0x48e <__mulsf3+0x60>
     47a:	04 c0       	rjmp	.+8      	; 0x484 <__mulsf3+0x56>
     47c:	84 30       	cpi	r24, 0x04	; 4
     47e:	29 f4       	brne	.+10     	; 0x48a <__mulsf3+0x5c>
     480:	92 30       	cpi	r25, 0x02	; 2
     482:	81 f4       	brne	.+32     	; 0x4a4 <__mulsf3+0x76>
     484:	8f e1       	ldi	r24, 0x1F	; 31
     486:	91 e0       	ldi	r25, 0x01	; 1
     488:	c6 c0       	rjmp	.+396    	; 0x616 <__mulsf3+0x1e8>
     48a:	92 30       	cpi	r25, 0x02	; 2
     48c:	49 f4       	brne	.+18     	; 0x4a0 <__mulsf3+0x72>
     48e:	20 e0       	ldi	r18, 0x00	; 0
     490:	9a 85       	ldd	r25, Y+10	; 0x0a
     492:	8a 89       	ldd	r24, Y+18	; 0x12
     494:	98 13       	cpse	r25, r24
     496:	21 e0       	ldi	r18, 0x01	; 1
     498:	2a 87       	std	Y+10, r18	; 0x0a
     49a:	ce 01       	movw	r24, r28
     49c:	09 96       	adiw	r24, 0x09	; 9
     49e:	bb c0       	rjmp	.+374    	; 0x616 <__mulsf3+0x1e8>
     4a0:	82 30       	cpi	r24, 0x02	; 2
     4a2:	49 f4       	brne	.+18     	; 0x4b6 <__mulsf3+0x88>
     4a4:	20 e0       	ldi	r18, 0x00	; 0
     4a6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a8:	8a 89       	ldd	r24, Y+18	; 0x12
     4aa:	98 13       	cpse	r25, r24
     4ac:	21 e0       	ldi	r18, 0x01	; 1
     4ae:	2a 8b       	std	Y+18, r18	; 0x12
     4b0:	ce 01       	movw	r24, r28
     4b2:	41 96       	adiw	r24, 0x11	; 17
     4b4:	b0 c0       	rjmp	.+352    	; 0x616 <__mulsf3+0x1e8>
     4b6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4b8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ba:	4f 84       	ldd	r4, Y+15	; 0x0f
     4bc:	58 88       	ldd	r5, Y+16	; 0x10
     4be:	6d 88       	ldd	r6, Y+21	; 0x15
     4c0:	7e 88       	ldd	r7, Y+22	; 0x16
     4c2:	8f 88       	ldd	r8, Y+23	; 0x17
     4c4:	98 8c       	ldd	r9, Y+24	; 0x18
     4c6:	ee 24       	eor	r14, r14
     4c8:	ff 24       	eor	r15, r15
     4ca:	87 01       	movw	r16, r14
     4cc:	aa 24       	eor	r10, r10
     4ce:	bb 24       	eor	r11, r11
     4d0:	65 01       	movw	r12, r10
     4d2:	40 e0       	ldi	r20, 0x00	; 0
     4d4:	50 e0       	ldi	r21, 0x00	; 0
     4d6:	60 e0       	ldi	r22, 0x00	; 0
     4d8:	70 e0       	ldi	r23, 0x00	; 0
     4da:	e0 e0       	ldi	r30, 0x00	; 0
     4dc:	f0 e0       	ldi	r31, 0x00	; 0
     4de:	c1 01       	movw	r24, r2
     4e0:	81 70       	andi	r24, 0x01	; 1
     4e2:	90 70       	andi	r25, 0x00	; 0
     4e4:	89 2b       	or	r24, r25
     4e6:	e9 f0       	breq	.+58     	; 0x522 <__mulsf3+0xf4>
     4e8:	e6 0c       	add	r14, r6
     4ea:	f7 1c       	adc	r15, r7
     4ec:	08 1d       	adc	r16, r8
     4ee:	19 1d       	adc	r17, r9
     4f0:	9a 01       	movw	r18, r20
     4f2:	ab 01       	movw	r20, r22
     4f4:	2a 0d       	add	r18, r10
     4f6:	3b 1d       	adc	r19, r11
     4f8:	4c 1d       	adc	r20, r12
     4fa:	5d 1d       	adc	r21, r13
     4fc:	80 e0       	ldi	r24, 0x00	; 0
     4fe:	90 e0       	ldi	r25, 0x00	; 0
     500:	a0 e0       	ldi	r26, 0x00	; 0
     502:	b0 e0       	ldi	r27, 0x00	; 0
     504:	e6 14       	cp	r14, r6
     506:	f7 04       	cpc	r15, r7
     508:	08 05       	cpc	r16, r8
     50a:	19 05       	cpc	r17, r9
     50c:	20 f4       	brcc	.+8      	; 0x516 <__mulsf3+0xe8>
     50e:	81 e0       	ldi	r24, 0x01	; 1
     510:	90 e0       	ldi	r25, 0x00	; 0
     512:	a0 e0       	ldi	r26, 0x00	; 0
     514:	b0 e0       	ldi	r27, 0x00	; 0
     516:	ba 01       	movw	r22, r20
     518:	a9 01       	movw	r20, r18
     51a:	48 0f       	add	r20, r24
     51c:	59 1f       	adc	r21, r25
     51e:	6a 1f       	adc	r22, r26
     520:	7b 1f       	adc	r23, r27
     522:	aa 0c       	add	r10, r10
     524:	bb 1c       	adc	r11, r11
     526:	cc 1c       	adc	r12, r12
     528:	dd 1c       	adc	r13, r13
     52a:	97 fe       	sbrs	r9, 7
     52c:	08 c0       	rjmp	.+16     	; 0x53e <__mulsf3+0x110>
     52e:	81 e0       	ldi	r24, 0x01	; 1
     530:	90 e0       	ldi	r25, 0x00	; 0
     532:	a0 e0       	ldi	r26, 0x00	; 0
     534:	b0 e0       	ldi	r27, 0x00	; 0
     536:	a8 2a       	or	r10, r24
     538:	b9 2a       	or	r11, r25
     53a:	ca 2a       	or	r12, r26
     53c:	db 2a       	or	r13, r27
     53e:	31 96       	adiw	r30, 0x01	; 1
     540:	e0 32       	cpi	r30, 0x20	; 32
     542:	f1 05       	cpc	r31, r1
     544:	49 f0       	breq	.+18     	; 0x558 <__mulsf3+0x12a>
     546:	66 0c       	add	r6, r6
     548:	77 1c       	adc	r7, r7
     54a:	88 1c       	adc	r8, r8
     54c:	99 1c       	adc	r9, r9
     54e:	56 94       	lsr	r5
     550:	47 94       	ror	r4
     552:	37 94       	ror	r3
     554:	27 94       	ror	r2
     556:	c3 cf       	rjmp	.-122    	; 0x4de <__mulsf3+0xb0>
     558:	fa 85       	ldd	r31, Y+10	; 0x0a
     55a:	ea 89       	ldd	r30, Y+18	; 0x12
     55c:	2b 89       	ldd	r18, Y+19	; 0x13
     55e:	3c 89       	ldd	r19, Y+20	; 0x14
     560:	8b 85       	ldd	r24, Y+11	; 0x0b
     562:	9c 85       	ldd	r25, Y+12	; 0x0c
     564:	28 0f       	add	r18, r24
     566:	39 1f       	adc	r19, r25
     568:	2e 5f       	subi	r18, 0xFE	; 254
     56a:	3f 4f       	sbci	r19, 0xFF	; 255
     56c:	17 c0       	rjmp	.+46     	; 0x59c <__mulsf3+0x16e>
     56e:	ca 01       	movw	r24, r20
     570:	81 70       	andi	r24, 0x01	; 1
     572:	90 70       	andi	r25, 0x00	; 0
     574:	89 2b       	or	r24, r25
     576:	61 f0       	breq	.+24     	; 0x590 <__mulsf3+0x162>
     578:	16 95       	lsr	r17
     57a:	07 95       	ror	r16
     57c:	f7 94       	ror	r15
     57e:	e7 94       	ror	r14
     580:	80 e0       	ldi	r24, 0x00	; 0
     582:	90 e0       	ldi	r25, 0x00	; 0
     584:	a0 e0       	ldi	r26, 0x00	; 0
     586:	b0 e8       	ldi	r27, 0x80	; 128
     588:	e8 2a       	or	r14, r24
     58a:	f9 2a       	or	r15, r25
     58c:	0a 2b       	or	r16, r26
     58e:	1b 2b       	or	r17, r27
     590:	76 95       	lsr	r23
     592:	67 95       	ror	r22
     594:	57 95       	ror	r21
     596:	47 95       	ror	r20
     598:	2f 5f       	subi	r18, 0xFF	; 255
     59a:	3f 4f       	sbci	r19, 0xFF	; 255
     59c:	77 fd       	sbrc	r23, 7
     59e:	e7 cf       	rjmp	.-50     	; 0x56e <__mulsf3+0x140>
     5a0:	0c c0       	rjmp	.+24     	; 0x5ba <__mulsf3+0x18c>
     5a2:	44 0f       	add	r20, r20
     5a4:	55 1f       	adc	r21, r21
     5a6:	66 1f       	adc	r22, r22
     5a8:	77 1f       	adc	r23, r23
     5aa:	17 fd       	sbrc	r17, 7
     5ac:	41 60       	ori	r20, 0x01	; 1
     5ae:	ee 0c       	add	r14, r14
     5b0:	ff 1c       	adc	r15, r15
     5b2:	00 1f       	adc	r16, r16
     5b4:	11 1f       	adc	r17, r17
     5b6:	21 50       	subi	r18, 0x01	; 1
     5b8:	30 40       	sbci	r19, 0x00	; 0
     5ba:	40 30       	cpi	r20, 0x00	; 0
     5bc:	90 e0       	ldi	r25, 0x00	; 0
     5be:	59 07       	cpc	r21, r25
     5c0:	90 e0       	ldi	r25, 0x00	; 0
     5c2:	69 07       	cpc	r22, r25
     5c4:	90 e4       	ldi	r25, 0x40	; 64
     5c6:	79 07       	cpc	r23, r25
     5c8:	60 f3       	brcs	.-40     	; 0x5a2 <__mulsf3+0x174>
     5ca:	2b 8f       	std	Y+27, r18	; 0x1b
     5cc:	3c 8f       	std	Y+28, r19	; 0x1c
     5ce:	db 01       	movw	r26, r22
     5d0:	ca 01       	movw	r24, r20
     5d2:	8f 77       	andi	r24, 0x7F	; 127
     5d4:	90 70       	andi	r25, 0x00	; 0
     5d6:	a0 70       	andi	r26, 0x00	; 0
     5d8:	b0 70       	andi	r27, 0x00	; 0
     5da:	80 34       	cpi	r24, 0x40	; 64
     5dc:	91 05       	cpc	r25, r1
     5de:	a1 05       	cpc	r26, r1
     5e0:	b1 05       	cpc	r27, r1
     5e2:	61 f4       	brne	.+24     	; 0x5fc <__mulsf3+0x1ce>
     5e4:	47 fd       	sbrc	r20, 7
     5e6:	0a c0       	rjmp	.+20     	; 0x5fc <__mulsf3+0x1ce>
     5e8:	e1 14       	cp	r14, r1
     5ea:	f1 04       	cpc	r15, r1
     5ec:	01 05       	cpc	r16, r1
     5ee:	11 05       	cpc	r17, r1
     5f0:	29 f0       	breq	.+10     	; 0x5fc <__mulsf3+0x1ce>
     5f2:	40 5c       	subi	r20, 0xC0	; 192
     5f4:	5f 4f       	sbci	r21, 0xFF	; 255
     5f6:	6f 4f       	sbci	r22, 0xFF	; 255
     5f8:	7f 4f       	sbci	r23, 0xFF	; 255
     5fa:	40 78       	andi	r20, 0x80	; 128
     5fc:	1a 8e       	std	Y+26, r1	; 0x1a
     5fe:	fe 17       	cp	r31, r30
     600:	11 f0       	breq	.+4      	; 0x606 <__mulsf3+0x1d8>
     602:	81 e0       	ldi	r24, 0x01	; 1
     604:	8a 8f       	std	Y+26, r24	; 0x1a
     606:	4d 8f       	std	Y+29, r20	; 0x1d
     608:	5e 8f       	std	Y+30, r21	; 0x1e
     60a:	6f 8f       	std	Y+31, r22	; 0x1f
     60c:	78 a3       	std	Y+32, r23	; 0x20
     60e:	83 e0       	ldi	r24, 0x03	; 3
     610:	89 8f       	std	Y+25, r24	; 0x19
     612:	ce 01       	movw	r24, r28
     614:	49 96       	adiw	r24, 0x19	; 25
     616:	0e 94 a1 04 	call	0x942	; 0x942 <__pack_f>
     61a:	a0 96       	adiw	r28, 0x20	; 32
     61c:	e2 e1       	ldi	r30, 0x12	; 18
     61e:	0c 94 16 1f 	jmp	0x3e2c	; 0x3e2c <__epilogue_restores__>

00000622 <__divsf3>:
     622:	a8 e1       	ldi	r26, 0x18	; 24
     624:	b0 e0       	ldi	r27, 0x00	; 0
     626:	e7 e1       	ldi	r30, 0x17	; 23
     628:	f3 e0       	ldi	r31, 0x03	; 3
     62a:	0c 94 02 1f 	jmp	0x3e04	; 0x3e04 <__prologue_saves__+0x10>
     62e:	69 83       	std	Y+1, r22	; 0x01
     630:	7a 83       	std	Y+2, r23	; 0x02
     632:	8b 83       	std	Y+3, r24	; 0x03
     634:	9c 83       	std	Y+4, r25	; 0x04
     636:	2d 83       	std	Y+5, r18	; 0x05
     638:	3e 83       	std	Y+6, r19	; 0x06
     63a:	4f 83       	std	Y+7, r20	; 0x07
     63c:	58 87       	std	Y+8, r21	; 0x08
     63e:	b9 e0       	ldi	r27, 0x09	; 9
     640:	eb 2e       	mov	r14, r27
     642:	f1 2c       	mov	r15, r1
     644:	ec 0e       	add	r14, r28
     646:	fd 1e       	adc	r15, r29
     648:	ce 01       	movw	r24, r28
     64a:	01 96       	adiw	r24, 0x01	; 1
     64c:	b7 01       	movw	r22, r14
     64e:	0e 94 76 05 	call	0xaec	; 0xaec <__unpack_f>
     652:	8e 01       	movw	r16, r28
     654:	0f 5e       	subi	r16, 0xEF	; 239
     656:	1f 4f       	sbci	r17, 0xFF	; 255
     658:	ce 01       	movw	r24, r28
     65a:	05 96       	adiw	r24, 0x05	; 5
     65c:	b8 01       	movw	r22, r16
     65e:	0e 94 76 05 	call	0xaec	; 0xaec <__unpack_f>
     662:	29 85       	ldd	r18, Y+9	; 0x09
     664:	22 30       	cpi	r18, 0x02	; 2
     666:	08 f4       	brcc	.+2      	; 0x66a <__divsf3+0x48>
     668:	7e c0       	rjmp	.+252    	; 0x766 <__divsf3+0x144>
     66a:	39 89       	ldd	r19, Y+17	; 0x11
     66c:	32 30       	cpi	r19, 0x02	; 2
     66e:	10 f4       	brcc	.+4      	; 0x674 <__divsf3+0x52>
     670:	b8 01       	movw	r22, r16
     672:	7c c0       	rjmp	.+248    	; 0x76c <__divsf3+0x14a>
     674:	8a 85       	ldd	r24, Y+10	; 0x0a
     676:	9a 89       	ldd	r25, Y+18	; 0x12
     678:	89 27       	eor	r24, r25
     67a:	8a 87       	std	Y+10, r24	; 0x0a
     67c:	24 30       	cpi	r18, 0x04	; 4
     67e:	11 f0       	breq	.+4      	; 0x684 <__divsf3+0x62>
     680:	22 30       	cpi	r18, 0x02	; 2
     682:	31 f4       	brne	.+12     	; 0x690 <__divsf3+0x6e>
     684:	23 17       	cp	r18, r19
     686:	09 f0       	breq	.+2      	; 0x68a <__divsf3+0x68>
     688:	6e c0       	rjmp	.+220    	; 0x766 <__divsf3+0x144>
     68a:	6f e1       	ldi	r22, 0x1F	; 31
     68c:	71 e0       	ldi	r23, 0x01	; 1
     68e:	6e c0       	rjmp	.+220    	; 0x76c <__divsf3+0x14a>
     690:	34 30       	cpi	r19, 0x04	; 4
     692:	39 f4       	brne	.+14     	; 0x6a2 <__divsf3+0x80>
     694:	1d 86       	std	Y+13, r1	; 0x0d
     696:	1e 86       	std	Y+14, r1	; 0x0e
     698:	1f 86       	std	Y+15, r1	; 0x0f
     69a:	18 8a       	std	Y+16, r1	; 0x10
     69c:	1c 86       	std	Y+12, r1	; 0x0c
     69e:	1b 86       	std	Y+11, r1	; 0x0b
     6a0:	04 c0       	rjmp	.+8      	; 0x6aa <__divsf3+0x88>
     6a2:	32 30       	cpi	r19, 0x02	; 2
     6a4:	21 f4       	brne	.+8      	; 0x6ae <__divsf3+0x8c>
     6a6:	84 e0       	ldi	r24, 0x04	; 4
     6a8:	89 87       	std	Y+9, r24	; 0x09
     6aa:	b7 01       	movw	r22, r14
     6ac:	5f c0       	rjmp	.+190    	; 0x76c <__divsf3+0x14a>
     6ae:	2b 85       	ldd	r18, Y+11	; 0x0b
     6b0:	3c 85       	ldd	r19, Y+12	; 0x0c
     6b2:	8b 89       	ldd	r24, Y+19	; 0x13
     6b4:	9c 89       	ldd	r25, Y+20	; 0x14
     6b6:	28 1b       	sub	r18, r24
     6b8:	39 0b       	sbc	r19, r25
     6ba:	3c 87       	std	Y+12, r19	; 0x0c
     6bc:	2b 87       	std	Y+11, r18	; 0x0b
     6be:	ed 84       	ldd	r14, Y+13	; 0x0d
     6c0:	fe 84       	ldd	r15, Y+14	; 0x0e
     6c2:	0f 85       	ldd	r16, Y+15	; 0x0f
     6c4:	18 89       	ldd	r17, Y+16	; 0x10
     6c6:	ad 88       	ldd	r10, Y+21	; 0x15
     6c8:	be 88       	ldd	r11, Y+22	; 0x16
     6ca:	cf 88       	ldd	r12, Y+23	; 0x17
     6cc:	d8 8c       	ldd	r13, Y+24	; 0x18
     6ce:	ea 14       	cp	r14, r10
     6d0:	fb 04       	cpc	r15, r11
     6d2:	0c 05       	cpc	r16, r12
     6d4:	1d 05       	cpc	r17, r13
     6d6:	40 f4       	brcc	.+16     	; 0x6e8 <__divsf3+0xc6>
     6d8:	ee 0c       	add	r14, r14
     6da:	ff 1c       	adc	r15, r15
     6dc:	00 1f       	adc	r16, r16
     6de:	11 1f       	adc	r17, r17
     6e0:	21 50       	subi	r18, 0x01	; 1
     6e2:	30 40       	sbci	r19, 0x00	; 0
     6e4:	3c 87       	std	Y+12, r19	; 0x0c
     6e6:	2b 87       	std	Y+11, r18	; 0x0b
     6e8:	20 e0       	ldi	r18, 0x00	; 0
     6ea:	30 e0       	ldi	r19, 0x00	; 0
     6ec:	40 e0       	ldi	r20, 0x00	; 0
     6ee:	50 e0       	ldi	r21, 0x00	; 0
     6f0:	80 e0       	ldi	r24, 0x00	; 0
     6f2:	90 e0       	ldi	r25, 0x00	; 0
     6f4:	a0 e0       	ldi	r26, 0x00	; 0
     6f6:	b0 e4       	ldi	r27, 0x40	; 64
     6f8:	60 e0       	ldi	r22, 0x00	; 0
     6fa:	70 e0       	ldi	r23, 0x00	; 0
     6fc:	ea 14       	cp	r14, r10
     6fe:	fb 04       	cpc	r15, r11
     700:	0c 05       	cpc	r16, r12
     702:	1d 05       	cpc	r17, r13
     704:	40 f0       	brcs	.+16     	; 0x716 <__divsf3+0xf4>
     706:	28 2b       	or	r18, r24
     708:	39 2b       	or	r19, r25
     70a:	4a 2b       	or	r20, r26
     70c:	5b 2b       	or	r21, r27
     70e:	ea 18       	sub	r14, r10
     710:	fb 08       	sbc	r15, r11
     712:	0c 09       	sbc	r16, r12
     714:	1d 09       	sbc	r17, r13
     716:	b6 95       	lsr	r27
     718:	a7 95       	ror	r26
     71a:	97 95       	ror	r25
     71c:	87 95       	ror	r24
     71e:	ee 0c       	add	r14, r14
     720:	ff 1c       	adc	r15, r15
     722:	00 1f       	adc	r16, r16
     724:	11 1f       	adc	r17, r17
     726:	6f 5f       	subi	r22, 0xFF	; 255
     728:	7f 4f       	sbci	r23, 0xFF	; 255
     72a:	6f 31       	cpi	r22, 0x1F	; 31
     72c:	71 05       	cpc	r23, r1
     72e:	31 f7       	brne	.-52     	; 0x6fc <__divsf3+0xda>
     730:	da 01       	movw	r26, r20
     732:	c9 01       	movw	r24, r18
     734:	8f 77       	andi	r24, 0x7F	; 127
     736:	90 70       	andi	r25, 0x00	; 0
     738:	a0 70       	andi	r26, 0x00	; 0
     73a:	b0 70       	andi	r27, 0x00	; 0
     73c:	80 34       	cpi	r24, 0x40	; 64
     73e:	91 05       	cpc	r25, r1
     740:	a1 05       	cpc	r26, r1
     742:	b1 05       	cpc	r27, r1
     744:	61 f4       	brne	.+24     	; 0x75e <__divsf3+0x13c>
     746:	27 fd       	sbrc	r18, 7
     748:	0a c0       	rjmp	.+20     	; 0x75e <__divsf3+0x13c>
     74a:	e1 14       	cp	r14, r1
     74c:	f1 04       	cpc	r15, r1
     74e:	01 05       	cpc	r16, r1
     750:	11 05       	cpc	r17, r1
     752:	29 f0       	breq	.+10     	; 0x75e <__divsf3+0x13c>
     754:	20 5c       	subi	r18, 0xC0	; 192
     756:	3f 4f       	sbci	r19, 0xFF	; 255
     758:	4f 4f       	sbci	r20, 0xFF	; 255
     75a:	5f 4f       	sbci	r21, 0xFF	; 255
     75c:	20 78       	andi	r18, 0x80	; 128
     75e:	2d 87       	std	Y+13, r18	; 0x0d
     760:	3e 87       	std	Y+14, r19	; 0x0e
     762:	4f 87       	std	Y+15, r20	; 0x0f
     764:	58 8b       	std	Y+16, r21	; 0x10
     766:	be 01       	movw	r22, r28
     768:	67 5f       	subi	r22, 0xF7	; 247
     76a:	7f 4f       	sbci	r23, 0xFF	; 255
     76c:	cb 01       	movw	r24, r22
     76e:	0e 94 a1 04 	call	0x942	; 0x942 <__pack_f>
     772:	68 96       	adiw	r28, 0x18	; 24
     774:	ea e0       	ldi	r30, 0x0A	; 10
     776:	0c 94 1e 1f 	jmp	0x3e3c	; 0x3e3c <__epilogue_restores__+0x10>

0000077a <__gtsf2>:
     77a:	a8 e1       	ldi	r26, 0x18	; 24
     77c:	b0 e0       	ldi	r27, 0x00	; 0
     77e:	e3 ec       	ldi	r30, 0xC3	; 195
     780:	f3 e0       	ldi	r31, 0x03	; 3
     782:	0c 94 06 1f 	jmp	0x3e0c	; 0x3e0c <__prologue_saves__+0x18>
     786:	69 83       	std	Y+1, r22	; 0x01
     788:	7a 83       	std	Y+2, r23	; 0x02
     78a:	8b 83       	std	Y+3, r24	; 0x03
     78c:	9c 83       	std	Y+4, r25	; 0x04
     78e:	2d 83       	std	Y+5, r18	; 0x05
     790:	3e 83       	std	Y+6, r19	; 0x06
     792:	4f 83       	std	Y+7, r20	; 0x07
     794:	58 87       	std	Y+8, r21	; 0x08
     796:	89 e0       	ldi	r24, 0x09	; 9
     798:	e8 2e       	mov	r14, r24
     79a:	f1 2c       	mov	r15, r1
     79c:	ec 0e       	add	r14, r28
     79e:	fd 1e       	adc	r15, r29
     7a0:	ce 01       	movw	r24, r28
     7a2:	01 96       	adiw	r24, 0x01	; 1
     7a4:	b7 01       	movw	r22, r14
     7a6:	0e 94 76 05 	call	0xaec	; 0xaec <__unpack_f>
     7aa:	8e 01       	movw	r16, r28
     7ac:	0f 5e       	subi	r16, 0xEF	; 239
     7ae:	1f 4f       	sbci	r17, 0xFF	; 255
     7b0:	ce 01       	movw	r24, r28
     7b2:	05 96       	adiw	r24, 0x05	; 5
     7b4:	b8 01       	movw	r22, r16
     7b6:	0e 94 76 05 	call	0xaec	; 0xaec <__unpack_f>
     7ba:	89 85       	ldd	r24, Y+9	; 0x09
     7bc:	82 30       	cpi	r24, 0x02	; 2
     7be:	40 f0       	brcs	.+16     	; 0x7d0 <__gtsf2+0x56>
     7c0:	89 89       	ldd	r24, Y+17	; 0x11
     7c2:	82 30       	cpi	r24, 0x02	; 2
     7c4:	28 f0       	brcs	.+10     	; 0x7d0 <__gtsf2+0x56>
     7c6:	c7 01       	movw	r24, r14
     7c8:	b8 01       	movw	r22, r16
     7ca:	0e 94 ee 05 	call	0xbdc	; 0xbdc <__fpcmp_parts_f>
     7ce:	01 c0       	rjmp	.+2      	; 0x7d2 <__gtsf2+0x58>
     7d0:	8f ef       	ldi	r24, 0xFF	; 255
     7d2:	68 96       	adiw	r28, 0x18	; 24
     7d4:	e6 e0       	ldi	r30, 0x06	; 6
     7d6:	0c 94 22 1f 	jmp	0x3e44	; 0x3e44 <__epilogue_restores__+0x18>

000007da <__gesf2>:
     7da:	a8 e1       	ldi	r26, 0x18	; 24
     7dc:	b0 e0       	ldi	r27, 0x00	; 0
     7de:	e3 ef       	ldi	r30, 0xF3	; 243
     7e0:	f3 e0       	ldi	r31, 0x03	; 3
     7e2:	0c 94 06 1f 	jmp	0x3e0c	; 0x3e0c <__prologue_saves__+0x18>
     7e6:	69 83       	std	Y+1, r22	; 0x01
     7e8:	7a 83       	std	Y+2, r23	; 0x02
     7ea:	8b 83       	std	Y+3, r24	; 0x03
     7ec:	9c 83       	std	Y+4, r25	; 0x04
     7ee:	2d 83       	std	Y+5, r18	; 0x05
     7f0:	3e 83       	std	Y+6, r19	; 0x06
     7f2:	4f 83       	std	Y+7, r20	; 0x07
     7f4:	58 87       	std	Y+8, r21	; 0x08
     7f6:	89 e0       	ldi	r24, 0x09	; 9
     7f8:	e8 2e       	mov	r14, r24
     7fa:	f1 2c       	mov	r15, r1
     7fc:	ec 0e       	add	r14, r28
     7fe:	fd 1e       	adc	r15, r29
     800:	ce 01       	movw	r24, r28
     802:	01 96       	adiw	r24, 0x01	; 1
     804:	b7 01       	movw	r22, r14
     806:	0e 94 76 05 	call	0xaec	; 0xaec <__unpack_f>
     80a:	8e 01       	movw	r16, r28
     80c:	0f 5e       	subi	r16, 0xEF	; 239
     80e:	1f 4f       	sbci	r17, 0xFF	; 255
     810:	ce 01       	movw	r24, r28
     812:	05 96       	adiw	r24, 0x05	; 5
     814:	b8 01       	movw	r22, r16
     816:	0e 94 76 05 	call	0xaec	; 0xaec <__unpack_f>
     81a:	89 85       	ldd	r24, Y+9	; 0x09
     81c:	82 30       	cpi	r24, 0x02	; 2
     81e:	40 f0       	brcs	.+16     	; 0x830 <__gesf2+0x56>
     820:	89 89       	ldd	r24, Y+17	; 0x11
     822:	82 30       	cpi	r24, 0x02	; 2
     824:	28 f0       	brcs	.+10     	; 0x830 <__gesf2+0x56>
     826:	c7 01       	movw	r24, r14
     828:	b8 01       	movw	r22, r16
     82a:	0e 94 ee 05 	call	0xbdc	; 0xbdc <__fpcmp_parts_f>
     82e:	01 c0       	rjmp	.+2      	; 0x832 <__gesf2+0x58>
     830:	8f ef       	ldi	r24, 0xFF	; 255
     832:	68 96       	adiw	r28, 0x18	; 24
     834:	e6 e0       	ldi	r30, 0x06	; 6
     836:	0c 94 22 1f 	jmp	0x3e44	; 0x3e44 <__epilogue_restores__+0x18>

0000083a <__ltsf2>:
     83a:	a8 e1       	ldi	r26, 0x18	; 24
     83c:	b0 e0       	ldi	r27, 0x00	; 0
     83e:	e3 e2       	ldi	r30, 0x23	; 35
     840:	f4 e0       	ldi	r31, 0x04	; 4
     842:	0c 94 06 1f 	jmp	0x3e0c	; 0x3e0c <__prologue_saves__+0x18>
     846:	69 83       	std	Y+1, r22	; 0x01
     848:	7a 83       	std	Y+2, r23	; 0x02
     84a:	8b 83       	std	Y+3, r24	; 0x03
     84c:	9c 83       	std	Y+4, r25	; 0x04
     84e:	2d 83       	std	Y+5, r18	; 0x05
     850:	3e 83       	std	Y+6, r19	; 0x06
     852:	4f 83       	std	Y+7, r20	; 0x07
     854:	58 87       	std	Y+8, r21	; 0x08
     856:	89 e0       	ldi	r24, 0x09	; 9
     858:	e8 2e       	mov	r14, r24
     85a:	f1 2c       	mov	r15, r1
     85c:	ec 0e       	add	r14, r28
     85e:	fd 1e       	adc	r15, r29
     860:	ce 01       	movw	r24, r28
     862:	01 96       	adiw	r24, 0x01	; 1
     864:	b7 01       	movw	r22, r14
     866:	0e 94 76 05 	call	0xaec	; 0xaec <__unpack_f>
     86a:	8e 01       	movw	r16, r28
     86c:	0f 5e       	subi	r16, 0xEF	; 239
     86e:	1f 4f       	sbci	r17, 0xFF	; 255
     870:	ce 01       	movw	r24, r28
     872:	05 96       	adiw	r24, 0x05	; 5
     874:	b8 01       	movw	r22, r16
     876:	0e 94 76 05 	call	0xaec	; 0xaec <__unpack_f>
     87a:	89 85       	ldd	r24, Y+9	; 0x09
     87c:	82 30       	cpi	r24, 0x02	; 2
     87e:	40 f0       	brcs	.+16     	; 0x890 <__stack+0x31>
     880:	89 89       	ldd	r24, Y+17	; 0x11
     882:	82 30       	cpi	r24, 0x02	; 2
     884:	28 f0       	brcs	.+10     	; 0x890 <__stack+0x31>
     886:	c7 01       	movw	r24, r14
     888:	b8 01       	movw	r22, r16
     88a:	0e 94 ee 05 	call	0xbdc	; 0xbdc <__fpcmp_parts_f>
     88e:	01 c0       	rjmp	.+2      	; 0x892 <__stack+0x33>
     890:	81 e0       	ldi	r24, 0x01	; 1
     892:	68 96       	adiw	r28, 0x18	; 24
     894:	e6 e0       	ldi	r30, 0x06	; 6
     896:	0c 94 22 1f 	jmp	0x3e44	; 0x3e44 <__epilogue_restores__+0x18>

0000089a <__fixsfsi>:
     89a:	ac e0       	ldi	r26, 0x0C	; 12
     89c:	b0 e0       	ldi	r27, 0x00	; 0
     89e:	e3 e5       	ldi	r30, 0x53	; 83
     8a0:	f4 e0       	ldi	r31, 0x04	; 4
     8a2:	0c 94 0a 1f 	jmp	0x3e14	; 0x3e14 <__prologue_saves__+0x20>
     8a6:	69 83       	std	Y+1, r22	; 0x01
     8a8:	7a 83       	std	Y+2, r23	; 0x02
     8aa:	8b 83       	std	Y+3, r24	; 0x03
     8ac:	9c 83       	std	Y+4, r25	; 0x04
     8ae:	ce 01       	movw	r24, r28
     8b0:	01 96       	adiw	r24, 0x01	; 1
     8b2:	be 01       	movw	r22, r28
     8b4:	6b 5f       	subi	r22, 0xFB	; 251
     8b6:	7f 4f       	sbci	r23, 0xFF	; 255
     8b8:	0e 94 76 05 	call	0xaec	; 0xaec <__unpack_f>
     8bc:	8d 81       	ldd	r24, Y+5	; 0x05
     8be:	82 30       	cpi	r24, 0x02	; 2
     8c0:	61 f1       	breq	.+88     	; 0x91a <__fixsfsi+0x80>
     8c2:	82 30       	cpi	r24, 0x02	; 2
     8c4:	50 f1       	brcs	.+84     	; 0x91a <__fixsfsi+0x80>
     8c6:	84 30       	cpi	r24, 0x04	; 4
     8c8:	21 f4       	brne	.+8      	; 0x8d2 <__fixsfsi+0x38>
     8ca:	8e 81       	ldd	r24, Y+6	; 0x06
     8cc:	88 23       	and	r24, r24
     8ce:	51 f1       	breq	.+84     	; 0x924 <__fixsfsi+0x8a>
     8d0:	2e c0       	rjmp	.+92     	; 0x92e <__fixsfsi+0x94>
     8d2:	2f 81       	ldd	r18, Y+7	; 0x07
     8d4:	38 85       	ldd	r19, Y+8	; 0x08
     8d6:	37 fd       	sbrc	r19, 7
     8d8:	20 c0       	rjmp	.+64     	; 0x91a <__fixsfsi+0x80>
     8da:	6e 81       	ldd	r22, Y+6	; 0x06
     8dc:	2f 31       	cpi	r18, 0x1F	; 31
     8de:	31 05       	cpc	r19, r1
     8e0:	1c f0       	brlt	.+6      	; 0x8e8 <__fixsfsi+0x4e>
     8e2:	66 23       	and	r22, r22
     8e4:	f9 f0       	breq	.+62     	; 0x924 <__fixsfsi+0x8a>
     8e6:	23 c0       	rjmp	.+70     	; 0x92e <__fixsfsi+0x94>
     8e8:	8e e1       	ldi	r24, 0x1E	; 30
     8ea:	90 e0       	ldi	r25, 0x00	; 0
     8ec:	82 1b       	sub	r24, r18
     8ee:	93 0b       	sbc	r25, r19
     8f0:	29 85       	ldd	r18, Y+9	; 0x09
     8f2:	3a 85       	ldd	r19, Y+10	; 0x0a
     8f4:	4b 85       	ldd	r20, Y+11	; 0x0b
     8f6:	5c 85       	ldd	r21, Y+12	; 0x0c
     8f8:	04 c0       	rjmp	.+8      	; 0x902 <__fixsfsi+0x68>
     8fa:	56 95       	lsr	r21
     8fc:	47 95       	ror	r20
     8fe:	37 95       	ror	r19
     900:	27 95       	ror	r18
     902:	8a 95       	dec	r24
     904:	d2 f7       	brpl	.-12     	; 0x8fa <__fixsfsi+0x60>
     906:	66 23       	and	r22, r22
     908:	b1 f0       	breq	.+44     	; 0x936 <__fixsfsi+0x9c>
     90a:	50 95       	com	r21
     90c:	40 95       	com	r20
     90e:	30 95       	com	r19
     910:	21 95       	neg	r18
     912:	3f 4f       	sbci	r19, 0xFF	; 255
     914:	4f 4f       	sbci	r20, 0xFF	; 255
     916:	5f 4f       	sbci	r21, 0xFF	; 255
     918:	0e c0       	rjmp	.+28     	; 0x936 <__fixsfsi+0x9c>
     91a:	20 e0       	ldi	r18, 0x00	; 0
     91c:	30 e0       	ldi	r19, 0x00	; 0
     91e:	40 e0       	ldi	r20, 0x00	; 0
     920:	50 e0       	ldi	r21, 0x00	; 0
     922:	09 c0       	rjmp	.+18     	; 0x936 <__fixsfsi+0x9c>
     924:	2f ef       	ldi	r18, 0xFF	; 255
     926:	3f ef       	ldi	r19, 0xFF	; 255
     928:	4f ef       	ldi	r20, 0xFF	; 255
     92a:	5f e7       	ldi	r21, 0x7F	; 127
     92c:	04 c0       	rjmp	.+8      	; 0x936 <__fixsfsi+0x9c>
     92e:	20 e0       	ldi	r18, 0x00	; 0
     930:	30 e0       	ldi	r19, 0x00	; 0
     932:	40 e0       	ldi	r20, 0x00	; 0
     934:	50 e8       	ldi	r21, 0x80	; 128
     936:	b9 01       	movw	r22, r18
     938:	ca 01       	movw	r24, r20
     93a:	2c 96       	adiw	r28, 0x0c	; 12
     93c:	e2 e0       	ldi	r30, 0x02	; 2
     93e:	0c 94 26 1f 	jmp	0x3e4c	; 0x3e4c <__epilogue_restores__+0x20>

00000942 <__pack_f>:
     942:	df 92       	push	r13
     944:	ef 92       	push	r14
     946:	ff 92       	push	r15
     948:	0f 93       	push	r16
     94a:	1f 93       	push	r17
     94c:	fc 01       	movw	r30, r24
     94e:	e4 80       	ldd	r14, Z+4	; 0x04
     950:	f5 80       	ldd	r15, Z+5	; 0x05
     952:	06 81       	ldd	r16, Z+6	; 0x06
     954:	17 81       	ldd	r17, Z+7	; 0x07
     956:	d1 80       	ldd	r13, Z+1	; 0x01
     958:	80 81       	ld	r24, Z
     95a:	82 30       	cpi	r24, 0x02	; 2
     95c:	48 f4       	brcc	.+18     	; 0x970 <__pack_f+0x2e>
     95e:	80 e0       	ldi	r24, 0x00	; 0
     960:	90 e0       	ldi	r25, 0x00	; 0
     962:	a0 e1       	ldi	r26, 0x10	; 16
     964:	b0 e0       	ldi	r27, 0x00	; 0
     966:	e8 2a       	or	r14, r24
     968:	f9 2a       	or	r15, r25
     96a:	0a 2b       	or	r16, r26
     96c:	1b 2b       	or	r17, r27
     96e:	a5 c0       	rjmp	.+330    	; 0xaba <__pack_f+0x178>
     970:	84 30       	cpi	r24, 0x04	; 4
     972:	09 f4       	brne	.+2      	; 0x976 <__pack_f+0x34>
     974:	9f c0       	rjmp	.+318    	; 0xab4 <__pack_f+0x172>
     976:	82 30       	cpi	r24, 0x02	; 2
     978:	21 f4       	brne	.+8      	; 0x982 <__pack_f+0x40>
     97a:	ee 24       	eor	r14, r14
     97c:	ff 24       	eor	r15, r15
     97e:	87 01       	movw	r16, r14
     980:	05 c0       	rjmp	.+10     	; 0x98c <__pack_f+0x4a>
     982:	e1 14       	cp	r14, r1
     984:	f1 04       	cpc	r15, r1
     986:	01 05       	cpc	r16, r1
     988:	11 05       	cpc	r17, r1
     98a:	19 f4       	brne	.+6      	; 0x992 <__pack_f+0x50>
     98c:	e0 e0       	ldi	r30, 0x00	; 0
     98e:	f0 e0       	ldi	r31, 0x00	; 0
     990:	96 c0       	rjmp	.+300    	; 0xabe <__pack_f+0x17c>
     992:	62 81       	ldd	r22, Z+2	; 0x02
     994:	73 81       	ldd	r23, Z+3	; 0x03
     996:	9f ef       	ldi	r25, 0xFF	; 255
     998:	62 38       	cpi	r22, 0x82	; 130
     99a:	79 07       	cpc	r23, r25
     99c:	0c f0       	brlt	.+2      	; 0x9a0 <__pack_f+0x5e>
     99e:	5b c0       	rjmp	.+182    	; 0xa56 <__pack_f+0x114>
     9a0:	22 e8       	ldi	r18, 0x82	; 130
     9a2:	3f ef       	ldi	r19, 0xFF	; 255
     9a4:	26 1b       	sub	r18, r22
     9a6:	37 0b       	sbc	r19, r23
     9a8:	2a 31       	cpi	r18, 0x1A	; 26
     9aa:	31 05       	cpc	r19, r1
     9ac:	2c f0       	brlt	.+10     	; 0x9b8 <__pack_f+0x76>
     9ae:	20 e0       	ldi	r18, 0x00	; 0
     9b0:	30 e0       	ldi	r19, 0x00	; 0
     9b2:	40 e0       	ldi	r20, 0x00	; 0
     9b4:	50 e0       	ldi	r21, 0x00	; 0
     9b6:	2a c0       	rjmp	.+84     	; 0xa0c <__pack_f+0xca>
     9b8:	b8 01       	movw	r22, r16
     9ba:	a7 01       	movw	r20, r14
     9bc:	02 2e       	mov	r0, r18
     9be:	04 c0       	rjmp	.+8      	; 0x9c8 <__pack_f+0x86>
     9c0:	76 95       	lsr	r23
     9c2:	67 95       	ror	r22
     9c4:	57 95       	ror	r21
     9c6:	47 95       	ror	r20
     9c8:	0a 94       	dec	r0
     9ca:	d2 f7       	brpl	.-12     	; 0x9c0 <__pack_f+0x7e>
     9cc:	81 e0       	ldi	r24, 0x01	; 1
     9ce:	90 e0       	ldi	r25, 0x00	; 0
     9d0:	a0 e0       	ldi	r26, 0x00	; 0
     9d2:	b0 e0       	ldi	r27, 0x00	; 0
     9d4:	04 c0       	rjmp	.+8      	; 0x9de <__pack_f+0x9c>
     9d6:	88 0f       	add	r24, r24
     9d8:	99 1f       	adc	r25, r25
     9da:	aa 1f       	adc	r26, r26
     9dc:	bb 1f       	adc	r27, r27
     9de:	2a 95       	dec	r18
     9e0:	d2 f7       	brpl	.-12     	; 0x9d6 <__pack_f+0x94>
     9e2:	01 97       	sbiw	r24, 0x01	; 1
     9e4:	a1 09       	sbc	r26, r1
     9e6:	b1 09       	sbc	r27, r1
     9e8:	8e 21       	and	r24, r14
     9ea:	9f 21       	and	r25, r15
     9ec:	a0 23       	and	r26, r16
     9ee:	b1 23       	and	r27, r17
     9f0:	00 97       	sbiw	r24, 0x00	; 0
     9f2:	a1 05       	cpc	r26, r1
     9f4:	b1 05       	cpc	r27, r1
     9f6:	21 f0       	breq	.+8      	; 0xa00 <__pack_f+0xbe>
     9f8:	81 e0       	ldi	r24, 0x01	; 1
     9fa:	90 e0       	ldi	r25, 0x00	; 0
     9fc:	a0 e0       	ldi	r26, 0x00	; 0
     9fe:	b0 e0       	ldi	r27, 0x00	; 0
     a00:	9a 01       	movw	r18, r20
     a02:	ab 01       	movw	r20, r22
     a04:	28 2b       	or	r18, r24
     a06:	39 2b       	or	r19, r25
     a08:	4a 2b       	or	r20, r26
     a0a:	5b 2b       	or	r21, r27
     a0c:	da 01       	movw	r26, r20
     a0e:	c9 01       	movw	r24, r18
     a10:	8f 77       	andi	r24, 0x7F	; 127
     a12:	90 70       	andi	r25, 0x00	; 0
     a14:	a0 70       	andi	r26, 0x00	; 0
     a16:	b0 70       	andi	r27, 0x00	; 0
     a18:	80 34       	cpi	r24, 0x40	; 64
     a1a:	91 05       	cpc	r25, r1
     a1c:	a1 05       	cpc	r26, r1
     a1e:	b1 05       	cpc	r27, r1
     a20:	39 f4       	brne	.+14     	; 0xa30 <__pack_f+0xee>
     a22:	27 ff       	sbrs	r18, 7
     a24:	09 c0       	rjmp	.+18     	; 0xa38 <__pack_f+0xf6>
     a26:	20 5c       	subi	r18, 0xC0	; 192
     a28:	3f 4f       	sbci	r19, 0xFF	; 255
     a2a:	4f 4f       	sbci	r20, 0xFF	; 255
     a2c:	5f 4f       	sbci	r21, 0xFF	; 255
     a2e:	04 c0       	rjmp	.+8      	; 0xa38 <__pack_f+0xf6>
     a30:	21 5c       	subi	r18, 0xC1	; 193
     a32:	3f 4f       	sbci	r19, 0xFF	; 255
     a34:	4f 4f       	sbci	r20, 0xFF	; 255
     a36:	5f 4f       	sbci	r21, 0xFF	; 255
     a38:	e0 e0       	ldi	r30, 0x00	; 0
     a3a:	f0 e0       	ldi	r31, 0x00	; 0
     a3c:	20 30       	cpi	r18, 0x00	; 0
     a3e:	a0 e0       	ldi	r26, 0x00	; 0
     a40:	3a 07       	cpc	r19, r26
     a42:	a0 e0       	ldi	r26, 0x00	; 0
     a44:	4a 07       	cpc	r20, r26
     a46:	a0 e4       	ldi	r26, 0x40	; 64
     a48:	5a 07       	cpc	r21, r26
     a4a:	10 f0       	brcs	.+4      	; 0xa50 <__pack_f+0x10e>
     a4c:	e1 e0       	ldi	r30, 0x01	; 1
     a4e:	f0 e0       	ldi	r31, 0x00	; 0
     a50:	79 01       	movw	r14, r18
     a52:	8a 01       	movw	r16, r20
     a54:	27 c0       	rjmp	.+78     	; 0xaa4 <__pack_f+0x162>
     a56:	60 38       	cpi	r22, 0x80	; 128
     a58:	71 05       	cpc	r23, r1
     a5a:	64 f5       	brge	.+88     	; 0xab4 <__pack_f+0x172>
     a5c:	fb 01       	movw	r30, r22
     a5e:	e1 58       	subi	r30, 0x81	; 129
     a60:	ff 4f       	sbci	r31, 0xFF	; 255
     a62:	d8 01       	movw	r26, r16
     a64:	c7 01       	movw	r24, r14
     a66:	8f 77       	andi	r24, 0x7F	; 127
     a68:	90 70       	andi	r25, 0x00	; 0
     a6a:	a0 70       	andi	r26, 0x00	; 0
     a6c:	b0 70       	andi	r27, 0x00	; 0
     a6e:	80 34       	cpi	r24, 0x40	; 64
     a70:	91 05       	cpc	r25, r1
     a72:	a1 05       	cpc	r26, r1
     a74:	b1 05       	cpc	r27, r1
     a76:	39 f4       	brne	.+14     	; 0xa86 <__pack_f+0x144>
     a78:	e7 fe       	sbrs	r14, 7
     a7a:	0d c0       	rjmp	.+26     	; 0xa96 <__pack_f+0x154>
     a7c:	80 e4       	ldi	r24, 0x40	; 64
     a7e:	90 e0       	ldi	r25, 0x00	; 0
     a80:	a0 e0       	ldi	r26, 0x00	; 0
     a82:	b0 e0       	ldi	r27, 0x00	; 0
     a84:	04 c0       	rjmp	.+8      	; 0xa8e <__pack_f+0x14c>
     a86:	8f e3       	ldi	r24, 0x3F	; 63
     a88:	90 e0       	ldi	r25, 0x00	; 0
     a8a:	a0 e0       	ldi	r26, 0x00	; 0
     a8c:	b0 e0       	ldi	r27, 0x00	; 0
     a8e:	e8 0e       	add	r14, r24
     a90:	f9 1e       	adc	r15, r25
     a92:	0a 1f       	adc	r16, r26
     a94:	1b 1f       	adc	r17, r27
     a96:	17 ff       	sbrs	r17, 7
     a98:	05 c0       	rjmp	.+10     	; 0xaa4 <__pack_f+0x162>
     a9a:	16 95       	lsr	r17
     a9c:	07 95       	ror	r16
     a9e:	f7 94       	ror	r15
     aa0:	e7 94       	ror	r14
     aa2:	31 96       	adiw	r30, 0x01	; 1
     aa4:	87 e0       	ldi	r24, 0x07	; 7
     aa6:	16 95       	lsr	r17
     aa8:	07 95       	ror	r16
     aaa:	f7 94       	ror	r15
     aac:	e7 94       	ror	r14
     aae:	8a 95       	dec	r24
     ab0:	d1 f7       	brne	.-12     	; 0xaa6 <__pack_f+0x164>
     ab2:	05 c0       	rjmp	.+10     	; 0xabe <__pack_f+0x17c>
     ab4:	ee 24       	eor	r14, r14
     ab6:	ff 24       	eor	r15, r15
     ab8:	87 01       	movw	r16, r14
     aba:	ef ef       	ldi	r30, 0xFF	; 255
     abc:	f0 e0       	ldi	r31, 0x00	; 0
     abe:	6e 2f       	mov	r22, r30
     ac0:	67 95       	ror	r22
     ac2:	66 27       	eor	r22, r22
     ac4:	67 95       	ror	r22
     ac6:	90 2f       	mov	r25, r16
     ac8:	9f 77       	andi	r25, 0x7F	; 127
     aca:	d7 94       	ror	r13
     acc:	dd 24       	eor	r13, r13
     ace:	d7 94       	ror	r13
     ad0:	8e 2f       	mov	r24, r30
     ad2:	86 95       	lsr	r24
     ad4:	49 2f       	mov	r20, r25
     ad6:	46 2b       	or	r20, r22
     ad8:	58 2f       	mov	r21, r24
     ada:	5d 29       	or	r21, r13
     adc:	b7 01       	movw	r22, r14
     ade:	ca 01       	movw	r24, r20
     ae0:	1f 91       	pop	r17
     ae2:	0f 91       	pop	r16
     ae4:	ff 90       	pop	r15
     ae6:	ef 90       	pop	r14
     ae8:	df 90       	pop	r13
     aea:	08 95       	ret

00000aec <__unpack_f>:
     aec:	fc 01       	movw	r30, r24
     aee:	db 01       	movw	r26, r22
     af0:	40 81       	ld	r20, Z
     af2:	51 81       	ldd	r21, Z+1	; 0x01
     af4:	22 81       	ldd	r18, Z+2	; 0x02
     af6:	62 2f       	mov	r22, r18
     af8:	6f 77       	andi	r22, 0x7F	; 127
     afa:	70 e0       	ldi	r23, 0x00	; 0
     afc:	22 1f       	adc	r18, r18
     afe:	22 27       	eor	r18, r18
     b00:	22 1f       	adc	r18, r18
     b02:	93 81       	ldd	r25, Z+3	; 0x03
     b04:	89 2f       	mov	r24, r25
     b06:	88 0f       	add	r24, r24
     b08:	82 2b       	or	r24, r18
     b0a:	28 2f       	mov	r18, r24
     b0c:	30 e0       	ldi	r19, 0x00	; 0
     b0e:	99 1f       	adc	r25, r25
     b10:	99 27       	eor	r25, r25
     b12:	99 1f       	adc	r25, r25
     b14:	11 96       	adiw	r26, 0x01	; 1
     b16:	9c 93       	st	X, r25
     b18:	11 97       	sbiw	r26, 0x01	; 1
     b1a:	21 15       	cp	r18, r1
     b1c:	31 05       	cpc	r19, r1
     b1e:	a9 f5       	brne	.+106    	; 0xb8a <__unpack_f+0x9e>
     b20:	41 15       	cp	r20, r1
     b22:	51 05       	cpc	r21, r1
     b24:	61 05       	cpc	r22, r1
     b26:	71 05       	cpc	r23, r1
     b28:	11 f4       	brne	.+4      	; 0xb2e <__unpack_f+0x42>
     b2a:	82 e0       	ldi	r24, 0x02	; 2
     b2c:	37 c0       	rjmp	.+110    	; 0xb9c <__unpack_f+0xb0>
     b2e:	82 e8       	ldi	r24, 0x82	; 130
     b30:	9f ef       	ldi	r25, 0xFF	; 255
     b32:	13 96       	adiw	r26, 0x03	; 3
     b34:	9c 93       	st	X, r25
     b36:	8e 93       	st	-X, r24
     b38:	12 97       	sbiw	r26, 0x02	; 2
     b3a:	9a 01       	movw	r18, r20
     b3c:	ab 01       	movw	r20, r22
     b3e:	67 e0       	ldi	r22, 0x07	; 7
     b40:	22 0f       	add	r18, r18
     b42:	33 1f       	adc	r19, r19
     b44:	44 1f       	adc	r20, r20
     b46:	55 1f       	adc	r21, r21
     b48:	6a 95       	dec	r22
     b4a:	d1 f7       	brne	.-12     	; 0xb40 <__unpack_f+0x54>
     b4c:	83 e0       	ldi	r24, 0x03	; 3
     b4e:	8c 93       	st	X, r24
     b50:	0d c0       	rjmp	.+26     	; 0xb6c <__unpack_f+0x80>
     b52:	22 0f       	add	r18, r18
     b54:	33 1f       	adc	r19, r19
     b56:	44 1f       	adc	r20, r20
     b58:	55 1f       	adc	r21, r21
     b5a:	12 96       	adiw	r26, 0x02	; 2
     b5c:	8d 91       	ld	r24, X+
     b5e:	9c 91       	ld	r25, X
     b60:	13 97       	sbiw	r26, 0x03	; 3
     b62:	01 97       	sbiw	r24, 0x01	; 1
     b64:	13 96       	adiw	r26, 0x03	; 3
     b66:	9c 93       	st	X, r25
     b68:	8e 93       	st	-X, r24
     b6a:	12 97       	sbiw	r26, 0x02	; 2
     b6c:	20 30       	cpi	r18, 0x00	; 0
     b6e:	80 e0       	ldi	r24, 0x00	; 0
     b70:	38 07       	cpc	r19, r24
     b72:	80 e0       	ldi	r24, 0x00	; 0
     b74:	48 07       	cpc	r20, r24
     b76:	80 e4       	ldi	r24, 0x40	; 64
     b78:	58 07       	cpc	r21, r24
     b7a:	58 f3       	brcs	.-42     	; 0xb52 <__unpack_f+0x66>
     b7c:	14 96       	adiw	r26, 0x04	; 4
     b7e:	2d 93       	st	X+, r18
     b80:	3d 93       	st	X+, r19
     b82:	4d 93       	st	X+, r20
     b84:	5c 93       	st	X, r21
     b86:	17 97       	sbiw	r26, 0x07	; 7
     b88:	08 95       	ret
     b8a:	2f 3f       	cpi	r18, 0xFF	; 255
     b8c:	31 05       	cpc	r19, r1
     b8e:	79 f4       	brne	.+30     	; 0xbae <__unpack_f+0xc2>
     b90:	41 15       	cp	r20, r1
     b92:	51 05       	cpc	r21, r1
     b94:	61 05       	cpc	r22, r1
     b96:	71 05       	cpc	r23, r1
     b98:	19 f4       	brne	.+6      	; 0xba0 <__unpack_f+0xb4>
     b9a:	84 e0       	ldi	r24, 0x04	; 4
     b9c:	8c 93       	st	X, r24
     b9e:	08 95       	ret
     ba0:	64 ff       	sbrs	r22, 4
     ba2:	03 c0       	rjmp	.+6      	; 0xbaa <__unpack_f+0xbe>
     ba4:	81 e0       	ldi	r24, 0x01	; 1
     ba6:	8c 93       	st	X, r24
     ba8:	12 c0       	rjmp	.+36     	; 0xbce <__unpack_f+0xe2>
     baa:	1c 92       	st	X, r1
     bac:	10 c0       	rjmp	.+32     	; 0xbce <__unpack_f+0xe2>
     bae:	2f 57       	subi	r18, 0x7F	; 127
     bb0:	30 40       	sbci	r19, 0x00	; 0
     bb2:	13 96       	adiw	r26, 0x03	; 3
     bb4:	3c 93       	st	X, r19
     bb6:	2e 93       	st	-X, r18
     bb8:	12 97       	sbiw	r26, 0x02	; 2
     bba:	83 e0       	ldi	r24, 0x03	; 3
     bbc:	8c 93       	st	X, r24
     bbe:	87 e0       	ldi	r24, 0x07	; 7
     bc0:	44 0f       	add	r20, r20
     bc2:	55 1f       	adc	r21, r21
     bc4:	66 1f       	adc	r22, r22
     bc6:	77 1f       	adc	r23, r23
     bc8:	8a 95       	dec	r24
     bca:	d1 f7       	brne	.-12     	; 0xbc0 <__unpack_f+0xd4>
     bcc:	70 64       	ori	r23, 0x40	; 64
     bce:	14 96       	adiw	r26, 0x04	; 4
     bd0:	4d 93       	st	X+, r20
     bd2:	5d 93       	st	X+, r21
     bd4:	6d 93       	st	X+, r22
     bd6:	7c 93       	st	X, r23
     bd8:	17 97       	sbiw	r26, 0x07	; 7
     bda:	08 95       	ret

00000bdc <__fpcmp_parts_f>:
     bdc:	1f 93       	push	r17
     bde:	dc 01       	movw	r26, r24
     be0:	fb 01       	movw	r30, r22
     be2:	9c 91       	ld	r25, X
     be4:	92 30       	cpi	r25, 0x02	; 2
     be6:	08 f4       	brcc	.+2      	; 0xbea <__fpcmp_parts_f+0xe>
     be8:	47 c0       	rjmp	.+142    	; 0xc78 <__fpcmp_parts_f+0x9c>
     bea:	80 81       	ld	r24, Z
     bec:	82 30       	cpi	r24, 0x02	; 2
     bee:	08 f4       	brcc	.+2      	; 0xbf2 <__fpcmp_parts_f+0x16>
     bf0:	43 c0       	rjmp	.+134    	; 0xc78 <__fpcmp_parts_f+0x9c>
     bf2:	94 30       	cpi	r25, 0x04	; 4
     bf4:	51 f4       	brne	.+20     	; 0xc0a <__fpcmp_parts_f+0x2e>
     bf6:	11 96       	adiw	r26, 0x01	; 1
     bf8:	1c 91       	ld	r17, X
     bfa:	84 30       	cpi	r24, 0x04	; 4
     bfc:	99 f5       	brne	.+102    	; 0xc64 <__fpcmp_parts_f+0x88>
     bfe:	81 81       	ldd	r24, Z+1	; 0x01
     c00:	68 2f       	mov	r22, r24
     c02:	70 e0       	ldi	r23, 0x00	; 0
     c04:	61 1b       	sub	r22, r17
     c06:	71 09       	sbc	r23, r1
     c08:	3f c0       	rjmp	.+126    	; 0xc88 <__fpcmp_parts_f+0xac>
     c0a:	84 30       	cpi	r24, 0x04	; 4
     c0c:	21 f0       	breq	.+8      	; 0xc16 <__fpcmp_parts_f+0x3a>
     c0e:	92 30       	cpi	r25, 0x02	; 2
     c10:	31 f4       	brne	.+12     	; 0xc1e <__fpcmp_parts_f+0x42>
     c12:	82 30       	cpi	r24, 0x02	; 2
     c14:	b9 f1       	breq	.+110    	; 0xc84 <__fpcmp_parts_f+0xa8>
     c16:	81 81       	ldd	r24, Z+1	; 0x01
     c18:	88 23       	and	r24, r24
     c1a:	89 f1       	breq	.+98     	; 0xc7e <__fpcmp_parts_f+0xa2>
     c1c:	2d c0       	rjmp	.+90     	; 0xc78 <__fpcmp_parts_f+0x9c>
     c1e:	11 96       	adiw	r26, 0x01	; 1
     c20:	1c 91       	ld	r17, X
     c22:	11 97       	sbiw	r26, 0x01	; 1
     c24:	82 30       	cpi	r24, 0x02	; 2
     c26:	f1 f0       	breq	.+60     	; 0xc64 <__fpcmp_parts_f+0x88>
     c28:	81 81       	ldd	r24, Z+1	; 0x01
     c2a:	18 17       	cp	r17, r24
     c2c:	d9 f4       	brne	.+54     	; 0xc64 <__fpcmp_parts_f+0x88>
     c2e:	12 96       	adiw	r26, 0x02	; 2
     c30:	2d 91       	ld	r18, X+
     c32:	3c 91       	ld	r19, X
     c34:	13 97       	sbiw	r26, 0x03	; 3
     c36:	82 81       	ldd	r24, Z+2	; 0x02
     c38:	93 81       	ldd	r25, Z+3	; 0x03
     c3a:	82 17       	cp	r24, r18
     c3c:	93 07       	cpc	r25, r19
     c3e:	94 f0       	brlt	.+36     	; 0xc64 <__fpcmp_parts_f+0x88>
     c40:	28 17       	cp	r18, r24
     c42:	39 07       	cpc	r19, r25
     c44:	bc f0       	brlt	.+46     	; 0xc74 <__fpcmp_parts_f+0x98>
     c46:	14 96       	adiw	r26, 0x04	; 4
     c48:	8d 91       	ld	r24, X+
     c4a:	9d 91       	ld	r25, X+
     c4c:	0d 90       	ld	r0, X+
     c4e:	bc 91       	ld	r27, X
     c50:	a0 2d       	mov	r26, r0
     c52:	24 81       	ldd	r18, Z+4	; 0x04
     c54:	35 81       	ldd	r19, Z+5	; 0x05
     c56:	46 81       	ldd	r20, Z+6	; 0x06
     c58:	57 81       	ldd	r21, Z+7	; 0x07
     c5a:	28 17       	cp	r18, r24
     c5c:	39 07       	cpc	r19, r25
     c5e:	4a 07       	cpc	r20, r26
     c60:	5b 07       	cpc	r21, r27
     c62:	18 f4       	brcc	.+6      	; 0xc6a <__fpcmp_parts_f+0x8e>
     c64:	11 23       	and	r17, r17
     c66:	41 f0       	breq	.+16     	; 0xc78 <__fpcmp_parts_f+0x9c>
     c68:	0a c0       	rjmp	.+20     	; 0xc7e <__fpcmp_parts_f+0xa2>
     c6a:	82 17       	cp	r24, r18
     c6c:	93 07       	cpc	r25, r19
     c6e:	a4 07       	cpc	r26, r20
     c70:	b5 07       	cpc	r27, r21
     c72:	40 f4       	brcc	.+16     	; 0xc84 <__fpcmp_parts_f+0xa8>
     c74:	11 23       	and	r17, r17
     c76:	19 f0       	breq	.+6      	; 0xc7e <__fpcmp_parts_f+0xa2>
     c78:	61 e0       	ldi	r22, 0x01	; 1
     c7a:	70 e0       	ldi	r23, 0x00	; 0
     c7c:	05 c0       	rjmp	.+10     	; 0xc88 <__fpcmp_parts_f+0xac>
     c7e:	6f ef       	ldi	r22, 0xFF	; 255
     c80:	7f ef       	ldi	r23, 0xFF	; 255
     c82:	02 c0       	rjmp	.+4      	; 0xc88 <__fpcmp_parts_f+0xac>
     c84:	60 e0       	ldi	r22, 0x00	; 0
     c86:	70 e0       	ldi	r23, 0x00	; 0
     c88:	cb 01       	movw	r24, r22
     c8a:	1f 91       	pop	r17
     c8c:	08 95       	ret

00000c8e <displayOptionsPage>:

/* ********************Set your own password************* */
#define PasswordLength      5
#define Password          "51120"

void displayOptionsPage(){
     c8e:	df 93       	push	r29
     c90:	cf 93       	push	r28
     c92:	cd b7       	in	r28, 0x3d	; 61
     c94:	de b7       	in	r29, 0x3e	; 62
	LCD_enu_Clear();
     c96:	0e 94 3e 17 	call	0x2e7c	; 0x2e7c <LCD_enu_Clear>
	LCD_enu_SendString("1-DCMotor 3-Exit");
     c9a:	80 e6       	ldi	r24, 0x60	; 96
     c9c:	90 e0       	ldi	r25, 0x00	; 0
     c9e:	0e 94 7d 13 	call	0x26fa	; 0x26fa <LCD_enu_SendString>
	LCD_enu_SetCursor(1, 0);
     ca2:	81 e0       	ldi	r24, 0x01	; 1
     ca4:	60 e0       	ldi	r22, 0x00	; 0
     ca6:	0e 94 1d 14 	call	0x283a	; 0x283a <LCD_enu_SetCursor>
	LCD_enu_SendString("2-Stepper Motor");
     caa:	81 e7       	ldi	r24, 0x71	; 113
     cac:	90 e0       	ldi	r25, 0x00	; 0
     cae:	0e 94 7d 13 	call	0x26fa	; 0x26fa <LCD_enu_SendString>
}
     cb2:	cf 91       	pop	r28
     cb4:	df 91       	pop	r29
     cb6:	08 95       	ret

00000cb8 <takeUserOption>:

void takeUserOption(u8 *option){
     cb8:	df 93       	push	r29
     cba:	cf 93       	push	r28
     cbc:	00 d0       	rcall	.+0      	; 0xcbe <takeUserOption+0x6>
     cbe:	cd b7       	in	r28, 0x3d	; 61
     cc0:	de b7       	in	r29, 0x3e	; 62
     cc2:	9a 83       	std	Y+2, r25	; 0x02
     cc4:	89 83       	std	Y+1, r24	; 0x01
	while(1){
		Keypad_enu_getKey(option);
     cc6:	89 81       	ldd	r24, Y+1	; 0x01
     cc8:	9a 81       	ldd	r25, Y+2	; 0x02
     cca:	0e 94 4b 18 	call	0x3096	; 0x3096 <Keypad_enu_getKey>
		if(*option == '1' || *option == '2' || *option == '3')break;
     cce:	e9 81       	ldd	r30, Y+1	; 0x01
     cd0:	fa 81       	ldd	r31, Y+2	; 0x02
     cd2:	80 81       	ld	r24, Z
     cd4:	81 33       	cpi	r24, 0x31	; 49
     cd6:	51 f0       	breq	.+20     	; 0xcec <takeUserOption+0x34>
     cd8:	e9 81       	ldd	r30, Y+1	; 0x01
     cda:	fa 81       	ldd	r31, Y+2	; 0x02
     cdc:	80 81       	ld	r24, Z
     cde:	82 33       	cpi	r24, 0x32	; 50
     ce0:	29 f0       	breq	.+10     	; 0xcec <takeUserOption+0x34>
     ce2:	e9 81       	ldd	r30, Y+1	; 0x01
     ce4:	fa 81       	ldd	r31, Y+2	; 0x02
     ce6:	80 81       	ld	r24, Z
     ce8:	83 33       	cpi	r24, 0x33	; 51
     cea:	69 f7       	brne	.-38     	; 0xcc6 <takeUserOption+0xe>
	}
}
     cec:	0f 90       	pop	r0
     cee:	0f 90       	pop	r0
     cf0:	cf 91       	pop	r28
     cf2:	df 91       	pop	r29
     cf4:	08 95       	ret

00000cf6 <displayRotationOptions>:

void displayRotationOptions(){
     cf6:	df 93       	push	r29
     cf8:	cf 93       	push	r28
     cfa:	cd b7       	in	r28, 0x3d	; 61
     cfc:	de b7       	in	r29, 0x3e	; 62
	LCD_enu_Clear();
     cfe:	0e 94 3e 17 	call	0x2e7c	; 0x2e7c <LCD_enu_Clear>
	LCD_enu_SendString("1-Rotate CW ");
     d02:	81 e8       	ldi	r24, 0x81	; 129
     d04:	90 e0       	ldi	r25, 0x00	; 0
     d06:	0e 94 7d 13 	call	0x26fa	; 0x26fa <LCD_enu_SendString>
	LCD_enu_SetCursor(1, 0);
     d0a:	81 e0       	ldi	r24, 0x01	; 1
     d0c:	60 e0       	ldi	r22, 0x00	; 0
     d0e:	0e 94 1d 14 	call	0x283a	; 0x283a <LCD_enu_SetCursor>
	LCD_enu_SendString("2-Rotate CCW");
     d12:	8e e8       	ldi	r24, 0x8E	; 142
     d14:	90 e0       	ldi	r25, 0x00	; 0
     d16:	0e 94 7d 13 	call	0x26fa	; 0x26fa <LCD_enu_SendString>
}
     d1a:	cf 91       	pop	r28
     d1c:	df 91       	pop	r29
     d1e:	08 95       	ret

00000d20 <returnAngle>:

u16 returnAngle(u8 * array){
     d20:	df 93       	push	r29
     d22:	cf 93       	push	r28
     d24:	00 d0       	rcall	.+0      	; 0xd26 <returnAngle+0x6>
     d26:	00 d0       	rcall	.+0      	; 0xd28 <returnAngle+0x8>
     d28:	0f 92       	push	r0
     d2a:	cd b7       	in	r28, 0x3d	; 61
     d2c:	de b7       	in	r29, 0x3e	; 62
     d2e:	9d 83       	std	Y+5, r25	; 0x05
     d30:	8c 83       	std	Y+4, r24	; 0x04
	u16 k = 0;
     d32:	1b 82       	std	Y+3, r1	; 0x03
     d34:	1a 82       	std	Y+2, r1	; 0x02
	for(u8 i = 0 ; i<3 ; i++){
     d36:	19 82       	std	Y+1, r1	; 0x01
     d38:	2b c0       	rjmp	.+86     	; 0xd90 <returnAngle+0x70>
		// ignore non entered digits
		if(array[i] == 'a') break;
     d3a:	89 81       	ldd	r24, Y+1	; 0x01
     d3c:	28 2f       	mov	r18, r24
     d3e:	30 e0       	ldi	r19, 0x00	; 0
     d40:	8c 81       	ldd	r24, Y+4	; 0x04
     d42:	9d 81       	ldd	r25, Y+5	; 0x05
     d44:	fc 01       	movw	r30, r24
     d46:	e2 0f       	add	r30, r18
     d48:	f3 1f       	adc	r31, r19
     d4a:	80 81       	ld	r24, Z
     d4c:	81 36       	cpi	r24, 0x61	; 97
     d4e:	19 f1       	breq	.+70     	; 0xd96 <returnAngle+0x76>
		k = k*10 + (array[i] - '0');
     d50:	8a 81       	ldd	r24, Y+2	; 0x02
     d52:	9b 81       	ldd	r25, Y+3	; 0x03
     d54:	9c 01       	movw	r18, r24
     d56:	22 0f       	add	r18, r18
     d58:	33 1f       	adc	r19, r19
     d5a:	c9 01       	movw	r24, r18
     d5c:	88 0f       	add	r24, r24
     d5e:	99 1f       	adc	r25, r25
     d60:	88 0f       	add	r24, r24
     d62:	99 1f       	adc	r25, r25
     d64:	a9 01       	movw	r20, r18
     d66:	48 0f       	add	r20, r24
     d68:	59 1f       	adc	r21, r25
     d6a:	89 81       	ldd	r24, Y+1	; 0x01
     d6c:	28 2f       	mov	r18, r24
     d6e:	30 e0       	ldi	r19, 0x00	; 0
     d70:	8c 81       	ldd	r24, Y+4	; 0x04
     d72:	9d 81       	ldd	r25, Y+5	; 0x05
     d74:	fc 01       	movw	r30, r24
     d76:	e2 0f       	add	r30, r18
     d78:	f3 1f       	adc	r31, r19
     d7a:	80 81       	ld	r24, Z
     d7c:	88 2f       	mov	r24, r24
     d7e:	90 e0       	ldi	r25, 0x00	; 0
     d80:	84 0f       	add	r24, r20
     d82:	95 1f       	adc	r25, r21
     d84:	c0 97       	sbiw	r24, 0x30	; 48
     d86:	9b 83       	std	Y+3, r25	; 0x03
     d88:	8a 83       	std	Y+2, r24	; 0x02
	LCD_enu_SendString("2-Rotate CCW");
}

u16 returnAngle(u8 * array){
	u16 k = 0;
	for(u8 i = 0 ; i<3 ; i++){
     d8a:	89 81       	ldd	r24, Y+1	; 0x01
     d8c:	8f 5f       	subi	r24, 0xFF	; 255
     d8e:	89 83       	std	Y+1, r24	; 0x01
     d90:	89 81       	ldd	r24, Y+1	; 0x01
     d92:	83 30       	cpi	r24, 0x03	; 3
     d94:	90 f2       	brcs	.-92     	; 0xd3a <returnAngle+0x1a>
		// ignore non entered digits
		if(array[i] == 'a') break;
		k = k*10 + (array[i] - '0');
	}
	return k;
     d96:	8a 81       	ldd	r24, Y+2	; 0x02
     d98:	9b 81       	ldd	r25, Y+3	; 0x03
}
     d9a:	0f 90       	pop	r0
     d9c:	0f 90       	pop	r0
     d9e:	0f 90       	pop	r0
     da0:	0f 90       	pop	r0
     da2:	0f 90       	pop	r0
     da4:	cf 91       	pop	r28
     da6:	df 91       	pop	r29
     da8:	08 95       	ret

00000daa <main>:
int main(void){
     daa:	0f 93       	push	r16
     dac:	1f 93       	push	r17
     dae:	df 93       	push	r29
     db0:	cf 93       	push	r28
     db2:	cd b7       	in	r28, 0x3d	; 61
     db4:	de b7       	in	r29, 0x3e	; 62
     db6:	ce 57       	subi	r28, 0x7E	; 126
     db8:	d0 40       	sbci	r29, 0x00	; 0
     dba:	0f b6       	in	r0, 0x3f	; 63
     dbc:	f8 94       	cli
     dbe:	de bf       	out	0x3e, r29	; 62
     dc0:	0f be       	out	0x3f, r0	; 63
     dc2:	cd bf       	out	0x3d, r28	; 61
	Keypad_enu_Init();
     dc4:	0e 94 09 18 	call	0x3012	; 0x3012 <Keypad_enu_Init>
	LCD_enu_Init();
     dc8:	0e 94 51 14 	call	0x28a2	; 0x28a2 <LCD_enu_Init>
	DC_Motor_enu_Init(1, 1);
     dcc:	81 e0       	ldi	r24, 0x01	; 1
     dce:	61 e0       	ldi	r22, 0x01	; 1
     dd0:	0e 94 5b 19 	call	0x32b6	; 0x32b6 <DC_Motor_enu_Init>
	STEP_Motor_enu_Init();
     dd4:	0e 94 ab 0c 	call	0x1956	; 0x1956 <STEP_Motor_enu_Init>
	u8 savedPass[] = Password , pass[PasswordLength], Index=0, checkCounter = 0,homeFlag = 0,inputFlag = 0;
     dd8:	ce 01       	movw	r24, r28
     dda:	86 59       	subi	r24, 0x96	; 150
     ddc:	9f 4f       	sbci	r25, 0xFF	; 255
     dde:	ec 96       	adiw	r28, 0x3c	; 60
     de0:	9f af       	std	Y+63, r25	; 0x3f
     de2:	8e af       	std	Y+62, r24	; 0x3e
     de4:	ec 97       	sbiw	r28, 0x3c	; 60
     de6:	89 e1       	ldi	r24, 0x19	; 25
     de8:	91 e0       	ldi	r25, 0x01	; 1
     dea:	ee 96       	adiw	r28, 0x3e	; 62
     dec:	9f af       	std	Y+63, r25	; 0x3f
     dee:	8e af       	std	Y+62, r24	; 0x3e
     df0:	ee 97       	sbiw	r28, 0x3e	; 62
     df2:	96 e0       	ldi	r25, 0x06	; 6
     df4:	ef 96       	adiw	r28, 0x3f	; 63
     df6:	9f af       	std	Y+63, r25	; 0x3f
     df8:	ef 97       	sbiw	r28, 0x3f	; 63
     dfa:	ee 96       	adiw	r28, 0x3e	; 62
     dfc:	ee ad       	ldd	r30, Y+62	; 0x3e
     dfe:	ff ad       	ldd	r31, Y+63	; 0x3f
     e00:	ee 97       	sbiw	r28, 0x3e	; 62
     e02:	00 80       	ld	r0, Z
     e04:	ee 96       	adiw	r28, 0x3e	; 62
     e06:	8e ad       	ldd	r24, Y+62	; 0x3e
     e08:	9f ad       	ldd	r25, Y+63	; 0x3f
     e0a:	ee 97       	sbiw	r28, 0x3e	; 62
     e0c:	01 96       	adiw	r24, 0x01	; 1
     e0e:	ee 96       	adiw	r28, 0x3e	; 62
     e10:	9f af       	std	Y+63, r25	; 0x3f
     e12:	8e af       	std	Y+62, r24	; 0x3e
     e14:	ee 97       	sbiw	r28, 0x3e	; 62
     e16:	ec 96       	adiw	r28, 0x3c	; 60
     e18:	ee ad       	ldd	r30, Y+62	; 0x3e
     e1a:	ff ad       	ldd	r31, Y+63	; 0x3f
     e1c:	ec 97       	sbiw	r28, 0x3c	; 60
     e1e:	00 82       	st	Z, r0
     e20:	ec 96       	adiw	r28, 0x3c	; 60
     e22:	8e ad       	ldd	r24, Y+62	; 0x3e
     e24:	9f ad       	ldd	r25, Y+63	; 0x3f
     e26:	ec 97       	sbiw	r28, 0x3c	; 60
     e28:	01 96       	adiw	r24, 0x01	; 1
     e2a:	ec 96       	adiw	r28, 0x3c	; 60
     e2c:	9f af       	std	Y+63, r25	; 0x3f
     e2e:	8e af       	std	Y+62, r24	; 0x3e
     e30:	ec 97       	sbiw	r28, 0x3c	; 60
     e32:	ef 96       	adiw	r28, 0x3f	; 63
     e34:	9f ad       	ldd	r25, Y+63	; 0x3f
     e36:	ef 97       	sbiw	r28, 0x3f	; 63
     e38:	91 50       	subi	r25, 0x01	; 1
     e3a:	ef 96       	adiw	r28, 0x3f	; 63
     e3c:	9f af       	std	Y+63, r25	; 0x3f
     e3e:	ef 97       	sbiw	r28, 0x3f	; 63
     e40:	ef 96       	adiw	r28, 0x3f	; 63
     e42:	ef ad       	ldd	r30, Y+63	; 0x3f
     e44:	ef 97       	sbiw	r28, 0x3f	; 63
     e46:	ee 23       	and	r30, r30
     e48:	c1 f6       	brne	.-80     	; 0xdfa <main+0x50>
     e4a:	fe 01       	movw	r30, r28
     e4c:	e7 59       	subi	r30, 0x97	; 151
     e4e:	ff 4f       	sbci	r31, 0xFF	; 255
     e50:	10 82       	st	Z, r1
     e52:	fe 01       	movw	r30, r28
     e54:	e8 59       	subi	r30, 0x98	; 152
     e56:	ff 4f       	sbci	r31, 0xFF	; 255
     e58:	10 82       	st	Z, r1
     e5a:	fe 01       	movw	r30, r28
     e5c:	e9 59       	subi	r30, 0x99	; 153
     e5e:	ff 4f       	sbci	r31, 0xFF	; 255
     e60:	10 82       	st	Z, r1
     e62:	fe 01       	movw	r30, r28
     e64:	ea 59       	subi	r30, 0x9A	; 154
     e66:	ff 4f       	sbci	r31, 0xFF	; 255
     e68:	10 82       	st	Z, r1
	LCD_enu_SendString("Hello, User :)");
     e6a:	8b e9       	ldi	r24, 0x9B	; 155
     e6c:	90 e0       	ldi	r25, 0x00	; 0
     e6e:	0e 94 7d 13 	call	0x26fa	; 0x26fa <LCD_enu_SendString>
     e72:	fe 01       	movw	r30, r28
     e74:	e1 5a       	subi	r30, 0xA1	; 161
     e76:	ff 4f       	sbci	r31, 0xFF	; 255
     e78:	80 e0       	ldi	r24, 0x00	; 0
     e7a:	90 e0       	ldi	r25, 0x00	; 0
     e7c:	aa e7       	ldi	r26, 0x7A	; 122
     e7e:	b4 e4       	ldi	r27, 0x44	; 68
     e80:	80 83       	st	Z, r24
     e82:	91 83       	std	Z+1, r25	; 0x01
     e84:	a2 83       	std	Z+2, r26	; 0x02
     e86:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     e88:	8e 01       	movw	r16, r28
     e8a:	05 5a       	subi	r16, 0xA5	; 165
     e8c:	1f 4f       	sbci	r17, 0xFF	; 255
     e8e:	fe 01       	movw	r30, r28
     e90:	e1 5a       	subi	r30, 0xA1	; 161
     e92:	ff 4f       	sbci	r31, 0xFF	; 255
     e94:	60 81       	ld	r22, Z
     e96:	71 81       	ldd	r23, Z+1	; 0x01
     e98:	82 81       	ldd	r24, Z+2	; 0x02
     e9a:	93 81       	ldd	r25, Z+3	; 0x03
     e9c:	20 e0       	ldi	r18, 0x00	; 0
     e9e:	30 e0       	ldi	r19, 0x00	; 0
     ea0:	4a e7       	ldi	r20, 0x7A	; 122
     ea2:	55 e4       	ldi	r21, 0x45	; 69
     ea4:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
     ea8:	dc 01       	movw	r26, r24
     eaa:	cb 01       	movw	r24, r22
     eac:	f8 01       	movw	r30, r16
     eae:	80 83       	st	Z, r24
     eb0:	91 83       	std	Z+1, r25	; 0x01
     eb2:	a2 83       	std	Z+2, r26	; 0x02
     eb4:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
     eb6:	fe 01       	movw	r30, r28
     eb8:	e5 5a       	subi	r30, 0xA5	; 165
     eba:	ff 4f       	sbci	r31, 0xFF	; 255
     ebc:	60 81       	ld	r22, Z
     ebe:	71 81       	ldd	r23, Z+1	; 0x01
     ec0:	82 81       	ldd	r24, Z+2	; 0x02
     ec2:	93 81       	ldd	r25, Z+3	; 0x03
     ec4:	20 e0       	ldi	r18, 0x00	; 0
     ec6:	30 e0       	ldi	r19, 0x00	; 0
     ec8:	40 e8       	ldi	r20, 0x80	; 128
     eca:	5f e3       	ldi	r21, 0x3F	; 63
     ecc:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
     ed0:	88 23       	and	r24, r24
     ed2:	44 f4       	brge	.+16     	; 0xee4 <main+0x13a>
		__ticks = 1;
     ed4:	fe 01       	movw	r30, r28
     ed6:	e7 5a       	subi	r30, 0xA7	; 167
     ed8:	ff 4f       	sbci	r31, 0xFF	; 255
     eda:	81 e0       	ldi	r24, 0x01	; 1
     edc:	90 e0       	ldi	r25, 0x00	; 0
     ede:	91 83       	std	Z+1, r25	; 0x01
     ee0:	80 83       	st	Z, r24
     ee2:	64 c0       	rjmp	.+200    	; 0xfac <main+0x202>
	else if (__tmp > 65535)
     ee4:	fe 01       	movw	r30, r28
     ee6:	e5 5a       	subi	r30, 0xA5	; 165
     ee8:	ff 4f       	sbci	r31, 0xFF	; 255
     eea:	60 81       	ld	r22, Z
     eec:	71 81       	ldd	r23, Z+1	; 0x01
     eee:	82 81       	ldd	r24, Z+2	; 0x02
     ef0:	93 81       	ldd	r25, Z+3	; 0x03
     ef2:	20 e0       	ldi	r18, 0x00	; 0
     ef4:	3f ef       	ldi	r19, 0xFF	; 255
     ef6:	4f e7       	ldi	r20, 0x7F	; 127
     ef8:	57 e4       	ldi	r21, 0x47	; 71
     efa:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
     efe:	18 16       	cp	r1, r24
     f00:	0c f0       	brlt	.+2      	; 0xf04 <main+0x15a>
     f02:	43 c0       	rjmp	.+134    	; 0xf8a <main+0x1e0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     f04:	fe 01       	movw	r30, r28
     f06:	e1 5a       	subi	r30, 0xA1	; 161
     f08:	ff 4f       	sbci	r31, 0xFF	; 255
     f0a:	60 81       	ld	r22, Z
     f0c:	71 81       	ldd	r23, Z+1	; 0x01
     f0e:	82 81       	ldd	r24, Z+2	; 0x02
     f10:	93 81       	ldd	r25, Z+3	; 0x03
     f12:	20 e0       	ldi	r18, 0x00	; 0
     f14:	30 e0       	ldi	r19, 0x00	; 0
     f16:	40 e2       	ldi	r20, 0x20	; 32
     f18:	51 e4       	ldi	r21, 0x41	; 65
     f1a:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
     f1e:	dc 01       	movw	r26, r24
     f20:	cb 01       	movw	r24, r22
     f22:	8e 01       	movw	r16, r28
     f24:	07 5a       	subi	r16, 0xA7	; 167
     f26:	1f 4f       	sbci	r17, 0xFF	; 255
     f28:	bc 01       	movw	r22, r24
     f2a:	cd 01       	movw	r24, r26
     f2c:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
     f30:	dc 01       	movw	r26, r24
     f32:	cb 01       	movw	r24, r22
     f34:	f8 01       	movw	r30, r16
     f36:	91 83       	std	Z+1, r25	; 0x01
     f38:	80 83       	st	Z, r24
     f3a:	1f c0       	rjmp	.+62     	; 0xf7a <main+0x1d0>
     f3c:	fe 01       	movw	r30, r28
     f3e:	e9 5a       	subi	r30, 0xA9	; 169
     f40:	ff 4f       	sbci	r31, 0xFF	; 255
     f42:	80 e9       	ldi	r24, 0x90	; 144
     f44:	91 e0       	ldi	r25, 0x01	; 1
     f46:	91 83       	std	Z+1, r25	; 0x01
     f48:	80 83       	st	Z, r24
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     f4a:	fe 01       	movw	r30, r28
     f4c:	e9 5a       	subi	r30, 0xA9	; 169
     f4e:	ff 4f       	sbci	r31, 0xFF	; 255
     f50:	80 81       	ld	r24, Z
     f52:	91 81       	ldd	r25, Z+1	; 0x01
     f54:	01 97       	sbiw	r24, 0x01	; 1
     f56:	f1 f7       	brne	.-4      	; 0xf54 <main+0x1aa>
     f58:	fe 01       	movw	r30, r28
     f5a:	e9 5a       	subi	r30, 0xA9	; 169
     f5c:	ff 4f       	sbci	r31, 0xFF	; 255
     f5e:	91 83       	std	Z+1, r25	; 0x01
     f60:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     f62:	de 01       	movw	r26, r28
     f64:	a7 5a       	subi	r26, 0xA7	; 167
     f66:	bf 4f       	sbci	r27, 0xFF	; 255
     f68:	fe 01       	movw	r30, r28
     f6a:	e7 5a       	subi	r30, 0xA7	; 167
     f6c:	ff 4f       	sbci	r31, 0xFF	; 255
     f6e:	80 81       	ld	r24, Z
     f70:	91 81       	ldd	r25, Z+1	; 0x01
     f72:	01 97       	sbiw	r24, 0x01	; 1
     f74:	11 96       	adiw	r26, 0x01	; 1
     f76:	9c 93       	st	X, r25
     f78:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     f7a:	fe 01       	movw	r30, r28
     f7c:	e7 5a       	subi	r30, 0xA7	; 167
     f7e:	ff 4f       	sbci	r31, 0xFF	; 255
     f80:	80 81       	ld	r24, Z
     f82:	91 81       	ldd	r25, Z+1	; 0x01
     f84:	00 97       	sbiw	r24, 0x00	; 0
     f86:	d1 f6       	brne	.-76     	; 0xf3c <main+0x192>
     f88:	27 c0       	rjmp	.+78     	; 0xfd8 <main+0x22e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     f8a:	8e 01       	movw	r16, r28
     f8c:	07 5a       	subi	r16, 0xA7	; 167
     f8e:	1f 4f       	sbci	r17, 0xFF	; 255
     f90:	fe 01       	movw	r30, r28
     f92:	e5 5a       	subi	r30, 0xA5	; 165
     f94:	ff 4f       	sbci	r31, 0xFF	; 255
     f96:	60 81       	ld	r22, Z
     f98:	71 81       	ldd	r23, Z+1	; 0x01
     f9a:	82 81       	ldd	r24, Z+2	; 0x02
     f9c:	93 81       	ldd	r25, Z+3	; 0x03
     f9e:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
     fa2:	dc 01       	movw	r26, r24
     fa4:	cb 01       	movw	r24, r22
     fa6:	f8 01       	movw	r30, r16
     fa8:	91 83       	std	Z+1, r25	; 0x01
     faa:	80 83       	st	Z, r24
     fac:	de 01       	movw	r26, r28
     fae:	ab 5a       	subi	r26, 0xAB	; 171
     fb0:	bf 4f       	sbci	r27, 0xFF	; 255
     fb2:	fe 01       	movw	r30, r28
     fb4:	e7 5a       	subi	r30, 0xA7	; 167
     fb6:	ff 4f       	sbci	r31, 0xFF	; 255
     fb8:	80 81       	ld	r24, Z
     fba:	91 81       	ldd	r25, Z+1	; 0x01
     fbc:	8d 93       	st	X+, r24
     fbe:	9c 93       	st	X, r25
     fc0:	fe 01       	movw	r30, r28
     fc2:	eb 5a       	subi	r30, 0xAB	; 171
     fc4:	ff 4f       	sbci	r31, 0xFF	; 255
     fc6:	80 81       	ld	r24, Z
     fc8:	91 81       	ldd	r25, Z+1	; 0x01
     fca:	01 97       	sbiw	r24, 0x01	; 1
     fcc:	f1 f7       	brne	.-4      	; 0xfca <main+0x220>
     fce:	fe 01       	movw	r30, r28
     fd0:	eb 5a       	subi	r30, 0xAB	; 171
     fd2:	ff 4f       	sbci	r31, 0xFF	; 255
     fd4:	91 83       	std	Z+1, r25	; 0x01
     fd6:	80 83       	st	Z, r24
	_delay_ms(delay);
	LCD_enu_Clear();
     fd8:	0e 94 3e 17 	call	0x2e7c	; 0x2e7c <LCD_enu_Clear>
	LCD_enu_SendString("Enter Password:");
     fdc:	8a ea       	ldi	r24, 0xAA	; 170
     fde:	90 e0       	ldi	r25, 0x00	; 0
     fe0:	0e 94 7d 13 	call	0x26fa	; 0x26fa <LCD_enu_SendString>
	LCD_enu_SetCursor(1, 0);
     fe4:	81 e0       	ldi	r24, 0x01	; 1
     fe6:	60 e0       	ldi	r22, 0x00	; 0
     fe8:	0e 94 1d 14 	call	0x283a	; 0x283a <LCD_enu_SetCursor>
	while(1){
/************************************ Taking Password Section*************************************/
		u8 key=0,order = 0;
     fec:	fe 01       	movw	r30, r28
     fee:	eb 58       	subi	r30, 0x8B	; 139
     ff0:	ff 4f       	sbci	r31, 0xFF	; 255
     ff2:	10 82       	st	Z, r1
     ff4:	fe 01       	movw	r30, r28
     ff6:	ea 58       	subi	r30, 0x8A	; 138
     ff8:	ff 4f       	sbci	r31, 0xFF	; 255
     ffa:	10 82       	st	Z, r1
		Keypad_enu_getKey(&key);
     ffc:	ce 01       	movw	r24, r28
     ffe:	8b 58       	subi	r24, 0x8B	; 139
    1000:	9f 4f       	sbci	r25, 0xFF	; 255
    1002:	0e 94 4b 18 	call	0x3096	; 0x3096 <Keypad_enu_getKey>
		if(key != KEYPAD_U8_NO_KEY_PRESSED){
    1006:	fe 01       	movw	r30, r28
    1008:	eb 58       	subi	r30, 0x8B	; 139
    100a:	ff 4f       	sbci	r31, 0xFF	; 255
    100c:	80 81       	ld	r24, Z
    100e:	8f 3f       	cpi	r24, 0xFF	; 255
    1010:	31 f1       	breq	.+76     	; 0x105e <main+0x2b4>
			LCD_enu_SendChar('*');
    1012:	8a e2       	ldi	r24, 0x2A	; 42
    1014:	0e 94 7d 11 	call	0x22fa	; 0x22fa <LCD_enu_SendChar>
			pass[Index] = key;
    1018:	fe 01       	movw	r30, r28
    101a:	e7 59       	subi	r30, 0x97	; 151
    101c:	ff 4f       	sbci	r31, 0xFF	; 255
    101e:	80 81       	ld	r24, Z
    1020:	28 2f       	mov	r18, r24
    1022:	30 e0       	ldi	r19, 0x00	; 0
    1024:	fe 01       	movw	r30, r28
    1026:	eb 58       	subi	r30, 0x8B	; 139
    1028:	ff 4f       	sbci	r31, 0xFF	; 255
    102a:	40 81       	ld	r20, Z
    102c:	ce 01       	movw	r24, r28
    102e:	80 59       	subi	r24, 0x90	; 144
    1030:	9f 4f       	sbci	r25, 0xFF	; 255
    1032:	fc 01       	movw	r30, r24
    1034:	e2 0f       	add	r30, r18
    1036:	f3 1f       	adc	r31, r19
    1038:	40 83       	st	Z, r20
			Index++;
    103a:	de 01       	movw	r26, r28
    103c:	a7 59       	subi	r26, 0x97	; 151
    103e:	bf 4f       	sbci	r27, 0xFF	; 255
    1040:	fe 01       	movw	r30, r28
    1042:	e7 59       	subi	r30, 0x97	; 151
    1044:	ff 4f       	sbci	r31, 0xFF	; 255
    1046:	80 81       	ld	r24, Z
    1048:	8f 5f       	subi	r24, 0xFF	; 255
    104a:	8c 93       	st	X, r24
			checkCounter++;
    104c:	de 01       	movw	r26, r28
    104e:	a8 59       	subi	r26, 0x98	; 152
    1050:	bf 4f       	sbci	r27, 0xFF	; 255
    1052:	fe 01       	movw	r30, r28
    1054:	e8 59       	subi	r30, 0x98	; 152
    1056:	ff 4f       	sbci	r31, 0xFF	; 255
    1058:	80 81       	ld	r24, Z
    105a:	8f 5f       	subi	r24, 0xFF	; 255
    105c:	8c 93       	st	X, r24
		}
		if(checkCounter == PasswordLength){
    105e:	fe 01       	movw	r30, r28
    1060:	e8 59       	subi	r30, 0x98	; 152
    1062:	ff 4f       	sbci	r31, 0xFF	; 255
    1064:	80 81       	ld	r24, Z
    1066:	85 30       	cpi	r24, 0x05	; 5
    1068:	09 f6       	brne	.-126    	; 0xfec <main+0x242>
			for(int j =0 ;j<PasswordLength ; j++){
    106a:	fe 01       	movw	r30, r28
    106c:	ec 59       	subi	r30, 0x9C	; 156
    106e:	ff 4f       	sbci	r31, 0xFF	; 255
    1070:	11 82       	std	Z+1, r1	; 0x01
    1072:	10 82       	st	Z, r1
    1074:	2c c0       	rjmp	.+88     	; 0x10ce <main+0x324>
				if(pass[j] != savedPass[j]){
    1076:	fe 01       	movw	r30, r28
    1078:	ec 59       	subi	r30, 0x9C	; 156
    107a:	ff 4f       	sbci	r31, 0xFF	; 255
    107c:	20 81       	ld	r18, Z
    107e:	31 81       	ldd	r19, Z+1	; 0x01
    1080:	ce 01       	movw	r24, r28
    1082:	80 59       	subi	r24, 0x90	; 144
    1084:	9f 4f       	sbci	r25, 0xFF	; 255
    1086:	fc 01       	movw	r30, r24
    1088:	e2 0f       	add	r30, r18
    108a:	f3 1f       	adc	r31, r19
    108c:	40 81       	ld	r20, Z
    108e:	fe 01       	movw	r30, r28
    1090:	ec 59       	subi	r30, 0x9C	; 156
    1092:	ff 4f       	sbci	r31, 0xFF	; 255
    1094:	20 81       	ld	r18, Z
    1096:	31 81       	ldd	r19, Z+1	; 0x01
    1098:	ce 01       	movw	r24, r28
    109a:	86 59       	subi	r24, 0x96	; 150
    109c:	9f 4f       	sbci	r25, 0xFF	; 255
    109e:	fc 01       	movw	r30, r24
    10a0:	e2 0f       	add	r30, r18
    10a2:	f3 1f       	adc	r31, r19
    10a4:	80 81       	ld	r24, Z
    10a6:	48 17       	cp	r20, r24
    10a8:	31 f0       	breq	.+12     	; 0x10b6 <main+0x30c>
					inputFlag = 1;
    10aa:	fe 01       	movw	r30, r28
    10ac:	ea 59       	subi	r30, 0x9A	; 154
    10ae:	ff 4f       	sbci	r31, 0xFF	; 255
    10b0:	81 e0       	ldi	r24, 0x01	; 1
    10b2:	80 83       	st	Z, r24
    10b4:	14 c0       	rjmp	.+40     	; 0x10de <main+0x334>
			pass[Index] = key;
			Index++;
			checkCounter++;
		}
		if(checkCounter == PasswordLength){
			for(int j =0 ;j<PasswordLength ; j++){
    10b6:	de 01       	movw	r26, r28
    10b8:	ac 59       	subi	r26, 0x9C	; 156
    10ba:	bf 4f       	sbci	r27, 0xFF	; 255
    10bc:	fe 01       	movw	r30, r28
    10be:	ec 59       	subi	r30, 0x9C	; 156
    10c0:	ff 4f       	sbci	r31, 0xFF	; 255
    10c2:	80 81       	ld	r24, Z
    10c4:	91 81       	ldd	r25, Z+1	; 0x01
    10c6:	01 96       	adiw	r24, 0x01	; 1
    10c8:	11 96       	adiw	r26, 0x01	; 1
    10ca:	9c 93       	st	X, r25
    10cc:	8e 93       	st	-X, r24
    10ce:	fe 01       	movw	r30, r28
    10d0:	ec 59       	subi	r30, 0x9C	; 156
    10d2:	ff 4f       	sbci	r31, 0xFF	; 255
    10d4:	80 81       	ld	r24, Z
    10d6:	91 81       	ldd	r25, Z+1	; 0x01
    10d8:	85 30       	cpi	r24, 0x05	; 5
    10da:	91 05       	cpc	r25, r1
    10dc:	64 f2       	brlt	.-104    	; 0x1076 <main+0x2cc>
				if(pass[j] != savedPass[j]){
					inputFlag = 1;
					break;
				}
			}
			if (inputFlag){
    10de:	fe 01       	movw	r30, r28
    10e0:	ea 59       	subi	r30, 0x9A	; 154
    10e2:	ff 4f       	sbci	r31, 0xFF	; 255
    10e4:	80 81       	ld	r24, Z
    10e6:	88 23       	and	r24, r24
    10e8:	09 f4       	brne	.+2      	; 0x10ec <main+0x342>
    10ea:	d8 c0       	rjmp	.+432    	; 0x129c <main+0x4f2>
				Index =0;
    10ec:	fe 01       	movw	r30, r28
    10ee:	e7 59       	subi	r30, 0x97	; 151
    10f0:	ff 4f       	sbci	r31, 0xFF	; 255
    10f2:	10 82       	st	Z, r1
				checkCounter =0;
    10f4:	fe 01       	movw	r30, r28
    10f6:	e8 59       	subi	r30, 0x98	; 152
    10f8:	ff 4f       	sbci	r31, 0xFF	; 255
    10fa:	10 82       	st	Z, r1
				inputFlag = 0;
    10fc:	fe 01       	movw	r30, r28
    10fe:	ea 59       	subi	r30, 0x9A	; 154
    1100:	ff 4f       	sbci	r31, 0xFF	; 255
    1102:	10 82       	st	Z, r1
				LCD_enu_Clear();
    1104:	0e 94 3e 17 	call	0x2e7c	; 0x2e7c <LCD_enu_Clear>
				LCD_enu_SendString("Wrong Password");
    1108:	8a eb       	ldi	r24, 0xBA	; 186
    110a:	90 e0       	ldi	r25, 0x00	; 0
    110c:	0e 94 7d 13 	call	0x26fa	; 0x26fa <LCD_enu_SendString>
				LCD_enu_SetCursor(1, 0);
    1110:	81 e0       	ldi	r24, 0x01	; 1
    1112:	60 e0       	ldi	r22, 0x00	; 0
    1114:	0e 94 1d 14 	call	0x283a	; 0x283a <LCD_enu_SetCursor>
				LCD_enu_SendString("Try Again!");
    1118:	89 ec       	ldi	r24, 0xC9	; 201
    111a:	90 e0       	ldi	r25, 0x00	; 0
    111c:	0e 94 7d 13 	call	0x26fa	; 0x26fa <LCD_enu_SendString>
    1120:	fe 01       	movw	r30, r28
    1122:	ef 5a       	subi	r30, 0xAF	; 175
    1124:	ff 4f       	sbci	r31, 0xFF	; 255
    1126:	80 e0       	ldi	r24, 0x00	; 0
    1128:	90 e0       	ldi	r25, 0x00	; 0
    112a:	aa e7       	ldi	r26, 0x7A	; 122
    112c:	b4 e4       	ldi	r27, 0x44	; 68
    112e:	80 83       	st	Z, r24
    1130:	91 83       	std	Z+1, r25	; 0x01
    1132:	a2 83       	std	Z+2, r26	; 0x02
    1134:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1136:	8e 01       	movw	r16, r28
    1138:	03 5b       	subi	r16, 0xB3	; 179
    113a:	1f 4f       	sbci	r17, 0xFF	; 255
    113c:	fe 01       	movw	r30, r28
    113e:	ef 5a       	subi	r30, 0xAF	; 175
    1140:	ff 4f       	sbci	r31, 0xFF	; 255
    1142:	60 81       	ld	r22, Z
    1144:	71 81       	ldd	r23, Z+1	; 0x01
    1146:	82 81       	ldd	r24, Z+2	; 0x02
    1148:	93 81       	ldd	r25, Z+3	; 0x03
    114a:	20 e0       	ldi	r18, 0x00	; 0
    114c:	30 e0       	ldi	r19, 0x00	; 0
    114e:	4a e7       	ldi	r20, 0x7A	; 122
    1150:	55 e4       	ldi	r21, 0x45	; 69
    1152:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1156:	dc 01       	movw	r26, r24
    1158:	cb 01       	movw	r24, r22
    115a:	f8 01       	movw	r30, r16
    115c:	80 83       	st	Z, r24
    115e:	91 83       	std	Z+1, r25	; 0x01
    1160:	a2 83       	std	Z+2, r26	; 0x02
    1162:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1164:	fe 01       	movw	r30, r28
    1166:	e3 5b       	subi	r30, 0xB3	; 179
    1168:	ff 4f       	sbci	r31, 0xFF	; 255
    116a:	60 81       	ld	r22, Z
    116c:	71 81       	ldd	r23, Z+1	; 0x01
    116e:	82 81       	ldd	r24, Z+2	; 0x02
    1170:	93 81       	ldd	r25, Z+3	; 0x03
    1172:	20 e0       	ldi	r18, 0x00	; 0
    1174:	30 e0       	ldi	r19, 0x00	; 0
    1176:	40 e8       	ldi	r20, 0x80	; 128
    1178:	5f e3       	ldi	r21, 0x3F	; 63
    117a:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    117e:	88 23       	and	r24, r24
    1180:	44 f4       	brge	.+16     	; 0x1192 <main+0x3e8>
		__ticks = 1;
    1182:	fe 01       	movw	r30, r28
    1184:	e5 5b       	subi	r30, 0xB5	; 181
    1186:	ff 4f       	sbci	r31, 0xFF	; 255
    1188:	81 e0       	ldi	r24, 0x01	; 1
    118a:	90 e0       	ldi	r25, 0x00	; 0
    118c:	91 83       	std	Z+1, r25	; 0x01
    118e:	80 83       	st	Z, r24
    1190:	64 c0       	rjmp	.+200    	; 0x125a <main+0x4b0>
	else if (__tmp > 65535)
    1192:	fe 01       	movw	r30, r28
    1194:	e3 5b       	subi	r30, 0xB3	; 179
    1196:	ff 4f       	sbci	r31, 0xFF	; 255
    1198:	60 81       	ld	r22, Z
    119a:	71 81       	ldd	r23, Z+1	; 0x01
    119c:	82 81       	ldd	r24, Z+2	; 0x02
    119e:	93 81       	ldd	r25, Z+3	; 0x03
    11a0:	20 e0       	ldi	r18, 0x00	; 0
    11a2:	3f ef       	ldi	r19, 0xFF	; 255
    11a4:	4f e7       	ldi	r20, 0x7F	; 127
    11a6:	57 e4       	ldi	r21, 0x47	; 71
    11a8:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    11ac:	18 16       	cp	r1, r24
    11ae:	0c f0       	brlt	.+2      	; 0x11b2 <main+0x408>
    11b0:	43 c0       	rjmp	.+134    	; 0x1238 <main+0x48e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    11b2:	fe 01       	movw	r30, r28
    11b4:	ef 5a       	subi	r30, 0xAF	; 175
    11b6:	ff 4f       	sbci	r31, 0xFF	; 255
    11b8:	60 81       	ld	r22, Z
    11ba:	71 81       	ldd	r23, Z+1	; 0x01
    11bc:	82 81       	ldd	r24, Z+2	; 0x02
    11be:	93 81       	ldd	r25, Z+3	; 0x03
    11c0:	20 e0       	ldi	r18, 0x00	; 0
    11c2:	30 e0       	ldi	r19, 0x00	; 0
    11c4:	40 e2       	ldi	r20, 0x20	; 32
    11c6:	51 e4       	ldi	r21, 0x41	; 65
    11c8:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    11cc:	dc 01       	movw	r26, r24
    11ce:	cb 01       	movw	r24, r22
    11d0:	8e 01       	movw	r16, r28
    11d2:	05 5b       	subi	r16, 0xB5	; 181
    11d4:	1f 4f       	sbci	r17, 0xFF	; 255
    11d6:	bc 01       	movw	r22, r24
    11d8:	cd 01       	movw	r24, r26
    11da:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    11de:	dc 01       	movw	r26, r24
    11e0:	cb 01       	movw	r24, r22
    11e2:	f8 01       	movw	r30, r16
    11e4:	91 83       	std	Z+1, r25	; 0x01
    11e6:	80 83       	st	Z, r24
    11e8:	1f c0       	rjmp	.+62     	; 0x1228 <main+0x47e>
    11ea:	fe 01       	movw	r30, r28
    11ec:	e7 5b       	subi	r30, 0xB7	; 183
    11ee:	ff 4f       	sbci	r31, 0xFF	; 255
    11f0:	80 e9       	ldi	r24, 0x90	; 144
    11f2:	91 e0       	ldi	r25, 0x01	; 1
    11f4:	91 83       	std	Z+1, r25	; 0x01
    11f6:	80 83       	st	Z, r24
    11f8:	fe 01       	movw	r30, r28
    11fa:	e7 5b       	subi	r30, 0xB7	; 183
    11fc:	ff 4f       	sbci	r31, 0xFF	; 255
    11fe:	80 81       	ld	r24, Z
    1200:	91 81       	ldd	r25, Z+1	; 0x01
    1202:	01 97       	sbiw	r24, 0x01	; 1
    1204:	f1 f7       	brne	.-4      	; 0x1202 <main+0x458>
    1206:	fe 01       	movw	r30, r28
    1208:	e7 5b       	subi	r30, 0xB7	; 183
    120a:	ff 4f       	sbci	r31, 0xFF	; 255
    120c:	91 83       	std	Z+1, r25	; 0x01
    120e:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1210:	de 01       	movw	r26, r28
    1212:	a5 5b       	subi	r26, 0xB5	; 181
    1214:	bf 4f       	sbci	r27, 0xFF	; 255
    1216:	fe 01       	movw	r30, r28
    1218:	e5 5b       	subi	r30, 0xB5	; 181
    121a:	ff 4f       	sbci	r31, 0xFF	; 255
    121c:	80 81       	ld	r24, Z
    121e:	91 81       	ldd	r25, Z+1	; 0x01
    1220:	01 97       	sbiw	r24, 0x01	; 1
    1222:	11 96       	adiw	r26, 0x01	; 1
    1224:	9c 93       	st	X, r25
    1226:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1228:	fe 01       	movw	r30, r28
    122a:	e5 5b       	subi	r30, 0xB5	; 181
    122c:	ff 4f       	sbci	r31, 0xFF	; 255
    122e:	80 81       	ld	r24, Z
    1230:	91 81       	ldd	r25, Z+1	; 0x01
    1232:	00 97       	sbiw	r24, 0x00	; 0
    1234:	d1 f6       	brne	.-76     	; 0x11ea <main+0x440>
    1236:	27 c0       	rjmp	.+78     	; 0x1286 <main+0x4dc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1238:	8e 01       	movw	r16, r28
    123a:	05 5b       	subi	r16, 0xB5	; 181
    123c:	1f 4f       	sbci	r17, 0xFF	; 255
    123e:	fe 01       	movw	r30, r28
    1240:	e3 5b       	subi	r30, 0xB3	; 179
    1242:	ff 4f       	sbci	r31, 0xFF	; 255
    1244:	60 81       	ld	r22, Z
    1246:	71 81       	ldd	r23, Z+1	; 0x01
    1248:	82 81       	ldd	r24, Z+2	; 0x02
    124a:	93 81       	ldd	r25, Z+3	; 0x03
    124c:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1250:	dc 01       	movw	r26, r24
    1252:	cb 01       	movw	r24, r22
    1254:	f8 01       	movw	r30, r16
    1256:	91 83       	std	Z+1, r25	; 0x01
    1258:	80 83       	st	Z, r24
    125a:	de 01       	movw	r26, r28
    125c:	a9 5b       	subi	r26, 0xB9	; 185
    125e:	bf 4f       	sbci	r27, 0xFF	; 255
    1260:	fe 01       	movw	r30, r28
    1262:	e5 5b       	subi	r30, 0xB5	; 181
    1264:	ff 4f       	sbci	r31, 0xFF	; 255
    1266:	80 81       	ld	r24, Z
    1268:	91 81       	ldd	r25, Z+1	; 0x01
    126a:	8d 93       	st	X+, r24
    126c:	9c 93       	st	X, r25
    126e:	fe 01       	movw	r30, r28
    1270:	e9 5b       	subi	r30, 0xB9	; 185
    1272:	ff 4f       	sbci	r31, 0xFF	; 255
    1274:	80 81       	ld	r24, Z
    1276:	91 81       	ldd	r25, Z+1	; 0x01
    1278:	01 97       	sbiw	r24, 0x01	; 1
    127a:	f1 f7       	brne	.-4      	; 0x1278 <main+0x4ce>
    127c:	fe 01       	movw	r30, r28
    127e:	e9 5b       	subi	r30, 0xB9	; 185
    1280:	ff 4f       	sbci	r31, 0xFF	; 255
    1282:	91 83       	std	Z+1, r25	; 0x01
    1284:	80 83       	st	Z, r24
				_delay_ms(delay);
				LCD_enu_Clear();
    1286:	0e 94 3e 17 	call	0x2e7c	; 0x2e7c <LCD_enu_Clear>
				LCD_enu_SendString("Enter Password:");
    128a:	8a ea       	ldi	r24, 0xAA	; 170
    128c:	90 e0       	ldi	r25, 0x00	; 0
    128e:	0e 94 7d 13 	call	0x26fa	; 0x26fa <LCD_enu_SendString>
				LCD_enu_SetCursor(1, 0);
    1292:	81 e0       	ldi	r24, 0x01	; 1
    1294:	60 e0       	ldi	r22, 0x00	; 0
    1296:	0e 94 1d 14 	call	0x283a	; 0x283a <LCD_enu_SetCursor>
    129a:	a8 ce       	rjmp	.-688    	; 0xfec <main+0x242>
			}else{
				//To display this message only once
				if(!homeFlag){
    129c:	fe 01       	movw	r30, r28
    129e:	e9 59       	subi	r30, 0x99	; 153
    12a0:	ff 4f       	sbci	r31, 0xFF	; 255
    12a2:	80 81       	ld	r24, Z
    12a4:	88 23       	and	r24, r24
    12a6:	09 f0       	breq	.+2      	; 0x12aa <main+0x500>
    12a8:	98 c0       	rjmp	.+304    	; 0x13da <main+0x630>
					LCD_enu_Clear();
    12aa:	0e 94 3e 17 	call	0x2e7c	; 0x2e7c <LCD_enu_Clear>
					LCD_enu_SendString("Welcome :)");
    12ae:	84 ed       	ldi	r24, 0xD4	; 212
    12b0:	90 e0       	ldi	r25, 0x00	; 0
    12b2:	0e 94 7d 13 	call	0x26fa	; 0x26fa <LCD_enu_SendString>
					LCD_enu_SetCursor(1, 0);
    12b6:	81 e0       	ldi	r24, 0x01	; 1
    12b8:	60 e0       	ldi	r22, 0x00	; 0
    12ba:	0e 94 1d 14 	call	0x283a	; 0x283a <LCD_enu_SetCursor>
					LCD_enu_SendString("Choose Option ..");
    12be:	8f ed       	ldi	r24, 0xDF	; 223
    12c0:	90 e0       	ldi	r25, 0x00	; 0
    12c2:	0e 94 7d 13 	call	0x26fa	; 0x26fa <LCD_enu_SendString>
					homeFlag = 1;
    12c6:	fe 01       	movw	r30, r28
    12c8:	e9 59       	subi	r30, 0x99	; 153
    12ca:	ff 4f       	sbci	r31, 0xFF	; 255
    12cc:	81 e0       	ldi	r24, 0x01	; 1
    12ce:	80 83       	st	Z, r24
    12d0:	fe 01       	movw	r30, r28
    12d2:	ed 5b       	subi	r30, 0xBD	; 189
    12d4:	ff 4f       	sbci	r31, 0xFF	; 255
    12d6:	80 e0       	ldi	r24, 0x00	; 0
    12d8:	90 e0       	ldi	r25, 0x00	; 0
    12da:	aa e7       	ldi	r26, 0x7A	; 122
    12dc:	b4 e4       	ldi	r27, 0x44	; 68
    12de:	80 83       	st	Z, r24
    12e0:	91 83       	std	Z+1, r25	; 0x01
    12e2:	a2 83       	std	Z+2, r26	; 0x02
    12e4:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    12e6:	8e 01       	movw	r16, r28
    12e8:	01 5c       	subi	r16, 0xC1	; 193
    12ea:	1f 4f       	sbci	r17, 0xFF	; 255
    12ec:	fe 01       	movw	r30, r28
    12ee:	ed 5b       	subi	r30, 0xBD	; 189
    12f0:	ff 4f       	sbci	r31, 0xFF	; 255
    12f2:	60 81       	ld	r22, Z
    12f4:	71 81       	ldd	r23, Z+1	; 0x01
    12f6:	82 81       	ldd	r24, Z+2	; 0x02
    12f8:	93 81       	ldd	r25, Z+3	; 0x03
    12fa:	20 e0       	ldi	r18, 0x00	; 0
    12fc:	30 e0       	ldi	r19, 0x00	; 0
    12fe:	4a e7       	ldi	r20, 0x7A	; 122
    1300:	55 e4       	ldi	r21, 0x45	; 69
    1302:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1306:	dc 01       	movw	r26, r24
    1308:	cb 01       	movw	r24, r22
    130a:	f8 01       	movw	r30, r16
    130c:	80 83       	st	Z, r24
    130e:	91 83       	std	Z+1, r25	; 0x01
    1310:	a2 83       	std	Z+2, r26	; 0x02
    1312:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1314:	fe 01       	movw	r30, r28
    1316:	ff 96       	adiw	r30, 0x3f	; 63
    1318:	60 81       	ld	r22, Z
    131a:	71 81       	ldd	r23, Z+1	; 0x01
    131c:	82 81       	ldd	r24, Z+2	; 0x02
    131e:	93 81       	ldd	r25, Z+3	; 0x03
    1320:	20 e0       	ldi	r18, 0x00	; 0
    1322:	30 e0       	ldi	r19, 0x00	; 0
    1324:	40 e8       	ldi	r20, 0x80	; 128
    1326:	5f e3       	ldi	r21, 0x3F	; 63
    1328:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    132c:	88 23       	and	r24, r24
    132e:	2c f4       	brge	.+10     	; 0x133a <main+0x590>
		__ticks = 1;
    1330:	81 e0       	ldi	r24, 0x01	; 1
    1332:	90 e0       	ldi	r25, 0x00	; 0
    1334:	9e af       	std	Y+62, r25	; 0x3e
    1336:	8d af       	std	Y+61, r24	; 0x3d
    1338:	46 c0       	rjmp	.+140    	; 0x13c6 <main+0x61c>
	else if (__tmp > 65535)
    133a:	fe 01       	movw	r30, r28
    133c:	ff 96       	adiw	r30, 0x3f	; 63
    133e:	60 81       	ld	r22, Z
    1340:	71 81       	ldd	r23, Z+1	; 0x01
    1342:	82 81       	ldd	r24, Z+2	; 0x02
    1344:	93 81       	ldd	r25, Z+3	; 0x03
    1346:	20 e0       	ldi	r18, 0x00	; 0
    1348:	3f ef       	ldi	r19, 0xFF	; 255
    134a:	4f e7       	ldi	r20, 0x7F	; 127
    134c:	57 e4       	ldi	r21, 0x47	; 71
    134e:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    1352:	18 16       	cp	r1, r24
    1354:	64 f5       	brge	.+88     	; 0x13ae <main+0x604>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1356:	fe 01       	movw	r30, r28
    1358:	ed 5b       	subi	r30, 0xBD	; 189
    135a:	ff 4f       	sbci	r31, 0xFF	; 255
    135c:	60 81       	ld	r22, Z
    135e:	71 81       	ldd	r23, Z+1	; 0x01
    1360:	82 81       	ldd	r24, Z+2	; 0x02
    1362:	93 81       	ldd	r25, Z+3	; 0x03
    1364:	20 e0       	ldi	r18, 0x00	; 0
    1366:	30 e0       	ldi	r19, 0x00	; 0
    1368:	40 e2       	ldi	r20, 0x20	; 32
    136a:	51 e4       	ldi	r21, 0x41	; 65
    136c:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1370:	dc 01       	movw	r26, r24
    1372:	cb 01       	movw	r24, r22
    1374:	bc 01       	movw	r22, r24
    1376:	cd 01       	movw	r24, r26
    1378:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    137c:	dc 01       	movw	r26, r24
    137e:	cb 01       	movw	r24, r22
    1380:	9e af       	std	Y+62, r25	; 0x3e
    1382:	8d af       	std	Y+61, r24	; 0x3d
    1384:	0f c0       	rjmp	.+30     	; 0x13a4 <main+0x5fa>
    1386:	80 e9       	ldi	r24, 0x90	; 144
    1388:	91 e0       	ldi	r25, 0x01	; 1
    138a:	9c af       	std	Y+60, r25	; 0x3c
    138c:	8b af       	std	Y+59, r24	; 0x3b
    138e:	8b ad       	ldd	r24, Y+59	; 0x3b
    1390:	9c ad       	ldd	r25, Y+60	; 0x3c
    1392:	01 97       	sbiw	r24, 0x01	; 1
    1394:	f1 f7       	brne	.-4      	; 0x1392 <main+0x5e8>
    1396:	9c af       	std	Y+60, r25	; 0x3c
    1398:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    139a:	8d ad       	ldd	r24, Y+61	; 0x3d
    139c:	9e ad       	ldd	r25, Y+62	; 0x3e
    139e:	01 97       	sbiw	r24, 0x01	; 1
    13a0:	9e af       	std	Y+62, r25	; 0x3e
    13a2:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    13a4:	8d ad       	ldd	r24, Y+61	; 0x3d
    13a6:	9e ad       	ldd	r25, Y+62	; 0x3e
    13a8:	00 97       	sbiw	r24, 0x00	; 0
    13aa:	69 f7       	brne	.-38     	; 0x1386 <main+0x5dc>
    13ac:	16 c0       	rjmp	.+44     	; 0x13da <main+0x630>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    13ae:	fe 01       	movw	r30, r28
    13b0:	ff 96       	adiw	r30, 0x3f	; 63
    13b2:	60 81       	ld	r22, Z
    13b4:	71 81       	ldd	r23, Z+1	; 0x01
    13b6:	82 81       	ldd	r24, Z+2	; 0x02
    13b8:	93 81       	ldd	r25, Z+3	; 0x03
    13ba:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    13be:	dc 01       	movw	r26, r24
    13c0:	cb 01       	movw	r24, r22
    13c2:	9e af       	std	Y+62, r25	; 0x3e
    13c4:	8d af       	std	Y+61, r24	; 0x3d
    13c6:	8d ad       	ldd	r24, Y+61	; 0x3d
    13c8:	9e ad       	ldd	r25, Y+62	; 0x3e
    13ca:	9a af       	std	Y+58, r25	; 0x3a
    13cc:	89 af       	std	Y+57, r24	; 0x39
    13ce:	89 ad       	ldd	r24, Y+57	; 0x39
    13d0:	9a ad       	ldd	r25, Y+58	; 0x3a
    13d2:	01 97       	sbiw	r24, 0x01	; 1
    13d4:	f1 f7       	brne	.-4      	; 0x13d2 <main+0x628>
    13d6:	9a af       	std	Y+58, r25	; 0x3a
    13d8:	89 af       	std	Y+57, r24	; 0x39
					_delay_ms(delay);
				}
				displayOptionsPage();
    13da:	0e 94 47 06 	call	0xc8e	; 0xc8e <displayOptionsPage>
				takeUserOption(&order);
    13de:	ce 01       	movw	r24, r28
    13e0:	8a 58       	subi	r24, 0x8A	; 138
    13e2:	9f 4f       	sbci	r25, 0xFF	; 255
    13e4:	0e 94 5c 06 	call	0xcb8	; 0xcb8 <takeUserOption>
/************************************DC Motor Section*************************************/
				if(order == '1'){
    13e8:	fe 01       	movw	r30, r28
    13ea:	ea 58       	subi	r30, 0x8A	; 138
    13ec:	ff 4f       	sbci	r31, 0xFF	; 255
    13ee:	80 81       	ld	r24, Z
    13f0:	81 33       	cpi	r24, 0x31	; 49
    13f2:	31 f5       	brne	.+76     	; 0x1440 <main+0x696>
					displayRotationOptions();
    13f4:	0e 94 7b 06 	call	0xcf6	; 0xcf6 <displayRotationOptions>
					takeUserOption(&order);
    13f8:	ce 01       	movw	r24, r28
    13fa:	8a 58       	subi	r24, 0x8A	; 138
    13fc:	9f 4f       	sbci	r25, 0xFF	; 255
    13fe:	0e 94 5c 06 	call	0xcb8	; 0xcb8 <takeUserOption>
					// Rotate DC Motors CW
					if(order == '1'){
    1402:	fe 01       	movw	r30, r28
    1404:	ea 58       	subi	r30, 0x8A	; 138
    1406:	ff 4f       	sbci	r31, 0xFF	; 255
    1408:	80 81       	ld	r24, Z
    140a:	81 33       	cpi	r24, 0x31	; 49
    140c:	49 f4       	brne	.+18     	; 0x1420 <main+0x676>
						DC_Motor_enu_Rotate(MOTOR1, CW);
    140e:	80 e0       	ldi	r24, 0x00	; 0
    1410:	61 e0       	ldi	r22, 0x01	; 1
    1412:	0e 94 9e 19 	call	0x333c	; 0x333c <DC_Motor_enu_Rotate>
						DC_Motor_enu_Rotate(MOTOR2, CW);
    1416:	81 e0       	ldi	r24, 0x01	; 1
    1418:	61 e0       	ldi	r22, 0x01	; 1
    141a:	0e 94 9e 19 	call	0x333c	; 0x333c <DC_Motor_enu_Rotate>
    141e:	e6 cd       	rjmp	.-1076   	; 0xfec <main+0x242>
					}
					// Rotate DC Motors CCW
					else if (order == '2'){
    1420:	fe 01       	movw	r30, r28
    1422:	ea 58       	subi	r30, 0x8A	; 138
    1424:	ff 4f       	sbci	r31, 0xFF	; 255
    1426:	80 81       	ld	r24, Z
    1428:	82 33       	cpi	r24, 0x32	; 50
    142a:	09 f0       	breq	.+2      	; 0x142e <main+0x684>
    142c:	df cd       	rjmp	.-1090   	; 0xfec <main+0x242>
						DC_Motor_enu_Rotate(MOTOR1, CCW);
    142e:	80 e0       	ldi	r24, 0x00	; 0
    1430:	60 e0       	ldi	r22, 0x00	; 0
    1432:	0e 94 9e 19 	call	0x333c	; 0x333c <DC_Motor_enu_Rotate>
						DC_Motor_enu_Rotate(MOTOR2, CCW);
    1436:	81 e0       	ldi	r24, 0x01	; 1
    1438:	60 e0       	ldi	r22, 0x00	; 0
    143a:	0e 94 9e 19 	call	0x333c	; 0x333c <DC_Motor_enu_Rotate>
    143e:	d6 cd       	rjmp	.-1108   	; 0xfec <main+0x242>
					}
/****************************** Stepper Motor Section **************************************/
				}else if(order == '2'){
    1440:	fe 01       	movw	r30, r28
    1442:	ea 58       	subi	r30, 0x8A	; 138
    1444:	ff 4f       	sbci	r31, 0xFF	; 255
    1446:	80 81       	ld	r24, Z
    1448:	82 33       	cpi	r24, 0x32	; 50
    144a:	09 f0       	breq	.+2      	; 0x144e <main+0x6a4>
    144c:	e5 c1       	rjmp	.+970    	; 0x1818 <main+0xa6e>
					// Take Stepper Motor Angle
					LCD_enu_Clear();
    144e:	0e 94 3e 17 	call	0x2e7c	; 0x2e7c <LCD_enu_Clear>
					LCD_enu_SendString("Enter Angle:");
    1452:	80 ef       	ldi	r24, 0xF0	; 240
    1454:	90 e0       	ldi	r25, 0x00	; 0
    1456:	0e 94 7d 13 	call	0x26fa	; 0x26fa <LCD_enu_SendString>
					u8 stepperMotorAngle[3],angleCounter = 0 ;
    145a:	fe 01       	movw	r30, r28
    145c:	ed 59       	subi	r30, 0x9D	; 157
    145e:	ff 4f       	sbci	r31, 0xFF	; 255
    1460:	10 82       	st	Z, r1
    1462:	c4 c0       	rjmp	.+392    	; 0x15ec <main+0x842>
					// Display and Storing Angle
					while(angleCounter!=3){
						Keypad_enu_getKey(&key);
    1464:	ce 01       	movw	r24, r28
    1466:	8b 58       	subi	r24, 0x8B	; 139
    1468:	9f 4f       	sbci	r25, 0xFF	; 255
    146a:	0e 94 4b 18 	call	0x3096	; 0x3096 <Keypad_enu_getKey>
						if(key != KEYPAD_U8_NO_KEY_PRESSED && key != '='){
    146e:	fe 01       	movw	r30, r28
    1470:	eb 58       	subi	r30, 0x8B	; 139
    1472:	ff 4f       	sbci	r31, 0xFF	; 255
    1474:	80 81       	ld	r24, Z
    1476:	8f 3f       	cpi	r24, 0xFF	; 255
    1478:	09 f4       	brne	.+2      	; 0x147c <main+0x6d2>
    147a:	9a c0       	rjmp	.+308    	; 0x15b0 <main+0x806>
    147c:	fe 01       	movw	r30, r28
    147e:	eb 58       	subi	r30, 0x8B	; 139
    1480:	ff 4f       	sbci	r31, 0xFF	; 255
    1482:	80 81       	ld	r24, Z
    1484:	8d 33       	cpi	r24, 0x3D	; 61
    1486:	09 f4       	brne	.+2      	; 0x148a <main+0x6e0>
    1488:	93 c0       	rjmp	.+294    	; 0x15b0 <main+0x806>
							LCD_enu_SendChar(key);
    148a:	fe 01       	movw	r30, r28
    148c:	eb 58       	subi	r30, 0x8B	; 139
    148e:	ff 4f       	sbci	r31, 0xFF	; 255
    1490:	80 81       	ld	r24, Z
    1492:	0e 94 7d 11 	call	0x22fa	; 0x22fa <LCD_enu_SendChar>

							stepperMotorAngle[angleCounter] = key;
    1496:	fe 01       	movw	r30, r28
    1498:	ed 59       	subi	r30, 0x9D	; 157
    149a:	ff 4f       	sbci	r31, 0xFF	; 255
    149c:	80 81       	ld	r24, Z
    149e:	28 2f       	mov	r18, r24
    14a0:	30 e0       	ldi	r19, 0x00	; 0
    14a2:	fe 01       	movw	r30, r28
    14a4:	eb 58       	subi	r30, 0x8B	; 139
    14a6:	ff 4f       	sbci	r31, 0xFF	; 255
    14a8:	40 81       	ld	r20, Z
    14aa:	ce 01       	movw	r24, r28
    14ac:	89 58       	subi	r24, 0x89	; 137
    14ae:	9f 4f       	sbci	r25, 0xFF	; 255
    14b0:	fc 01       	movw	r30, r24
    14b2:	e2 0f       	add	r30, r18
    14b4:	f3 1f       	adc	r31, r19
    14b6:	40 83       	st	Z, r20
							angleCounter++;
    14b8:	de 01       	movw	r26, r28
    14ba:	ad 59       	subi	r26, 0x9D	; 157
    14bc:	bf 4f       	sbci	r27, 0xFF	; 255
    14be:	fe 01       	movw	r30, r28
    14c0:	ed 59       	subi	r30, 0x9D	; 157
    14c2:	ff 4f       	sbci	r31, 0xFF	; 255
    14c4:	80 81       	ld	r24, Z
    14c6:	8f 5f       	subi	r24, 0xFF	; 255
    14c8:	8c 93       	st	X, r24
    14ca:	80 e0       	ldi	r24, 0x00	; 0
    14cc:	90 e0       	ldi	r25, 0x00	; 0
    14ce:	a8 e4       	ldi	r26, 0x48	; 72
    14d0:	b3 e4       	ldi	r27, 0x43	; 67
    14d2:	8d ab       	std	Y+53, r24	; 0x35
    14d4:	9e ab       	std	Y+54, r25	; 0x36
    14d6:	af ab       	std	Y+55, r26	; 0x37
    14d8:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    14da:	6d a9       	ldd	r22, Y+53	; 0x35
    14dc:	7e a9       	ldd	r23, Y+54	; 0x36
    14de:	8f a9       	ldd	r24, Y+55	; 0x37
    14e0:	98 ad       	ldd	r25, Y+56	; 0x38
    14e2:	20 e0       	ldi	r18, 0x00	; 0
    14e4:	30 e0       	ldi	r19, 0x00	; 0
    14e6:	4a e7       	ldi	r20, 0x7A	; 122
    14e8:	55 e4       	ldi	r21, 0x45	; 69
    14ea:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    14ee:	dc 01       	movw	r26, r24
    14f0:	cb 01       	movw	r24, r22
    14f2:	89 ab       	std	Y+49, r24	; 0x31
    14f4:	9a ab       	std	Y+50, r25	; 0x32
    14f6:	ab ab       	std	Y+51, r26	; 0x33
    14f8:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    14fa:	69 a9       	ldd	r22, Y+49	; 0x31
    14fc:	7a a9       	ldd	r23, Y+50	; 0x32
    14fe:	8b a9       	ldd	r24, Y+51	; 0x33
    1500:	9c a9       	ldd	r25, Y+52	; 0x34
    1502:	20 e0       	ldi	r18, 0x00	; 0
    1504:	30 e0       	ldi	r19, 0x00	; 0
    1506:	40 e8       	ldi	r20, 0x80	; 128
    1508:	5f e3       	ldi	r21, 0x3F	; 63
    150a:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    150e:	88 23       	and	r24, r24
    1510:	2c f4       	brge	.+10     	; 0x151c <main+0x772>
		__ticks = 1;
    1512:	81 e0       	ldi	r24, 0x01	; 1
    1514:	90 e0       	ldi	r25, 0x00	; 0
    1516:	98 ab       	std	Y+48, r25	; 0x30
    1518:	8f a7       	std	Y+47, r24	; 0x2f
    151a:	3f c0       	rjmp	.+126    	; 0x159a <main+0x7f0>
	else if (__tmp > 65535)
    151c:	69 a9       	ldd	r22, Y+49	; 0x31
    151e:	7a a9       	ldd	r23, Y+50	; 0x32
    1520:	8b a9       	ldd	r24, Y+51	; 0x33
    1522:	9c a9       	ldd	r25, Y+52	; 0x34
    1524:	20 e0       	ldi	r18, 0x00	; 0
    1526:	3f ef       	ldi	r19, 0xFF	; 255
    1528:	4f e7       	ldi	r20, 0x7F	; 127
    152a:	57 e4       	ldi	r21, 0x47	; 71
    152c:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    1530:	18 16       	cp	r1, r24
    1532:	4c f5       	brge	.+82     	; 0x1586 <main+0x7dc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1534:	6d a9       	ldd	r22, Y+53	; 0x35
    1536:	7e a9       	ldd	r23, Y+54	; 0x36
    1538:	8f a9       	ldd	r24, Y+55	; 0x37
    153a:	98 ad       	ldd	r25, Y+56	; 0x38
    153c:	20 e0       	ldi	r18, 0x00	; 0
    153e:	30 e0       	ldi	r19, 0x00	; 0
    1540:	40 e2       	ldi	r20, 0x20	; 32
    1542:	51 e4       	ldi	r21, 0x41	; 65
    1544:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1548:	dc 01       	movw	r26, r24
    154a:	cb 01       	movw	r24, r22
    154c:	bc 01       	movw	r22, r24
    154e:	cd 01       	movw	r24, r26
    1550:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1554:	dc 01       	movw	r26, r24
    1556:	cb 01       	movw	r24, r22
    1558:	98 ab       	std	Y+48, r25	; 0x30
    155a:	8f a7       	std	Y+47, r24	; 0x2f
    155c:	0f c0       	rjmp	.+30     	; 0x157c <main+0x7d2>
    155e:	80 e9       	ldi	r24, 0x90	; 144
    1560:	91 e0       	ldi	r25, 0x01	; 1
    1562:	9e a7       	std	Y+46, r25	; 0x2e
    1564:	8d a7       	std	Y+45, r24	; 0x2d
    1566:	8d a5       	ldd	r24, Y+45	; 0x2d
    1568:	9e a5       	ldd	r25, Y+46	; 0x2e
    156a:	01 97       	sbiw	r24, 0x01	; 1
    156c:	f1 f7       	brne	.-4      	; 0x156a <main+0x7c0>
    156e:	9e a7       	std	Y+46, r25	; 0x2e
    1570:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1572:	8f a5       	ldd	r24, Y+47	; 0x2f
    1574:	98 a9       	ldd	r25, Y+48	; 0x30
    1576:	01 97       	sbiw	r24, 0x01	; 1
    1578:	98 ab       	std	Y+48, r25	; 0x30
    157a:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    157c:	8f a5       	ldd	r24, Y+47	; 0x2f
    157e:	98 a9       	ldd	r25, Y+48	; 0x30
    1580:	00 97       	sbiw	r24, 0x00	; 0
    1582:	69 f7       	brne	.-38     	; 0x155e <main+0x7b4>
    1584:	33 c0       	rjmp	.+102    	; 0x15ec <main+0x842>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1586:	69 a9       	ldd	r22, Y+49	; 0x31
    1588:	7a a9       	ldd	r23, Y+50	; 0x32
    158a:	8b a9       	ldd	r24, Y+51	; 0x33
    158c:	9c a9       	ldd	r25, Y+52	; 0x34
    158e:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1592:	dc 01       	movw	r26, r24
    1594:	cb 01       	movw	r24, r22
    1596:	98 ab       	std	Y+48, r25	; 0x30
    1598:	8f a7       	std	Y+47, r24	; 0x2f
    159a:	8f a5       	ldd	r24, Y+47	; 0x2f
    159c:	98 a9       	ldd	r25, Y+48	; 0x30
    159e:	9c a7       	std	Y+44, r25	; 0x2c
    15a0:	8b a7       	std	Y+43, r24	; 0x2b
    15a2:	8b a5       	ldd	r24, Y+43	; 0x2b
    15a4:	9c a5       	ldd	r25, Y+44	; 0x2c
    15a6:	01 97       	sbiw	r24, 0x01	; 1
    15a8:	f1 f7       	brne	.-4      	; 0x15a6 <main+0x7fc>
    15aa:	9c a7       	std	Y+44, r25	; 0x2c
    15ac:	8b a7       	std	Y+43, r24	; 0x2b
    15ae:	1e c0       	rjmp	.+60     	; 0x15ec <main+0x842>
							_delay_ms(200);
						}else if(key == '=') {
    15b0:	fe 01       	movw	r30, r28
    15b2:	eb 58       	subi	r30, 0x8B	; 139
    15b4:	ff 4f       	sbci	r31, 0xFF	; 255
    15b6:	80 81       	ld	r24, Z
    15b8:	8d 33       	cpi	r24, 0x3D	; 61
    15ba:	c1 f4       	brne	.+48     	; 0x15ec <main+0x842>
						// if user entered angle of one or two digits
						if(angleCounter==1) {stepperMotorAngle[1]  = 'a';break;}
    15bc:	fe 01       	movw	r30, r28
    15be:	ed 59       	subi	r30, 0x9D	; 157
    15c0:	ff 4f       	sbci	r31, 0xFF	; 255
    15c2:	80 81       	ld	r24, Z
    15c4:	81 30       	cpi	r24, 0x01	; 1
    15c6:	31 f4       	brne	.+12     	; 0x15d4 <main+0x82a>
    15c8:	fe 01       	movw	r30, r28
    15ca:	e9 58       	subi	r30, 0x89	; 137
    15cc:	ff 4f       	sbci	r31, 0xFF	; 255
    15ce:	81 e6       	ldi	r24, 0x61	; 97
    15d0:	81 83       	std	Z+1, r24	; 0x01
    15d2:	13 c0       	rjmp	.+38     	; 0x15fa <main+0x850>
						if(angleCounter==2) {stepperMotorAngle[2]  = 'a';break;}
    15d4:	fe 01       	movw	r30, r28
    15d6:	ed 59       	subi	r30, 0x9D	; 157
    15d8:	ff 4f       	sbci	r31, 0xFF	; 255
    15da:	80 81       	ld	r24, Z
    15dc:	82 30       	cpi	r24, 0x02	; 2
    15de:	31 f4       	brne	.+12     	; 0x15ec <main+0x842>
    15e0:	fe 01       	movw	r30, r28
    15e2:	e9 58       	subi	r30, 0x89	; 137
    15e4:	ff 4f       	sbci	r31, 0xFF	; 255
    15e6:	81 e6       	ldi	r24, 0x61	; 97
    15e8:	82 83       	std	Z+2, r24	; 0x02
    15ea:	07 c0       	rjmp	.+14     	; 0x15fa <main+0x850>
					// Take Stepper Motor Angle
					LCD_enu_Clear();
					LCD_enu_SendString("Enter Angle:");
					u8 stepperMotorAngle[3],angleCounter = 0 ;
					// Display and Storing Angle
					while(angleCounter!=3){
    15ec:	fe 01       	movw	r30, r28
    15ee:	ed 59       	subi	r30, 0x9D	; 157
    15f0:	ff 4f       	sbci	r31, 0xFF	; 255
    15f2:	80 81       	ld	r24, Z
    15f4:	83 30       	cpi	r24, 0x03	; 3
    15f6:	09 f0       	breq	.+2      	; 0x15fa <main+0x850>
    15f8:	35 cf       	rjmp	.-406    	; 0x1464 <main+0x6ba>
						// if user entered angle of one or two digits
						if(angleCounter==1) {stepperMotorAngle[1]  = 'a';break;}
						if(angleCounter==2) {stepperMotorAngle[2]  = 'a';break;}
						}
					}
					displayRotationOptions();
    15fa:	0e 94 7b 06 	call	0xcf6	; 0xcf6 <displayRotationOptions>
					takeUserOption(&order);
    15fe:	ce 01       	movw	r24, r28
    1600:	8a 58       	subi	r24, 0x8A	; 138
    1602:	9f 4f       	sbci	r25, 0xFF	; 255
    1604:	0e 94 5c 06 	call	0xcb8	; 0xcb8 <takeUserOption>
					// Rotate Stepper Motor CW With Entered Angle
					if(order == '1'){
    1608:	fe 01       	movw	r30, r28
    160a:	ea 58       	subi	r30, 0x8A	; 138
    160c:	ff 4f       	sbci	r31, 0xFF	; 255
    160e:	80 81       	ld	r24, Z
    1610:	81 33       	cpi	r24, 0x31	; 49
    1612:	09 f0       	breq	.+2      	; 0x1616 <main+0x86c>
    1614:	7d c0       	rjmp	.+250    	; 0x1710 <main+0x966>
						STEP_Motor_enu_Rotate(CW, returnAngle(stepperMotorAngle) );
    1616:	ce 01       	movw	r24, r28
    1618:	89 58       	subi	r24, 0x89	; 137
    161a:	9f 4f       	sbci	r25, 0xFF	; 255
    161c:	0e 94 90 06 	call	0xd20	; 0xd20 <returnAngle>
    1620:	9c 01       	movw	r18, r24
    1622:	81 e0       	ldi	r24, 0x01	; 1
    1624:	b9 01       	movw	r22, r18
    1626:	0e 94 db 0c 	call	0x19b6	; 0x19b6 <STEP_Motor_enu_Rotate>
    162a:	80 e0       	ldi	r24, 0x00	; 0
    162c:	90 e0       	ldi	r25, 0x00	; 0
    162e:	aa e7       	ldi	r26, 0x7A	; 122
    1630:	b4 e4       	ldi	r27, 0x44	; 68
    1632:	8f a3       	std	Y+39, r24	; 0x27
    1634:	98 a7       	std	Y+40, r25	; 0x28
    1636:	a9 a7       	std	Y+41, r26	; 0x29
    1638:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    163a:	6f a1       	ldd	r22, Y+39	; 0x27
    163c:	78 a5       	ldd	r23, Y+40	; 0x28
    163e:	89 a5       	ldd	r24, Y+41	; 0x29
    1640:	9a a5       	ldd	r25, Y+42	; 0x2a
    1642:	20 e0       	ldi	r18, 0x00	; 0
    1644:	30 e0       	ldi	r19, 0x00	; 0
    1646:	4a e7       	ldi	r20, 0x7A	; 122
    1648:	55 e4       	ldi	r21, 0x45	; 69
    164a:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    164e:	dc 01       	movw	r26, r24
    1650:	cb 01       	movw	r24, r22
    1652:	8b a3       	std	Y+35, r24	; 0x23
    1654:	9c a3       	std	Y+36, r25	; 0x24
    1656:	ad a3       	std	Y+37, r26	; 0x25
    1658:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    165a:	6b a1       	ldd	r22, Y+35	; 0x23
    165c:	7c a1       	ldd	r23, Y+36	; 0x24
    165e:	8d a1       	ldd	r24, Y+37	; 0x25
    1660:	9e a1       	ldd	r25, Y+38	; 0x26
    1662:	20 e0       	ldi	r18, 0x00	; 0
    1664:	30 e0       	ldi	r19, 0x00	; 0
    1666:	40 e8       	ldi	r20, 0x80	; 128
    1668:	5f e3       	ldi	r21, 0x3F	; 63
    166a:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    166e:	88 23       	and	r24, r24
    1670:	2c f4       	brge	.+10     	; 0x167c <main+0x8d2>
		__ticks = 1;
    1672:	81 e0       	ldi	r24, 0x01	; 1
    1674:	90 e0       	ldi	r25, 0x00	; 0
    1676:	9a a3       	std	Y+34, r25	; 0x22
    1678:	89 a3       	std	Y+33, r24	; 0x21
    167a:	3f c0       	rjmp	.+126    	; 0x16fa <main+0x950>
	else if (__tmp > 65535)
    167c:	6b a1       	ldd	r22, Y+35	; 0x23
    167e:	7c a1       	ldd	r23, Y+36	; 0x24
    1680:	8d a1       	ldd	r24, Y+37	; 0x25
    1682:	9e a1       	ldd	r25, Y+38	; 0x26
    1684:	20 e0       	ldi	r18, 0x00	; 0
    1686:	3f ef       	ldi	r19, 0xFF	; 255
    1688:	4f e7       	ldi	r20, 0x7F	; 127
    168a:	57 e4       	ldi	r21, 0x47	; 71
    168c:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    1690:	18 16       	cp	r1, r24
    1692:	4c f5       	brge	.+82     	; 0x16e6 <main+0x93c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1694:	6f a1       	ldd	r22, Y+39	; 0x27
    1696:	78 a5       	ldd	r23, Y+40	; 0x28
    1698:	89 a5       	ldd	r24, Y+41	; 0x29
    169a:	9a a5       	ldd	r25, Y+42	; 0x2a
    169c:	20 e0       	ldi	r18, 0x00	; 0
    169e:	30 e0       	ldi	r19, 0x00	; 0
    16a0:	40 e2       	ldi	r20, 0x20	; 32
    16a2:	51 e4       	ldi	r21, 0x41	; 65
    16a4:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    16a8:	dc 01       	movw	r26, r24
    16aa:	cb 01       	movw	r24, r22
    16ac:	bc 01       	movw	r22, r24
    16ae:	cd 01       	movw	r24, r26
    16b0:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    16b4:	dc 01       	movw	r26, r24
    16b6:	cb 01       	movw	r24, r22
    16b8:	9a a3       	std	Y+34, r25	; 0x22
    16ba:	89 a3       	std	Y+33, r24	; 0x21
    16bc:	0f c0       	rjmp	.+30     	; 0x16dc <main+0x932>
    16be:	80 e9       	ldi	r24, 0x90	; 144
    16c0:	91 e0       	ldi	r25, 0x01	; 1
    16c2:	98 a3       	std	Y+32, r25	; 0x20
    16c4:	8f 8f       	std	Y+31, r24	; 0x1f
    16c6:	8f 8d       	ldd	r24, Y+31	; 0x1f
    16c8:	98 a1       	ldd	r25, Y+32	; 0x20
    16ca:	01 97       	sbiw	r24, 0x01	; 1
    16cc:	f1 f7       	brne	.-4      	; 0x16ca <main+0x920>
    16ce:	98 a3       	std	Y+32, r25	; 0x20
    16d0:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    16d2:	89 a1       	ldd	r24, Y+33	; 0x21
    16d4:	9a a1       	ldd	r25, Y+34	; 0x22
    16d6:	01 97       	sbiw	r24, 0x01	; 1
    16d8:	9a a3       	std	Y+34, r25	; 0x22
    16da:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    16dc:	89 a1       	ldd	r24, Y+33	; 0x21
    16de:	9a a1       	ldd	r25, Y+34	; 0x22
    16e0:	00 97       	sbiw	r24, 0x00	; 0
    16e2:	69 f7       	brne	.-38     	; 0x16be <main+0x914>
    16e4:	83 cc       	rjmp	.-1786   	; 0xfec <main+0x242>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    16e6:	6b a1       	ldd	r22, Y+35	; 0x23
    16e8:	7c a1       	ldd	r23, Y+36	; 0x24
    16ea:	8d a1       	ldd	r24, Y+37	; 0x25
    16ec:	9e a1       	ldd	r25, Y+38	; 0x26
    16ee:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    16f2:	dc 01       	movw	r26, r24
    16f4:	cb 01       	movw	r24, r22
    16f6:	9a a3       	std	Y+34, r25	; 0x22
    16f8:	89 a3       	std	Y+33, r24	; 0x21
    16fa:	89 a1       	ldd	r24, Y+33	; 0x21
    16fc:	9a a1       	ldd	r25, Y+34	; 0x22
    16fe:	9e 8f       	std	Y+30, r25	; 0x1e
    1700:	8d 8f       	std	Y+29, r24	; 0x1d
    1702:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1704:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1706:	01 97       	sbiw	r24, 0x01	; 1
    1708:	f1 f7       	brne	.-4      	; 0x1706 <main+0x95c>
    170a:	9e 8f       	std	Y+30, r25	; 0x1e
    170c:	8d 8f       	std	Y+29, r24	; 0x1d
    170e:	6e cc       	rjmp	.-1828   	; 0xfec <main+0x242>
						_delay_ms(delay);
					}
					// Rotate Stepper Motor CCW With Entered Angle
					else if (order == '2'){
    1710:	fe 01       	movw	r30, r28
    1712:	ea 58       	subi	r30, 0x8A	; 138
    1714:	ff 4f       	sbci	r31, 0xFF	; 255
    1716:	80 81       	ld	r24, Z
    1718:	82 33       	cpi	r24, 0x32	; 50
    171a:	09 f0       	breq	.+2      	; 0x171e <main+0x974>
    171c:	67 cc       	rjmp	.-1842   	; 0xfec <main+0x242>
						STEP_Motor_enu_Rotate(CCW, returnAngle(stepperMotorAngle) );
    171e:	ce 01       	movw	r24, r28
    1720:	89 58       	subi	r24, 0x89	; 137
    1722:	9f 4f       	sbci	r25, 0xFF	; 255
    1724:	0e 94 90 06 	call	0xd20	; 0xd20 <returnAngle>
    1728:	9c 01       	movw	r18, r24
    172a:	80 e0       	ldi	r24, 0x00	; 0
    172c:	b9 01       	movw	r22, r18
    172e:	0e 94 db 0c 	call	0x19b6	; 0x19b6 <STEP_Motor_enu_Rotate>
    1732:	80 e0       	ldi	r24, 0x00	; 0
    1734:	90 e0       	ldi	r25, 0x00	; 0
    1736:	aa e7       	ldi	r26, 0x7A	; 122
    1738:	b4 e4       	ldi	r27, 0x44	; 68
    173a:	89 8f       	std	Y+25, r24	; 0x19
    173c:	9a 8f       	std	Y+26, r25	; 0x1a
    173e:	ab 8f       	std	Y+27, r26	; 0x1b
    1740:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1742:	69 8d       	ldd	r22, Y+25	; 0x19
    1744:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1746:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1748:	9c 8d       	ldd	r25, Y+28	; 0x1c
    174a:	20 e0       	ldi	r18, 0x00	; 0
    174c:	30 e0       	ldi	r19, 0x00	; 0
    174e:	4a e7       	ldi	r20, 0x7A	; 122
    1750:	55 e4       	ldi	r21, 0x45	; 69
    1752:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1756:	dc 01       	movw	r26, r24
    1758:	cb 01       	movw	r24, r22
    175a:	8d 8b       	std	Y+21, r24	; 0x15
    175c:	9e 8b       	std	Y+22, r25	; 0x16
    175e:	af 8b       	std	Y+23, r26	; 0x17
    1760:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1762:	6d 89       	ldd	r22, Y+21	; 0x15
    1764:	7e 89       	ldd	r23, Y+22	; 0x16
    1766:	8f 89       	ldd	r24, Y+23	; 0x17
    1768:	98 8d       	ldd	r25, Y+24	; 0x18
    176a:	20 e0       	ldi	r18, 0x00	; 0
    176c:	30 e0       	ldi	r19, 0x00	; 0
    176e:	40 e8       	ldi	r20, 0x80	; 128
    1770:	5f e3       	ldi	r21, 0x3F	; 63
    1772:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    1776:	88 23       	and	r24, r24
    1778:	2c f4       	brge	.+10     	; 0x1784 <main+0x9da>
		__ticks = 1;
    177a:	81 e0       	ldi	r24, 0x01	; 1
    177c:	90 e0       	ldi	r25, 0x00	; 0
    177e:	9c 8b       	std	Y+20, r25	; 0x14
    1780:	8b 8b       	std	Y+19, r24	; 0x13
    1782:	3f c0       	rjmp	.+126    	; 0x1802 <main+0xa58>
	else if (__tmp > 65535)
    1784:	6d 89       	ldd	r22, Y+21	; 0x15
    1786:	7e 89       	ldd	r23, Y+22	; 0x16
    1788:	8f 89       	ldd	r24, Y+23	; 0x17
    178a:	98 8d       	ldd	r25, Y+24	; 0x18
    178c:	20 e0       	ldi	r18, 0x00	; 0
    178e:	3f ef       	ldi	r19, 0xFF	; 255
    1790:	4f e7       	ldi	r20, 0x7F	; 127
    1792:	57 e4       	ldi	r21, 0x47	; 71
    1794:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    1798:	18 16       	cp	r1, r24
    179a:	4c f5       	brge	.+82     	; 0x17ee <main+0xa44>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    179c:	69 8d       	ldd	r22, Y+25	; 0x19
    179e:	7a 8d       	ldd	r23, Y+26	; 0x1a
    17a0:	8b 8d       	ldd	r24, Y+27	; 0x1b
    17a2:	9c 8d       	ldd	r25, Y+28	; 0x1c
    17a4:	20 e0       	ldi	r18, 0x00	; 0
    17a6:	30 e0       	ldi	r19, 0x00	; 0
    17a8:	40 e2       	ldi	r20, 0x20	; 32
    17aa:	51 e4       	ldi	r21, 0x41	; 65
    17ac:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    17b0:	dc 01       	movw	r26, r24
    17b2:	cb 01       	movw	r24, r22
    17b4:	bc 01       	movw	r22, r24
    17b6:	cd 01       	movw	r24, r26
    17b8:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    17bc:	dc 01       	movw	r26, r24
    17be:	cb 01       	movw	r24, r22
    17c0:	9c 8b       	std	Y+20, r25	; 0x14
    17c2:	8b 8b       	std	Y+19, r24	; 0x13
    17c4:	0f c0       	rjmp	.+30     	; 0x17e4 <main+0xa3a>
    17c6:	80 e9       	ldi	r24, 0x90	; 144
    17c8:	91 e0       	ldi	r25, 0x01	; 1
    17ca:	9a 8b       	std	Y+18, r25	; 0x12
    17cc:	89 8b       	std	Y+17, r24	; 0x11
    17ce:	89 89       	ldd	r24, Y+17	; 0x11
    17d0:	9a 89       	ldd	r25, Y+18	; 0x12
    17d2:	01 97       	sbiw	r24, 0x01	; 1
    17d4:	f1 f7       	brne	.-4      	; 0x17d2 <main+0xa28>
    17d6:	9a 8b       	std	Y+18, r25	; 0x12
    17d8:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    17da:	8b 89       	ldd	r24, Y+19	; 0x13
    17dc:	9c 89       	ldd	r25, Y+20	; 0x14
    17de:	01 97       	sbiw	r24, 0x01	; 1
    17e0:	9c 8b       	std	Y+20, r25	; 0x14
    17e2:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    17e4:	8b 89       	ldd	r24, Y+19	; 0x13
    17e6:	9c 89       	ldd	r25, Y+20	; 0x14
    17e8:	00 97       	sbiw	r24, 0x00	; 0
    17ea:	69 f7       	brne	.-38     	; 0x17c6 <main+0xa1c>
    17ec:	ff cb       	rjmp	.-2050   	; 0xfec <main+0x242>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    17ee:	6d 89       	ldd	r22, Y+21	; 0x15
    17f0:	7e 89       	ldd	r23, Y+22	; 0x16
    17f2:	8f 89       	ldd	r24, Y+23	; 0x17
    17f4:	98 8d       	ldd	r25, Y+24	; 0x18
    17f6:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    17fa:	dc 01       	movw	r26, r24
    17fc:	cb 01       	movw	r24, r22
    17fe:	9c 8b       	std	Y+20, r25	; 0x14
    1800:	8b 8b       	std	Y+19, r24	; 0x13
    1802:	8b 89       	ldd	r24, Y+19	; 0x13
    1804:	9c 89       	ldd	r25, Y+20	; 0x14
    1806:	98 8b       	std	Y+16, r25	; 0x10
    1808:	8f 87       	std	Y+15, r24	; 0x0f
    180a:	8f 85       	ldd	r24, Y+15	; 0x0f
    180c:	98 89       	ldd	r25, Y+16	; 0x10
    180e:	01 97       	sbiw	r24, 0x01	; 1
    1810:	f1 f7       	brne	.-4      	; 0x180e <main+0xa64>
    1812:	98 8b       	std	Y+16, r25	; 0x10
    1814:	8f 87       	std	Y+15, r24	; 0x0f
    1816:	ea cb       	rjmp	.-2092   	; 0xfec <main+0x242>
						_delay_ms(delay);
					}
/********************************************* Exit Section *****************************************/
				}else if (order == '3'){
    1818:	fe 01       	movw	r30, r28
    181a:	ea 58       	subi	r30, 0x8A	; 138
    181c:	ff 4f       	sbci	r31, 0xFF	; 255
    181e:	80 81       	ld	r24, Z
    1820:	83 33       	cpi	r24, 0x33	; 51
    1822:	09 f0       	breq	.+2      	; 0x1826 <main+0xa7c>
    1824:	e3 cb       	rjmp	.-2106   	; 0xfec <main+0x242>
					LCD_enu_Clear();
    1826:	0e 94 3e 17 	call	0x2e7c	; 0x2e7c <LCD_enu_Clear>
					LCD_enu_SendString("Exiting .. ");
    182a:	8d ef       	ldi	r24, 0xFD	; 253
    182c:	90 e0       	ldi	r25, 0x00	; 0
    182e:	0e 94 7d 13 	call	0x26fa	; 0x26fa <LCD_enu_SendString>
					LCD_enu_SetCursor(1, 0);
    1832:	81 e0       	ldi	r24, 0x01	; 1
    1834:	60 e0       	ldi	r22, 0x00	; 0
    1836:	0e 94 1d 14 	call	0x283a	; 0x283a <LCD_enu_SetCursor>
					LCD_enu_SendString("Stopping Motors");
    183a:	89 e0       	ldi	r24, 0x09	; 9
    183c:	91 e0       	ldi	r25, 0x01	; 1
    183e:	0e 94 7d 13 	call	0x26fa	; 0x26fa <LCD_enu_SendString>
    1842:	80 e0       	ldi	r24, 0x00	; 0
    1844:	90 e0       	ldi	r25, 0x00	; 0
    1846:	aa e7       	ldi	r26, 0x7A	; 122
    1848:	b4 e4       	ldi	r27, 0x44	; 68
    184a:	8b 87       	std	Y+11, r24	; 0x0b
    184c:	9c 87       	std	Y+12, r25	; 0x0c
    184e:	ad 87       	std	Y+13, r26	; 0x0d
    1850:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1852:	6b 85       	ldd	r22, Y+11	; 0x0b
    1854:	7c 85       	ldd	r23, Y+12	; 0x0c
    1856:	8d 85       	ldd	r24, Y+13	; 0x0d
    1858:	9e 85       	ldd	r25, Y+14	; 0x0e
    185a:	20 e0       	ldi	r18, 0x00	; 0
    185c:	30 e0       	ldi	r19, 0x00	; 0
    185e:	4a e7       	ldi	r20, 0x7A	; 122
    1860:	55 e4       	ldi	r21, 0x45	; 69
    1862:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1866:	dc 01       	movw	r26, r24
    1868:	cb 01       	movw	r24, r22
    186a:	8f 83       	std	Y+7, r24	; 0x07
    186c:	98 87       	std	Y+8, r25	; 0x08
    186e:	a9 87       	std	Y+9, r26	; 0x09
    1870:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1872:	6f 81       	ldd	r22, Y+7	; 0x07
    1874:	78 85       	ldd	r23, Y+8	; 0x08
    1876:	89 85       	ldd	r24, Y+9	; 0x09
    1878:	9a 85       	ldd	r25, Y+10	; 0x0a
    187a:	20 e0       	ldi	r18, 0x00	; 0
    187c:	30 e0       	ldi	r19, 0x00	; 0
    187e:	40 e8       	ldi	r20, 0x80	; 128
    1880:	5f e3       	ldi	r21, 0x3F	; 63
    1882:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    1886:	88 23       	and	r24, r24
    1888:	2c f4       	brge	.+10     	; 0x1894 <main+0xaea>
		__ticks = 1;
    188a:	81 e0       	ldi	r24, 0x01	; 1
    188c:	90 e0       	ldi	r25, 0x00	; 0
    188e:	9e 83       	std	Y+6, r25	; 0x06
    1890:	8d 83       	std	Y+5, r24	; 0x05
    1892:	3f c0       	rjmp	.+126    	; 0x1912 <main+0xb68>
	else if (__tmp > 65535)
    1894:	6f 81       	ldd	r22, Y+7	; 0x07
    1896:	78 85       	ldd	r23, Y+8	; 0x08
    1898:	89 85       	ldd	r24, Y+9	; 0x09
    189a:	9a 85       	ldd	r25, Y+10	; 0x0a
    189c:	20 e0       	ldi	r18, 0x00	; 0
    189e:	3f ef       	ldi	r19, 0xFF	; 255
    18a0:	4f e7       	ldi	r20, 0x7F	; 127
    18a2:	57 e4       	ldi	r21, 0x47	; 71
    18a4:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    18a8:	18 16       	cp	r1, r24
    18aa:	4c f5       	brge	.+82     	; 0x18fe <main+0xb54>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    18ac:	6b 85       	ldd	r22, Y+11	; 0x0b
    18ae:	7c 85       	ldd	r23, Y+12	; 0x0c
    18b0:	8d 85       	ldd	r24, Y+13	; 0x0d
    18b2:	9e 85       	ldd	r25, Y+14	; 0x0e
    18b4:	20 e0       	ldi	r18, 0x00	; 0
    18b6:	30 e0       	ldi	r19, 0x00	; 0
    18b8:	40 e2       	ldi	r20, 0x20	; 32
    18ba:	51 e4       	ldi	r21, 0x41	; 65
    18bc:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    18c0:	dc 01       	movw	r26, r24
    18c2:	cb 01       	movw	r24, r22
    18c4:	bc 01       	movw	r22, r24
    18c6:	cd 01       	movw	r24, r26
    18c8:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    18cc:	dc 01       	movw	r26, r24
    18ce:	cb 01       	movw	r24, r22
    18d0:	9e 83       	std	Y+6, r25	; 0x06
    18d2:	8d 83       	std	Y+5, r24	; 0x05
    18d4:	0f c0       	rjmp	.+30     	; 0x18f4 <main+0xb4a>
    18d6:	80 e9       	ldi	r24, 0x90	; 144
    18d8:	91 e0       	ldi	r25, 0x01	; 1
    18da:	9c 83       	std	Y+4, r25	; 0x04
    18dc:	8b 83       	std	Y+3, r24	; 0x03
    18de:	8b 81       	ldd	r24, Y+3	; 0x03
    18e0:	9c 81       	ldd	r25, Y+4	; 0x04
    18e2:	01 97       	sbiw	r24, 0x01	; 1
    18e4:	f1 f7       	brne	.-4      	; 0x18e2 <main+0xb38>
    18e6:	9c 83       	std	Y+4, r25	; 0x04
    18e8:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    18ea:	8d 81       	ldd	r24, Y+5	; 0x05
    18ec:	9e 81       	ldd	r25, Y+6	; 0x06
    18ee:	01 97       	sbiw	r24, 0x01	; 1
    18f0:	9e 83       	std	Y+6, r25	; 0x06
    18f2:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    18f4:	8d 81       	ldd	r24, Y+5	; 0x05
    18f6:	9e 81       	ldd	r25, Y+6	; 0x06
    18f8:	00 97       	sbiw	r24, 0x00	; 0
    18fa:	69 f7       	brne	.-38     	; 0x18d6 <main+0xb2c>
    18fc:	14 c0       	rjmp	.+40     	; 0x1926 <main+0xb7c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    18fe:	6f 81       	ldd	r22, Y+7	; 0x07
    1900:	78 85       	ldd	r23, Y+8	; 0x08
    1902:	89 85       	ldd	r24, Y+9	; 0x09
    1904:	9a 85       	ldd	r25, Y+10	; 0x0a
    1906:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    190a:	dc 01       	movw	r26, r24
    190c:	cb 01       	movw	r24, r22
    190e:	9e 83       	std	Y+6, r25	; 0x06
    1910:	8d 83       	std	Y+5, r24	; 0x05
    1912:	8d 81       	ldd	r24, Y+5	; 0x05
    1914:	9e 81       	ldd	r25, Y+6	; 0x06
    1916:	9a 83       	std	Y+2, r25	; 0x02
    1918:	89 83       	std	Y+1, r24	; 0x01
    191a:	89 81       	ldd	r24, Y+1	; 0x01
    191c:	9a 81       	ldd	r25, Y+2	; 0x02
    191e:	01 97       	sbiw	r24, 0x01	; 1
    1920:	f1 f7       	brne	.-4      	; 0x191e <main+0xb74>
    1922:	9a 83       	std	Y+2, r25	; 0x02
    1924:	89 83       	std	Y+1, r24	; 0x01
					_delay_ms(delay);
					LCD_enu_Clear();
    1926:	0e 94 3e 17 	call	0x2e7c	; 0x2e7c <LCD_enu_Clear>
					/*Stop All Motors*/
					DC_Motor_enu_Stop(MOTOR1);
    192a:	80 e0       	ldi	r24, 0x00	; 0
    192c:	0e 94 26 1a 	call	0x344c	; 0x344c <DC_Motor_enu_Stop>
					DC_Motor_enu_Stop(MOTOR2);
    1930:	81 e0       	ldi	r24, 0x01	; 1
    1932:	0e 94 26 1a 	call	0x344c	; 0x344c <DC_Motor_enu_Stop>
					STEP_Motor_enu_Stop();
    1936:	0e 94 a1 0e 	call	0x1d42	; 0x1d42 <STEP_Motor_enu_Stop>
				}
			}
		}

	}
	return 0;
    193a:	80 e0       	ldi	r24, 0x00	; 0
    193c:	90 e0       	ldi	r25, 0x00	; 0
}
    193e:	c2 58       	subi	r28, 0x82	; 130
    1940:	df 4f       	sbci	r29, 0xFF	; 255
    1942:	0f b6       	in	r0, 0x3f	; 63
    1944:	f8 94       	cli
    1946:	de bf       	out	0x3e, r29	; 62
    1948:	0f be       	out	0x3f, r0	; 63
    194a:	cd bf       	out	0x3d, r28	; 61
    194c:	cf 91       	pop	r28
    194e:	df 91       	pop	r29
    1950:	1f 91       	pop	r17
    1952:	0f 91       	pop	r16
    1954:	08 95       	ret

00001956 <STEP_Motor_enu_Init>:


#define  delay   125

ES_t STEP_Motor_enu_Init()
{
    1956:	df 93       	push	r29
    1958:	cf 93       	push	r28
    195a:	cd b7       	in	r28, 0x3d	; 61
    195c:	de b7       	in	r29, 0x3e	; 62
    DIO_enu_SetPinDirection(STEPPER_MOTOR_PORT, STEPPER_MOTOR_PIN1, DIO_U8_OUTPUT);
    195e:	81 e0       	ldi	r24, 0x01	; 1
    1960:	60 e0       	ldi	r22, 0x00	; 0
    1962:	41 e0       	ldi	r20, 0x01	; 1
    1964:	0e 94 6c 1a 	call	0x34d8	; 0x34d8 <DIO_enu_SetPinDirection>
    DIO_enu_SetPinDirection(STEPPER_MOTOR_PORT, STEPPER_MOTOR_PIN2, DIO_U8_OUTPUT);
    1968:	81 e0       	ldi	r24, 0x01	; 1
    196a:	61 e0       	ldi	r22, 0x01	; 1
    196c:	41 e0       	ldi	r20, 0x01	; 1
    196e:	0e 94 6c 1a 	call	0x34d8	; 0x34d8 <DIO_enu_SetPinDirection>
    DIO_enu_SetPinDirection(STEPPER_MOTOR_PORT, STEPPER_MOTOR_PIN3, DIO_U8_OUTPUT);
    1972:	81 e0       	ldi	r24, 0x01	; 1
    1974:	62 e0       	ldi	r22, 0x02	; 2
    1976:	41 e0       	ldi	r20, 0x01	; 1
    1978:	0e 94 6c 1a 	call	0x34d8	; 0x34d8 <DIO_enu_SetPinDirection>
    DIO_enu_SetPinDirection(STEPPER_MOTOR_PORT, STEPPER_MOTOR_PIN4, DIO_U8_OUTPUT);
    197c:	81 e0       	ldi	r24, 0x01	; 1
    197e:	63 e0       	ldi	r22, 0x03	; 3
    1980:	41 e0       	ldi	r20, 0x01	; 1
    1982:	0e 94 6c 1a 	call	0x34d8	; 0x34d8 <DIO_enu_SetPinDirection>
    DIO_enu_SetPinValue(STEPPER_MOTOR_PORT, STEPPER_MOTOR_PIN1, DIO_U8_LOW);
    1986:	81 e0       	ldi	r24, 0x01	; 1
    1988:	60 e0       	ldi	r22, 0x00	; 0
    198a:	40 e0       	ldi	r20, 0x00	; 0
    198c:	0e 94 96 1b 	call	0x372c	; 0x372c <DIO_enu_SetPinValue>
    DIO_enu_SetPinValue(STEPPER_MOTOR_PORT, STEPPER_MOTOR_PIN2, DIO_U8_LOW);
    1990:	81 e0       	ldi	r24, 0x01	; 1
    1992:	61 e0       	ldi	r22, 0x01	; 1
    1994:	40 e0       	ldi	r20, 0x00	; 0
    1996:	0e 94 96 1b 	call	0x372c	; 0x372c <DIO_enu_SetPinValue>
    DIO_enu_SetPinValue(STEPPER_MOTOR_PORT, STEPPER_MOTOR_PIN3, DIO_U8_LOW);
    199a:	81 e0       	ldi	r24, 0x01	; 1
    199c:	62 e0       	ldi	r22, 0x02	; 2
    199e:	40 e0       	ldi	r20, 0x00	; 0
    19a0:	0e 94 96 1b 	call	0x372c	; 0x372c <DIO_enu_SetPinValue>
    DIO_enu_SetPinValue(STEPPER_MOTOR_PORT, STEPPER_MOTOR_PIN4, DIO_U8_LOW);
    19a4:	81 e0       	ldi	r24, 0x01	; 1
    19a6:	63 e0       	ldi	r22, 0x03	; 3
    19a8:	40 e0       	ldi	r20, 0x00	; 0
    19aa:	0e 94 96 1b 	call	0x372c	; 0x372c <DIO_enu_SetPinValue>

    return STATE_OK;
    19ae:	81 e0       	ldi	r24, 0x01	; 1
}
    19b0:	cf 91       	pop	r28
    19b2:	df 91       	pop	r29
    19b4:	08 95       	ret

000019b6 <STEP_Motor_enu_Rotate>:
ES_t STEP_Motor_enu_Rotate(u8 Copy_u8_Direction, u16 Copy_u16_Angle)
{
    19b6:	df 93       	push	r29
    19b8:	cf 93       	push	r28
    19ba:	cd b7       	in	r28, 0x3d	; 61
    19bc:	de b7       	in	r29, 0x3e	; 62
    19be:	a5 97       	sbiw	r28, 0x25	; 37
    19c0:	0f b6       	in	r0, 0x3f	; 63
    19c2:	f8 94       	cli
    19c4:	de bf       	out	0x3e, r29	; 62
    19c6:	0f be       	out	0x3f, r0	; 63
    19c8:	cd bf       	out	0x3d, r28	; 61
    19ca:	8b a3       	std	Y+35, r24	; 0x23
    19cc:	7d a3       	std	Y+37, r23	; 0x25
    19ce:	6c a3       	std	Y+36, r22	; 0x24
    u8 Local_u8_errorState = STATE_OK;
    19d0:	81 e0       	ldi	r24, 0x01	; 1
    19d2:	8a a3       	std	Y+34, r24	; 0x22
    if ((Copy_u8_Direction == CW || Copy_u8_Direction == CCW) && (Copy_u16_Angle >= 0 && Copy_u16_Angle <= 360))
    19d4:	8b a1       	ldd	r24, Y+35	; 0x23
    19d6:	81 30       	cpi	r24, 0x01	; 1
    19d8:	21 f0       	breq	.+8      	; 0x19e2 <STEP_Motor_enu_Rotate+0x2c>
    19da:	8b a1       	ldd	r24, Y+35	; 0x23
    19dc:	88 23       	and	r24, r24
    19de:	09 f0       	breq	.+2      	; 0x19e2 <STEP_Motor_enu_Rotate+0x2c>
    19e0:	a5 c1       	rjmp	.+842    	; 0x1d2c <STEP_Motor_enu_Rotate+0x376>
    19e2:	8c a1       	ldd	r24, Y+36	; 0x24
    19e4:	9d a1       	ldd	r25, Y+37	; 0x25
    19e6:	21 e0       	ldi	r18, 0x01	; 1
    19e8:	89 36       	cpi	r24, 0x69	; 105
    19ea:	92 07       	cpc	r25, r18
    19ec:	08 f0       	brcs	.+2      	; 0x19f0 <STEP_Motor_enu_Rotate+0x3a>
    19ee:	9e c1       	rjmp	.+828    	; 0x1d2c <STEP_Motor_enu_Rotate+0x376>
    {
        u8 state = MOTOR_PINS_STATE; // 0000 1111
    19f0:	8f e0       	ldi	r24, 0x0F	; 15
    19f2:	89 a3       	std	Y+33, r24	; 0x21
        u16 Local_u16_numOFSteps = Copy_u16_Angle / STEP_ANGLE;
    19f4:	8c a1       	ldd	r24, Y+36	; 0x24
    19f6:	9d a1       	ldd	r25, Y+37	; 0x25
    19f8:	2a e5       	ldi	r18, 0x5A	; 90
    19fa:	30 e0       	ldi	r19, 0x00	; 0
    19fc:	b9 01       	movw	r22, r18
    19fe:	0e 94 c4 1e 	call	0x3d88	; 0x3d88 <__udivmodhi4>
    1a02:	cb 01       	movw	r24, r22
    1a04:	98 a3       	std	Y+32, r25	; 0x20
    1a06:	8f 8f       	std	Y+31, r24	; 0x1f
        if (Copy_u8_Direction == CW)
    1a08:	8b a1       	ldd	r24, Y+35	; 0x23
    1a0a:	81 30       	cpi	r24, 0x01	; 1
    1a0c:	09 f0       	breq	.+2      	; 0x1a10 <STEP_Motor_enu_Rotate+0x5a>
    1a0e:	c5 c0       	rjmp	.+394    	; 0x1b9a <STEP_Motor_enu_Rotate+0x1e4>
        {
            for (u8 Local_u8_Iterator = 0; Local_u8_Iterator < Local_u16_numOFSteps; Local_u8_Iterator++)
    1a10:	1e 8e       	std	Y+30, r1	; 0x1e
    1a12:	b9 c0       	rjmp	.+370    	; 0x1b86 <STEP_Motor_enu_Rotate+0x1d0>
            {
                state &=  3<<(Local_u8_Iterator%4);
    1a14:	8e 8d       	ldd	r24, Y+30	; 0x1e
    1a16:	88 2f       	mov	r24, r24
    1a18:	90 e0       	ldi	r25, 0x00	; 0
    1a1a:	9c 01       	movw	r18, r24
    1a1c:	23 70       	andi	r18, 0x03	; 3
    1a1e:	30 70       	andi	r19, 0x00	; 0
    1a20:	83 e0       	ldi	r24, 0x03	; 3
    1a22:	90 e0       	ldi	r25, 0x00	; 0
    1a24:	02 2e       	mov	r0, r18
    1a26:	02 c0       	rjmp	.+4      	; 0x1a2c <STEP_Motor_enu_Rotate+0x76>
    1a28:	88 0f       	add	r24, r24
    1a2a:	99 1f       	adc	r25, r25
    1a2c:	0a 94       	dec	r0
    1a2e:	e2 f7       	brpl	.-8      	; 0x1a28 <STEP_Motor_enu_Rotate+0x72>
    1a30:	98 2f       	mov	r25, r24
    1a32:	89 a1       	ldd	r24, Y+33	; 0x21
    1a34:	89 23       	and	r24, r25
    1a36:	89 a3       	std	Y+33, r24	; 0x21
                if((Local_u8_Iterator%4) == 3) state = EDGE_STATE;
    1a38:	8e 8d       	ldd	r24, Y+30	; 0x1e
    1a3a:	88 2f       	mov	r24, r24
    1a3c:	90 e0       	ldi	r25, 0x00	; 0
    1a3e:	83 70       	andi	r24, 0x03	; 3
    1a40:	90 70       	andi	r25, 0x00	; 0
    1a42:	83 30       	cpi	r24, 0x03	; 3
    1a44:	91 05       	cpc	r25, r1
    1a46:	11 f4       	brne	.+4      	; 0x1a4c <STEP_Motor_enu_Rotate+0x96>
    1a48:	89 e0       	ldi	r24, 0x09	; 9
    1a4a:	89 a3       	std	Y+33, r24	; 0x21
                DIO_enu_SetPinValue(STEPPER_MOTOR_PORT, STEPPER_MOTOR_PIN4, (state>>SHIFT_0BIT)&MASK_BIT);
    1a4c:	89 a1       	ldd	r24, Y+33	; 0x21
    1a4e:	98 2f       	mov	r25, r24
    1a50:	91 70       	andi	r25, 0x01	; 1
    1a52:	81 e0       	ldi	r24, 0x01	; 1
    1a54:	63 e0       	ldi	r22, 0x03	; 3
    1a56:	49 2f       	mov	r20, r25
    1a58:	0e 94 96 1b 	call	0x372c	; 0x372c <DIO_enu_SetPinValue>
                DIO_enu_SetPinValue(STEPPER_MOTOR_PORT, STEPPER_MOTOR_PIN3, (state>>SHIFT_1BIT)&MASK_BIT);
    1a5c:	89 a1       	ldd	r24, Y+33	; 0x21
    1a5e:	86 95       	lsr	r24
    1a60:	98 2f       	mov	r25, r24
    1a62:	91 70       	andi	r25, 0x01	; 1
    1a64:	81 e0       	ldi	r24, 0x01	; 1
    1a66:	62 e0       	ldi	r22, 0x02	; 2
    1a68:	49 2f       	mov	r20, r25
    1a6a:	0e 94 96 1b 	call	0x372c	; 0x372c <DIO_enu_SetPinValue>
                DIO_enu_SetPinValue(STEPPER_MOTOR_PORT, STEPPER_MOTOR_PIN2, (state>>SHIFT_2BIT)&MASK_BIT);
    1a6e:	89 a1       	ldd	r24, Y+33	; 0x21
    1a70:	86 95       	lsr	r24
    1a72:	86 95       	lsr	r24
    1a74:	98 2f       	mov	r25, r24
    1a76:	91 70       	andi	r25, 0x01	; 1
    1a78:	81 e0       	ldi	r24, 0x01	; 1
    1a7a:	61 e0       	ldi	r22, 0x01	; 1
    1a7c:	49 2f       	mov	r20, r25
    1a7e:	0e 94 96 1b 	call	0x372c	; 0x372c <DIO_enu_SetPinValue>
                DIO_enu_SetPinValue(STEPPER_MOTOR_PORT, STEPPER_MOTOR_PIN1, (state>>SHIFT_3BIT)&MASK_BIT);
    1a82:	89 a1       	ldd	r24, Y+33	; 0x21
    1a84:	86 95       	lsr	r24
    1a86:	86 95       	lsr	r24
    1a88:	86 95       	lsr	r24
    1a8a:	98 2f       	mov	r25, r24
    1a8c:	91 70       	andi	r25, 0x01	; 1
    1a8e:	81 e0       	ldi	r24, 0x01	; 1
    1a90:	60 e0       	ldi	r22, 0x00	; 0
    1a92:	49 2f       	mov	r20, r25
    1a94:	0e 94 96 1b 	call	0x372c	; 0x372c <DIO_enu_SetPinValue>
    1a98:	80 e0       	ldi	r24, 0x00	; 0
    1a9a:	90 e0       	ldi	r25, 0x00	; 0
    1a9c:	aa ef       	ldi	r26, 0xFA	; 250
    1a9e:	b2 e4       	ldi	r27, 0x42	; 66
    1aa0:	89 8f       	std	Y+25, r24	; 0x19
    1aa2:	9a 8f       	std	Y+26, r25	; 0x1a
    1aa4:	ab 8f       	std	Y+27, r26	; 0x1b
    1aa6:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1aa8:	69 8d       	ldd	r22, Y+25	; 0x19
    1aaa:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1aac:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1aae:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1ab0:	20 e0       	ldi	r18, 0x00	; 0
    1ab2:	30 e0       	ldi	r19, 0x00	; 0
    1ab4:	4a e7       	ldi	r20, 0x7A	; 122
    1ab6:	55 e4       	ldi	r21, 0x45	; 69
    1ab8:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1abc:	dc 01       	movw	r26, r24
    1abe:	cb 01       	movw	r24, r22
    1ac0:	8d 8b       	std	Y+21, r24	; 0x15
    1ac2:	9e 8b       	std	Y+22, r25	; 0x16
    1ac4:	af 8b       	std	Y+23, r26	; 0x17
    1ac6:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1ac8:	6d 89       	ldd	r22, Y+21	; 0x15
    1aca:	7e 89       	ldd	r23, Y+22	; 0x16
    1acc:	8f 89       	ldd	r24, Y+23	; 0x17
    1ace:	98 8d       	ldd	r25, Y+24	; 0x18
    1ad0:	20 e0       	ldi	r18, 0x00	; 0
    1ad2:	30 e0       	ldi	r19, 0x00	; 0
    1ad4:	40 e8       	ldi	r20, 0x80	; 128
    1ad6:	5f e3       	ldi	r21, 0x3F	; 63
    1ad8:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    1adc:	88 23       	and	r24, r24
    1ade:	2c f4       	brge	.+10     	; 0x1aea <STEP_Motor_enu_Rotate+0x134>
		__ticks = 1;
    1ae0:	81 e0       	ldi	r24, 0x01	; 1
    1ae2:	90 e0       	ldi	r25, 0x00	; 0
    1ae4:	9c 8b       	std	Y+20, r25	; 0x14
    1ae6:	8b 8b       	std	Y+19, r24	; 0x13
    1ae8:	3f c0       	rjmp	.+126    	; 0x1b68 <STEP_Motor_enu_Rotate+0x1b2>
	else if (__tmp > 65535)
    1aea:	6d 89       	ldd	r22, Y+21	; 0x15
    1aec:	7e 89       	ldd	r23, Y+22	; 0x16
    1aee:	8f 89       	ldd	r24, Y+23	; 0x17
    1af0:	98 8d       	ldd	r25, Y+24	; 0x18
    1af2:	20 e0       	ldi	r18, 0x00	; 0
    1af4:	3f ef       	ldi	r19, 0xFF	; 255
    1af6:	4f e7       	ldi	r20, 0x7F	; 127
    1af8:	57 e4       	ldi	r21, 0x47	; 71
    1afa:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    1afe:	18 16       	cp	r1, r24
    1b00:	4c f5       	brge	.+82     	; 0x1b54 <STEP_Motor_enu_Rotate+0x19e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1b02:	69 8d       	ldd	r22, Y+25	; 0x19
    1b04:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1b06:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1b08:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1b0a:	20 e0       	ldi	r18, 0x00	; 0
    1b0c:	30 e0       	ldi	r19, 0x00	; 0
    1b0e:	40 e2       	ldi	r20, 0x20	; 32
    1b10:	51 e4       	ldi	r21, 0x41	; 65
    1b12:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1b16:	dc 01       	movw	r26, r24
    1b18:	cb 01       	movw	r24, r22
    1b1a:	bc 01       	movw	r22, r24
    1b1c:	cd 01       	movw	r24, r26
    1b1e:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1b22:	dc 01       	movw	r26, r24
    1b24:	cb 01       	movw	r24, r22
    1b26:	9c 8b       	std	Y+20, r25	; 0x14
    1b28:	8b 8b       	std	Y+19, r24	; 0x13
    1b2a:	0f c0       	rjmp	.+30     	; 0x1b4a <STEP_Motor_enu_Rotate+0x194>
    1b2c:	80 e9       	ldi	r24, 0x90	; 144
    1b2e:	91 e0       	ldi	r25, 0x01	; 1
    1b30:	9a 8b       	std	Y+18, r25	; 0x12
    1b32:	89 8b       	std	Y+17, r24	; 0x11
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1b34:	89 89       	ldd	r24, Y+17	; 0x11
    1b36:	9a 89       	ldd	r25, Y+18	; 0x12
    1b38:	01 97       	sbiw	r24, 0x01	; 1
    1b3a:	f1 f7       	brne	.-4      	; 0x1b38 <STEP_Motor_enu_Rotate+0x182>
    1b3c:	9a 8b       	std	Y+18, r25	; 0x12
    1b3e:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1b40:	8b 89       	ldd	r24, Y+19	; 0x13
    1b42:	9c 89       	ldd	r25, Y+20	; 0x14
    1b44:	01 97       	sbiw	r24, 0x01	; 1
    1b46:	9c 8b       	std	Y+20, r25	; 0x14
    1b48:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1b4a:	8b 89       	ldd	r24, Y+19	; 0x13
    1b4c:	9c 89       	ldd	r25, Y+20	; 0x14
    1b4e:	00 97       	sbiw	r24, 0x00	; 0
    1b50:	69 f7       	brne	.-38     	; 0x1b2c <STEP_Motor_enu_Rotate+0x176>
    1b52:	14 c0       	rjmp	.+40     	; 0x1b7c <STEP_Motor_enu_Rotate+0x1c6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1b54:	6d 89       	ldd	r22, Y+21	; 0x15
    1b56:	7e 89       	ldd	r23, Y+22	; 0x16
    1b58:	8f 89       	ldd	r24, Y+23	; 0x17
    1b5a:	98 8d       	ldd	r25, Y+24	; 0x18
    1b5c:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1b60:	dc 01       	movw	r26, r24
    1b62:	cb 01       	movw	r24, r22
    1b64:	9c 8b       	std	Y+20, r25	; 0x14
    1b66:	8b 8b       	std	Y+19, r24	; 0x13
    1b68:	8b 89       	ldd	r24, Y+19	; 0x13
    1b6a:	9c 89       	ldd	r25, Y+20	; 0x14
    1b6c:	98 8b       	std	Y+16, r25	; 0x10
    1b6e:	8f 87       	std	Y+15, r24	; 0x0f
    1b70:	8f 85       	ldd	r24, Y+15	; 0x0f
    1b72:	98 89       	ldd	r25, Y+16	; 0x10
    1b74:	01 97       	sbiw	r24, 0x01	; 1
    1b76:	f1 f7       	brne	.-4      	; 0x1b74 <STEP_Motor_enu_Rotate+0x1be>
    1b78:	98 8b       	std	Y+16, r25	; 0x10
    1b7a:	8f 87       	std	Y+15, r24	; 0x0f
                _delay_ms(delay);
                state = 0x0F;
    1b7c:	8f e0       	ldi	r24, 0x0F	; 15
    1b7e:	89 a3       	std	Y+33, r24	; 0x21
    {
        u8 state = MOTOR_PINS_STATE; // 0000 1111
        u16 Local_u16_numOFSteps = Copy_u16_Angle / STEP_ANGLE;
        if (Copy_u8_Direction == CW)
        {
            for (u8 Local_u8_Iterator = 0; Local_u8_Iterator < Local_u16_numOFSteps; Local_u8_Iterator++)
    1b80:	8e 8d       	ldd	r24, Y+30	; 0x1e
    1b82:	8f 5f       	subi	r24, 0xFF	; 255
    1b84:	8e 8f       	std	Y+30, r24	; 0x1e
    1b86:	8e 8d       	ldd	r24, Y+30	; 0x1e
    1b88:	28 2f       	mov	r18, r24
    1b8a:	30 e0       	ldi	r19, 0x00	; 0
    1b8c:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1b8e:	98 a1       	ldd	r25, Y+32	; 0x20
    1b90:	28 17       	cp	r18, r24
    1b92:	39 07       	cpc	r19, r25
    1b94:	08 f4       	brcc	.+2      	; 0x1b98 <STEP_Motor_enu_Rotate+0x1e2>
    1b96:	3e cf       	rjmp	.-388    	; 0x1a14 <STEP_Motor_enu_Rotate+0x5e>
    1b98:	ca c0       	rjmp	.+404    	; 0x1d2e <STEP_Motor_enu_Rotate+0x378>
                DIO_enu_SetPinValue(STEPPER_MOTOR_PORT, STEPPER_MOTOR_PIN1, (state>>SHIFT_3BIT)&MASK_BIT);
                _delay_ms(delay);
                state = 0x0F;
            }
        }
        else if (Copy_u8_Direction == CCW)
    1b9a:	8b a1       	ldd	r24, Y+35	; 0x23
    1b9c:	88 23       	and	r24, r24
    1b9e:	09 f0       	breq	.+2      	; 0x1ba2 <STEP_Motor_enu_Rotate+0x1ec>
    1ba0:	c6 c0       	rjmp	.+396    	; 0x1d2e <STEP_Motor_enu_Rotate+0x378>
        {
            for (u8 Local_u8_Iterator = 0; Local_u8_Iterator < Local_u16_numOFSteps; Local_u8_Iterator++)
    1ba2:	1d 8e       	std	Y+29, r1	; 0x1d
    1ba4:	b9 c0       	rjmp	.+370    	; 0x1d18 <STEP_Motor_enu_Rotate+0x362>
            {
                state &=  3<<(Local_u8_Iterator%4);
    1ba6:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1ba8:	88 2f       	mov	r24, r24
    1baa:	90 e0       	ldi	r25, 0x00	; 0
    1bac:	9c 01       	movw	r18, r24
    1bae:	23 70       	andi	r18, 0x03	; 3
    1bb0:	30 70       	andi	r19, 0x00	; 0
    1bb2:	83 e0       	ldi	r24, 0x03	; 3
    1bb4:	90 e0       	ldi	r25, 0x00	; 0
    1bb6:	02 2e       	mov	r0, r18
    1bb8:	02 c0       	rjmp	.+4      	; 0x1bbe <STEP_Motor_enu_Rotate+0x208>
    1bba:	88 0f       	add	r24, r24
    1bbc:	99 1f       	adc	r25, r25
    1bbe:	0a 94       	dec	r0
    1bc0:	e2 f7       	brpl	.-8      	; 0x1bba <STEP_Motor_enu_Rotate+0x204>
    1bc2:	98 2f       	mov	r25, r24
    1bc4:	89 a1       	ldd	r24, Y+33	; 0x21
    1bc6:	89 23       	and	r24, r25
    1bc8:	89 a3       	std	Y+33, r24	; 0x21
                if((Local_u8_Iterator%4) == 3) state = EDGE_STATE;
    1bca:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1bcc:	88 2f       	mov	r24, r24
    1bce:	90 e0       	ldi	r25, 0x00	; 0
    1bd0:	83 70       	andi	r24, 0x03	; 3
    1bd2:	90 70       	andi	r25, 0x00	; 0
    1bd4:	83 30       	cpi	r24, 0x03	; 3
    1bd6:	91 05       	cpc	r25, r1
    1bd8:	11 f4       	brne	.+4      	; 0x1bde <STEP_Motor_enu_Rotate+0x228>
    1bda:	89 e0       	ldi	r24, 0x09	; 9
    1bdc:	89 a3       	std	Y+33, r24	; 0x21
                DIO_enu_SetPinValue(STEPPER_MOTOR_PORT, STEPPER_MOTOR_PIN1, (state>>SHIFT_0BIT)&MASK_BIT);
    1bde:	89 a1       	ldd	r24, Y+33	; 0x21
    1be0:	98 2f       	mov	r25, r24
    1be2:	91 70       	andi	r25, 0x01	; 1
    1be4:	81 e0       	ldi	r24, 0x01	; 1
    1be6:	60 e0       	ldi	r22, 0x00	; 0
    1be8:	49 2f       	mov	r20, r25
    1bea:	0e 94 96 1b 	call	0x372c	; 0x372c <DIO_enu_SetPinValue>
                DIO_enu_SetPinValue(STEPPER_MOTOR_PORT, STEPPER_MOTOR_PIN2, (state>>SHIFT_1BIT)&MASK_BIT);
    1bee:	89 a1       	ldd	r24, Y+33	; 0x21
    1bf0:	86 95       	lsr	r24
    1bf2:	98 2f       	mov	r25, r24
    1bf4:	91 70       	andi	r25, 0x01	; 1
    1bf6:	81 e0       	ldi	r24, 0x01	; 1
    1bf8:	61 e0       	ldi	r22, 0x01	; 1
    1bfa:	49 2f       	mov	r20, r25
    1bfc:	0e 94 96 1b 	call	0x372c	; 0x372c <DIO_enu_SetPinValue>
                DIO_enu_SetPinValue(STEPPER_MOTOR_PORT, STEPPER_MOTOR_PIN3, (state>>SHIFT_2BIT)&MASK_BIT);
    1c00:	89 a1       	ldd	r24, Y+33	; 0x21
    1c02:	86 95       	lsr	r24
    1c04:	86 95       	lsr	r24
    1c06:	98 2f       	mov	r25, r24
    1c08:	91 70       	andi	r25, 0x01	; 1
    1c0a:	81 e0       	ldi	r24, 0x01	; 1
    1c0c:	62 e0       	ldi	r22, 0x02	; 2
    1c0e:	49 2f       	mov	r20, r25
    1c10:	0e 94 96 1b 	call	0x372c	; 0x372c <DIO_enu_SetPinValue>
                DIO_enu_SetPinValue(STEPPER_MOTOR_PORT, STEPPER_MOTOR_PIN4, (state>>SHIFT_3BIT)&MASK_BIT);
    1c14:	89 a1       	ldd	r24, Y+33	; 0x21
    1c16:	86 95       	lsr	r24
    1c18:	86 95       	lsr	r24
    1c1a:	86 95       	lsr	r24
    1c1c:	98 2f       	mov	r25, r24
    1c1e:	91 70       	andi	r25, 0x01	; 1
    1c20:	81 e0       	ldi	r24, 0x01	; 1
    1c22:	63 e0       	ldi	r22, 0x03	; 3
    1c24:	49 2f       	mov	r20, r25
    1c26:	0e 94 96 1b 	call	0x372c	; 0x372c <DIO_enu_SetPinValue>
    1c2a:	80 e0       	ldi	r24, 0x00	; 0
    1c2c:	90 e0       	ldi	r25, 0x00	; 0
    1c2e:	aa ef       	ldi	r26, 0xFA	; 250
    1c30:	b2 e4       	ldi	r27, 0x42	; 66
    1c32:	8b 87       	std	Y+11, r24	; 0x0b
    1c34:	9c 87       	std	Y+12, r25	; 0x0c
    1c36:	ad 87       	std	Y+13, r26	; 0x0d
    1c38:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1c3a:	6b 85       	ldd	r22, Y+11	; 0x0b
    1c3c:	7c 85       	ldd	r23, Y+12	; 0x0c
    1c3e:	8d 85       	ldd	r24, Y+13	; 0x0d
    1c40:	9e 85       	ldd	r25, Y+14	; 0x0e
    1c42:	20 e0       	ldi	r18, 0x00	; 0
    1c44:	30 e0       	ldi	r19, 0x00	; 0
    1c46:	4a e7       	ldi	r20, 0x7A	; 122
    1c48:	55 e4       	ldi	r21, 0x45	; 69
    1c4a:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1c4e:	dc 01       	movw	r26, r24
    1c50:	cb 01       	movw	r24, r22
    1c52:	8f 83       	std	Y+7, r24	; 0x07
    1c54:	98 87       	std	Y+8, r25	; 0x08
    1c56:	a9 87       	std	Y+9, r26	; 0x09
    1c58:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1c5a:	6f 81       	ldd	r22, Y+7	; 0x07
    1c5c:	78 85       	ldd	r23, Y+8	; 0x08
    1c5e:	89 85       	ldd	r24, Y+9	; 0x09
    1c60:	9a 85       	ldd	r25, Y+10	; 0x0a
    1c62:	20 e0       	ldi	r18, 0x00	; 0
    1c64:	30 e0       	ldi	r19, 0x00	; 0
    1c66:	40 e8       	ldi	r20, 0x80	; 128
    1c68:	5f e3       	ldi	r21, 0x3F	; 63
    1c6a:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    1c6e:	88 23       	and	r24, r24
    1c70:	2c f4       	brge	.+10     	; 0x1c7c <STEP_Motor_enu_Rotate+0x2c6>
		__ticks = 1;
    1c72:	81 e0       	ldi	r24, 0x01	; 1
    1c74:	90 e0       	ldi	r25, 0x00	; 0
    1c76:	9e 83       	std	Y+6, r25	; 0x06
    1c78:	8d 83       	std	Y+5, r24	; 0x05
    1c7a:	3f c0       	rjmp	.+126    	; 0x1cfa <STEP_Motor_enu_Rotate+0x344>
	else if (__tmp > 65535)
    1c7c:	6f 81       	ldd	r22, Y+7	; 0x07
    1c7e:	78 85       	ldd	r23, Y+8	; 0x08
    1c80:	89 85       	ldd	r24, Y+9	; 0x09
    1c82:	9a 85       	ldd	r25, Y+10	; 0x0a
    1c84:	20 e0       	ldi	r18, 0x00	; 0
    1c86:	3f ef       	ldi	r19, 0xFF	; 255
    1c88:	4f e7       	ldi	r20, 0x7F	; 127
    1c8a:	57 e4       	ldi	r21, 0x47	; 71
    1c8c:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    1c90:	18 16       	cp	r1, r24
    1c92:	4c f5       	brge	.+82     	; 0x1ce6 <STEP_Motor_enu_Rotate+0x330>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1c94:	6b 85       	ldd	r22, Y+11	; 0x0b
    1c96:	7c 85       	ldd	r23, Y+12	; 0x0c
    1c98:	8d 85       	ldd	r24, Y+13	; 0x0d
    1c9a:	9e 85       	ldd	r25, Y+14	; 0x0e
    1c9c:	20 e0       	ldi	r18, 0x00	; 0
    1c9e:	30 e0       	ldi	r19, 0x00	; 0
    1ca0:	40 e2       	ldi	r20, 0x20	; 32
    1ca2:	51 e4       	ldi	r21, 0x41	; 65
    1ca4:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1ca8:	dc 01       	movw	r26, r24
    1caa:	cb 01       	movw	r24, r22
    1cac:	bc 01       	movw	r22, r24
    1cae:	cd 01       	movw	r24, r26
    1cb0:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1cb4:	dc 01       	movw	r26, r24
    1cb6:	cb 01       	movw	r24, r22
    1cb8:	9e 83       	std	Y+6, r25	; 0x06
    1cba:	8d 83       	std	Y+5, r24	; 0x05
    1cbc:	0f c0       	rjmp	.+30     	; 0x1cdc <STEP_Motor_enu_Rotate+0x326>
    1cbe:	80 e9       	ldi	r24, 0x90	; 144
    1cc0:	91 e0       	ldi	r25, 0x01	; 1
    1cc2:	9c 83       	std	Y+4, r25	; 0x04
    1cc4:	8b 83       	std	Y+3, r24	; 0x03
    1cc6:	8b 81       	ldd	r24, Y+3	; 0x03
    1cc8:	9c 81       	ldd	r25, Y+4	; 0x04
    1cca:	01 97       	sbiw	r24, 0x01	; 1
    1ccc:	f1 f7       	brne	.-4      	; 0x1cca <STEP_Motor_enu_Rotate+0x314>
    1cce:	9c 83       	std	Y+4, r25	; 0x04
    1cd0:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1cd2:	8d 81       	ldd	r24, Y+5	; 0x05
    1cd4:	9e 81       	ldd	r25, Y+6	; 0x06
    1cd6:	01 97       	sbiw	r24, 0x01	; 1
    1cd8:	9e 83       	std	Y+6, r25	; 0x06
    1cda:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1cdc:	8d 81       	ldd	r24, Y+5	; 0x05
    1cde:	9e 81       	ldd	r25, Y+6	; 0x06
    1ce0:	00 97       	sbiw	r24, 0x00	; 0
    1ce2:	69 f7       	brne	.-38     	; 0x1cbe <STEP_Motor_enu_Rotate+0x308>
    1ce4:	14 c0       	rjmp	.+40     	; 0x1d0e <STEP_Motor_enu_Rotate+0x358>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1ce6:	6f 81       	ldd	r22, Y+7	; 0x07
    1ce8:	78 85       	ldd	r23, Y+8	; 0x08
    1cea:	89 85       	ldd	r24, Y+9	; 0x09
    1cec:	9a 85       	ldd	r25, Y+10	; 0x0a
    1cee:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1cf2:	dc 01       	movw	r26, r24
    1cf4:	cb 01       	movw	r24, r22
    1cf6:	9e 83       	std	Y+6, r25	; 0x06
    1cf8:	8d 83       	std	Y+5, r24	; 0x05
    1cfa:	8d 81       	ldd	r24, Y+5	; 0x05
    1cfc:	9e 81       	ldd	r25, Y+6	; 0x06
    1cfe:	9a 83       	std	Y+2, r25	; 0x02
    1d00:	89 83       	std	Y+1, r24	; 0x01
    1d02:	89 81       	ldd	r24, Y+1	; 0x01
    1d04:	9a 81       	ldd	r25, Y+2	; 0x02
    1d06:	01 97       	sbiw	r24, 0x01	; 1
    1d08:	f1 f7       	brne	.-4      	; 0x1d06 <STEP_Motor_enu_Rotate+0x350>
    1d0a:	9a 83       	std	Y+2, r25	; 0x02
    1d0c:	89 83       	std	Y+1, r24	; 0x01
                _delay_ms(delay);
                state = 0x0F;
    1d0e:	8f e0       	ldi	r24, 0x0F	; 15
    1d10:	89 a3       	std	Y+33, r24	; 0x21
                state = 0x0F;
            }
        }
        else if (Copy_u8_Direction == CCW)
        {
            for (u8 Local_u8_Iterator = 0; Local_u8_Iterator < Local_u16_numOFSteps; Local_u8_Iterator++)
    1d12:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1d14:	8f 5f       	subi	r24, 0xFF	; 255
    1d16:	8d 8f       	std	Y+29, r24	; 0x1d
    1d18:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1d1a:	28 2f       	mov	r18, r24
    1d1c:	30 e0       	ldi	r19, 0x00	; 0
    1d1e:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1d20:	98 a1       	ldd	r25, Y+32	; 0x20
    1d22:	28 17       	cp	r18, r24
    1d24:	39 07       	cpc	r19, r25
    1d26:	08 f4       	brcc	.+2      	; 0x1d2a <STEP_Motor_enu_Rotate+0x374>
    1d28:	3e cf       	rjmp	.-388    	; 0x1ba6 <STEP_Motor_enu_Rotate+0x1f0>
    1d2a:	01 c0       	rjmp	.+2      	; 0x1d2e <STEP_Motor_enu_Rotate+0x378>
                state = 0x0F;
            }
        }
    }else
    {
        Local_u8_errorState = STATE_NOT_OK;
    1d2c:	1a a2       	std	Y+34, r1	; 0x22
    }
    return Local_u8_errorState;
    1d2e:	8a a1       	ldd	r24, Y+34	; 0x22
}
    1d30:	a5 96       	adiw	r28, 0x25	; 37
    1d32:	0f b6       	in	r0, 0x3f	; 63
    1d34:	f8 94       	cli
    1d36:	de bf       	out	0x3e, r29	; 62
    1d38:	0f be       	out	0x3f, r0	; 63
    1d3a:	cd bf       	out	0x3d, r28	; 61
    1d3c:	cf 91       	pop	r28
    1d3e:	df 91       	pop	r29
    1d40:	08 95       	ret

00001d42 <STEP_Motor_enu_Stop>:

ES_t STEP_Motor_enu_Stop()
{
    1d42:	df 93       	push	r29
    1d44:	cf 93       	push	r28
    1d46:	cd b7       	in	r28, 0x3d	; 61
    1d48:	de b7       	in	r29, 0x3e	; 62
    1d4a:	2e 97       	sbiw	r28, 0x0e	; 14
    1d4c:	0f b6       	in	r0, 0x3f	; 63
    1d4e:	f8 94       	cli
    1d50:	de bf       	out	0x3e, r29	; 62
    1d52:	0f be       	out	0x3f, r0	; 63
    1d54:	cd bf       	out	0x3d, r28	; 61
    DIO_enu_SetPinValue(STEPPER_MOTOR_PORT, STEPPER_MOTOR_PIN1, DIO_U8_LOW);
    1d56:	81 e0       	ldi	r24, 0x01	; 1
    1d58:	60 e0       	ldi	r22, 0x00	; 0
    1d5a:	40 e0       	ldi	r20, 0x00	; 0
    1d5c:	0e 94 96 1b 	call	0x372c	; 0x372c <DIO_enu_SetPinValue>
    DIO_enu_SetPinValue(STEPPER_MOTOR_PORT, STEPPER_MOTOR_PIN2, DIO_U8_LOW);
    1d60:	81 e0       	ldi	r24, 0x01	; 1
    1d62:	61 e0       	ldi	r22, 0x01	; 1
    1d64:	40 e0       	ldi	r20, 0x00	; 0
    1d66:	0e 94 96 1b 	call	0x372c	; 0x372c <DIO_enu_SetPinValue>
    DIO_enu_SetPinValue(STEPPER_MOTOR_PORT, STEPPER_MOTOR_PIN3, DIO_U8_LOW);
    1d6a:	81 e0       	ldi	r24, 0x01	; 1
    1d6c:	62 e0       	ldi	r22, 0x02	; 2
    1d6e:	40 e0       	ldi	r20, 0x00	; 0
    1d70:	0e 94 96 1b 	call	0x372c	; 0x372c <DIO_enu_SetPinValue>
    DIO_enu_SetPinValue(STEPPER_MOTOR_PORT, STEPPER_MOTOR_PIN4, DIO_U8_LOW);
    1d74:	81 e0       	ldi	r24, 0x01	; 1
    1d76:	63 e0       	ldi	r22, 0x03	; 3
    1d78:	40 e0       	ldi	r20, 0x00	; 0
    1d7a:	0e 94 96 1b 	call	0x372c	; 0x372c <DIO_enu_SetPinValue>
    1d7e:	80 e0       	ldi	r24, 0x00	; 0
    1d80:	90 e0       	ldi	r25, 0x00	; 0
    1d82:	aa ef       	ldi	r26, 0xFA	; 250
    1d84:	b2 e4       	ldi	r27, 0x42	; 66
    1d86:	8b 87       	std	Y+11, r24	; 0x0b
    1d88:	9c 87       	std	Y+12, r25	; 0x0c
    1d8a:	ad 87       	std	Y+13, r26	; 0x0d
    1d8c:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1d8e:	6b 85       	ldd	r22, Y+11	; 0x0b
    1d90:	7c 85       	ldd	r23, Y+12	; 0x0c
    1d92:	8d 85       	ldd	r24, Y+13	; 0x0d
    1d94:	9e 85       	ldd	r25, Y+14	; 0x0e
    1d96:	20 e0       	ldi	r18, 0x00	; 0
    1d98:	30 e0       	ldi	r19, 0x00	; 0
    1d9a:	4a e7       	ldi	r20, 0x7A	; 122
    1d9c:	55 e4       	ldi	r21, 0x45	; 69
    1d9e:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1da2:	dc 01       	movw	r26, r24
    1da4:	cb 01       	movw	r24, r22
    1da6:	8f 83       	std	Y+7, r24	; 0x07
    1da8:	98 87       	std	Y+8, r25	; 0x08
    1daa:	a9 87       	std	Y+9, r26	; 0x09
    1dac:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1dae:	6f 81       	ldd	r22, Y+7	; 0x07
    1db0:	78 85       	ldd	r23, Y+8	; 0x08
    1db2:	89 85       	ldd	r24, Y+9	; 0x09
    1db4:	9a 85       	ldd	r25, Y+10	; 0x0a
    1db6:	20 e0       	ldi	r18, 0x00	; 0
    1db8:	30 e0       	ldi	r19, 0x00	; 0
    1dba:	40 e8       	ldi	r20, 0x80	; 128
    1dbc:	5f e3       	ldi	r21, 0x3F	; 63
    1dbe:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    1dc2:	88 23       	and	r24, r24
    1dc4:	2c f4       	brge	.+10     	; 0x1dd0 <STEP_Motor_enu_Stop+0x8e>
		__ticks = 1;
    1dc6:	81 e0       	ldi	r24, 0x01	; 1
    1dc8:	90 e0       	ldi	r25, 0x00	; 0
    1dca:	9e 83       	std	Y+6, r25	; 0x06
    1dcc:	8d 83       	std	Y+5, r24	; 0x05
    1dce:	3f c0       	rjmp	.+126    	; 0x1e4e <STEP_Motor_enu_Stop+0x10c>
	else if (__tmp > 65535)
    1dd0:	6f 81       	ldd	r22, Y+7	; 0x07
    1dd2:	78 85       	ldd	r23, Y+8	; 0x08
    1dd4:	89 85       	ldd	r24, Y+9	; 0x09
    1dd6:	9a 85       	ldd	r25, Y+10	; 0x0a
    1dd8:	20 e0       	ldi	r18, 0x00	; 0
    1dda:	3f ef       	ldi	r19, 0xFF	; 255
    1ddc:	4f e7       	ldi	r20, 0x7F	; 127
    1dde:	57 e4       	ldi	r21, 0x47	; 71
    1de0:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    1de4:	18 16       	cp	r1, r24
    1de6:	4c f5       	brge	.+82     	; 0x1e3a <STEP_Motor_enu_Stop+0xf8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1de8:	6b 85       	ldd	r22, Y+11	; 0x0b
    1dea:	7c 85       	ldd	r23, Y+12	; 0x0c
    1dec:	8d 85       	ldd	r24, Y+13	; 0x0d
    1dee:	9e 85       	ldd	r25, Y+14	; 0x0e
    1df0:	20 e0       	ldi	r18, 0x00	; 0
    1df2:	30 e0       	ldi	r19, 0x00	; 0
    1df4:	40 e2       	ldi	r20, 0x20	; 32
    1df6:	51 e4       	ldi	r21, 0x41	; 65
    1df8:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1dfc:	dc 01       	movw	r26, r24
    1dfe:	cb 01       	movw	r24, r22
    1e00:	bc 01       	movw	r22, r24
    1e02:	cd 01       	movw	r24, r26
    1e04:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1e08:	dc 01       	movw	r26, r24
    1e0a:	cb 01       	movw	r24, r22
    1e0c:	9e 83       	std	Y+6, r25	; 0x06
    1e0e:	8d 83       	std	Y+5, r24	; 0x05
    1e10:	0f c0       	rjmp	.+30     	; 0x1e30 <STEP_Motor_enu_Stop+0xee>
    1e12:	80 e9       	ldi	r24, 0x90	; 144
    1e14:	91 e0       	ldi	r25, 0x01	; 1
    1e16:	9c 83       	std	Y+4, r25	; 0x04
    1e18:	8b 83       	std	Y+3, r24	; 0x03
    1e1a:	8b 81       	ldd	r24, Y+3	; 0x03
    1e1c:	9c 81       	ldd	r25, Y+4	; 0x04
    1e1e:	01 97       	sbiw	r24, 0x01	; 1
    1e20:	f1 f7       	brne	.-4      	; 0x1e1e <STEP_Motor_enu_Stop+0xdc>
    1e22:	9c 83       	std	Y+4, r25	; 0x04
    1e24:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1e26:	8d 81       	ldd	r24, Y+5	; 0x05
    1e28:	9e 81       	ldd	r25, Y+6	; 0x06
    1e2a:	01 97       	sbiw	r24, 0x01	; 1
    1e2c:	9e 83       	std	Y+6, r25	; 0x06
    1e2e:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1e30:	8d 81       	ldd	r24, Y+5	; 0x05
    1e32:	9e 81       	ldd	r25, Y+6	; 0x06
    1e34:	00 97       	sbiw	r24, 0x00	; 0
    1e36:	69 f7       	brne	.-38     	; 0x1e12 <STEP_Motor_enu_Stop+0xd0>
    1e38:	14 c0       	rjmp	.+40     	; 0x1e62 <STEP_Motor_enu_Stop+0x120>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1e3a:	6f 81       	ldd	r22, Y+7	; 0x07
    1e3c:	78 85       	ldd	r23, Y+8	; 0x08
    1e3e:	89 85       	ldd	r24, Y+9	; 0x09
    1e40:	9a 85       	ldd	r25, Y+10	; 0x0a
    1e42:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1e46:	dc 01       	movw	r26, r24
    1e48:	cb 01       	movw	r24, r22
    1e4a:	9e 83       	std	Y+6, r25	; 0x06
    1e4c:	8d 83       	std	Y+5, r24	; 0x05
    1e4e:	8d 81       	ldd	r24, Y+5	; 0x05
    1e50:	9e 81       	ldd	r25, Y+6	; 0x06
    1e52:	9a 83       	std	Y+2, r25	; 0x02
    1e54:	89 83       	std	Y+1, r24	; 0x01
    1e56:	89 81       	ldd	r24, Y+1	; 0x01
    1e58:	9a 81       	ldd	r25, Y+2	; 0x02
    1e5a:	01 97       	sbiw	r24, 0x01	; 1
    1e5c:	f1 f7       	brne	.-4      	; 0x1e5a <STEP_Motor_enu_Stop+0x118>
    1e5e:	9a 83       	std	Y+2, r25	; 0x02
    1e60:	89 83       	std	Y+1, r24	; 0x01
    _delay_ms(delay);
    return STATE_OK;
    1e62:	81 e0       	ldi	r24, 0x01	; 1
}
    1e64:	2e 96       	adiw	r28, 0x0e	; 14
    1e66:	0f b6       	in	r0, 0x3f	; 63
    1e68:	f8 94       	cli
    1e6a:	de bf       	out	0x3e, r29	; 62
    1e6c:	0f be       	out	0x3f, r0	; 63
    1e6e:	cd bf       	out	0x3d, r28	; 61
    1e70:	cf 91       	pop	r28
    1e72:	df 91       	pop	r29
    1e74:	08 95       	ret

00001e76 <sevenSeg_enu_displayNum>:

u8 SevenSeg_au8_Numbers[10] = {0b00111111,0b00000110,0b01011011,0b01001111,0b01100110,
                              0b01101101,0b01111101,0b00000111,0b01111111,0b01101111};
u8 SevenSeg_au8_Pins[7] = {PIN_U8_A,PIN_U8_B,PIN_U8_C,PIN_U8_D,PIN_U8_E,PIN_U8_F,PIN_U8_G};   
ES_t sevenSeg_enu_displayNum(u8 Copy_u8_Num)
{
    1e76:	df 93       	push	r29
    1e78:	cf 93       	push	r28
    1e7a:	00 d0       	rcall	.+0      	; 0x1e7c <sevenSeg_enu_displayNum+0x6>
    1e7c:	0f 92       	push	r0
    1e7e:	cd b7       	in	r28, 0x3d	; 61
    1e80:	de b7       	in	r29, 0x3e	; 62
    1e82:	8b 83       	std	Y+3, r24	; 0x03
    u8 Local_u8_errorState = STATE_OK;
    1e84:	81 e0       	ldi	r24, 0x01	; 1
    1e86:	8a 83       	std	Y+2, r24	; 0x02
    if(Copy_u8_Num>= 0 && Copy_u8_Num<=9){
    1e88:	8b 81       	ldd	r24, Y+3	; 0x03
    1e8a:	8a 30       	cpi	r24, 0x0A	; 10
    1e8c:	70 f5       	brcc	.+92     	; 0x1eea <sevenSeg_enu_displayNum+0x74>
        DIO_enu_SetPortDirection(SEVEN_SEGMENT_U8_PORT,DIO_U8_OUTPUT);
    1e8e:	80 e0       	ldi	r24, 0x00	; 0
    1e90:	61 e0       	ldi	r22, 0x01	; 1
    1e92:	0e 94 7e 1d 	call	0x3afc	; 0x3afc <DIO_enu_SetPortDirection>
        for (u8 Local_u8_iterator = 0; Local_u8_iterator < 7; Local_u8_iterator++)
    1e96:	19 82       	std	Y+1, r1	; 0x01
    1e98:	24 c0       	rjmp	.+72     	; 0x1ee2 <sevenSeg_enu_displayNum+0x6c>
        {
           DIO_enu_SetPinValue(SEVEN_SEGMENT_U8_PORT,SevenSeg_au8_Pins[Local_u8_iterator],(SevenSeg_au8_Numbers[Copy_u8_Num]>>Local_u8_iterator) & MASK_BIT);
    1e9a:	89 81       	ldd	r24, Y+1	; 0x01
    1e9c:	88 2f       	mov	r24, r24
    1e9e:	90 e0       	ldi	r25, 0x00	; 0
    1ea0:	fc 01       	movw	r30, r24
    1ea2:	ef 5c       	subi	r30, 0xCF	; 207
    1ea4:	fe 4f       	sbci	r31, 0xFE	; 254
    1ea6:	40 81       	ld	r20, Z
    1ea8:	8b 81       	ldd	r24, Y+3	; 0x03
    1eaa:	88 2f       	mov	r24, r24
    1eac:	90 e0       	ldi	r25, 0x00	; 0
    1eae:	fc 01       	movw	r30, r24
    1eb0:	e9 5d       	subi	r30, 0xD9	; 217
    1eb2:	fe 4f       	sbci	r31, 0xFE	; 254
    1eb4:	80 81       	ld	r24, Z
    1eb6:	28 2f       	mov	r18, r24
    1eb8:	30 e0       	ldi	r19, 0x00	; 0
    1eba:	89 81       	ldd	r24, Y+1	; 0x01
    1ebc:	88 2f       	mov	r24, r24
    1ebe:	90 e0       	ldi	r25, 0x00	; 0
    1ec0:	b9 01       	movw	r22, r18
    1ec2:	02 c0       	rjmp	.+4      	; 0x1ec8 <sevenSeg_enu_displayNum+0x52>
    1ec4:	75 95       	asr	r23
    1ec6:	67 95       	ror	r22
    1ec8:	8a 95       	dec	r24
    1eca:	e2 f7       	brpl	.-8      	; 0x1ec4 <sevenSeg_enu_displayNum+0x4e>
    1ecc:	cb 01       	movw	r24, r22
    1ece:	98 2f       	mov	r25, r24
    1ed0:	91 70       	andi	r25, 0x01	; 1
    1ed2:	80 e0       	ldi	r24, 0x00	; 0
    1ed4:	64 2f       	mov	r22, r20
    1ed6:	49 2f       	mov	r20, r25
    1ed8:	0e 94 96 1b 	call	0x372c	; 0x372c <DIO_enu_SetPinValue>
ES_t sevenSeg_enu_displayNum(u8 Copy_u8_Num)
{
    u8 Local_u8_errorState = STATE_OK;
    if(Copy_u8_Num>= 0 && Copy_u8_Num<=9){
        DIO_enu_SetPortDirection(SEVEN_SEGMENT_U8_PORT,DIO_U8_OUTPUT);
        for (u8 Local_u8_iterator = 0; Local_u8_iterator < 7; Local_u8_iterator++)
    1edc:	89 81       	ldd	r24, Y+1	; 0x01
    1ede:	8f 5f       	subi	r24, 0xFF	; 255
    1ee0:	89 83       	std	Y+1, r24	; 0x01
    1ee2:	89 81       	ldd	r24, Y+1	; 0x01
    1ee4:	87 30       	cpi	r24, 0x07	; 7
    1ee6:	c8 f2       	brcs	.-78     	; 0x1e9a <sevenSeg_enu_displayNum+0x24>
    1ee8:	01 c0       	rjmp	.+2      	; 0x1eec <sevenSeg_enu_displayNum+0x76>
        {
           DIO_enu_SetPinValue(SEVEN_SEGMENT_U8_PORT,SevenSeg_au8_Pins[Local_u8_iterator],(SevenSeg_au8_Numbers[Copy_u8_Num]>>Local_u8_iterator) & MASK_BIT);
        }

    }else{
        Local_u8_errorState = STATE_NOT_OK;
    1eea:	1a 82       	std	Y+2, r1	; 0x02
    }
    return Local_u8_errorState;
    1eec:	8a 81       	ldd	r24, Y+2	; 0x02
    1eee:	0f 90       	pop	r0
    1ef0:	0f 90       	pop	r0
    1ef2:	0f 90       	pop	r0
    1ef4:	cf 91       	pop	r28
    1ef6:	df 91       	pop	r29
    1ef8:	08 95       	ret

00001efa <LCD_enu_SendCmnd>:
#include"../../2-HAL/LCD/LCD_Private.h"
#include"../../2-HAL/LCD/LCD_Config.h"



ES_t LCD_enu_SendCmnd(u8 Copy_u8_Cmdn){
    1efa:	df 93       	push	r29
    1efc:	cf 93       	push	r28
    1efe:	cd b7       	in	r28, 0x3d	; 61
    1f00:	de b7       	in	r29, 0x3e	; 62
    1f02:	e1 97       	sbiw	r28, 0x31	; 49
    1f04:	0f b6       	in	r0, 0x3f	; 63
    1f06:	f8 94       	cli
    1f08:	de bf       	out	0x3e, r29	; 62
    1f0a:	0f be       	out	0x3f, r0	; 63
    1f0c:	cd bf       	out	0x3d, r28	; 61
    1f0e:	89 ab       	std	Y+49, r24	; 0x31
        DIO_enu_SetPinValue(LCD_U8_E_PORT,LCD_U8_E_PIN,DIO_U8_LOW );
        return STATE_OK;
    #elif LCD_U8_MODE == LCD_U8_MODE_4BIT
    /*Send Command at 4-bit mode*/
        /* RS = 0 */
        DIO_enu_SetPinValue(LCD_U8_RS_PORT,LCD_U8_RS_PIN,DIO_U8_LOW);
    1f10:	80 e0       	ldi	r24, 0x00	; 0
    1f12:	61 e0       	ldi	r22, 0x01	; 1
    1f14:	40 e0       	ldi	r20, 0x00	; 0
    1f16:	0e 94 96 1b 	call	0x372c	; 0x372c <DIO_enu_SetPinValue>
        /* RW = 0 */
        DIO_enu_SetPinValue(LCD_U8_RW_PORT,LCD_U8_RW_PIN,DIO_U8_LOW);
    1f1a:	80 e0       	ldi	r24, 0x00	; 0
    1f1c:	60 e0       	ldi	r22, 0x00	; 0
    1f1e:	40 e0       	ldi	r20, 0x00	; 0
    1f20:	0e 94 96 1b 	call	0x372c	; 0x372c <DIO_enu_SetPinValue>
        /*Write Command*/
        DIO_enu_SetPinValue(LCD_U8_DATA_PORT,D7,(Copy_u8_Cmdn>> SHIFT_7BIT) & MASK_BIT);
    1f24:	89 a9       	ldd	r24, Y+49	; 0x31
    1f26:	98 2f       	mov	r25, r24
    1f28:	99 1f       	adc	r25, r25
    1f2a:	99 27       	eor	r25, r25
    1f2c:	99 1f       	adc	r25, r25
    1f2e:	80 e0       	ldi	r24, 0x00	; 0
    1f30:	66 e0       	ldi	r22, 0x06	; 6
    1f32:	49 2f       	mov	r20, r25
    1f34:	0e 94 96 1b 	call	0x372c	; 0x372c <DIO_enu_SetPinValue>
        DIO_enu_SetPinValue(LCD_U8_DATA_PORT,D6,(Copy_u8_Cmdn>> SHIFT_6BIT) & MASK_BIT);
    1f38:	89 a9       	ldd	r24, Y+49	; 0x31
    1f3a:	82 95       	swap	r24
    1f3c:	86 95       	lsr	r24
    1f3e:	86 95       	lsr	r24
    1f40:	83 70       	andi	r24, 0x03	; 3
    1f42:	98 2f       	mov	r25, r24
    1f44:	91 70       	andi	r25, 0x01	; 1
    1f46:	80 e0       	ldi	r24, 0x00	; 0
    1f48:	65 e0       	ldi	r22, 0x05	; 5
    1f4a:	49 2f       	mov	r20, r25
    1f4c:	0e 94 96 1b 	call	0x372c	; 0x372c <DIO_enu_SetPinValue>
        DIO_enu_SetPinValue(LCD_U8_DATA_PORT,D5,(Copy_u8_Cmdn>> SHIFT_5BIT) & MASK_BIT);
    1f50:	89 a9       	ldd	r24, Y+49	; 0x31
    1f52:	82 95       	swap	r24
    1f54:	86 95       	lsr	r24
    1f56:	87 70       	andi	r24, 0x07	; 7
    1f58:	98 2f       	mov	r25, r24
    1f5a:	91 70       	andi	r25, 0x01	; 1
    1f5c:	80 e0       	ldi	r24, 0x00	; 0
    1f5e:	64 e0       	ldi	r22, 0x04	; 4
    1f60:	49 2f       	mov	r20, r25
    1f62:	0e 94 96 1b 	call	0x372c	; 0x372c <DIO_enu_SetPinValue>
        DIO_enu_SetPinValue(LCD_U8_DATA_PORT,D4,(Copy_u8_Cmdn>> SHIFT_4BIT) & MASK_BIT);
    1f66:	89 a9       	ldd	r24, Y+49	; 0x31
    1f68:	82 95       	swap	r24
    1f6a:	8f 70       	andi	r24, 0x0F	; 15
    1f6c:	98 2f       	mov	r25, r24
    1f6e:	91 70       	andi	r25, 0x01	; 1
    1f70:	80 e0       	ldi	r24, 0x00	; 0
    1f72:	63 e0       	ldi	r22, 0x03	; 3
    1f74:	49 2f       	mov	r20, r25
    1f76:	0e 94 96 1b 	call	0x372c	; 0x372c <DIO_enu_SetPinValue>
        /* E = 1 */
        DIO_enu_SetPinValue(LCD_U8_E_PORT,LCD_U8_E_PIN,DIO_U8_HIGH );
    1f7a:	80 e0       	ldi	r24, 0x00	; 0
    1f7c:	62 e0       	ldi	r22, 0x02	; 2
    1f7e:	41 e0       	ldi	r20, 0x01	; 1
    1f80:	0e 94 96 1b 	call	0x372c	; 0x372c <DIO_enu_SetPinValue>
    1f84:	80 e0       	ldi	r24, 0x00	; 0
    1f86:	90 e0       	ldi	r25, 0x00	; 0
    1f88:	a0 e8       	ldi	r26, 0x80	; 128
    1f8a:	bf e3       	ldi	r27, 0x3F	; 63
    1f8c:	8d a7       	std	Y+45, r24	; 0x2d
    1f8e:	9e a7       	std	Y+46, r25	; 0x2e
    1f90:	af a7       	std	Y+47, r26	; 0x2f
    1f92:	b8 ab       	std	Y+48, r27	; 0x30
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    1f94:	6d a5       	ldd	r22, Y+45	; 0x2d
    1f96:	7e a5       	ldd	r23, Y+46	; 0x2e
    1f98:	8f a5       	ldd	r24, Y+47	; 0x2f
    1f9a:	98 a9       	ldd	r25, Y+48	; 0x30
    1f9c:	2b ea       	ldi	r18, 0xAB	; 171
    1f9e:	3a ea       	ldi	r19, 0xAA	; 170
    1fa0:	4a ea       	ldi	r20, 0xAA	; 170
    1fa2:	50 e4       	ldi	r21, 0x40	; 64
    1fa4:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1fa8:	dc 01       	movw	r26, r24
    1faa:	cb 01       	movw	r24, r22
    1fac:	89 a7       	std	Y+41, r24	; 0x29
    1fae:	9a a7       	std	Y+42, r25	; 0x2a
    1fb0:	ab a7       	std	Y+43, r26	; 0x2b
    1fb2:	bc a7       	std	Y+44, r27	; 0x2c
	if (__tmp < 1.0)
    1fb4:	69 a5       	ldd	r22, Y+41	; 0x29
    1fb6:	7a a5       	ldd	r23, Y+42	; 0x2a
    1fb8:	8b a5       	ldd	r24, Y+43	; 0x2b
    1fba:	9c a5       	ldd	r25, Y+44	; 0x2c
    1fbc:	20 e0       	ldi	r18, 0x00	; 0
    1fbe:	30 e0       	ldi	r19, 0x00	; 0
    1fc0:	40 e8       	ldi	r20, 0x80	; 128
    1fc2:	5f e3       	ldi	r21, 0x3F	; 63
    1fc4:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    1fc8:	88 23       	and	r24, r24
    1fca:	1c f4       	brge	.+6      	; 0x1fd2 <LCD_enu_SendCmnd+0xd8>
		__ticks = 1;
    1fcc:	81 e0       	ldi	r24, 0x01	; 1
    1fce:	88 a7       	std	Y+40, r24	; 0x28
    1fd0:	91 c0       	rjmp	.+290    	; 0x20f4 <LCD_enu_SendCmnd+0x1fa>
	else if (__tmp > 255)
    1fd2:	69 a5       	ldd	r22, Y+41	; 0x29
    1fd4:	7a a5       	ldd	r23, Y+42	; 0x2a
    1fd6:	8b a5       	ldd	r24, Y+43	; 0x2b
    1fd8:	9c a5       	ldd	r25, Y+44	; 0x2c
    1fda:	20 e0       	ldi	r18, 0x00	; 0
    1fdc:	30 e0       	ldi	r19, 0x00	; 0
    1fde:	4f e7       	ldi	r20, 0x7F	; 127
    1fe0:	53 e4       	ldi	r21, 0x43	; 67
    1fe2:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    1fe6:	18 16       	cp	r1, r24
    1fe8:	0c f0       	brlt	.+2      	; 0x1fec <LCD_enu_SendCmnd+0xf2>
    1fea:	7b c0       	rjmp	.+246    	; 0x20e2 <LCD_enu_SendCmnd+0x1e8>
	{
		_delay_ms(__us / 1000.0);
    1fec:	6d a5       	ldd	r22, Y+45	; 0x2d
    1fee:	7e a5       	ldd	r23, Y+46	; 0x2e
    1ff0:	8f a5       	ldd	r24, Y+47	; 0x2f
    1ff2:	98 a9       	ldd	r25, Y+48	; 0x30
    1ff4:	20 e0       	ldi	r18, 0x00	; 0
    1ff6:	30 e0       	ldi	r19, 0x00	; 0
    1ff8:	4a e7       	ldi	r20, 0x7A	; 122
    1ffa:	54 e4       	ldi	r21, 0x44	; 68
    1ffc:	0e 94 11 03 	call	0x622	; 0x622 <__divsf3>
    2000:	dc 01       	movw	r26, r24
    2002:	cb 01       	movw	r24, r22
    2004:	8c a3       	std	Y+36, r24	; 0x24
    2006:	9d a3       	std	Y+37, r25	; 0x25
    2008:	ae a3       	std	Y+38, r26	; 0x26
    200a:	bf a3       	std	Y+39, r27	; 0x27
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    200c:	6c a1       	ldd	r22, Y+36	; 0x24
    200e:	7d a1       	ldd	r23, Y+37	; 0x25
    2010:	8e a1       	ldd	r24, Y+38	; 0x26
    2012:	9f a1       	ldd	r25, Y+39	; 0x27
    2014:	20 e0       	ldi	r18, 0x00	; 0
    2016:	30 e0       	ldi	r19, 0x00	; 0
    2018:	4a e7       	ldi	r20, 0x7A	; 122
    201a:	55 e4       	ldi	r21, 0x45	; 69
    201c:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2020:	dc 01       	movw	r26, r24
    2022:	cb 01       	movw	r24, r22
    2024:	88 a3       	std	Y+32, r24	; 0x20
    2026:	99 a3       	std	Y+33, r25	; 0x21
    2028:	aa a3       	std	Y+34, r26	; 0x22
    202a:	bb a3       	std	Y+35, r27	; 0x23
	if (__tmp < 1.0)
    202c:	68 a1       	ldd	r22, Y+32	; 0x20
    202e:	79 a1       	ldd	r23, Y+33	; 0x21
    2030:	8a a1       	ldd	r24, Y+34	; 0x22
    2032:	9b a1       	ldd	r25, Y+35	; 0x23
    2034:	20 e0       	ldi	r18, 0x00	; 0
    2036:	30 e0       	ldi	r19, 0x00	; 0
    2038:	40 e8       	ldi	r20, 0x80	; 128
    203a:	5f e3       	ldi	r21, 0x3F	; 63
    203c:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    2040:	88 23       	and	r24, r24
    2042:	2c f4       	brge	.+10     	; 0x204e <LCD_enu_SendCmnd+0x154>
		__ticks = 1;
    2044:	81 e0       	ldi	r24, 0x01	; 1
    2046:	90 e0       	ldi	r25, 0x00	; 0
    2048:	9f 8f       	std	Y+31, r25	; 0x1f
    204a:	8e 8f       	std	Y+30, r24	; 0x1e
    204c:	3f c0       	rjmp	.+126    	; 0x20cc <LCD_enu_SendCmnd+0x1d2>
	else if (__tmp > 65535)
    204e:	68 a1       	ldd	r22, Y+32	; 0x20
    2050:	79 a1       	ldd	r23, Y+33	; 0x21
    2052:	8a a1       	ldd	r24, Y+34	; 0x22
    2054:	9b a1       	ldd	r25, Y+35	; 0x23
    2056:	20 e0       	ldi	r18, 0x00	; 0
    2058:	3f ef       	ldi	r19, 0xFF	; 255
    205a:	4f e7       	ldi	r20, 0x7F	; 127
    205c:	57 e4       	ldi	r21, 0x47	; 71
    205e:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    2062:	18 16       	cp	r1, r24
    2064:	4c f5       	brge	.+82     	; 0x20b8 <LCD_enu_SendCmnd+0x1be>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2066:	6c a1       	ldd	r22, Y+36	; 0x24
    2068:	7d a1       	ldd	r23, Y+37	; 0x25
    206a:	8e a1       	ldd	r24, Y+38	; 0x26
    206c:	9f a1       	ldd	r25, Y+39	; 0x27
    206e:	20 e0       	ldi	r18, 0x00	; 0
    2070:	30 e0       	ldi	r19, 0x00	; 0
    2072:	40 e2       	ldi	r20, 0x20	; 32
    2074:	51 e4       	ldi	r21, 0x41	; 65
    2076:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    207a:	dc 01       	movw	r26, r24
    207c:	cb 01       	movw	r24, r22
    207e:	bc 01       	movw	r22, r24
    2080:	cd 01       	movw	r24, r26
    2082:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2086:	dc 01       	movw	r26, r24
    2088:	cb 01       	movw	r24, r22
    208a:	9f 8f       	std	Y+31, r25	; 0x1f
    208c:	8e 8f       	std	Y+30, r24	; 0x1e
    208e:	0f c0       	rjmp	.+30     	; 0x20ae <LCD_enu_SendCmnd+0x1b4>
    2090:	80 e9       	ldi	r24, 0x90	; 144
    2092:	91 e0       	ldi	r25, 0x01	; 1
    2094:	9d 8f       	std	Y+29, r25	; 0x1d
    2096:	8c 8f       	std	Y+28, r24	; 0x1c
    2098:	8c 8d       	ldd	r24, Y+28	; 0x1c
    209a:	9d 8d       	ldd	r25, Y+29	; 0x1d
    209c:	01 97       	sbiw	r24, 0x01	; 1
    209e:	f1 f7       	brne	.-4      	; 0x209c <LCD_enu_SendCmnd+0x1a2>
    20a0:	9d 8f       	std	Y+29, r25	; 0x1d
    20a2:	8c 8f       	std	Y+28, r24	; 0x1c
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    20a4:	8e 8d       	ldd	r24, Y+30	; 0x1e
    20a6:	9f 8d       	ldd	r25, Y+31	; 0x1f
    20a8:	01 97       	sbiw	r24, 0x01	; 1
    20aa:	9f 8f       	std	Y+31, r25	; 0x1f
    20ac:	8e 8f       	std	Y+30, r24	; 0x1e
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    20ae:	8e 8d       	ldd	r24, Y+30	; 0x1e
    20b0:	9f 8d       	ldd	r25, Y+31	; 0x1f
    20b2:	00 97       	sbiw	r24, 0x00	; 0
    20b4:	69 f7       	brne	.-38     	; 0x2090 <LCD_enu_SendCmnd+0x196>
    20b6:	24 c0       	rjmp	.+72     	; 0x2100 <LCD_enu_SendCmnd+0x206>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    20b8:	68 a1       	ldd	r22, Y+32	; 0x20
    20ba:	79 a1       	ldd	r23, Y+33	; 0x21
    20bc:	8a a1       	ldd	r24, Y+34	; 0x22
    20be:	9b a1       	ldd	r25, Y+35	; 0x23
    20c0:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    20c4:	dc 01       	movw	r26, r24
    20c6:	cb 01       	movw	r24, r22
    20c8:	9f 8f       	std	Y+31, r25	; 0x1f
    20ca:	8e 8f       	std	Y+30, r24	; 0x1e
    20cc:	8e 8d       	ldd	r24, Y+30	; 0x1e
    20ce:	9f 8d       	ldd	r25, Y+31	; 0x1f
    20d0:	9b 8f       	std	Y+27, r25	; 0x1b
    20d2:	8a 8f       	std	Y+26, r24	; 0x1a
    20d4:	8a 8d       	ldd	r24, Y+26	; 0x1a
    20d6:	9b 8d       	ldd	r25, Y+27	; 0x1b
    20d8:	01 97       	sbiw	r24, 0x01	; 1
    20da:	f1 f7       	brne	.-4      	; 0x20d8 <LCD_enu_SendCmnd+0x1de>
    20dc:	9b 8f       	std	Y+27, r25	; 0x1b
    20de:	8a 8f       	std	Y+26, r24	; 0x1a
    20e0:	0f c0       	rjmp	.+30     	; 0x2100 <LCD_enu_SendCmnd+0x206>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    20e2:	69 a5       	ldd	r22, Y+41	; 0x29
    20e4:	7a a5       	ldd	r23, Y+42	; 0x2a
    20e6:	8b a5       	ldd	r24, Y+43	; 0x2b
    20e8:	9c a5       	ldd	r25, Y+44	; 0x2c
    20ea:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    20ee:	dc 01       	movw	r26, r24
    20f0:	cb 01       	movw	r24, r22
    20f2:	88 a7       	std	Y+40, r24	; 0x28
    20f4:	88 a5       	ldd	r24, Y+40	; 0x28
    20f6:	89 8f       	std	Y+25, r24	; 0x19
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    20f8:	89 8d       	ldd	r24, Y+25	; 0x19
    20fa:	8a 95       	dec	r24
    20fc:	f1 f7       	brne	.-4      	; 0x20fa <LCD_enu_SendCmnd+0x200>
    20fe:	89 8f       	std	Y+25, r24	; 0x19
        _delay_us(1);
        /* E = 0 */
        DIO_enu_SetPinValue(LCD_U8_E_PORT,LCD_U8_E_PIN,DIO_U8_LOW );
    2100:	80 e0       	ldi	r24, 0x00	; 0
    2102:	62 e0       	ldi	r22, 0x02	; 2
    2104:	40 e0       	ldi	r20, 0x00	; 0
    2106:	0e 94 96 1b 	call	0x372c	; 0x372c <DIO_enu_SetPinValue>
        /*Write the rest of the cmnd*/
        DIO_enu_SetPinValue(LCD_U8_DATA_PORT,D7,(Copy_u8_Cmdn>> SHIFT_3BIT) & MASK_BIT);
    210a:	89 a9       	ldd	r24, Y+49	; 0x31
    210c:	86 95       	lsr	r24
    210e:	86 95       	lsr	r24
    2110:	86 95       	lsr	r24
    2112:	98 2f       	mov	r25, r24
    2114:	91 70       	andi	r25, 0x01	; 1
    2116:	80 e0       	ldi	r24, 0x00	; 0
    2118:	66 e0       	ldi	r22, 0x06	; 6
    211a:	49 2f       	mov	r20, r25
    211c:	0e 94 96 1b 	call	0x372c	; 0x372c <DIO_enu_SetPinValue>
        DIO_enu_SetPinValue(LCD_U8_DATA_PORT,D6,(Copy_u8_Cmdn>> SHIFT_2BIT) & MASK_BIT);
    2120:	89 a9       	ldd	r24, Y+49	; 0x31
    2122:	86 95       	lsr	r24
    2124:	86 95       	lsr	r24
    2126:	98 2f       	mov	r25, r24
    2128:	91 70       	andi	r25, 0x01	; 1
    212a:	80 e0       	ldi	r24, 0x00	; 0
    212c:	65 e0       	ldi	r22, 0x05	; 5
    212e:	49 2f       	mov	r20, r25
    2130:	0e 94 96 1b 	call	0x372c	; 0x372c <DIO_enu_SetPinValue>
        DIO_enu_SetPinValue(LCD_U8_DATA_PORT,D5,(Copy_u8_Cmdn>> SHIFT_1BIT) & MASK_BIT);
    2134:	89 a9       	ldd	r24, Y+49	; 0x31
    2136:	86 95       	lsr	r24
    2138:	98 2f       	mov	r25, r24
    213a:	91 70       	andi	r25, 0x01	; 1
    213c:	80 e0       	ldi	r24, 0x00	; 0
    213e:	64 e0       	ldi	r22, 0x04	; 4
    2140:	49 2f       	mov	r20, r25
    2142:	0e 94 96 1b 	call	0x372c	; 0x372c <DIO_enu_SetPinValue>
        DIO_enu_SetPinValue(LCD_U8_DATA_PORT,D4,(Copy_u8_Cmdn>> SHIFT_0BIT) & MASK_BIT);
    2146:	89 a9       	ldd	r24, Y+49	; 0x31
    2148:	98 2f       	mov	r25, r24
    214a:	91 70       	andi	r25, 0x01	; 1
    214c:	80 e0       	ldi	r24, 0x00	; 0
    214e:	63 e0       	ldi	r22, 0x03	; 3
    2150:	49 2f       	mov	r20, r25
    2152:	0e 94 96 1b 	call	0x372c	; 0x372c <DIO_enu_SetPinValue>
        /* E = 1 */
        DIO_enu_SetPinValue(LCD_U8_E_PORT,LCD_U8_E_PIN,DIO_U8_HIGH );
    2156:	80 e0       	ldi	r24, 0x00	; 0
    2158:	62 e0       	ldi	r22, 0x02	; 2
    215a:	41 e0       	ldi	r20, 0x01	; 1
    215c:	0e 94 96 1b 	call	0x372c	; 0x372c <DIO_enu_SetPinValue>
    2160:	80 e0       	ldi	r24, 0x00	; 0
    2162:	90 e0       	ldi	r25, 0x00	; 0
    2164:	a0 e8       	ldi	r26, 0x80	; 128
    2166:	bf e3       	ldi	r27, 0x3F	; 63
    2168:	8d 8b       	std	Y+21, r24	; 0x15
    216a:	9e 8b       	std	Y+22, r25	; 0x16
    216c:	af 8b       	std	Y+23, r26	; 0x17
    216e:	b8 8f       	std	Y+24, r27	; 0x18
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    2170:	6d 89       	ldd	r22, Y+21	; 0x15
    2172:	7e 89       	ldd	r23, Y+22	; 0x16
    2174:	8f 89       	ldd	r24, Y+23	; 0x17
    2176:	98 8d       	ldd	r25, Y+24	; 0x18
    2178:	2b ea       	ldi	r18, 0xAB	; 171
    217a:	3a ea       	ldi	r19, 0xAA	; 170
    217c:	4a ea       	ldi	r20, 0xAA	; 170
    217e:	50 e4       	ldi	r21, 0x40	; 64
    2180:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2184:	dc 01       	movw	r26, r24
    2186:	cb 01       	movw	r24, r22
    2188:	89 8b       	std	Y+17, r24	; 0x11
    218a:	9a 8b       	std	Y+18, r25	; 0x12
    218c:	ab 8b       	std	Y+19, r26	; 0x13
    218e:	bc 8b       	std	Y+20, r27	; 0x14
	if (__tmp < 1.0)
    2190:	69 89       	ldd	r22, Y+17	; 0x11
    2192:	7a 89       	ldd	r23, Y+18	; 0x12
    2194:	8b 89       	ldd	r24, Y+19	; 0x13
    2196:	9c 89       	ldd	r25, Y+20	; 0x14
    2198:	20 e0       	ldi	r18, 0x00	; 0
    219a:	30 e0       	ldi	r19, 0x00	; 0
    219c:	40 e8       	ldi	r20, 0x80	; 128
    219e:	5f e3       	ldi	r21, 0x3F	; 63
    21a0:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    21a4:	88 23       	and	r24, r24
    21a6:	1c f4       	brge	.+6      	; 0x21ae <LCD_enu_SendCmnd+0x2b4>
		__ticks = 1;
    21a8:	81 e0       	ldi	r24, 0x01	; 1
    21aa:	88 8b       	std	Y+16, r24	; 0x10
    21ac:	91 c0       	rjmp	.+290    	; 0x22d0 <LCD_enu_SendCmnd+0x3d6>
	else if (__tmp > 255)
    21ae:	69 89       	ldd	r22, Y+17	; 0x11
    21b0:	7a 89       	ldd	r23, Y+18	; 0x12
    21b2:	8b 89       	ldd	r24, Y+19	; 0x13
    21b4:	9c 89       	ldd	r25, Y+20	; 0x14
    21b6:	20 e0       	ldi	r18, 0x00	; 0
    21b8:	30 e0       	ldi	r19, 0x00	; 0
    21ba:	4f e7       	ldi	r20, 0x7F	; 127
    21bc:	53 e4       	ldi	r21, 0x43	; 67
    21be:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    21c2:	18 16       	cp	r1, r24
    21c4:	0c f0       	brlt	.+2      	; 0x21c8 <LCD_enu_SendCmnd+0x2ce>
    21c6:	7b c0       	rjmp	.+246    	; 0x22be <LCD_enu_SendCmnd+0x3c4>
	{
		_delay_ms(__us / 1000.0);
    21c8:	6d 89       	ldd	r22, Y+21	; 0x15
    21ca:	7e 89       	ldd	r23, Y+22	; 0x16
    21cc:	8f 89       	ldd	r24, Y+23	; 0x17
    21ce:	98 8d       	ldd	r25, Y+24	; 0x18
    21d0:	20 e0       	ldi	r18, 0x00	; 0
    21d2:	30 e0       	ldi	r19, 0x00	; 0
    21d4:	4a e7       	ldi	r20, 0x7A	; 122
    21d6:	54 e4       	ldi	r21, 0x44	; 68
    21d8:	0e 94 11 03 	call	0x622	; 0x622 <__divsf3>
    21dc:	dc 01       	movw	r26, r24
    21de:	cb 01       	movw	r24, r22
    21e0:	8c 87       	std	Y+12, r24	; 0x0c
    21e2:	9d 87       	std	Y+13, r25	; 0x0d
    21e4:	ae 87       	std	Y+14, r26	; 0x0e
    21e6:	bf 87       	std	Y+15, r27	; 0x0f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    21e8:	6c 85       	ldd	r22, Y+12	; 0x0c
    21ea:	7d 85       	ldd	r23, Y+13	; 0x0d
    21ec:	8e 85       	ldd	r24, Y+14	; 0x0e
    21ee:	9f 85       	ldd	r25, Y+15	; 0x0f
    21f0:	20 e0       	ldi	r18, 0x00	; 0
    21f2:	30 e0       	ldi	r19, 0x00	; 0
    21f4:	4a e7       	ldi	r20, 0x7A	; 122
    21f6:	55 e4       	ldi	r21, 0x45	; 69
    21f8:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    21fc:	dc 01       	movw	r26, r24
    21fe:	cb 01       	movw	r24, r22
    2200:	88 87       	std	Y+8, r24	; 0x08
    2202:	99 87       	std	Y+9, r25	; 0x09
    2204:	aa 87       	std	Y+10, r26	; 0x0a
    2206:	bb 87       	std	Y+11, r27	; 0x0b
	if (__tmp < 1.0)
    2208:	68 85       	ldd	r22, Y+8	; 0x08
    220a:	79 85       	ldd	r23, Y+9	; 0x09
    220c:	8a 85       	ldd	r24, Y+10	; 0x0a
    220e:	9b 85       	ldd	r25, Y+11	; 0x0b
    2210:	20 e0       	ldi	r18, 0x00	; 0
    2212:	30 e0       	ldi	r19, 0x00	; 0
    2214:	40 e8       	ldi	r20, 0x80	; 128
    2216:	5f e3       	ldi	r21, 0x3F	; 63
    2218:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    221c:	88 23       	and	r24, r24
    221e:	2c f4       	brge	.+10     	; 0x222a <LCD_enu_SendCmnd+0x330>
		__ticks = 1;
    2220:	81 e0       	ldi	r24, 0x01	; 1
    2222:	90 e0       	ldi	r25, 0x00	; 0
    2224:	9f 83       	std	Y+7, r25	; 0x07
    2226:	8e 83       	std	Y+6, r24	; 0x06
    2228:	3f c0       	rjmp	.+126    	; 0x22a8 <LCD_enu_SendCmnd+0x3ae>
	else if (__tmp > 65535)
    222a:	68 85       	ldd	r22, Y+8	; 0x08
    222c:	79 85       	ldd	r23, Y+9	; 0x09
    222e:	8a 85       	ldd	r24, Y+10	; 0x0a
    2230:	9b 85       	ldd	r25, Y+11	; 0x0b
    2232:	20 e0       	ldi	r18, 0x00	; 0
    2234:	3f ef       	ldi	r19, 0xFF	; 255
    2236:	4f e7       	ldi	r20, 0x7F	; 127
    2238:	57 e4       	ldi	r21, 0x47	; 71
    223a:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    223e:	18 16       	cp	r1, r24
    2240:	4c f5       	brge	.+82     	; 0x2294 <LCD_enu_SendCmnd+0x39a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2242:	6c 85       	ldd	r22, Y+12	; 0x0c
    2244:	7d 85       	ldd	r23, Y+13	; 0x0d
    2246:	8e 85       	ldd	r24, Y+14	; 0x0e
    2248:	9f 85       	ldd	r25, Y+15	; 0x0f
    224a:	20 e0       	ldi	r18, 0x00	; 0
    224c:	30 e0       	ldi	r19, 0x00	; 0
    224e:	40 e2       	ldi	r20, 0x20	; 32
    2250:	51 e4       	ldi	r21, 0x41	; 65
    2252:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2256:	dc 01       	movw	r26, r24
    2258:	cb 01       	movw	r24, r22
    225a:	bc 01       	movw	r22, r24
    225c:	cd 01       	movw	r24, r26
    225e:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2262:	dc 01       	movw	r26, r24
    2264:	cb 01       	movw	r24, r22
    2266:	9f 83       	std	Y+7, r25	; 0x07
    2268:	8e 83       	std	Y+6, r24	; 0x06
    226a:	0f c0       	rjmp	.+30     	; 0x228a <LCD_enu_SendCmnd+0x390>
    226c:	80 e9       	ldi	r24, 0x90	; 144
    226e:	91 e0       	ldi	r25, 0x01	; 1
    2270:	9d 83       	std	Y+5, r25	; 0x05
    2272:	8c 83       	std	Y+4, r24	; 0x04
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    2274:	8c 81       	ldd	r24, Y+4	; 0x04
    2276:	9d 81       	ldd	r25, Y+5	; 0x05
    2278:	01 97       	sbiw	r24, 0x01	; 1
    227a:	f1 f7       	brne	.-4      	; 0x2278 <LCD_enu_SendCmnd+0x37e>
    227c:	9d 83       	std	Y+5, r25	; 0x05
    227e:	8c 83       	std	Y+4, r24	; 0x04
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2280:	8e 81       	ldd	r24, Y+6	; 0x06
    2282:	9f 81       	ldd	r25, Y+7	; 0x07
    2284:	01 97       	sbiw	r24, 0x01	; 1
    2286:	9f 83       	std	Y+7, r25	; 0x07
    2288:	8e 83       	std	Y+6, r24	; 0x06
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    228a:	8e 81       	ldd	r24, Y+6	; 0x06
    228c:	9f 81       	ldd	r25, Y+7	; 0x07
    228e:	00 97       	sbiw	r24, 0x00	; 0
    2290:	69 f7       	brne	.-38     	; 0x226c <LCD_enu_SendCmnd+0x372>
    2292:	24 c0       	rjmp	.+72     	; 0x22dc <LCD_enu_SendCmnd+0x3e2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2294:	68 85       	ldd	r22, Y+8	; 0x08
    2296:	79 85       	ldd	r23, Y+9	; 0x09
    2298:	8a 85       	ldd	r24, Y+10	; 0x0a
    229a:	9b 85       	ldd	r25, Y+11	; 0x0b
    229c:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    22a0:	dc 01       	movw	r26, r24
    22a2:	cb 01       	movw	r24, r22
    22a4:	9f 83       	std	Y+7, r25	; 0x07
    22a6:	8e 83       	std	Y+6, r24	; 0x06
    22a8:	8e 81       	ldd	r24, Y+6	; 0x06
    22aa:	9f 81       	ldd	r25, Y+7	; 0x07
    22ac:	9b 83       	std	Y+3, r25	; 0x03
    22ae:	8a 83       	std	Y+2, r24	; 0x02
    22b0:	8a 81       	ldd	r24, Y+2	; 0x02
    22b2:	9b 81       	ldd	r25, Y+3	; 0x03
    22b4:	01 97       	sbiw	r24, 0x01	; 1
    22b6:	f1 f7       	brne	.-4      	; 0x22b4 <LCD_enu_SendCmnd+0x3ba>
    22b8:	9b 83       	std	Y+3, r25	; 0x03
    22ba:	8a 83       	std	Y+2, r24	; 0x02
    22bc:	0f c0       	rjmp	.+30     	; 0x22dc <LCD_enu_SendCmnd+0x3e2>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    22be:	69 89       	ldd	r22, Y+17	; 0x11
    22c0:	7a 89       	ldd	r23, Y+18	; 0x12
    22c2:	8b 89       	ldd	r24, Y+19	; 0x13
    22c4:	9c 89       	ldd	r25, Y+20	; 0x14
    22c6:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    22ca:	dc 01       	movw	r26, r24
    22cc:	cb 01       	movw	r24, r22
    22ce:	88 8b       	std	Y+16, r24	; 0x10
    22d0:	88 89       	ldd	r24, Y+16	; 0x10
    22d2:	89 83       	std	Y+1, r24	; 0x01
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    22d4:	89 81       	ldd	r24, Y+1	; 0x01
    22d6:	8a 95       	dec	r24
    22d8:	f1 f7       	brne	.-4      	; 0x22d6 <LCD_enu_SendCmnd+0x3dc>
    22da:	89 83       	std	Y+1, r24	; 0x01
        _delay_us(1);
        /* E = 0 */
         DIO_enu_SetPinValue(LCD_U8_E_PORT,LCD_U8_E_PIN,DIO_U8_LOW );
    22dc:	80 e0       	ldi	r24, 0x00	; 0
    22de:	62 e0       	ldi	r22, 0x02	; 2
    22e0:	40 e0       	ldi	r20, 0x00	; 0
    22e2:	0e 94 96 1b 	call	0x372c	; 0x372c <DIO_enu_SetPinValue>
         return STATE_OK;
    22e6:	81 e0       	ldi	r24, 0x01	; 1
    #endif
}
    22e8:	e1 96       	adiw	r28, 0x31	; 49
    22ea:	0f b6       	in	r0, 0x3f	; 63
    22ec:	f8 94       	cli
    22ee:	de bf       	out	0x3e, r29	; 62
    22f0:	0f be       	out	0x3f, r0	; 63
    22f2:	cd bf       	out	0x3d, r28	; 61
    22f4:	cf 91       	pop	r28
    22f6:	df 91       	pop	r29
    22f8:	08 95       	ret

000022fa <LCD_enu_SendChar>:

ES_t LCD_enu_SendChar(u8 Copy_u8_Char){
    22fa:	df 93       	push	r29
    22fc:	cf 93       	push	r28
    22fe:	cd b7       	in	r28, 0x3d	; 61
    2300:	de b7       	in	r29, 0x3e	; 62
    2302:	e1 97       	sbiw	r28, 0x31	; 49
    2304:	0f b6       	in	r0, 0x3f	; 63
    2306:	f8 94       	cli
    2308:	de bf       	out	0x3e, r29	; 62
    230a:	0f be       	out	0x3f, r0	; 63
    230c:	cd bf       	out	0x3d, r28	; 61
    230e:	89 ab       	std	Y+49, r24	; 0x31
    /* E = 0 */
    DIO_enu_SetPinValue(LCD_U8_E_PORT,LCD_U8_E_PIN,DIO_U8_LOW );
    return STATE_OK;
    #elif LCD_U8_MODE == LCD_U8_MODE_4BIT
    /* RS = 1 */
    DIO_enu_SetPinValue(LCD_U8_RS_PORT,LCD_U8_RS_PIN,DIO_U8_HIGH);
    2310:	80 e0       	ldi	r24, 0x00	; 0
    2312:	61 e0       	ldi	r22, 0x01	; 1
    2314:	41 e0       	ldi	r20, 0x01	; 1
    2316:	0e 94 96 1b 	call	0x372c	; 0x372c <DIO_enu_SetPinValue>
    /* RW = 0 */
    DIO_enu_SetPinValue(LCD_U8_RW_PORT,LCD_U8_RW_PIN,DIO_U8_LOW);
    231a:	80 e0       	ldi	r24, 0x00	; 0
    231c:	60 e0       	ldi	r22, 0x00	; 0
    231e:	40 e0       	ldi	r20, 0x00	; 0
    2320:	0e 94 96 1b 	call	0x372c	; 0x372c <DIO_enu_SetPinValue>
    /*Write Char*/
    DIO_enu_SetPinValue(LCD_U8_DATA_PORT,D7,(Copy_u8_Char>> SHIFT_7BIT) & MASK_BIT);
    2324:	89 a9       	ldd	r24, Y+49	; 0x31
    2326:	98 2f       	mov	r25, r24
    2328:	99 1f       	adc	r25, r25
    232a:	99 27       	eor	r25, r25
    232c:	99 1f       	adc	r25, r25
    232e:	80 e0       	ldi	r24, 0x00	; 0
    2330:	66 e0       	ldi	r22, 0x06	; 6
    2332:	49 2f       	mov	r20, r25
    2334:	0e 94 96 1b 	call	0x372c	; 0x372c <DIO_enu_SetPinValue>
    DIO_enu_SetPinValue(LCD_U8_DATA_PORT,D6,(Copy_u8_Char>> SHIFT_6BIT) & MASK_BIT);
    2338:	89 a9       	ldd	r24, Y+49	; 0x31
    233a:	82 95       	swap	r24
    233c:	86 95       	lsr	r24
    233e:	86 95       	lsr	r24
    2340:	83 70       	andi	r24, 0x03	; 3
    2342:	98 2f       	mov	r25, r24
    2344:	91 70       	andi	r25, 0x01	; 1
    2346:	80 e0       	ldi	r24, 0x00	; 0
    2348:	65 e0       	ldi	r22, 0x05	; 5
    234a:	49 2f       	mov	r20, r25
    234c:	0e 94 96 1b 	call	0x372c	; 0x372c <DIO_enu_SetPinValue>
    DIO_enu_SetPinValue(LCD_U8_DATA_PORT,D5,(Copy_u8_Char>> SHIFT_5BIT) & MASK_BIT);
    2350:	89 a9       	ldd	r24, Y+49	; 0x31
    2352:	82 95       	swap	r24
    2354:	86 95       	lsr	r24
    2356:	87 70       	andi	r24, 0x07	; 7
    2358:	98 2f       	mov	r25, r24
    235a:	91 70       	andi	r25, 0x01	; 1
    235c:	80 e0       	ldi	r24, 0x00	; 0
    235e:	64 e0       	ldi	r22, 0x04	; 4
    2360:	49 2f       	mov	r20, r25
    2362:	0e 94 96 1b 	call	0x372c	; 0x372c <DIO_enu_SetPinValue>
    DIO_enu_SetPinValue(LCD_U8_DATA_PORT,D4,(Copy_u8_Char>> SHIFT_4BIT) & MASK_BIT);
    2366:	89 a9       	ldd	r24, Y+49	; 0x31
    2368:	82 95       	swap	r24
    236a:	8f 70       	andi	r24, 0x0F	; 15
    236c:	98 2f       	mov	r25, r24
    236e:	91 70       	andi	r25, 0x01	; 1
    2370:	80 e0       	ldi	r24, 0x00	; 0
    2372:	63 e0       	ldi	r22, 0x03	; 3
    2374:	49 2f       	mov	r20, r25
    2376:	0e 94 96 1b 	call	0x372c	; 0x372c <DIO_enu_SetPinValue>
    /* E = 1 */
    DIO_enu_SetPinValue(LCD_U8_E_PORT,LCD_U8_E_PIN,DIO_U8_HIGH );
    237a:	80 e0       	ldi	r24, 0x00	; 0
    237c:	62 e0       	ldi	r22, 0x02	; 2
    237e:	41 e0       	ldi	r20, 0x01	; 1
    2380:	0e 94 96 1b 	call	0x372c	; 0x372c <DIO_enu_SetPinValue>
    2384:	80 e0       	ldi	r24, 0x00	; 0
    2386:	90 e0       	ldi	r25, 0x00	; 0
    2388:	a0 e8       	ldi	r26, 0x80	; 128
    238a:	bf e3       	ldi	r27, 0x3F	; 63
    238c:	8d a7       	std	Y+45, r24	; 0x2d
    238e:	9e a7       	std	Y+46, r25	; 0x2e
    2390:	af a7       	std	Y+47, r26	; 0x2f
    2392:	b8 ab       	std	Y+48, r27	; 0x30
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    2394:	6d a5       	ldd	r22, Y+45	; 0x2d
    2396:	7e a5       	ldd	r23, Y+46	; 0x2e
    2398:	8f a5       	ldd	r24, Y+47	; 0x2f
    239a:	98 a9       	ldd	r25, Y+48	; 0x30
    239c:	2b ea       	ldi	r18, 0xAB	; 171
    239e:	3a ea       	ldi	r19, 0xAA	; 170
    23a0:	4a ea       	ldi	r20, 0xAA	; 170
    23a2:	50 e4       	ldi	r21, 0x40	; 64
    23a4:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    23a8:	dc 01       	movw	r26, r24
    23aa:	cb 01       	movw	r24, r22
    23ac:	89 a7       	std	Y+41, r24	; 0x29
    23ae:	9a a7       	std	Y+42, r25	; 0x2a
    23b0:	ab a7       	std	Y+43, r26	; 0x2b
    23b2:	bc a7       	std	Y+44, r27	; 0x2c
	if (__tmp < 1.0)
    23b4:	69 a5       	ldd	r22, Y+41	; 0x29
    23b6:	7a a5       	ldd	r23, Y+42	; 0x2a
    23b8:	8b a5       	ldd	r24, Y+43	; 0x2b
    23ba:	9c a5       	ldd	r25, Y+44	; 0x2c
    23bc:	20 e0       	ldi	r18, 0x00	; 0
    23be:	30 e0       	ldi	r19, 0x00	; 0
    23c0:	40 e8       	ldi	r20, 0x80	; 128
    23c2:	5f e3       	ldi	r21, 0x3F	; 63
    23c4:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    23c8:	88 23       	and	r24, r24
    23ca:	1c f4       	brge	.+6      	; 0x23d2 <LCD_enu_SendChar+0xd8>
		__ticks = 1;
    23cc:	81 e0       	ldi	r24, 0x01	; 1
    23ce:	88 a7       	std	Y+40, r24	; 0x28
    23d0:	91 c0       	rjmp	.+290    	; 0x24f4 <LCD_enu_SendChar+0x1fa>
	else if (__tmp > 255)
    23d2:	69 a5       	ldd	r22, Y+41	; 0x29
    23d4:	7a a5       	ldd	r23, Y+42	; 0x2a
    23d6:	8b a5       	ldd	r24, Y+43	; 0x2b
    23d8:	9c a5       	ldd	r25, Y+44	; 0x2c
    23da:	20 e0       	ldi	r18, 0x00	; 0
    23dc:	30 e0       	ldi	r19, 0x00	; 0
    23de:	4f e7       	ldi	r20, 0x7F	; 127
    23e0:	53 e4       	ldi	r21, 0x43	; 67
    23e2:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    23e6:	18 16       	cp	r1, r24
    23e8:	0c f0       	brlt	.+2      	; 0x23ec <LCD_enu_SendChar+0xf2>
    23ea:	7b c0       	rjmp	.+246    	; 0x24e2 <LCD_enu_SendChar+0x1e8>
	{
		_delay_ms(__us / 1000.0);
    23ec:	6d a5       	ldd	r22, Y+45	; 0x2d
    23ee:	7e a5       	ldd	r23, Y+46	; 0x2e
    23f0:	8f a5       	ldd	r24, Y+47	; 0x2f
    23f2:	98 a9       	ldd	r25, Y+48	; 0x30
    23f4:	20 e0       	ldi	r18, 0x00	; 0
    23f6:	30 e0       	ldi	r19, 0x00	; 0
    23f8:	4a e7       	ldi	r20, 0x7A	; 122
    23fa:	54 e4       	ldi	r21, 0x44	; 68
    23fc:	0e 94 11 03 	call	0x622	; 0x622 <__divsf3>
    2400:	dc 01       	movw	r26, r24
    2402:	cb 01       	movw	r24, r22
    2404:	8c a3       	std	Y+36, r24	; 0x24
    2406:	9d a3       	std	Y+37, r25	; 0x25
    2408:	ae a3       	std	Y+38, r26	; 0x26
    240a:	bf a3       	std	Y+39, r27	; 0x27
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    240c:	6c a1       	ldd	r22, Y+36	; 0x24
    240e:	7d a1       	ldd	r23, Y+37	; 0x25
    2410:	8e a1       	ldd	r24, Y+38	; 0x26
    2412:	9f a1       	ldd	r25, Y+39	; 0x27
    2414:	20 e0       	ldi	r18, 0x00	; 0
    2416:	30 e0       	ldi	r19, 0x00	; 0
    2418:	4a e7       	ldi	r20, 0x7A	; 122
    241a:	55 e4       	ldi	r21, 0x45	; 69
    241c:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2420:	dc 01       	movw	r26, r24
    2422:	cb 01       	movw	r24, r22
    2424:	88 a3       	std	Y+32, r24	; 0x20
    2426:	99 a3       	std	Y+33, r25	; 0x21
    2428:	aa a3       	std	Y+34, r26	; 0x22
    242a:	bb a3       	std	Y+35, r27	; 0x23
	if (__tmp < 1.0)
    242c:	68 a1       	ldd	r22, Y+32	; 0x20
    242e:	79 a1       	ldd	r23, Y+33	; 0x21
    2430:	8a a1       	ldd	r24, Y+34	; 0x22
    2432:	9b a1       	ldd	r25, Y+35	; 0x23
    2434:	20 e0       	ldi	r18, 0x00	; 0
    2436:	30 e0       	ldi	r19, 0x00	; 0
    2438:	40 e8       	ldi	r20, 0x80	; 128
    243a:	5f e3       	ldi	r21, 0x3F	; 63
    243c:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    2440:	88 23       	and	r24, r24
    2442:	2c f4       	brge	.+10     	; 0x244e <LCD_enu_SendChar+0x154>
		__ticks = 1;
    2444:	81 e0       	ldi	r24, 0x01	; 1
    2446:	90 e0       	ldi	r25, 0x00	; 0
    2448:	9f 8f       	std	Y+31, r25	; 0x1f
    244a:	8e 8f       	std	Y+30, r24	; 0x1e
    244c:	3f c0       	rjmp	.+126    	; 0x24cc <LCD_enu_SendChar+0x1d2>
	else if (__tmp > 65535)
    244e:	68 a1       	ldd	r22, Y+32	; 0x20
    2450:	79 a1       	ldd	r23, Y+33	; 0x21
    2452:	8a a1       	ldd	r24, Y+34	; 0x22
    2454:	9b a1       	ldd	r25, Y+35	; 0x23
    2456:	20 e0       	ldi	r18, 0x00	; 0
    2458:	3f ef       	ldi	r19, 0xFF	; 255
    245a:	4f e7       	ldi	r20, 0x7F	; 127
    245c:	57 e4       	ldi	r21, 0x47	; 71
    245e:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    2462:	18 16       	cp	r1, r24
    2464:	4c f5       	brge	.+82     	; 0x24b8 <LCD_enu_SendChar+0x1be>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2466:	6c a1       	ldd	r22, Y+36	; 0x24
    2468:	7d a1       	ldd	r23, Y+37	; 0x25
    246a:	8e a1       	ldd	r24, Y+38	; 0x26
    246c:	9f a1       	ldd	r25, Y+39	; 0x27
    246e:	20 e0       	ldi	r18, 0x00	; 0
    2470:	30 e0       	ldi	r19, 0x00	; 0
    2472:	40 e2       	ldi	r20, 0x20	; 32
    2474:	51 e4       	ldi	r21, 0x41	; 65
    2476:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    247a:	dc 01       	movw	r26, r24
    247c:	cb 01       	movw	r24, r22
    247e:	bc 01       	movw	r22, r24
    2480:	cd 01       	movw	r24, r26
    2482:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2486:	dc 01       	movw	r26, r24
    2488:	cb 01       	movw	r24, r22
    248a:	9f 8f       	std	Y+31, r25	; 0x1f
    248c:	8e 8f       	std	Y+30, r24	; 0x1e
    248e:	0f c0       	rjmp	.+30     	; 0x24ae <LCD_enu_SendChar+0x1b4>
    2490:	80 e9       	ldi	r24, 0x90	; 144
    2492:	91 e0       	ldi	r25, 0x01	; 1
    2494:	9d 8f       	std	Y+29, r25	; 0x1d
    2496:	8c 8f       	std	Y+28, r24	; 0x1c
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    2498:	8c 8d       	ldd	r24, Y+28	; 0x1c
    249a:	9d 8d       	ldd	r25, Y+29	; 0x1d
    249c:	01 97       	sbiw	r24, 0x01	; 1
    249e:	f1 f7       	brne	.-4      	; 0x249c <LCD_enu_SendChar+0x1a2>
    24a0:	9d 8f       	std	Y+29, r25	; 0x1d
    24a2:	8c 8f       	std	Y+28, r24	; 0x1c
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    24a4:	8e 8d       	ldd	r24, Y+30	; 0x1e
    24a6:	9f 8d       	ldd	r25, Y+31	; 0x1f
    24a8:	01 97       	sbiw	r24, 0x01	; 1
    24aa:	9f 8f       	std	Y+31, r25	; 0x1f
    24ac:	8e 8f       	std	Y+30, r24	; 0x1e
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    24ae:	8e 8d       	ldd	r24, Y+30	; 0x1e
    24b0:	9f 8d       	ldd	r25, Y+31	; 0x1f
    24b2:	00 97       	sbiw	r24, 0x00	; 0
    24b4:	69 f7       	brne	.-38     	; 0x2490 <LCD_enu_SendChar+0x196>
    24b6:	24 c0       	rjmp	.+72     	; 0x2500 <LCD_enu_SendChar+0x206>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    24b8:	68 a1       	ldd	r22, Y+32	; 0x20
    24ba:	79 a1       	ldd	r23, Y+33	; 0x21
    24bc:	8a a1       	ldd	r24, Y+34	; 0x22
    24be:	9b a1       	ldd	r25, Y+35	; 0x23
    24c0:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    24c4:	dc 01       	movw	r26, r24
    24c6:	cb 01       	movw	r24, r22
    24c8:	9f 8f       	std	Y+31, r25	; 0x1f
    24ca:	8e 8f       	std	Y+30, r24	; 0x1e
    24cc:	8e 8d       	ldd	r24, Y+30	; 0x1e
    24ce:	9f 8d       	ldd	r25, Y+31	; 0x1f
    24d0:	9b 8f       	std	Y+27, r25	; 0x1b
    24d2:	8a 8f       	std	Y+26, r24	; 0x1a
    24d4:	8a 8d       	ldd	r24, Y+26	; 0x1a
    24d6:	9b 8d       	ldd	r25, Y+27	; 0x1b
    24d8:	01 97       	sbiw	r24, 0x01	; 1
    24da:	f1 f7       	brne	.-4      	; 0x24d8 <LCD_enu_SendChar+0x1de>
    24dc:	9b 8f       	std	Y+27, r25	; 0x1b
    24de:	8a 8f       	std	Y+26, r24	; 0x1a
    24e0:	0f c0       	rjmp	.+30     	; 0x2500 <LCD_enu_SendChar+0x206>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    24e2:	69 a5       	ldd	r22, Y+41	; 0x29
    24e4:	7a a5       	ldd	r23, Y+42	; 0x2a
    24e6:	8b a5       	ldd	r24, Y+43	; 0x2b
    24e8:	9c a5       	ldd	r25, Y+44	; 0x2c
    24ea:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    24ee:	dc 01       	movw	r26, r24
    24f0:	cb 01       	movw	r24, r22
    24f2:	88 a7       	std	Y+40, r24	; 0x28
    24f4:	88 a5       	ldd	r24, Y+40	; 0x28
    24f6:	89 8f       	std	Y+25, r24	; 0x19
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    24f8:	89 8d       	ldd	r24, Y+25	; 0x19
    24fa:	8a 95       	dec	r24
    24fc:	f1 f7       	brne	.-4      	; 0x24fa <LCD_enu_SendChar+0x200>
    24fe:	89 8f       	std	Y+25, r24	; 0x19
    _delay_us(1);
    /* E = 0 */
    DIO_enu_SetPinValue(LCD_U8_E_PORT,LCD_U8_E_PIN,DIO_U8_LOW );
    2500:	80 e0       	ldi	r24, 0x00	; 0
    2502:	62 e0       	ldi	r22, 0x02	; 2
    2504:	40 e0       	ldi	r20, 0x00	; 0
    2506:	0e 94 96 1b 	call	0x372c	; 0x372c <DIO_enu_SetPinValue>
    /*Write Char*/
    DIO_enu_SetPinValue(LCD_U8_DATA_PORT,D7,(Copy_u8_Char>> SHIFT_3BIT) & MASK_BIT);
    250a:	89 a9       	ldd	r24, Y+49	; 0x31
    250c:	86 95       	lsr	r24
    250e:	86 95       	lsr	r24
    2510:	86 95       	lsr	r24
    2512:	98 2f       	mov	r25, r24
    2514:	91 70       	andi	r25, 0x01	; 1
    2516:	80 e0       	ldi	r24, 0x00	; 0
    2518:	66 e0       	ldi	r22, 0x06	; 6
    251a:	49 2f       	mov	r20, r25
    251c:	0e 94 96 1b 	call	0x372c	; 0x372c <DIO_enu_SetPinValue>
    DIO_enu_SetPinValue(LCD_U8_DATA_PORT,D6,(Copy_u8_Char>> SHIFT_2BIT) & MASK_BIT);
    2520:	89 a9       	ldd	r24, Y+49	; 0x31
    2522:	86 95       	lsr	r24
    2524:	86 95       	lsr	r24
    2526:	98 2f       	mov	r25, r24
    2528:	91 70       	andi	r25, 0x01	; 1
    252a:	80 e0       	ldi	r24, 0x00	; 0
    252c:	65 e0       	ldi	r22, 0x05	; 5
    252e:	49 2f       	mov	r20, r25
    2530:	0e 94 96 1b 	call	0x372c	; 0x372c <DIO_enu_SetPinValue>
    DIO_enu_SetPinValue(LCD_U8_DATA_PORT,D5,(Copy_u8_Char>> SHIFT_1BIT) & MASK_BIT);
    2534:	89 a9       	ldd	r24, Y+49	; 0x31
    2536:	86 95       	lsr	r24
    2538:	98 2f       	mov	r25, r24
    253a:	91 70       	andi	r25, 0x01	; 1
    253c:	80 e0       	ldi	r24, 0x00	; 0
    253e:	64 e0       	ldi	r22, 0x04	; 4
    2540:	49 2f       	mov	r20, r25
    2542:	0e 94 96 1b 	call	0x372c	; 0x372c <DIO_enu_SetPinValue>
    DIO_enu_SetPinValue(LCD_U8_DATA_PORT,D4,(Copy_u8_Char>> SHIFT_0BIT) & MASK_BIT);
    2546:	89 a9       	ldd	r24, Y+49	; 0x31
    2548:	98 2f       	mov	r25, r24
    254a:	91 70       	andi	r25, 0x01	; 1
    254c:	80 e0       	ldi	r24, 0x00	; 0
    254e:	63 e0       	ldi	r22, 0x03	; 3
    2550:	49 2f       	mov	r20, r25
    2552:	0e 94 96 1b 	call	0x372c	; 0x372c <DIO_enu_SetPinValue>
    /* E = 1 */
    DIO_enu_SetPinValue(LCD_U8_E_PORT,LCD_U8_E_PIN,DIO_U8_HIGH );
    2556:	80 e0       	ldi	r24, 0x00	; 0
    2558:	62 e0       	ldi	r22, 0x02	; 2
    255a:	41 e0       	ldi	r20, 0x01	; 1
    255c:	0e 94 96 1b 	call	0x372c	; 0x372c <DIO_enu_SetPinValue>
    2560:	80 e0       	ldi	r24, 0x00	; 0
    2562:	90 e0       	ldi	r25, 0x00	; 0
    2564:	a0 e8       	ldi	r26, 0x80	; 128
    2566:	bf e3       	ldi	r27, 0x3F	; 63
    2568:	8d 8b       	std	Y+21, r24	; 0x15
    256a:	9e 8b       	std	Y+22, r25	; 0x16
    256c:	af 8b       	std	Y+23, r26	; 0x17
    256e:	b8 8f       	std	Y+24, r27	; 0x18
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    2570:	6d 89       	ldd	r22, Y+21	; 0x15
    2572:	7e 89       	ldd	r23, Y+22	; 0x16
    2574:	8f 89       	ldd	r24, Y+23	; 0x17
    2576:	98 8d       	ldd	r25, Y+24	; 0x18
    2578:	2b ea       	ldi	r18, 0xAB	; 171
    257a:	3a ea       	ldi	r19, 0xAA	; 170
    257c:	4a ea       	ldi	r20, 0xAA	; 170
    257e:	50 e4       	ldi	r21, 0x40	; 64
    2580:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2584:	dc 01       	movw	r26, r24
    2586:	cb 01       	movw	r24, r22
    2588:	89 8b       	std	Y+17, r24	; 0x11
    258a:	9a 8b       	std	Y+18, r25	; 0x12
    258c:	ab 8b       	std	Y+19, r26	; 0x13
    258e:	bc 8b       	std	Y+20, r27	; 0x14
	if (__tmp < 1.0)
    2590:	69 89       	ldd	r22, Y+17	; 0x11
    2592:	7a 89       	ldd	r23, Y+18	; 0x12
    2594:	8b 89       	ldd	r24, Y+19	; 0x13
    2596:	9c 89       	ldd	r25, Y+20	; 0x14
    2598:	20 e0       	ldi	r18, 0x00	; 0
    259a:	30 e0       	ldi	r19, 0x00	; 0
    259c:	40 e8       	ldi	r20, 0x80	; 128
    259e:	5f e3       	ldi	r21, 0x3F	; 63
    25a0:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    25a4:	88 23       	and	r24, r24
    25a6:	1c f4       	brge	.+6      	; 0x25ae <LCD_enu_SendChar+0x2b4>
		__ticks = 1;
    25a8:	81 e0       	ldi	r24, 0x01	; 1
    25aa:	88 8b       	std	Y+16, r24	; 0x10
    25ac:	91 c0       	rjmp	.+290    	; 0x26d0 <LCD_enu_SendChar+0x3d6>
	else if (__tmp > 255)
    25ae:	69 89       	ldd	r22, Y+17	; 0x11
    25b0:	7a 89       	ldd	r23, Y+18	; 0x12
    25b2:	8b 89       	ldd	r24, Y+19	; 0x13
    25b4:	9c 89       	ldd	r25, Y+20	; 0x14
    25b6:	20 e0       	ldi	r18, 0x00	; 0
    25b8:	30 e0       	ldi	r19, 0x00	; 0
    25ba:	4f e7       	ldi	r20, 0x7F	; 127
    25bc:	53 e4       	ldi	r21, 0x43	; 67
    25be:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    25c2:	18 16       	cp	r1, r24
    25c4:	0c f0       	brlt	.+2      	; 0x25c8 <LCD_enu_SendChar+0x2ce>
    25c6:	7b c0       	rjmp	.+246    	; 0x26be <LCD_enu_SendChar+0x3c4>
	{
		_delay_ms(__us / 1000.0);
    25c8:	6d 89       	ldd	r22, Y+21	; 0x15
    25ca:	7e 89       	ldd	r23, Y+22	; 0x16
    25cc:	8f 89       	ldd	r24, Y+23	; 0x17
    25ce:	98 8d       	ldd	r25, Y+24	; 0x18
    25d0:	20 e0       	ldi	r18, 0x00	; 0
    25d2:	30 e0       	ldi	r19, 0x00	; 0
    25d4:	4a e7       	ldi	r20, 0x7A	; 122
    25d6:	54 e4       	ldi	r21, 0x44	; 68
    25d8:	0e 94 11 03 	call	0x622	; 0x622 <__divsf3>
    25dc:	dc 01       	movw	r26, r24
    25de:	cb 01       	movw	r24, r22
    25e0:	8c 87       	std	Y+12, r24	; 0x0c
    25e2:	9d 87       	std	Y+13, r25	; 0x0d
    25e4:	ae 87       	std	Y+14, r26	; 0x0e
    25e6:	bf 87       	std	Y+15, r27	; 0x0f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    25e8:	6c 85       	ldd	r22, Y+12	; 0x0c
    25ea:	7d 85       	ldd	r23, Y+13	; 0x0d
    25ec:	8e 85       	ldd	r24, Y+14	; 0x0e
    25ee:	9f 85       	ldd	r25, Y+15	; 0x0f
    25f0:	20 e0       	ldi	r18, 0x00	; 0
    25f2:	30 e0       	ldi	r19, 0x00	; 0
    25f4:	4a e7       	ldi	r20, 0x7A	; 122
    25f6:	55 e4       	ldi	r21, 0x45	; 69
    25f8:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    25fc:	dc 01       	movw	r26, r24
    25fe:	cb 01       	movw	r24, r22
    2600:	88 87       	std	Y+8, r24	; 0x08
    2602:	99 87       	std	Y+9, r25	; 0x09
    2604:	aa 87       	std	Y+10, r26	; 0x0a
    2606:	bb 87       	std	Y+11, r27	; 0x0b
	if (__tmp < 1.0)
    2608:	68 85       	ldd	r22, Y+8	; 0x08
    260a:	79 85       	ldd	r23, Y+9	; 0x09
    260c:	8a 85       	ldd	r24, Y+10	; 0x0a
    260e:	9b 85       	ldd	r25, Y+11	; 0x0b
    2610:	20 e0       	ldi	r18, 0x00	; 0
    2612:	30 e0       	ldi	r19, 0x00	; 0
    2614:	40 e8       	ldi	r20, 0x80	; 128
    2616:	5f e3       	ldi	r21, 0x3F	; 63
    2618:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    261c:	88 23       	and	r24, r24
    261e:	2c f4       	brge	.+10     	; 0x262a <LCD_enu_SendChar+0x330>
		__ticks = 1;
    2620:	81 e0       	ldi	r24, 0x01	; 1
    2622:	90 e0       	ldi	r25, 0x00	; 0
    2624:	9f 83       	std	Y+7, r25	; 0x07
    2626:	8e 83       	std	Y+6, r24	; 0x06
    2628:	3f c0       	rjmp	.+126    	; 0x26a8 <LCD_enu_SendChar+0x3ae>
	else if (__tmp > 65535)
    262a:	68 85       	ldd	r22, Y+8	; 0x08
    262c:	79 85       	ldd	r23, Y+9	; 0x09
    262e:	8a 85       	ldd	r24, Y+10	; 0x0a
    2630:	9b 85       	ldd	r25, Y+11	; 0x0b
    2632:	20 e0       	ldi	r18, 0x00	; 0
    2634:	3f ef       	ldi	r19, 0xFF	; 255
    2636:	4f e7       	ldi	r20, 0x7F	; 127
    2638:	57 e4       	ldi	r21, 0x47	; 71
    263a:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    263e:	18 16       	cp	r1, r24
    2640:	4c f5       	brge	.+82     	; 0x2694 <LCD_enu_SendChar+0x39a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2642:	6c 85       	ldd	r22, Y+12	; 0x0c
    2644:	7d 85       	ldd	r23, Y+13	; 0x0d
    2646:	8e 85       	ldd	r24, Y+14	; 0x0e
    2648:	9f 85       	ldd	r25, Y+15	; 0x0f
    264a:	20 e0       	ldi	r18, 0x00	; 0
    264c:	30 e0       	ldi	r19, 0x00	; 0
    264e:	40 e2       	ldi	r20, 0x20	; 32
    2650:	51 e4       	ldi	r21, 0x41	; 65
    2652:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2656:	dc 01       	movw	r26, r24
    2658:	cb 01       	movw	r24, r22
    265a:	bc 01       	movw	r22, r24
    265c:	cd 01       	movw	r24, r26
    265e:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2662:	dc 01       	movw	r26, r24
    2664:	cb 01       	movw	r24, r22
    2666:	9f 83       	std	Y+7, r25	; 0x07
    2668:	8e 83       	std	Y+6, r24	; 0x06
    266a:	0f c0       	rjmp	.+30     	; 0x268a <LCD_enu_SendChar+0x390>
    266c:	80 e9       	ldi	r24, 0x90	; 144
    266e:	91 e0       	ldi	r25, 0x01	; 1
    2670:	9d 83       	std	Y+5, r25	; 0x05
    2672:	8c 83       	std	Y+4, r24	; 0x04
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    2674:	8c 81       	ldd	r24, Y+4	; 0x04
    2676:	9d 81       	ldd	r25, Y+5	; 0x05
    2678:	01 97       	sbiw	r24, 0x01	; 1
    267a:	f1 f7       	brne	.-4      	; 0x2678 <LCD_enu_SendChar+0x37e>
    267c:	9d 83       	std	Y+5, r25	; 0x05
    267e:	8c 83       	std	Y+4, r24	; 0x04
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2680:	8e 81       	ldd	r24, Y+6	; 0x06
    2682:	9f 81       	ldd	r25, Y+7	; 0x07
    2684:	01 97       	sbiw	r24, 0x01	; 1
    2686:	9f 83       	std	Y+7, r25	; 0x07
    2688:	8e 83       	std	Y+6, r24	; 0x06
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    268a:	8e 81       	ldd	r24, Y+6	; 0x06
    268c:	9f 81       	ldd	r25, Y+7	; 0x07
    268e:	00 97       	sbiw	r24, 0x00	; 0
    2690:	69 f7       	brne	.-38     	; 0x266c <LCD_enu_SendChar+0x372>
    2692:	24 c0       	rjmp	.+72     	; 0x26dc <LCD_enu_SendChar+0x3e2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2694:	68 85       	ldd	r22, Y+8	; 0x08
    2696:	79 85       	ldd	r23, Y+9	; 0x09
    2698:	8a 85       	ldd	r24, Y+10	; 0x0a
    269a:	9b 85       	ldd	r25, Y+11	; 0x0b
    269c:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    26a0:	dc 01       	movw	r26, r24
    26a2:	cb 01       	movw	r24, r22
    26a4:	9f 83       	std	Y+7, r25	; 0x07
    26a6:	8e 83       	std	Y+6, r24	; 0x06
    26a8:	8e 81       	ldd	r24, Y+6	; 0x06
    26aa:	9f 81       	ldd	r25, Y+7	; 0x07
    26ac:	9b 83       	std	Y+3, r25	; 0x03
    26ae:	8a 83       	std	Y+2, r24	; 0x02
    26b0:	8a 81       	ldd	r24, Y+2	; 0x02
    26b2:	9b 81       	ldd	r25, Y+3	; 0x03
    26b4:	01 97       	sbiw	r24, 0x01	; 1
    26b6:	f1 f7       	brne	.-4      	; 0x26b4 <LCD_enu_SendChar+0x3ba>
    26b8:	9b 83       	std	Y+3, r25	; 0x03
    26ba:	8a 83       	std	Y+2, r24	; 0x02
    26bc:	0f c0       	rjmp	.+30     	; 0x26dc <LCD_enu_SendChar+0x3e2>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    26be:	69 89       	ldd	r22, Y+17	; 0x11
    26c0:	7a 89       	ldd	r23, Y+18	; 0x12
    26c2:	8b 89       	ldd	r24, Y+19	; 0x13
    26c4:	9c 89       	ldd	r25, Y+20	; 0x14
    26c6:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    26ca:	dc 01       	movw	r26, r24
    26cc:	cb 01       	movw	r24, r22
    26ce:	88 8b       	std	Y+16, r24	; 0x10
    26d0:	88 89       	ldd	r24, Y+16	; 0x10
    26d2:	89 83       	std	Y+1, r24	; 0x01
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    26d4:	89 81       	ldd	r24, Y+1	; 0x01
    26d6:	8a 95       	dec	r24
    26d8:	f1 f7       	brne	.-4      	; 0x26d6 <LCD_enu_SendChar+0x3dc>
    26da:	89 83       	std	Y+1, r24	; 0x01
    _delay_us(1);
    /* E = 0 */
    DIO_enu_SetPinValue(LCD_U8_E_PORT,LCD_U8_E_PIN,DIO_U8_LOW );
    26dc:	80 e0       	ldi	r24, 0x00	; 0
    26de:	62 e0       	ldi	r22, 0x02	; 2
    26e0:	40 e0       	ldi	r20, 0x00	; 0
    26e2:	0e 94 96 1b 	call	0x372c	; 0x372c <DIO_enu_SetPinValue>
    return STATE_OK;
    26e6:	81 e0       	ldi	r24, 0x01	; 1
    #endif
}
    26e8:	e1 96       	adiw	r28, 0x31	; 49
    26ea:	0f b6       	in	r0, 0x3f	; 63
    26ec:	f8 94       	cli
    26ee:	de bf       	out	0x3e, r29	; 62
    26f0:	0f be       	out	0x3f, r0	; 63
    26f2:	cd bf       	out	0x3d, r28	; 61
    26f4:	cf 91       	pop	r28
    26f6:	df 91       	pop	r29
    26f8:	08 95       	ret

000026fa <LCD_enu_SendString>:
ES_t LCD_enu_SendString(u8 * Copy_pu8_String){
    26fa:	df 93       	push	r29
    26fc:	cf 93       	push	r28
    26fe:	00 d0       	rcall	.+0      	; 0x2700 <LCD_enu_SendString+0x6>
    2700:	0f 92       	push	r0
    2702:	cd b7       	in	r28, 0x3d	; 61
    2704:	de b7       	in	r29, 0x3e	; 62
    2706:	9b 83       	std	Y+3, r25	; 0x03
    2708:	8a 83       	std	Y+2, r24	; 0x02
    270a:	0e c0       	rjmp	.+28     	; 0x2728 <LCD_enu_SendString+0x2e>
    for(u8 i ; Copy_pu8_String[i] != '\0' ; i++ ){
        LCD_enu_SendChar(Copy_pu8_String[i]);
    270c:	89 81       	ldd	r24, Y+1	; 0x01
    270e:	28 2f       	mov	r18, r24
    2710:	30 e0       	ldi	r19, 0x00	; 0
    2712:	8a 81       	ldd	r24, Y+2	; 0x02
    2714:	9b 81       	ldd	r25, Y+3	; 0x03
    2716:	fc 01       	movw	r30, r24
    2718:	e2 0f       	add	r30, r18
    271a:	f3 1f       	adc	r31, r19
    271c:	80 81       	ld	r24, Z
    271e:	0e 94 7d 11 	call	0x22fa	; 0x22fa <LCD_enu_SendChar>
    DIO_enu_SetPinValue(LCD_U8_E_PORT,LCD_U8_E_PIN,DIO_U8_LOW );
    return STATE_OK;
    #endif
}
ES_t LCD_enu_SendString(u8 * Copy_pu8_String){
    for(u8 i ; Copy_pu8_String[i] != '\0' ; i++ ){
    2722:	89 81       	ldd	r24, Y+1	; 0x01
    2724:	8f 5f       	subi	r24, 0xFF	; 255
    2726:	89 83       	std	Y+1, r24	; 0x01
    2728:	89 81       	ldd	r24, Y+1	; 0x01
    272a:	28 2f       	mov	r18, r24
    272c:	30 e0       	ldi	r19, 0x00	; 0
    272e:	8a 81       	ldd	r24, Y+2	; 0x02
    2730:	9b 81       	ldd	r25, Y+3	; 0x03
    2732:	fc 01       	movw	r30, r24
    2734:	e2 0f       	add	r30, r18
    2736:	f3 1f       	adc	r31, r19
    2738:	80 81       	ld	r24, Z
    273a:	88 23       	and	r24, r24
    273c:	39 f7       	brne	.-50     	; 0x270c <LCD_enu_SendString+0x12>
        LCD_enu_SendChar(Copy_pu8_String[i]);
    }
    return STATE_OK;
    273e:	81 e0       	ldi	r24, 0x01	; 1
}
    2740:	0f 90       	pop	r0
    2742:	0f 90       	pop	r0
    2744:	0f 90       	pop	r0
    2746:	cf 91       	pop	r28
    2748:	df 91       	pop	r29
    274a:	08 95       	ret

0000274c <LCD_enu_SendNum>:

ES_t LCD_enu_SendNum(u32 Copy_u32_Num){
    274c:	0f 93       	push	r16
    274e:	1f 93       	push	r17
    2750:	df 93       	push	r29
    2752:	cf 93       	push	r28
    2754:	cd b7       	in	r28, 0x3d	; 61
    2756:	de b7       	in	r29, 0x3e	; 62
    2758:	60 97       	sbiw	r28, 0x10	; 16
    275a:	0f b6       	in	r0, 0x3f	; 63
    275c:	f8 94       	cli
    275e:	de bf       	out	0x3e, r29	; 62
    2760:	0f be       	out	0x3f, r0	; 63
    2762:	cd bf       	out	0x3d, r28	; 61
    2764:	6d 87       	std	Y+13, r22	; 0x0d
    2766:	7e 87       	std	Y+14, r23	; 0x0e
    2768:	8f 87       	std	Y+15, r24	; 0x0f
    276a:	98 8b       	std	Y+16, r25	; 0x10
    u8 Local_u8_numArr[10] ,Local_u8_iterator1 = 0 ;
    276c:	1a 82       	std	Y+2, r1	; 0x02
    s8 Local_u8_iterator2 = 0;
    276e:	19 82       	std	Y+1, r1	; 0x01
    if(Copy_u32_Num == 0)
    2770:	8d 85       	ldd	r24, Y+13	; 0x0d
    2772:	9e 85       	ldd	r25, Y+14	; 0x0e
    2774:	af 85       	ldd	r26, Y+15	; 0x0f
    2776:	b8 89       	ldd	r27, Y+16	; 0x10
    2778:	00 97       	sbiw	r24, 0x00	; 0
    277a:	a1 05       	cpc	r26, r1
    277c:	b1 05       	cpc	r27, r1
    277e:	89 f5       	brne	.+98     	; 0x27e2 <LCD_enu_SendNum+0x96>
    	LCD_enu_SendChar('0');
    2780:	80 e3       	ldi	r24, 0x30	; 48
    2782:	0e 94 7d 11 	call	0x22fa	; 0x22fa <LCD_enu_SendChar>
    2786:	4d c0       	rjmp	.+154    	; 0x2822 <LCD_enu_SendNum+0xd6>
    else{
		while(Copy_u32_Num != 0){
			Local_u8_numArr[Local_u8_iterator1] = Copy_u32_Num % 10  ;
    2788:	8a 81       	ldd	r24, Y+2	; 0x02
    278a:	08 2f       	mov	r16, r24
    278c:	10 e0       	ldi	r17, 0x00	; 0
    278e:	8d 85       	ldd	r24, Y+13	; 0x0d
    2790:	9e 85       	ldd	r25, Y+14	; 0x0e
    2792:	af 85       	ldd	r26, Y+15	; 0x0f
    2794:	b8 89       	ldd	r27, Y+16	; 0x10
    2796:	2a e0       	ldi	r18, 0x0A	; 10
    2798:	30 e0       	ldi	r19, 0x00	; 0
    279a:	40 e0       	ldi	r20, 0x00	; 0
    279c:	50 e0       	ldi	r21, 0x00	; 0
    279e:	bc 01       	movw	r22, r24
    27a0:	cd 01       	movw	r24, r26
    27a2:	0e 94 d8 1e 	call	0x3db0	; 0x3db0 <__udivmodsi4>
    27a6:	dc 01       	movw	r26, r24
    27a8:	cb 01       	movw	r24, r22
    27aa:	28 2f       	mov	r18, r24
    27ac:	ce 01       	movw	r24, r28
    27ae:	03 96       	adiw	r24, 0x03	; 3
    27b0:	fc 01       	movw	r30, r24
    27b2:	e0 0f       	add	r30, r16
    27b4:	f1 1f       	adc	r31, r17
    27b6:	20 83       	st	Z, r18
			Copy_u32_Num /= 10;
    27b8:	8d 85       	ldd	r24, Y+13	; 0x0d
    27ba:	9e 85       	ldd	r25, Y+14	; 0x0e
    27bc:	af 85       	ldd	r26, Y+15	; 0x0f
    27be:	b8 89       	ldd	r27, Y+16	; 0x10
    27c0:	2a e0       	ldi	r18, 0x0A	; 10
    27c2:	30 e0       	ldi	r19, 0x00	; 0
    27c4:	40 e0       	ldi	r20, 0x00	; 0
    27c6:	50 e0       	ldi	r21, 0x00	; 0
    27c8:	bc 01       	movw	r22, r24
    27ca:	cd 01       	movw	r24, r26
    27cc:	0e 94 d8 1e 	call	0x3db0	; 0x3db0 <__udivmodsi4>
    27d0:	da 01       	movw	r26, r20
    27d2:	c9 01       	movw	r24, r18
    27d4:	8d 87       	std	Y+13, r24	; 0x0d
    27d6:	9e 87       	std	Y+14, r25	; 0x0e
    27d8:	af 87       	std	Y+15, r26	; 0x0f
    27da:	b8 8b       	std	Y+16, r27	; 0x10
			Local_u8_iterator1++;
    27dc:	8a 81       	ldd	r24, Y+2	; 0x02
    27de:	8f 5f       	subi	r24, 0xFF	; 255
    27e0:	8a 83       	std	Y+2, r24	; 0x02
    u8 Local_u8_numArr[10] ,Local_u8_iterator1 = 0 ;
    s8 Local_u8_iterator2 = 0;
    if(Copy_u32_Num == 0)
    	LCD_enu_SendChar('0');
    else{
		while(Copy_u32_Num != 0){
    27e2:	8d 85       	ldd	r24, Y+13	; 0x0d
    27e4:	9e 85       	ldd	r25, Y+14	; 0x0e
    27e6:	af 85       	ldd	r26, Y+15	; 0x0f
    27e8:	b8 89       	ldd	r27, Y+16	; 0x10
    27ea:	00 97       	sbiw	r24, 0x00	; 0
    27ec:	a1 05       	cpc	r26, r1
    27ee:	b1 05       	cpc	r27, r1
    27f0:	59 f6       	brne	.-106    	; 0x2788 <LCD_enu_SendNum+0x3c>
			Local_u8_numArr[Local_u8_iterator1] = Copy_u32_Num % 10  ;
			Copy_u32_Num /= 10;
			Local_u8_iterator1++;
		}
		for(Local_u8_iterator2 = Local_u8_iterator1-1 ;Local_u8_iterator2>=0;Local_u8_iterator2--){
    27f2:	8a 81       	ldd	r24, Y+2	; 0x02
    27f4:	81 50       	subi	r24, 0x01	; 1
    27f6:	89 83       	std	Y+1, r24	; 0x01
    27f8:	11 c0       	rjmp	.+34     	; 0x281c <LCD_enu_SendNum+0xd0>
			LCD_enu_SendChar(Local_u8_numArr[Local_u8_iterator2]+'0');
    27fa:	89 81       	ldd	r24, Y+1	; 0x01
    27fc:	28 2f       	mov	r18, r24
    27fe:	33 27       	eor	r19, r19
    2800:	27 fd       	sbrc	r18, 7
    2802:	30 95       	com	r19
    2804:	ce 01       	movw	r24, r28
    2806:	03 96       	adiw	r24, 0x03	; 3
    2808:	fc 01       	movw	r30, r24
    280a:	e2 0f       	add	r30, r18
    280c:	f3 1f       	adc	r31, r19
    280e:	80 81       	ld	r24, Z
    2810:	80 5d       	subi	r24, 0xD0	; 208
    2812:	0e 94 7d 11 	call	0x22fa	; 0x22fa <LCD_enu_SendChar>
		while(Copy_u32_Num != 0){
			Local_u8_numArr[Local_u8_iterator1] = Copy_u32_Num % 10  ;
			Copy_u32_Num /= 10;
			Local_u8_iterator1++;
		}
		for(Local_u8_iterator2 = Local_u8_iterator1-1 ;Local_u8_iterator2>=0;Local_u8_iterator2--){
    2816:	89 81       	ldd	r24, Y+1	; 0x01
    2818:	81 50       	subi	r24, 0x01	; 1
    281a:	89 83       	std	Y+1, r24	; 0x01
    281c:	89 81       	ldd	r24, Y+1	; 0x01
    281e:	88 23       	and	r24, r24
    2820:	64 f7       	brge	.-40     	; 0x27fa <LCD_enu_SendNum+0xae>
			LCD_enu_SendChar(Local_u8_numArr[Local_u8_iterator2]+'0');
		}
    }
    return STATE_OK;
    2822:	81 e0       	ldi	r24, 0x01	; 1
}
    2824:	60 96       	adiw	r28, 0x10	; 16
    2826:	0f b6       	in	r0, 0x3f	; 63
    2828:	f8 94       	cli
    282a:	de bf       	out	0x3e, r29	; 62
    282c:	0f be       	out	0x3f, r0	; 63
    282e:	cd bf       	out	0x3d, r28	; 61
    2830:	cf 91       	pop	r28
    2832:	df 91       	pop	r29
    2834:	1f 91       	pop	r17
    2836:	0f 91       	pop	r16
    2838:	08 95       	ret

0000283a <LCD_enu_SetCursor>:
ES_t LCD_enu_SetCursor(u8 Copy_u8_LineNum,u8 Copy_u8_Location){
    283a:	df 93       	push	r29
    283c:	cf 93       	push	r28
    283e:	00 d0       	rcall	.+0      	; 0x2840 <LCD_enu_SetCursor+0x6>
    2840:	00 d0       	rcall	.+0      	; 0x2842 <LCD_enu_SetCursor+0x8>
    2842:	0f 92       	push	r0
    2844:	cd b7       	in	r28, 0x3d	; 61
    2846:	de b7       	in	r29, 0x3e	; 62
    2848:	89 83       	std	Y+1, r24	; 0x01
    284a:	6a 83       	std	Y+2, r22	; 0x02
    if(Copy_u8_Location<=39){
    284c:	8a 81       	ldd	r24, Y+2	; 0x02
    284e:	88 32       	cpi	r24, 0x28	; 40
    2850:	f0 f4       	brcc	.+60     	; 0x288e <LCD_enu_SetCursor+0x54>
    switch (Copy_u8_LineNum)
    2852:	89 81       	ldd	r24, Y+1	; 0x01
    2854:	28 2f       	mov	r18, r24
    2856:	30 e0       	ldi	r19, 0x00	; 0
    2858:	3d 83       	std	Y+5, r19	; 0x05
    285a:	2c 83       	std	Y+4, r18	; 0x04
    285c:	8c 81       	ldd	r24, Y+4	; 0x04
    285e:	9d 81       	ldd	r25, Y+5	; 0x05
    2860:	00 97       	sbiw	r24, 0x00	; 0
    2862:	31 f0       	breq	.+12     	; 0x2870 <LCD_enu_SetCursor+0x36>
    2864:	2c 81       	ldd	r18, Y+4	; 0x04
    2866:	3d 81       	ldd	r19, Y+5	; 0x05
    2868:	21 30       	cpi	r18, 0x01	; 1
    286a:	31 05       	cpc	r19, r1
    286c:	31 f0       	breq	.+12     	; 0x287a <LCD_enu_SetCursor+0x40>
    286e:	0a c0       	rjmp	.+20     	; 0x2884 <LCD_enu_SetCursor+0x4a>
    {
    case LINE1:LCD_enu_SendCmnd(ADDRESS_OF_LINE1 + Copy_u8_Location);break;
    2870:	8a 81       	ldd	r24, Y+2	; 0x02
    2872:	80 58       	subi	r24, 0x80	; 128
    2874:	0e 94 7d 0f 	call	0x1efa	; 0x1efa <LCD_enu_SendCmnd>
    2878:	07 c0       	rjmp	.+14     	; 0x2888 <LCD_enu_SetCursor+0x4e>
    case LINE2:LCD_enu_SendCmnd(ADDRESS_OF_LINE2 + Copy_u8_Location);break;
    287a:	8a 81       	ldd	r24, Y+2	; 0x02
    287c:	80 54       	subi	r24, 0x40	; 64
    287e:	0e 94 7d 0f 	call	0x1efa	; 0x1efa <LCD_enu_SendCmnd>
    2882:	02 c0       	rjmp	.+4      	; 0x2888 <LCD_enu_SetCursor+0x4e>
    default:return STATE_NOT_OK;break;
    2884:	1b 82       	std	Y+3, r1	; 0x03
    2886:	04 c0       	rjmp	.+8      	; 0x2890 <LCD_enu_SetCursor+0x56>
    }
    }
    else{
        return STATE_NOT_OK;
    }
    return STATE_OK;
    2888:	31 e0       	ldi	r19, 0x01	; 1
    288a:	3b 83       	std	Y+3, r19	; 0x03
    288c:	01 c0       	rjmp	.+2      	; 0x2890 <LCD_enu_SetCursor+0x56>
    case LINE2:LCD_enu_SendCmnd(ADDRESS_OF_LINE2 + Copy_u8_Location);break;
    default:return STATE_NOT_OK;break;
    }
    }
    else{
        return STATE_NOT_OK;
    288e:	1b 82       	std	Y+3, r1	; 0x03
    2890:	8b 81       	ldd	r24, Y+3	; 0x03
    }
    return STATE_OK;
}
    2892:	0f 90       	pop	r0
    2894:	0f 90       	pop	r0
    2896:	0f 90       	pop	r0
    2898:	0f 90       	pop	r0
    289a:	0f 90       	pop	r0
    289c:	cf 91       	pop	r28
    289e:	df 91       	pop	r29
    28a0:	08 95       	ret

000028a2 <LCD_enu_Init>:
ES_t LCD_enu_Init(void){
    28a2:	0f 93       	push	r16
    28a4:	1f 93       	push	r17
    28a6:	df 93       	push	r29
    28a8:	cf 93       	push	r28
    28aa:	cd b7       	in	r28, 0x3d	; 61
    28ac:	de b7       	in	r29, 0x3e	; 62
    28ae:	cc 54       	subi	r28, 0x4C	; 76
    28b0:	d0 40       	sbci	r29, 0x00	; 0
    28b2:	0f b6       	in	r0, 0x3f	; 63
    28b4:	f8 94       	cli
    28b6:	de bf       	out	0x3e, r29	; 62
    28b8:	0f be       	out	0x3f, r0	; 63
    28ba:	cd bf       	out	0x3d, r28	; 61
    DIO_enu_SetPinDirection(LCD_U8_RS_PORT,LCD_U8_RS_PIN,DIO_U8_OUTPUT);
    28bc:	80 e0       	ldi	r24, 0x00	; 0
    28be:	61 e0       	ldi	r22, 0x01	; 1
    28c0:	41 e0       	ldi	r20, 0x01	; 1
    28c2:	0e 94 6c 1a 	call	0x34d8	; 0x34d8 <DIO_enu_SetPinDirection>
    DIO_enu_SetPinDirection(LCD_U8_RW_PORT,LCD_U8_RW_PIN,DIO_U8_OUTPUT);
    28c6:	80 e0       	ldi	r24, 0x00	; 0
    28c8:	60 e0       	ldi	r22, 0x00	; 0
    28ca:	41 e0       	ldi	r20, 0x01	; 1
    28cc:	0e 94 6c 1a 	call	0x34d8	; 0x34d8 <DIO_enu_SetPinDirection>
    DIO_enu_SetPinDirection(LCD_U8_E_PORT,LCD_U8_E_PIN,DIO_U8_OUTPUT);
    28d0:	80 e0       	ldi	r24, 0x00	; 0
    28d2:	62 e0       	ldi	r22, 0x02	; 2
    28d4:	41 e0       	ldi	r20, 0x01	; 1
    28d6:	0e 94 6c 1a 	call	0x34d8	; 0x34d8 <DIO_enu_SetPinDirection>
    DIO_enu_SetPinDirection(LCD_U8_DATA_PORT,D7,DIO_U8_OUTPUT);
    28da:	80 e0       	ldi	r24, 0x00	; 0
    28dc:	66 e0       	ldi	r22, 0x06	; 6
    28de:	41 e0       	ldi	r20, 0x01	; 1
    28e0:	0e 94 6c 1a 	call	0x34d8	; 0x34d8 <DIO_enu_SetPinDirection>
    DIO_enu_SetPinDirection(LCD_U8_DATA_PORT,D6,DIO_U8_OUTPUT);
    28e4:	80 e0       	ldi	r24, 0x00	; 0
    28e6:	65 e0       	ldi	r22, 0x05	; 5
    28e8:	41 e0       	ldi	r20, 0x01	; 1
    28ea:	0e 94 6c 1a 	call	0x34d8	; 0x34d8 <DIO_enu_SetPinDirection>
    DIO_enu_SetPinDirection(LCD_U8_DATA_PORT,D5,DIO_U8_OUTPUT);
    28ee:	80 e0       	ldi	r24, 0x00	; 0
    28f0:	64 e0       	ldi	r22, 0x04	; 4
    28f2:	41 e0       	ldi	r20, 0x01	; 1
    28f4:	0e 94 6c 1a 	call	0x34d8	; 0x34d8 <DIO_enu_SetPinDirection>
    DIO_enu_SetPinDirection(LCD_U8_DATA_PORT,D4,DIO_U8_OUTPUT);
    28f8:	80 e0       	ldi	r24, 0x00	; 0
    28fa:	63 e0       	ldi	r22, 0x03	; 3
    28fc:	41 e0       	ldi	r20, 0x01	; 1
    28fe:	0e 94 6c 1a 	call	0x34d8	; 0x34d8 <DIO_enu_SetPinDirection>
    2902:	fe 01       	movw	r30, r28
    2904:	e7 5b       	subi	r30, 0xB7	; 183
    2906:	ff 4f       	sbci	r31, 0xFF	; 255
    2908:	80 e0       	ldi	r24, 0x00	; 0
    290a:	90 e0       	ldi	r25, 0x00	; 0
    290c:	ac e0       	ldi	r26, 0x0C	; 12
    290e:	b2 e4       	ldi	r27, 0x42	; 66
    2910:	80 83       	st	Z, r24
    2912:	91 83       	std	Z+1, r25	; 0x01
    2914:	a2 83       	std	Z+2, r26	; 0x02
    2916:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2918:	8e 01       	movw	r16, r28
    291a:	0b 5b       	subi	r16, 0xBB	; 187
    291c:	1f 4f       	sbci	r17, 0xFF	; 255
    291e:	fe 01       	movw	r30, r28
    2920:	e7 5b       	subi	r30, 0xB7	; 183
    2922:	ff 4f       	sbci	r31, 0xFF	; 255
    2924:	60 81       	ld	r22, Z
    2926:	71 81       	ldd	r23, Z+1	; 0x01
    2928:	82 81       	ldd	r24, Z+2	; 0x02
    292a:	93 81       	ldd	r25, Z+3	; 0x03
    292c:	20 e0       	ldi	r18, 0x00	; 0
    292e:	30 e0       	ldi	r19, 0x00	; 0
    2930:	4a e7       	ldi	r20, 0x7A	; 122
    2932:	55 e4       	ldi	r21, 0x45	; 69
    2934:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2938:	dc 01       	movw	r26, r24
    293a:	cb 01       	movw	r24, r22
    293c:	f8 01       	movw	r30, r16
    293e:	80 83       	st	Z, r24
    2940:	91 83       	std	Z+1, r25	; 0x01
    2942:	a2 83       	std	Z+2, r26	; 0x02
    2944:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2946:	fe 01       	movw	r30, r28
    2948:	eb 5b       	subi	r30, 0xBB	; 187
    294a:	ff 4f       	sbci	r31, 0xFF	; 255
    294c:	60 81       	ld	r22, Z
    294e:	71 81       	ldd	r23, Z+1	; 0x01
    2950:	82 81       	ldd	r24, Z+2	; 0x02
    2952:	93 81       	ldd	r25, Z+3	; 0x03
    2954:	20 e0       	ldi	r18, 0x00	; 0
    2956:	30 e0       	ldi	r19, 0x00	; 0
    2958:	40 e8       	ldi	r20, 0x80	; 128
    295a:	5f e3       	ldi	r21, 0x3F	; 63
    295c:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    2960:	88 23       	and	r24, r24
    2962:	44 f4       	brge	.+16     	; 0x2974 <LCD_enu_Init+0xd2>
		__ticks = 1;
    2964:	fe 01       	movw	r30, r28
    2966:	ed 5b       	subi	r30, 0xBD	; 189
    2968:	ff 4f       	sbci	r31, 0xFF	; 255
    296a:	81 e0       	ldi	r24, 0x01	; 1
    296c:	90 e0       	ldi	r25, 0x00	; 0
    296e:	91 83       	std	Z+1, r25	; 0x01
    2970:	80 83       	st	Z, r24
    2972:	64 c0       	rjmp	.+200    	; 0x2a3c <LCD_enu_Init+0x19a>
	else if (__tmp > 65535)
    2974:	fe 01       	movw	r30, r28
    2976:	eb 5b       	subi	r30, 0xBB	; 187
    2978:	ff 4f       	sbci	r31, 0xFF	; 255
    297a:	60 81       	ld	r22, Z
    297c:	71 81       	ldd	r23, Z+1	; 0x01
    297e:	82 81       	ldd	r24, Z+2	; 0x02
    2980:	93 81       	ldd	r25, Z+3	; 0x03
    2982:	20 e0       	ldi	r18, 0x00	; 0
    2984:	3f ef       	ldi	r19, 0xFF	; 255
    2986:	4f e7       	ldi	r20, 0x7F	; 127
    2988:	57 e4       	ldi	r21, 0x47	; 71
    298a:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    298e:	18 16       	cp	r1, r24
    2990:	0c f0       	brlt	.+2      	; 0x2994 <LCD_enu_Init+0xf2>
    2992:	43 c0       	rjmp	.+134    	; 0x2a1a <LCD_enu_Init+0x178>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2994:	fe 01       	movw	r30, r28
    2996:	e7 5b       	subi	r30, 0xB7	; 183
    2998:	ff 4f       	sbci	r31, 0xFF	; 255
    299a:	60 81       	ld	r22, Z
    299c:	71 81       	ldd	r23, Z+1	; 0x01
    299e:	82 81       	ldd	r24, Z+2	; 0x02
    29a0:	93 81       	ldd	r25, Z+3	; 0x03
    29a2:	20 e0       	ldi	r18, 0x00	; 0
    29a4:	30 e0       	ldi	r19, 0x00	; 0
    29a6:	40 e2       	ldi	r20, 0x20	; 32
    29a8:	51 e4       	ldi	r21, 0x41	; 65
    29aa:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    29ae:	dc 01       	movw	r26, r24
    29b0:	cb 01       	movw	r24, r22
    29b2:	8e 01       	movw	r16, r28
    29b4:	0d 5b       	subi	r16, 0xBD	; 189
    29b6:	1f 4f       	sbci	r17, 0xFF	; 255
    29b8:	bc 01       	movw	r22, r24
    29ba:	cd 01       	movw	r24, r26
    29bc:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    29c0:	dc 01       	movw	r26, r24
    29c2:	cb 01       	movw	r24, r22
    29c4:	f8 01       	movw	r30, r16
    29c6:	91 83       	std	Z+1, r25	; 0x01
    29c8:	80 83       	st	Z, r24
    29ca:	1f c0       	rjmp	.+62     	; 0x2a0a <LCD_enu_Init+0x168>
    29cc:	fe 01       	movw	r30, r28
    29ce:	ef 5b       	subi	r30, 0xBF	; 191
    29d0:	ff 4f       	sbci	r31, 0xFF	; 255
    29d2:	80 e9       	ldi	r24, 0x90	; 144
    29d4:	91 e0       	ldi	r25, 0x01	; 1
    29d6:	91 83       	std	Z+1, r25	; 0x01
    29d8:	80 83       	st	Z, r24
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    29da:	fe 01       	movw	r30, r28
    29dc:	ef 5b       	subi	r30, 0xBF	; 191
    29de:	ff 4f       	sbci	r31, 0xFF	; 255
    29e0:	80 81       	ld	r24, Z
    29e2:	91 81       	ldd	r25, Z+1	; 0x01
    29e4:	01 97       	sbiw	r24, 0x01	; 1
    29e6:	f1 f7       	brne	.-4      	; 0x29e4 <LCD_enu_Init+0x142>
    29e8:	fe 01       	movw	r30, r28
    29ea:	ef 5b       	subi	r30, 0xBF	; 191
    29ec:	ff 4f       	sbci	r31, 0xFF	; 255
    29ee:	91 83       	std	Z+1, r25	; 0x01
    29f0:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    29f2:	de 01       	movw	r26, r28
    29f4:	ad 5b       	subi	r26, 0xBD	; 189
    29f6:	bf 4f       	sbci	r27, 0xFF	; 255
    29f8:	fe 01       	movw	r30, r28
    29fa:	ed 5b       	subi	r30, 0xBD	; 189
    29fc:	ff 4f       	sbci	r31, 0xFF	; 255
    29fe:	80 81       	ld	r24, Z
    2a00:	91 81       	ldd	r25, Z+1	; 0x01
    2a02:	01 97       	sbiw	r24, 0x01	; 1
    2a04:	11 96       	adiw	r26, 0x01	; 1
    2a06:	9c 93       	st	X, r25
    2a08:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2a0a:	fe 01       	movw	r30, r28
    2a0c:	ed 5b       	subi	r30, 0xBD	; 189
    2a0e:	ff 4f       	sbci	r31, 0xFF	; 255
    2a10:	80 81       	ld	r24, Z
    2a12:	91 81       	ldd	r25, Z+1	; 0x01
    2a14:	00 97       	sbiw	r24, 0x00	; 0
    2a16:	d1 f6       	brne	.-76     	; 0x29cc <LCD_enu_Init+0x12a>
    2a18:	24 c0       	rjmp	.+72     	; 0x2a62 <LCD_enu_Init+0x1c0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2a1a:	8e 01       	movw	r16, r28
    2a1c:	0d 5b       	subi	r16, 0xBD	; 189
    2a1e:	1f 4f       	sbci	r17, 0xFF	; 255
    2a20:	fe 01       	movw	r30, r28
    2a22:	eb 5b       	subi	r30, 0xBB	; 187
    2a24:	ff 4f       	sbci	r31, 0xFF	; 255
    2a26:	60 81       	ld	r22, Z
    2a28:	71 81       	ldd	r23, Z+1	; 0x01
    2a2a:	82 81       	ldd	r24, Z+2	; 0x02
    2a2c:	93 81       	ldd	r25, Z+3	; 0x03
    2a2e:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2a32:	dc 01       	movw	r26, r24
    2a34:	cb 01       	movw	r24, r22
    2a36:	f8 01       	movw	r30, r16
    2a38:	91 83       	std	Z+1, r25	; 0x01
    2a3a:	80 83       	st	Z, r24
    2a3c:	fe 01       	movw	r30, r28
    2a3e:	ed 5b       	subi	r30, 0xBD	; 189
    2a40:	ff 4f       	sbci	r31, 0xFF	; 255
    2a42:	80 81       	ld	r24, Z
    2a44:	91 81       	ldd	r25, Z+1	; 0x01
    2a46:	fe 01       	movw	r30, r28
    2a48:	ff 96       	adiw	r30, 0x3f	; 63
    2a4a:	91 83       	std	Z+1, r25	; 0x01
    2a4c:	80 83       	st	Z, r24
    2a4e:	fe 01       	movw	r30, r28
    2a50:	ff 96       	adiw	r30, 0x3f	; 63
    2a52:	80 81       	ld	r24, Z
    2a54:	91 81       	ldd	r25, Z+1	; 0x01
    2a56:	01 97       	sbiw	r24, 0x01	; 1
    2a58:	f1 f7       	brne	.-4      	; 0x2a56 <LCD_enu_Init+0x1b4>
    2a5a:	fe 01       	movw	r30, r28
    2a5c:	ff 96       	adiw	r30, 0x3f	; 63
    2a5e:	91 83       	std	Z+1, r25	; 0x01
    2a60:	80 83       	st	Z, r24
    _delay_ms(2);
    LCD_enu_SendCmnd(ENTRY_MOOD);
     return STATE_OK;
    #elif LCD_U8_MODE == LCD_U8_MODE_4BIT
    _delay_ms(35);
    LCD_enu_SendCmnd(FOURBIT_INIT1);
    2a62:	83 e3       	ldi	r24, 0x33	; 51
    2a64:	0e 94 7d 0f 	call	0x1efa	; 0x1efa <LCD_enu_SendCmnd>
    LCD_enu_SendCmnd(FOURBIT_INIT2);
    2a68:	82 e3       	ldi	r24, 0x32	; 50
    2a6a:	0e 94 7d 0f 	call	0x1efa	; 0x1efa <LCD_enu_SendCmnd>
    LCD_enu_SendCmnd(FUN_SET_4BIT_2LINES_5X7);
    2a6e:	88 e2       	ldi	r24, 0x28	; 40
    2a70:	0e 94 7d 0f 	call	0x1efa	; 0x1efa <LCD_enu_SendCmnd>
    2a74:	80 e0       	ldi	r24, 0x00	; 0
    2a76:	90 e0       	ldi	r25, 0x00	; 0
    2a78:	a0 e2       	ldi	r26, 0x20	; 32
    2a7a:	b2 e4       	ldi	r27, 0x42	; 66
    2a7c:	8b af       	std	Y+59, r24	; 0x3b
    2a7e:	9c af       	std	Y+60, r25	; 0x3c
    2a80:	ad af       	std	Y+61, r26	; 0x3d
    2a82:	be af       	std	Y+62, r27	; 0x3e
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    2a84:	6b ad       	ldd	r22, Y+59	; 0x3b
    2a86:	7c ad       	ldd	r23, Y+60	; 0x3c
    2a88:	8d ad       	ldd	r24, Y+61	; 0x3d
    2a8a:	9e ad       	ldd	r25, Y+62	; 0x3e
    2a8c:	2b ea       	ldi	r18, 0xAB	; 171
    2a8e:	3a ea       	ldi	r19, 0xAA	; 170
    2a90:	4a ea       	ldi	r20, 0xAA	; 170
    2a92:	50 e4       	ldi	r21, 0x40	; 64
    2a94:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2a98:	dc 01       	movw	r26, r24
    2a9a:	cb 01       	movw	r24, r22
    2a9c:	8f ab       	std	Y+55, r24	; 0x37
    2a9e:	98 af       	std	Y+56, r25	; 0x38
    2aa0:	a9 af       	std	Y+57, r26	; 0x39
    2aa2:	ba af       	std	Y+58, r27	; 0x3a
	if (__tmp < 1.0)
    2aa4:	6f a9       	ldd	r22, Y+55	; 0x37
    2aa6:	78 ad       	ldd	r23, Y+56	; 0x38
    2aa8:	89 ad       	ldd	r24, Y+57	; 0x39
    2aaa:	9a ad       	ldd	r25, Y+58	; 0x3a
    2aac:	20 e0       	ldi	r18, 0x00	; 0
    2aae:	30 e0       	ldi	r19, 0x00	; 0
    2ab0:	40 e8       	ldi	r20, 0x80	; 128
    2ab2:	5f e3       	ldi	r21, 0x3F	; 63
    2ab4:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    2ab8:	88 23       	and	r24, r24
    2aba:	1c f4       	brge	.+6      	; 0x2ac2 <LCD_enu_Init+0x220>
		__ticks = 1;
    2abc:	81 e0       	ldi	r24, 0x01	; 1
    2abe:	8e ab       	std	Y+54, r24	; 0x36
    2ac0:	91 c0       	rjmp	.+290    	; 0x2be4 <LCD_enu_Init+0x342>
	else if (__tmp > 255)
    2ac2:	6f a9       	ldd	r22, Y+55	; 0x37
    2ac4:	78 ad       	ldd	r23, Y+56	; 0x38
    2ac6:	89 ad       	ldd	r24, Y+57	; 0x39
    2ac8:	9a ad       	ldd	r25, Y+58	; 0x3a
    2aca:	20 e0       	ldi	r18, 0x00	; 0
    2acc:	30 e0       	ldi	r19, 0x00	; 0
    2ace:	4f e7       	ldi	r20, 0x7F	; 127
    2ad0:	53 e4       	ldi	r21, 0x43	; 67
    2ad2:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    2ad6:	18 16       	cp	r1, r24
    2ad8:	0c f0       	brlt	.+2      	; 0x2adc <LCD_enu_Init+0x23a>
    2ada:	7b c0       	rjmp	.+246    	; 0x2bd2 <LCD_enu_Init+0x330>
	{
		_delay_ms(__us / 1000.0);
    2adc:	6b ad       	ldd	r22, Y+59	; 0x3b
    2ade:	7c ad       	ldd	r23, Y+60	; 0x3c
    2ae0:	8d ad       	ldd	r24, Y+61	; 0x3d
    2ae2:	9e ad       	ldd	r25, Y+62	; 0x3e
    2ae4:	20 e0       	ldi	r18, 0x00	; 0
    2ae6:	30 e0       	ldi	r19, 0x00	; 0
    2ae8:	4a e7       	ldi	r20, 0x7A	; 122
    2aea:	54 e4       	ldi	r21, 0x44	; 68
    2aec:	0e 94 11 03 	call	0x622	; 0x622 <__divsf3>
    2af0:	dc 01       	movw	r26, r24
    2af2:	cb 01       	movw	r24, r22
    2af4:	8a ab       	std	Y+50, r24	; 0x32
    2af6:	9b ab       	std	Y+51, r25	; 0x33
    2af8:	ac ab       	std	Y+52, r26	; 0x34
    2afa:	bd ab       	std	Y+53, r27	; 0x35
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2afc:	6a a9       	ldd	r22, Y+50	; 0x32
    2afe:	7b a9       	ldd	r23, Y+51	; 0x33
    2b00:	8c a9       	ldd	r24, Y+52	; 0x34
    2b02:	9d a9       	ldd	r25, Y+53	; 0x35
    2b04:	20 e0       	ldi	r18, 0x00	; 0
    2b06:	30 e0       	ldi	r19, 0x00	; 0
    2b08:	4a e7       	ldi	r20, 0x7A	; 122
    2b0a:	55 e4       	ldi	r21, 0x45	; 69
    2b0c:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2b10:	dc 01       	movw	r26, r24
    2b12:	cb 01       	movw	r24, r22
    2b14:	8e a7       	std	Y+46, r24	; 0x2e
    2b16:	9f a7       	std	Y+47, r25	; 0x2f
    2b18:	a8 ab       	std	Y+48, r26	; 0x30
    2b1a:	b9 ab       	std	Y+49, r27	; 0x31
	if (__tmp < 1.0)
    2b1c:	6e a5       	ldd	r22, Y+46	; 0x2e
    2b1e:	7f a5       	ldd	r23, Y+47	; 0x2f
    2b20:	88 a9       	ldd	r24, Y+48	; 0x30
    2b22:	99 a9       	ldd	r25, Y+49	; 0x31
    2b24:	20 e0       	ldi	r18, 0x00	; 0
    2b26:	30 e0       	ldi	r19, 0x00	; 0
    2b28:	40 e8       	ldi	r20, 0x80	; 128
    2b2a:	5f e3       	ldi	r21, 0x3F	; 63
    2b2c:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    2b30:	88 23       	and	r24, r24
    2b32:	2c f4       	brge	.+10     	; 0x2b3e <LCD_enu_Init+0x29c>
		__ticks = 1;
    2b34:	81 e0       	ldi	r24, 0x01	; 1
    2b36:	90 e0       	ldi	r25, 0x00	; 0
    2b38:	9d a7       	std	Y+45, r25	; 0x2d
    2b3a:	8c a7       	std	Y+44, r24	; 0x2c
    2b3c:	3f c0       	rjmp	.+126    	; 0x2bbc <LCD_enu_Init+0x31a>
	else if (__tmp > 65535)
    2b3e:	6e a5       	ldd	r22, Y+46	; 0x2e
    2b40:	7f a5       	ldd	r23, Y+47	; 0x2f
    2b42:	88 a9       	ldd	r24, Y+48	; 0x30
    2b44:	99 a9       	ldd	r25, Y+49	; 0x31
    2b46:	20 e0       	ldi	r18, 0x00	; 0
    2b48:	3f ef       	ldi	r19, 0xFF	; 255
    2b4a:	4f e7       	ldi	r20, 0x7F	; 127
    2b4c:	57 e4       	ldi	r21, 0x47	; 71
    2b4e:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    2b52:	18 16       	cp	r1, r24
    2b54:	4c f5       	brge	.+82     	; 0x2ba8 <LCD_enu_Init+0x306>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2b56:	6a a9       	ldd	r22, Y+50	; 0x32
    2b58:	7b a9       	ldd	r23, Y+51	; 0x33
    2b5a:	8c a9       	ldd	r24, Y+52	; 0x34
    2b5c:	9d a9       	ldd	r25, Y+53	; 0x35
    2b5e:	20 e0       	ldi	r18, 0x00	; 0
    2b60:	30 e0       	ldi	r19, 0x00	; 0
    2b62:	40 e2       	ldi	r20, 0x20	; 32
    2b64:	51 e4       	ldi	r21, 0x41	; 65
    2b66:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2b6a:	dc 01       	movw	r26, r24
    2b6c:	cb 01       	movw	r24, r22
    2b6e:	bc 01       	movw	r22, r24
    2b70:	cd 01       	movw	r24, r26
    2b72:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2b76:	dc 01       	movw	r26, r24
    2b78:	cb 01       	movw	r24, r22
    2b7a:	9d a7       	std	Y+45, r25	; 0x2d
    2b7c:	8c a7       	std	Y+44, r24	; 0x2c
    2b7e:	0f c0       	rjmp	.+30     	; 0x2b9e <LCD_enu_Init+0x2fc>
    2b80:	80 e9       	ldi	r24, 0x90	; 144
    2b82:	91 e0       	ldi	r25, 0x01	; 1
    2b84:	9b a7       	std	Y+43, r25	; 0x2b
    2b86:	8a a7       	std	Y+42, r24	; 0x2a
    2b88:	8a a5       	ldd	r24, Y+42	; 0x2a
    2b8a:	9b a5       	ldd	r25, Y+43	; 0x2b
    2b8c:	01 97       	sbiw	r24, 0x01	; 1
    2b8e:	f1 f7       	brne	.-4      	; 0x2b8c <LCD_enu_Init+0x2ea>
    2b90:	9b a7       	std	Y+43, r25	; 0x2b
    2b92:	8a a7       	std	Y+42, r24	; 0x2a
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2b94:	8c a5       	ldd	r24, Y+44	; 0x2c
    2b96:	9d a5       	ldd	r25, Y+45	; 0x2d
    2b98:	01 97       	sbiw	r24, 0x01	; 1
    2b9a:	9d a7       	std	Y+45, r25	; 0x2d
    2b9c:	8c a7       	std	Y+44, r24	; 0x2c
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2b9e:	8c a5       	ldd	r24, Y+44	; 0x2c
    2ba0:	9d a5       	ldd	r25, Y+45	; 0x2d
    2ba2:	00 97       	sbiw	r24, 0x00	; 0
    2ba4:	69 f7       	brne	.-38     	; 0x2b80 <LCD_enu_Init+0x2de>
    2ba6:	24 c0       	rjmp	.+72     	; 0x2bf0 <LCD_enu_Init+0x34e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2ba8:	6e a5       	ldd	r22, Y+46	; 0x2e
    2baa:	7f a5       	ldd	r23, Y+47	; 0x2f
    2bac:	88 a9       	ldd	r24, Y+48	; 0x30
    2bae:	99 a9       	ldd	r25, Y+49	; 0x31
    2bb0:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2bb4:	dc 01       	movw	r26, r24
    2bb6:	cb 01       	movw	r24, r22
    2bb8:	9d a7       	std	Y+45, r25	; 0x2d
    2bba:	8c a7       	std	Y+44, r24	; 0x2c
    2bbc:	8c a5       	ldd	r24, Y+44	; 0x2c
    2bbe:	9d a5       	ldd	r25, Y+45	; 0x2d
    2bc0:	99 a7       	std	Y+41, r25	; 0x29
    2bc2:	88 a7       	std	Y+40, r24	; 0x28
    2bc4:	88 a5       	ldd	r24, Y+40	; 0x28
    2bc6:	99 a5       	ldd	r25, Y+41	; 0x29
    2bc8:	01 97       	sbiw	r24, 0x01	; 1
    2bca:	f1 f7       	brne	.-4      	; 0x2bc8 <LCD_enu_Init+0x326>
    2bcc:	99 a7       	std	Y+41, r25	; 0x29
    2bce:	88 a7       	std	Y+40, r24	; 0x28
    2bd0:	0f c0       	rjmp	.+30     	; 0x2bf0 <LCD_enu_Init+0x34e>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    2bd2:	6f a9       	ldd	r22, Y+55	; 0x37
    2bd4:	78 ad       	ldd	r23, Y+56	; 0x38
    2bd6:	89 ad       	ldd	r24, Y+57	; 0x39
    2bd8:	9a ad       	ldd	r25, Y+58	; 0x3a
    2bda:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2bde:	dc 01       	movw	r26, r24
    2be0:	cb 01       	movw	r24, r22
    2be2:	8e ab       	std	Y+54, r24	; 0x36
    2be4:	8e a9       	ldd	r24, Y+54	; 0x36
    2be6:	8f a3       	std	Y+39, r24	; 0x27
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    2be8:	8f a1       	ldd	r24, Y+39	; 0x27
    2bea:	8a 95       	dec	r24
    2bec:	f1 f7       	brne	.-4      	; 0x2bea <LCD_enu_Init+0x348>
    2bee:	8f a3       	std	Y+39, r24	; 0x27
    _delay_us(40);
    LCD_enu_SendCmnd(DIS_ON_CURSOR_ON_BLINKING);
    2bf0:	8f e0       	ldi	r24, 0x0F	; 15
    2bf2:	0e 94 7d 0f 	call	0x1efa	; 0x1efa <LCD_enu_SendCmnd>
    2bf6:	80 e0       	ldi	r24, 0x00	; 0
    2bf8:	90 e0       	ldi	r25, 0x00	; 0
    2bfa:	a0 e2       	ldi	r26, 0x20	; 32
    2bfc:	b2 e4       	ldi	r27, 0x42	; 66
    2bfe:	8b a3       	std	Y+35, r24	; 0x23
    2c00:	9c a3       	std	Y+36, r25	; 0x24
    2c02:	ad a3       	std	Y+37, r26	; 0x25
    2c04:	be a3       	std	Y+38, r27	; 0x26
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    2c06:	6b a1       	ldd	r22, Y+35	; 0x23
    2c08:	7c a1       	ldd	r23, Y+36	; 0x24
    2c0a:	8d a1       	ldd	r24, Y+37	; 0x25
    2c0c:	9e a1       	ldd	r25, Y+38	; 0x26
    2c0e:	2b ea       	ldi	r18, 0xAB	; 171
    2c10:	3a ea       	ldi	r19, 0xAA	; 170
    2c12:	4a ea       	ldi	r20, 0xAA	; 170
    2c14:	50 e4       	ldi	r21, 0x40	; 64
    2c16:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2c1a:	dc 01       	movw	r26, r24
    2c1c:	cb 01       	movw	r24, r22
    2c1e:	8f 8f       	std	Y+31, r24	; 0x1f
    2c20:	98 a3       	std	Y+32, r25	; 0x20
    2c22:	a9 a3       	std	Y+33, r26	; 0x21
    2c24:	ba a3       	std	Y+34, r27	; 0x22
	if (__tmp < 1.0)
    2c26:	6f 8d       	ldd	r22, Y+31	; 0x1f
    2c28:	78 a1       	ldd	r23, Y+32	; 0x20
    2c2a:	89 a1       	ldd	r24, Y+33	; 0x21
    2c2c:	9a a1       	ldd	r25, Y+34	; 0x22
    2c2e:	20 e0       	ldi	r18, 0x00	; 0
    2c30:	30 e0       	ldi	r19, 0x00	; 0
    2c32:	40 e8       	ldi	r20, 0x80	; 128
    2c34:	5f e3       	ldi	r21, 0x3F	; 63
    2c36:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    2c3a:	88 23       	and	r24, r24
    2c3c:	1c f4       	brge	.+6      	; 0x2c44 <LCD_enu_Init+0x3a2>
		__ticks = 1;
    2c3e:	81 e0       	ldi	r24, 0x01	; 1
    2c40:	8e 8f       	std	Y+30, r24	; 0x1e
    2c42:	91 c0       	rjmp	.+290    	; 0x2d66 <LCD_enu_Init+0x4c4>
	else if (__tmp > 255)
    2c44:	6f 8d       	ldd	r22, Y+31	; 0x1f
    2c46:	78 a1       	ldd	r23, Y+32	; 0x20
    2c48:	89 a1       	ldd	r24, Y+33	; 0x21
    2c4a:	9a a1       	ldd	r25, Y+34	; 0x22
    2c4c:	20 e0       	ldi	r18, 0x00	; 0
    2c4e:	30 e0       	ldi	r19, 0x00	; 0
    2c50:	4f e7       	ldi	r20, 0x7F	; 127
    2c52:	53 e4       	ldi	r21, 0x43	; 67
    2c54:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    2c58:	18 16       	cp	r1, r24
    2c5a:	0c f0       	brlt	.+2      	; 0x2c5e <LCD_enu_Init+0x3bc>
    2c5c:	7b c0       	rjmp	.+246    	; 0x2d54 <LCD_enu_Init+0x4b2>
	{
		_delay_ms(__us / 1000.0);
    2c5e:	6b a1       	ldd	r22, Y+35	; 0x23
    2c60:	7c a1       	ldd	r23, Y+36	; 0x24
    2c62:	8d a1       	ldd	r24, Y+37	; 0x25
    2c64:	9e a1       	ldd	r25, Y+38	; 0x26
    2c66:	20 e0       	ldi	r18, 0x00	; 0
    2c68:	30 e0       	ldi	r19, 0x00	; 0
    2c6a:	4a e7       	ldi	r20, 0x7A	; 122
    2c6c:	54 e4       	ldi	r21, 0x44	; 68
    2c6e:	0e 94 11 03 	call	0x622	; 0x622 <__divsf3>
    2c72:	dc 01       	movw	r26, r24
    2c74:	cb 01       	movw	r24, r22
    2c76:	8a 8f       	std	Y+26, r24	; 0x1a
    2c78:	9b 8f       	std	Y+27, r25	; 0x1b
    2c7a:	ac 8f       	std	Y+28, r26	; 0x1c
    2c7c:	bd 8f       	std	Y+29, r27	; 0x1d
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2c7e:	6a 8d       	ldd	r22, Y+26	; 0x1a
    2c80:	7b 8d       	ldd	r23, Y+27	; 0x1b
    2c82:	8c 8d       	ldd	r24, Y+28	; 0x1c
    2c84:	9d 8d       	ldd	r25, Y+29	; 0x1d
    2c86:	20 e0       	ldi	r18, 0x00	; 0
    2c88:	30 e0       	ldi	r19, 0x00	; 0
    2c8a:	4a e7       	ldi	r20, 0x7A	; 122
    2c8c:	55 e4       	ldi	r21, 0x45	; 69
    2c8e:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2c92:	dc 01       	movw	r26, r24
    2c94:	cb 01       	movw	r24, r22
    2c96:	8e 8b       	std	Y+22, r24	; 0x16
    2c98:	9f 8b       	std	Y+23, r25	; 0x17
    2c9a:	a8 8f       	std	Y+24, r26	; 0x18
    2c9c:	b9 8f       	std	Y+25, r27	; 0x19
	if (__tmp < 1.0)
    2c9e:	6e 89       	ldd	r22, Y+22	; 0x16
    2ca0:	7f 89       	ldd	r23, Y+23	; 0x17
    2ca2:	88 8d       	ldd	r24, Y+24	; 0x18
    2ca4:	99 8d       	ldd	r25, Y+25	; 0x19
    2ca6:	20 e0       	ldi	r18, 0x00	; 0
    2ca8:	30 e0       	ldi	r19, 0x00	; 0
    2caa:	40 e8       	ldi	r20, 0x80	; 128
    2cac:	5f e3       	ldi	r21, 0x3F	; 63
    2cae:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    2cb2:	88 23       	and	r24, r24
    2cb4:	2c f4       	brge	.+10     	; 0x2cc0 <LCD_enu_Init+0x41e>
		__ticks = 1;
    2cb6:	81 e0       	ldi	r24, 0x01	; 1
    2cb8:	90 e0       	ldi	r25, 0x00	; 0
    2cba:	9d 8b       	std	Y+21, r25	; 0x15
    2cbc:	8c 8b       	std	Y+20, r24	; 0x14
    2cbe:	3f c0       	rjmp	.+126    	; 0x2d3e <LCD_enu_Init+0x49c>
	else if (__tmp > 65535)
    2cc0:	6e 89       	ldd	r22, Y+22	; 0x16
    2cc2:	7f 89       	ldd	r23, Y+23	; 0x17
    2cc4:	88 8d       	ldd	r24, Y+24	; 0x18
    2cc6:	99 8d       	ldd	r25, Y+25	; 0x19
    2cc8:	20 e0       	ldi	r18, 0x00	; 0
    2cca:	3f ef       	ldi	r19, 0xFF	; 255
    2ccc:	4f e7       	ldi	r20, 0x7F	; 127
    2cce:	57 e4       	ldi	r21, 0x47	; 71
    2cd0:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    2cd4:	18 16       	cp	r1, r24
    2cd6:	4c f5       	brge	.+82     	; 0x2d2a <LCD_enu_Init+0x488>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2cd8:	6a 8d       	ldd	r22, Y+26	; 0x1a
    2cda:	7b 8d       	ldd	r23, Y+27	; 0x1b
    2cdc:	8c 8d       	ldd	r24, Y+28	; 0x1c
    2cde:	9d 8d       	ldd	r25, Y+29	; 0x1d
    2ce0:	20 e0       	ldi	r18, 0x00	; 0
    2ce2:	30 e0       	ldi	r19, 0x00	; 0
    2ce4:	40 e2       	ldi	r20, 0x20	; 32
    2ce6:	51 e4       	ldi	r21, 0x41	; 65
    2ce8:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2cec:	dc 01       	movw	r26, r24
    2cee:	cb 01       	movw	r24, r22
    2cf0:	bc 01       	movw	r22, r24
    2cf2:	cd 01       	movw	r24, r26
    2cf4:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2cf8:	dc 01       	movw	r26, r24
    2cfa:	cb 01       	movw	r24, r22
    2cfc:	9d 8b       	std	Y+21, r25	; 0x15
    2cfe:	8c 8b       	std	Y+20, r24	; 0x14
    2d00:	0f c0       	rjmp	.+30     	; 0x2d20 <LCD_enu_Init+0x47e>
    2d02:	80 e9       	ldi	r24, 0x90	; 144
    2d04:	91 e0       	ldi	r25, 0x01	; 1
    2d06:	9b 8b       	std	Y+19, r25	; 0x13
    2d08:	8a 8b       	std	Y+18, r24	; 0x12
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    2d0a:	8a 89       	ldd	r24, Y+18	; 0x12
    2d0c:	9b 89       	ldd	r25, Y+19	; 0x13
    2d0e:	01 97       	sbiw	r24, 0x01	; 1
    2d10:	f1 f7       	brne	.-4      	; 0x2d0e <LCD_enu_Init+0x46c>
    2d12:	9b 8b       	std	Y+19, r25	; 0x13
    2d14:	8a 8b       	std	Y+18, r24	; 0x12
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2d16:	8c 89       	ldd	r24, Y+20	; 0x14
    2d18:	9d 89       	ldd	r25, Y+21	; 0x15
    2d1a:	01 97       	sbiw	r24, 0x01	; 1
    2d1c:	9d 8b       	std	Y+21, r25	; 0x15
    2d1e:	8c 8b       	std	Y+20, r24	; 0x14
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2d20:	8c 89       	ldd	r24, Y+20	; 0x14
    2d22:	9d 89       	ldd	r25, Y+21	; 0x15
    2d24:	00 97       	sbiw	r24, 0x00	; 0
    2d26:	69 f7       	brne	.-38     	; 0x2d02 <LCD_enu_Init+0x460>
    2d28:	24 c0       	rjmp	.+72     	; 0x2d72 <LCD_enu_Init+0x4d0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2d2a:	6e 89       	ldd	r22, Y+22	; 0x16
    2d2c:	7f 89       	ldd	r23, Y+23	; 0x17
    2d2e:	88 8d       	ldd	r24, Y+24	; 0x18
    2d30:	99 8d       	ldd	r25, Y+25	; 0x19
    2d32:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2d36:	dc 01       	movw	r26, r24
    2d38:	cb 01       	movw	r24, r22
    2d3a:	9d 8b       	std	Y+21, r25	; 0x15
    2d3c:	8c 8b       	std	Y+20, r24	; 0x14
    2d3e:	8c 89       	ldd	r24, Y+20	; 0x14
    2d40:	9d 89       	ldd	r25, Y+21	; 0x15
    2d42:	99 8b       	std	Y+17, r25	; 0x11
    2d44:	88 8b       	std	Y+16, r24	; 0x10
    2d46:	88 89       	ldd	r24, Y+16	; 0x10
    2d48:	99 89       	ldd	r25, Y+17	; 0x11
    2d4a:	01 97       	sbiw	r24, 0x01	; 1
    2d4c:	f1 f7       	brne	.-4      	; 0x2d4a <LCD_enu_Init+0x4a8>
    2d4e:	99 8b       	std	Y+17, r25	; 0x11
    2d50:	88 8b       	std	Y+16, r24	; 0x10
    2d52:	0f c0       	rjmp	.+30     	; 0x2d72 <LCD_enu_Init+0x4d0>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    2d54:	6f 8d       	ldd	r22, Y+31	; 0x1f
    2d56:	78 a1       	ldd	r23, Y+32	; 0x20
    2d58:	89 a1       	ldd	r24, Y+33	; 0x21
    2d5a:	9a a1       	ldd	r25, Y+34	; 0x22
    2d5c:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2d60:	dc 01       	movw	r26, r24
    2d62:	cb 01       	movw	r24, r22
    2d64:	8e 8f       	std	Y+30, r24	; 0x1e
    2d66:	8e 8d       	ldd	r24, Y+30	; 0x1e
    2d68:	8f 87       	std	Y+15, r24	; 0x0f
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    2d6a:	8f 85       	ldd	r24, Y+15	; 0x0f
    2d6c:	8a 95       	dec	r24
    2d6e:	f1 f7       	brne	.-4      	; 0x2d6c <LCD_enu_Init+0x4ca>
    2d70:	8f 87       	std	Y+15, r24	; 0x0f
    _delay_us(40);
    LCD_enu_SendCmnd(DISPLAY_CLEAR);
    2d72:	81 e0       	ldi	r24, 0x01	; 1
    2d74:	0e 94 7d 0f 	call	0x1efa	; 0x1efa <LCD_enu_SendCmnd>
    2d78:	80 e0       	ldi	r24, 0x00	; 0
    2d7a:	90 e0       	ldi	r25, 0x00	; 0
    2d7c:	a0 e0       	ldi	r26, 0x00	; 0
    2d7e:	b0 e4       	ldi	r27, 0x40	; 64
    2d80:	8b 87       	std	Y+11, r24	; 0x0b
    2d82:	9c 87       	std	Y+12, r25	; 0x0c
    2d84:	ad 87       	std	Y+13, r26	; 0x0d
    2d86:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2d88:	6b 85       	ldd	r22, Y+11	; 0x0b
    2d8a:	7c 85       	ldd	r23, Y+12	; 0x0c
    2d8c:	8d 85       	ldd	r24, Y+13	; 0x0d
    2d8e:	9e 85       	ldd	r25, Y+14	; 0x0e
    2d90:	20 e0       	ldi	r18, 0x00	; 0
    2d92:	30 e0       	ldi	r19, 0x00	; 0
    2d94:	4a e7       	ldi	r20, 0x7A	; 122
    2d96:	55 e4       	ldi	r21, 0x45	; 69
    2d98:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2d9c:	dc 01       	movw	r26, r24
    2d9e:	cb 01       	movw	r24, r22
    2da0:	8f 83       	std	Y+7, r24	; 0x07
    2da2:	98 87       	std	Y+8, r25	; 0x08
    2da4:	a9 87       	std	Y+9, r26	; 0x09
    2da6:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2da8:	6f 81       	ldd	r22, Y+7	; 0x07
    2daa:	78 85       	ldd	r23, Y+8	; 0x08
    2dac:	89 85       	ldd	r24, Y+9	; 0x09
    2dae:	9a 85       	ldd	r25, Y+10	; 0x0a
    2db0:	20 e0       	ldi	r18, 0x00	; 0
    2db2:	30 e0       	ldi	r19, 0x00	; 0
    2db4:	40 e8       	ldi	r20, 0x80	; 128
    2db6:	5f e3       	ldi	r21, 0x3F	; 63
    2db8:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    2dbc:	88 23       	and	r24, r24
    2dbe:	2c f4       	brge	.+10     	; 0x2dca <LCD_enu_Init+0x528>
		__ticks = 1;
    2dc0:	81 e0       	ldi	r24, 0x01	; 1
    2dc2:	90 e0       	ldi	r25, 0x00	; 0
    2dc4:	9e 83       	std	Y+6, r25	; 0x06
    2dc6:	8d 83       	std	Y+5, r24	; 0x05
    2dc8:	3f c0       	rjmp	.+126    	; 0x2e48 <LCD_enu_Init+0x5a6>
	else if (__tmp > 65535)
    2dca:	6f 81       	ldd	r22, Y+7	; 0x07
    2dcc:	78 85       	ldd	r23, Y+8	; 0x08
    2dce:	89 85       	ldd	r24, Y+9	; 0x09
    2dd0:	9a 85       	ldd	r25, Y+10	; 0x0a
    2dd2:	20 e0       	ldi	r18, 0x00	; 0
    2dd4:	3f ef       	ldi	r19, 0xFF	; 255
    2dd6:	4f e7       	ldi	r20, 0x7F	; 127
    2dd8:	57 e4       	ldi	r21, 0x47	; 71
    2dda:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    2dde:	18 16       	cp	r1, r24
    2de0:	4c f5       	brge	.+82     	; 0x2e34 <LCD_enu_Init+0x592>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2de2:	6b 85       	ldd	r22, Y+11	; 0x0b
    2de4:	7c 85       	ldd	r23, Y+12	; 0x0c
    2de6:	8d 85       	ldd	r24, Y+13	; 0x0d
    2de8:	9e 85       	ldd	r25, Y+14	; 0x0e
    2dea:	20 e0       	ldi	r18, 0x00	; 0
    2dec:	30 e0       	ldi	r19, 0x00	; 0
    2dee:	40 e2       	ldi	r20, 0x20	; 32
    2df0:	51 e4       	ldi	r21, 0x41	; 65
    2df2:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2df6:	dc 01       	movw	r26, r24
    2df8:	cb 01       	movw	r24, r22
    2dfa:	bc 01       	movw	r22, r24
    2dfc:	cd 01       	movw	r24, r26
    2dfe:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2e02:	dc 01       	movw	r26, r24
    2e04:	cb 01       	movw	r24, r22
    2e06:	9e 83       	std	Y+6, r25	; 0x06
    2e08:	8d 83       	std	Y+5, r24	; 0x05
    2e0a:	0f c0       	rjmp	.+30     	; 0x2e2a <LCD_enu_Init+0x588>
    2e0c:	80 e9       	ldi	r24, 0x90	; 144
    2e0e:	91 e0       	ldi	r25, 0x01	; 1
    2e10:	9c 83       	std	Y+4, r25	; 0x04
    2e12:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    2e14:	8b 81       	ldd	r24, Y+3	; 0x03
    2e16:	9c 81       	ldd	r25, Y+4	; 0x04
    2e18:	01 97       	sbiw	r24, 0x01	; 1
    2e1a:	f1 f7       	brne	.-4      	; 0x2e18 <LCD_enu_Init+0x576>
    2e1c:	9c 83       	std	Y+4, r25	; 0x04
    2e1e:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2e20:	8d 81       	ldd	r24, Y+5	; 0x05
    2e22:	9e 81       	ldd	r25, Y+6	; 0x06
    2e24:	01 97       	sbiw	r24, 0x01	; 1
    2e26:	9e 83       	std	Y+6, r25	; 0x06
    2e28:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2e2a:	8d 81       	ldd	r24, Y+5	; 0x05
    2e2c:	9e 81       	ldd	r25, Y+6	; 0x06
    2e2e:	00 97       	sbiw	r24, 0x00	; 0
    2e30:	69 f7       	brne	.-38     	; 0x2e0c <LCD_enu_Init+0x56a>
    2e32:	14 c0       	rjmp	.+40     	; 0x2e5c <LCD_enu_Init+0x5ba>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2e34:	6f 81       	ldd	r22, Y+7	; 0x07
    2e36:	78 85       	ldd	r23, Y+8	; 0x08
    2e38:	89 85       	ldd	r24, Y+9	; 0x09
    2e3a:	9a 85       	ldd	r25, Y+10	; 0x0a
    2e3c:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2e40:	dc 01       	movw	r26, r24
    2e42:	cb 01       	movw	r24, r22
    2e44:	9e 83       	std	Y+6, r25	; 0x06
    2e46:	8d 83       	std	Y+5, r24	; 0x05
    2e48:	8d 81       	ldd	r24, Y+5	; 0x05
    2e4a:	9e 81       	ldd	r25, Y+6	; 0x06
    2e4c:	9a 83       	std	Y+2, r25	; 0x02
    2e4e:	89 83       	std	Y+1, r24	; 0x01
    2e50:	89 81       	ldd	r24, Y+1	; 0x01
    2e52:	9a 81       	ldd	r25, Y+2	; 0x02
    2e54:	01 97       	sbiw	r24, 0x01	; 1
    2e56:	f1 f7       	brne	.-4      	; 0x2e54 <LCD_enu_Init+0x5b2>
    2e58:	9a 83       	std	Y+2, r25	; 0x02
    2e5a:	89 83       	std	Y+1, r24	; 0x01
    _delay_ms(2);
    LCD_enu_SendCmnd(ENTRY_MOOD);
    2e5c:	86 e0       	ldi	r24, 0x06	; 6
    2e5e:	0e 94 7d 0f 	call	0x1efa	; 0x1efa <LCD_enu_SendCmnd>
    return STATE_OK;
    2e62:	81 e0       	ldi	r24, 0x01	; 1
    #endif
}
    2e64:	c4 5b       	subi	r28, 0xB4	; 180
    2e66:	df 4f       	sbci	r29, 0xFF	; 255
    2e68:	0f b6       	in	r0, 0x3f	; 63
    2e6a:	f8 94       	cli
    2e6c:	de bf       	out	0x3e, r29	; 62
    2e6e:	0f be       	out	0x3f, r0	; 63
    2e70:	cd bf       	out	0x3d, r28	; 61
    2e72:	cf 91       	pop	r28
    2e74:	df 91       	pop	r29
    2e76:	1f 91       	pop	r17
    2e78:	0f 91       	pop	r16
    2e7a:	08 95       	ret

00002e7c <LCD_enu_Clear>:
ES_t LCD_enu_Clear(void){
    2e7c:	df 93       	push	r29
    2e7e:	cf 93       	push	r28
    2e80:	cd b7       	in	r28, 0x3d	; 61
    2e82:	de b7       	in	r29, 0x3e	; 62
    2e84:	2e 97       	sbiw	r28, 0x0e	; 14
    2e86:	0f b6       	in	r0, 0x3f	; 63
    2e88:	f8 94       	cli
    2e8a:	de bf       	out	0x3e, r29	; 62
    2e8c:	0f be       	out	0x3f, r0	; 63
    2e8e:	cd bf       	out	0x3d, r28	; 61
	LCD_enu_SendCmnd(DISPLAY_CLEAR);
    2e90:	81 e0       	ldi	r24, 0x01	; 1
    2e92:	0e 94 7d 0f 	call	0x1efa	; 0x1efa <LCD_enu_SendCmnd>
    2e96:	80 e0       	ldi	r24, 0x00	; 0
    2e98:	90 e0       	ldi	r25, 0x00	; 0
    2e9a:	a0 e0       	ldi	r26, 0x00	; 0
    2e9c:	b0 e4       	ldi	r27, 0x40	; 64
    2e9e:	8b 87       	std	Y+11, r24	; 0x0b
    2ea0:	9c 87       	std	Y+12, r25	; 0x0c
    2ea2:	ad 87       	std	Y+13, r26	; 0x0d
    2ea4:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2ea6:	6b 85       	ldd	r22, Y+11	; 0x0b
    2ea8:	7c 85       	ldd	r23, Y+12	; 0x0c
    2eaa:	8d 85       	ldd	r24, Y+13	; 0x0d
    2eac:	9e 85       	ldd	r25, Y+14	; 0x0e
    2eae:	20 e0       	ldi	r18, 0x00	; 0
    2eb0:	30 e0       	ldi	r19, 0x00	; 0
    2eb2:	4a e7       	ldi	r20, 0x7A	; 122
    2eb4:	55 e4       	ldi	r21, 0x45	; 69
    2eb6:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2eba:	dc 01       	movw	r26, r24
    2ebc:	cb 01       	movw	r24, r22
    2ebe:	8f 83       	std	Y+7, r24	; 0x07
    2ec0:	98 87       	std	Y+8, r25	; 0x08
    2ec2:	a9 87       	std	Y+9, r26	; 0x09
    2ec4:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2ec6:	6f 81       	ldd	r22, Y+7	; 0x07
    2ec8:	78 85       	ldd	r23, Y+8	; 0x08
    2eca:	89 85       	ldd	r24, Y+9	; 0x09
    2ecc:	9a 85       	ldd	r25, Y+10	; 0x0a
    2ece:	20 e0       	ldi	r18, 0x00	; 0
    2ed0:	30 e0       	ldi	r19, 0x00	; 0
    2ed2:	40 e8       	ldi	r20, 0x80	; 128
    2ed4:	5f e3       	ldi	r21, 0x3F	; 63
    2ed6:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    2eda:	88 23       	and	r24, r24
    2edc:	2c f4       	brge	.+10     	; 0x2ee8 <LCD_enu_Clear+0x6c>
		__ticks = 1;
    2ede:	81 e0       	ldi	r24, 0x01	; 1
    2ee0:	90 e0       	ldi	r25, 0x00	; 0
    2ee2:	9e 83       	std	Y+6, r25	; 0x06
    2ee4:	8d 83       	std	Y+5, r24	; 0x05
    2ee6:	3f c0       	rjmp	.+126    	; 0x2f66 <LCD_enu_Clear+0xea>
	else if (__tmp > 65535)
    2ee8:	6f 81       	ldd	r22, Y+7	; 0x07
    2eea:	78 85       	ldd	r23, Y+8	; 0x08
    2eec:	89 85       	ldd	r24, Y+9	; 0x09
    2eee:	9a 85       	ldd	r25, Y+10	; 0x0a
    2ef0:	20 e0       	ldi	r18, 0x00	; 0
    2ef2:	3f ef       	ldi	r19, 0xFF	; 255
    2ef4:	4f e7       	ldi	r20, 0x7F	; 127
    2ef6:	57 e4       	ldi	r21, 0x47	; 71
    2ef8:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    2efc:	18 16       	cp	r1, r24
    2efe:	4c f5       	brge	.+82     	; 0x2f52 <LCD_enu_Clear+0xd6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2f00:	6b 85       	ldd	r22, Y+11	; 0x0b
    2f02:	7c 85       	ldd	r23, Y+12	; 0x0c
    2f04:	8d 85       	ldd	r24, Y+13	; 0x0d
    2f06:	9e 85       	ldd	r25, Y+14	; 0x0e
    2f08:	20 e0       	ldi	r18, 0x00	; 0
    2f0a:	30 e0       	ldi	r19, 0x00	; 0
    2f0c:	40 e2       	ldi	r20, 0x20	; 32
    2f0e:	51 e4       	ldi	r21, 0x41	; 65
    2f10:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2f14:	dc 01       	movw	r26, r24
    2f16:	cb 01       	movw	r24, r22
    2f18:	bc 01       	movw	r22, r24
    2f1a:	cd 01       	movw	r24, r26
    2f1c:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2f20:	dc 01       	movw	r26, r24
    2f22:	cb 01       	movw	r24, r22
    2f24:	9e 83       	std	Y+6, r25	; 0x06
    2f26:	8d 83       	std	Y+5, r24	; 0x05
    2f28:	0f c0       	rjmp	.+30     	; 0x2f48 <LCD_enu_Clear+0xcc>
    2f2a:	80 e9       	ldi	r24, 0x90	; 144
    2f2c:	91 e0       	ldi	r25, 0x01	; 1
    2f2e:	9c 83       	std	Y+4, r25	; 0x04
    2f30:	8b 83       	std	Y+3, r24	; 0x03
    2f32:	8b 81       	ldd	r24, Y+3	; 0x03
    2f34:	9c 81       	ldd	r25, Y+4	; 0x04
    2f36:	01 97       	sbiw	r24, 0x01	; 1
    2f38:	f1 f7       	brne	.-4      	; 0x2f36 <LCD_enu_Clear+0xba>
    2f3a:	9c 83       	std	Y+4, r25	; 0x04
    2f3c:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2f3e:	8d 81       	ldd	r24, Y+5	; 0x05
    2f40:	9e 81       	ldd	r25, Y+6	; 0x06
    2f42:	01 97       	sbiw	r24, 0x01	; 1
    2f44:	9e 83       	std	Y+6, r25	; 0x06
    2f46:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2f48:	8d 81       	ldd	r24, Y+5	; 0x05
    2f4a:	9e 81       	ldd	r25, Y+6	; 0x06
    2f4c:	00 97       	sbiw	r24, 0x00	; 0
    2f4e:	69 f7       	brne	.-38     	; 0x2f2a <LCD_enu_Clear+0xae>
    2f50:	14 c0       	rjmp	.+40     	; 0x2f7a <LCD_enu_Clear+0xfe>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2f52:	6f 81       	ldd	r22, Y+7	; 0x07
    2f54:	78 85       	ldd	r23, Y+8	; 0x08
    2f56:	89 85       	ldd	r24, Y+9	; 0x09
    2f58:	9a 85       	ldd	r25, Y+10	; 0x0a
    2f5a:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2f5e:	dc 01       	movw	r26, r24
    2f60:	cb 01       	movw	r24, r22
    2f62:	9e 83       	std	Y+6, r25	; 0x06
    2f64:	8d 83       	std	Y+5, r24	; 0x05
    2f66:	8d 81       	ldd	r24, Y+5	; 0x05
    2f68:	9e 81       	ldd	r25, Y+6	; 0x06
    2f6a:	9a 83       	std	Y+2, r25	; 0x02
    2f6c:	89 83       	std	Y+1, r24	; 0x01
    2f6e:	89 81       	ldd	r24, Y+1	; 0x01
    2f70:	9a 81       	ldd	r25, Y+2	; 0x02
    2f72:	01 97       	sbiw	r24, 0x01	; 1
    2f74:	f1 f7       	brne	.-4      	; 0x2f72 <LCD_enu_Clear+0xf6>
    2f76:	9a 83       	std	Y+2, r25	; 0x02
    2f78:	89 83       	std	Y+1, r24	; 0x01
	 _delay_ms(2);
	return STATE_OK;
    2f7a:	81 e0       	ldi	r24, 0x01	; 1
}
    2f7c:	2e 96       	adiw	r28, 0x0e	; 14
    2f7e:	0f b6       	in	r0, 0x3f	; 63
    2f80:	f8 94       	cli
    2f82:	de bf       	out	0x3e, r29	; 62
    2f84:	0f be       	out	0x3f, r0	; 63
    2f86:	cd bf       	out	0x3d, r28	; 61
    2f88:	cf 91       	pop	r28
    2f8a:	df 91       	pop	r29
    2f8c:	08 95       	ret

00002f8e <LCD_enu_CreateCustomChar>:
ES_t LCD_enu_CreateCustomChar(u8 Copy_u8_Location, u8 *Copy_pu8_CharArray)
{
    2f8e:	df 93       	push	r29
    2f90:	cf 93       	push	r28
    2f92:	00 d0       	rcall	.+0      	; 0x2f94 <LCD_enu_CreateCustomChar+0x6>
    2f94:	00 d0       	rcall	.+0      	; 0x2f96 <LCD_enu_CreateCustomChar+0x8>
    2f96:	0f 92       	push	r0
    2f98:	cd b7       	in	r28, 0x3d	; 61
    2f9a:	de b7       	in	r29, 0x3e	; 62
    2f9c:	8a 83       	std	Y+2, r24	; 0x02
    2f9e:	7c 83       	std	Y+4, r23	; 0x04
    2fa0:	6b 83       	std	Y+3, r22	; 0x03
    if (Copy_pu8_CharArray != NULL && Copy_u8_Location < MAX_CHARACTERS)
    2fa2:	8b 81       	ldd	r24, Y+3	; 0x03
    2fa4:	9c 81       	ldd	r25, Y+4	; 0x04
    2fa6:	00 97       	sbiw	r24, 0x00	; 0
    2fa8:	49 f1       	breq	.+82     	; 0x2ffc <LCD_enu_CreateCustomChar+0x6e>
    2faa:	8a 81       	ldd	r24, Y+2	; 0x02
    2fac:	88 30       	cpi	r24, 0x08	; 8
    2fae:	30 f5       	brcc	.+76     	; 0x2ffc <LCD_enu_CreateCustomChar+0x6e>
    {
        LCD_enu_SendCmnd(ADDRESS_OF_CGRAM + (Copy_u8_Location * MAX_CHARACTERS));
    2fb0:	8a 81       	ldd	r24, Y+2	; 0x02
    2fb2:	88 2f       	mov	r24, r24
    2fb4:	90 e0       	ldi	r25, 0x00	; 0
    2fb6:	08 96       	adiw	r24, 0x08	; 8
    2fb8:	88 0f       	add	r24, r24
    2fba:	99 1f       	adc	r25, r25
    2fbc:	88 0f       	add	r24, r24
    2fbe:	99 1f       	adc	r25, r25
    2fc0:	88 0f       	add	r24, r24
    2fc2:	99 1f       	adc	r25, r25
    2fc4:	0e 94 7d 0f 	call	0x1efa	; 0x1efa <LCD_enu_SendCmnd>
        for (u8 Local_u8_Counter = 0; Local_u8_Counter < MAX_CHARACTERS; Local_u8_Counter++)
    2fc8:	19 82       	std	Y+1, r1	; 0x01
    2fca:	0e c0       	rjmp	.+28     	; 0x2fe8 <LCD_enu_CreateCustomChar+0x5a>
        {
            LCD_enu_SendChar(Copy_pu8_CharArray[Local_u8_Counter]);
    2fcc:	89 81       	ldd	r24, Y+1	; 0x01
    2fce:	28 2f       	mov	r18, r24
    2fd0:	30 e0       	ldi	r19, 0x00	; 0
    2fd2:	8b 81       	ldd	r24, Y+3	; 0x03
    2fd4:	9c 81       	ldd	r25, Y+4	; 0x04
    2fd6:	fc 01       	movw	r30, r24
    2fd8:	e2 0f       	add	r30, r18
    2fda:	f3 1f       	adc	r31, r19
    2fdc:	80 81       	ld	r24, Z
    2fde:	0e 94 7d 11 	call	0x22fa	; 0x22fa <LCD_enu_SendChar>
ES_t LCD_enu_CreateCustomChar(u8 Copy_u8_Location, u8 *Copy_pu8_CharArray)
{
    if (Copy_pu8_CharArray != NULL && Copy_u8_Location < MAX_CHARACTERS)
    {
        LCD_enu_SendCmnd(ADDRESS_OF_CGRAM + (Copy_u8_Location * MAX_CHARACTERS));
        for (u8 Local_u8_Counter = 0; Local_u8_Counter < MAX_CHARACTERS; Local_u8_Counter++)
    2fe2:	89 81       	ldd	r24, Y+1	; 0x01
    2fe4:	8f 5f       	subi	r24, 0xFF	; 255
    2fe6:	89 83       	std	Y+1, r24	; 0x01
    2fe8:	89 81       	ldd	r24, Y+1	; 0x01
    2fea:	88 30       	cpi	r24, 0x08	; 8
    2fec:	78 f3       	brcs	.-34     	; 0x2fcc <LCD_enu_CreateCustomChar+0x3e>
        {
            LCD_enu_SendChar(Copy_pu8_CharArray[Local_u8_Counter]);
        }
        LCD_enu_SetCursor(0,0);
    2fee:	80 e0       	ldi	r24, 0x00	; 0
    2ff0:	60 e0       	ldi	r22, 0x00	; 0
    2ff2:	0e 94 1d 14 	call	0x283a	; 0x283a <LCD_enu_SetCursor>
        return STATE_OK;
    2ff6:	81 e0       	ldi	r24, 0x01	; 1
    2ff8:	8d 83       	std	Y+5, r24	; 0x05
    2ffa:	02 c0       	rjmp	.+4      	; 0x3000 <LCD_enu_CreateCustomChar+0x72>
    }
    else
        {
        return STATE_OK;
    2ffc:	81 e0       	ldi	r24, 0x01	; 1
    2ffe:	8d 83       	std	Y+5, r24	; 0x05
    3000:	8d 81       	ldd	r24, Y+5	; 0x05
        }
}
    3002:	0f 90       	pop	r0
    3004:	0f 90       	pop	r0
    3006:	0f 90       	pop	r0
    3008:	0f 90       	pop	r0
    300a:	0f 90       	pop	r0
    300c:	cf 91       	pop	r28
    300e:	df 91       	pop	r29
    3010:	08 95       	ret

00003012 <Keypad_enu_Init>:
const u8 Keypad_Au8_Keys[4][4] = KEYPAD_KEYS;
const u8 Keypad_Au8_RowsPins[4] = {KEYPAD_U8_ROW1_PIN, KEYPAD_U8_ROW2_PIN, KEYPAD_U8_ROW3_PIN, KEYPAD_U8_ROW4_PIN};
const u8 Keypad_Au8_ColsPins[4] = {KEYPAD_U8_COLUMN1_PIN, KEYPAD_U8_COLUMN2_PIN, KEYPAD_U8_COLUMN3_PIN, KEYPAD_U8_COLUMN4_PIN};

ES_t Keypad_enu_Init()
{
    3012:	df 93       	push	r29
    3014:	cf 93       	push	r28
    3016:	0f 92       	push	r0
    3018:	cd b7       	in	r28, 0x3d	; 61
    301a:	de b7       	in	r29, 0x3e	; 62
    /*Configure Rows And Columns Pins*/
    for (u8 Local_u8_iterator = 0; Local_u8_iterator < 4; Local_u8_iterator++)
    301c:	19 82       	std	Y+1, r1	; 0x01
    301e:	33 c0       	rjmp	.+102    	; 0x3086 <Keypad_enu_Init+0x74>
    {
        DIO_enu_SetPinDirection(KEYPAD_U8_ROWS_PORT, Keypad_Au8_RowsPins[Local_u8_iterator], DIO_U8_OUTPUT);
    3020:	89 81       	ldd	r24, Y+1	; 0x01
    3022:	88 2f       	mov	r24, r24
    3024:	90 e0       	ldi	r25, 0x00	; 0
    3026:	fc 01       	movw	r30, r24
    3028:	e8 5b       	subi	r30, 0xB8	; 184
    302a:	fe 4f       	sbci	r31, 0xFE	; 254
    302c:	90 81       	ld	r25, Z
    302e:	81 e0       	ldi	r24, 0x01	; 1
    3030:	69 2f       	mov	r22, r25
    3032:	41 e0       	ldi	r20, 0x01	; 1
    3034:	0e 94 6c 1a 	call	0x34d8	; 0x34d8 <DIO_enu_SetPinDirection>
        DIO_enu_SetPinValue(KEYPAD_U8_ROWS_PORT, Keypad_Au8_RowsPins[Local_u8_iterator], DIO_U8_HIGH);
    3038:	89 81       	ldd	r24, Y+1	; 0x01
    303a:	88 2f       	mov	r24, r24
    303c:	90 e0       	ldi	r25, 0x00	; 0
    303e:	fc 01       	movw	r30, r24
    3040:	e8 5b       	subi	r30, 0xB8	; 184
    3042:	fe 4f       	sbci	r31, 0xFE	; 254
    3044:	90 81       	ld	r25, Z
    3046:	81 e0       	ldi	r24, 0x01	; 1
    3048:	69 2f       	mov	r22, r25
    304a:	41 e0       	ldi	r20, 0x01	; 1
    304c:	0e 94 96 1b 	call	0x372c	; 0x372c <DIO_enu_SetPinValue>
        DIO_enu_SetPinDirection(KEYPAD_U8_COLUMNS_PORT, Keypad_Au8_ColsPins[Local_u8_iterator], DIO_U8_INPUT);
    3050:	89 81       	ldd	r24, Y+1	; 0x01
    3052:	88 2f       	mov	r24, r24
    3054:	90 e0       	ldi	r25, 0x00	; 0
    3056:	fc 01       	movw	r30, r24
    3058:	e4 5b       	subi	r30, 0xB4	; 180
    305a:	fe 4f       	sbci	r31, 0xFE	; 254
    305c:	90 81       	ld	r25, Z
    305e:	83 e0       	ldi	r24, 0x03	; 3
    3060:	69 2f       	mov	r22, r25
    3062:	40 e0       	ldi	r20, 0x00	; 0
    3064:	0e 94 6c 1a 	call	0x34d8	; 0x34d8 <DIO_enu_SetPinDirection>
        DIO_enu_SetPinValue(KEYPAD_U8_COLUMNS_PORT, Keypad_Au8_ColsPins[Local_u8_iterator], DIO_U8_HIGH);
    3068:	89 81       	ldd	r24, Y+1	; 0x01
    306a:	88 2f       	mov	r24, r24
    306c:	90 e0       	ldi	r25, 0x00	; 0
    306e:	fc 01       	movw	r30, r24
    3070:	e4 5b       	subi	r30, 0xB4	; 180
    3072:	fe 4f       	sbci	r31, 0xFE	; 254
    3074:	90 81       	ld	r25, Z
    3076:	83 e0       	ldi	r24, 0x03	; 3
    3078:	69 2f       	mov	r22, r25
    307a:	41 e0       	ldi	r20, 0x01	; 1
    307c:	0e 94 96 1b 	call	0x372c	; 0x372c <DIO_enu_SetPinValue>
const u8 Keypad_Au8_ColsPins[4] = {KEYPAD_U8_COLUMN1_PIN, KEYPAD_U8_COLUMN2_PIN, KEYPAD_U8_COLUMN3_PIN, KEYPAD_U8_COLUMN4_PIN};

ES_t Keypad_enu_Init()
{
    /*Configure Rows And Columns Pins*/
    for (u8 Local_u8_iterator = 0; Local_u8_iterator < 4; Local_u8_iterator++)
    3080:	89 81       	ldd	r24, Y+1	; 0x01
    3082:	8f 5f       	subi	r24, 0xFF	; 255
    3084:	89 83       	std	Y+1, r24	; 0x01
    3086:	89 81       	ldd	r24, Y+1	; 0x01
    3088:	84 30       	cpi	r24, 0x04	; 4
    308a:	50 f2       	brcs	.-108    	; 0x3020 <Keypad_enu_Init+0xe>
        DIO_enu_SetPinDirection(KEYPAD_U8_ROWS_PORT, Keypad_Au8_RowsPins[Local_u8_iterator], DIO_U8_OUTPUT);
        DIO_enu_SetPinValue(KEYPAD_U8_ROWS_PORT, Keypad_Au8_RowsPins[Local_u8_iterator], DIO_U8_HIGH);
        DIO_enu_SetPinDirection(KEYPAD_U8_COLUMNS_PORT, Keypad_Au8_ColsPins[Local_u8_iterator], DIO_U8_INPUT);
        DIO_enu_SetPinValue(KEYPAD_U8_COLUMNS_PORT, Keypad_Au8_ColsPins[Local_u8_iterator], DIO_U8_HIGH);
    }
    return STATE_OK;
    308c:	81 e0       	ldi	r24, 0x01	; 1
}
    308e:	0f 90       	pop	r0
    3090:	cf 91       	pop	r28
    3092:	df 91       	pop	r29
    3094:	08 95       	ret

00003096 <Keypad_enu_getKey>:

ES_t Keypad_enu_getKey(u8 *Copy_pu8_ReturnedKey)
{
    3096:	df 93       	push	r29
    3098:	cf 93       	push	r28
    309a:	cd b7       	in	r28, 0x3d	; 61
    309c:	de b7       	in	r29, 0x3e	; 62
    309e:	65 97       	sbiw	r28, 0x15	; 21
    30a0:	0f b6       	in	r0, 0x3f	; 63
    30a2:	f8 94       	cli
    30a4:	de bf       	out	0x3e, r29	; 62
    30a6:	0f be       	out	0x3f, r0	; 63
    30a8:	cd bf       	out	0x3d, r28	; 61
    30aa:	9d 8b       	std	Y+21, r25	; 0x15
    30ac:	8c 8b       	std	Y+20, r24	; 0x14
    u8 Local_u8_errorState = STATE_OK, Local_u8_rowsCounter, Local_u8_colsCounter, Local_u8_ReturnedState = 0, Local_u8_Flag = 0;
    30ae:	81 e0       	ldi	r24, 0x01	; 1
    30b0:	8a 8b       	std	Y+18, r24	; 0x12
    30b2:	1b 8a       	std	Y+19, r1	; 0x13
    30b4:	1f 86       	std	Y+15, r1	; 0x0f
    if (Copy_pu8_ReturnedKey != NULL)
    30b6:	8c 89       	ldd	r24, Y+20	; 0x14
    30b8:	9d 89       	ldd	r25, Y+21	; 0x15
    30ba:	00 97       	sbiw	r24, 0x00	; 0
    30bc:	09 f4       	brne	.+2      	; 0x30c0 <Keypad_enu_getKey+0x2a>
    30be:	f0 c0       	rjmp	.+480    	; 0x32a0 <Keypad_enu_getKey+0x20a>
    {
        *Copy_pu8_ReturnedKey = NO_KEY_PRESSED;
    30c0:	ec 89       	ldd	r30, Y+20	; 0x14
    30c2:	fd 89       	ldd	r31, Y+21	; 0x15
    30c4:	8f ef       	ldi	r24, 0xFF	; 255
    30c6:	80 83       	st	Z, r24
        /*Activate Each Row*/
        for (Local_u8_rowsCounter = 0; Local_u8_rowsCounter < 4; Local_u8_rowsCounter++)
    30c8:	19 8a       	std	Y+17, r1	; 0x11
    30ca:	e5 c0       	rjmp	.+458    	; 0x3296 <Keypad_enu_getKey+0x200>
        {
            DIO_enu_SetPinValue(KEYPAD_U8_ROWS_PORT, Keypad_Au8_RowsPins[Local_u8_rowsCounter], DIO_U8_LOW);
    30cc:	89 89       	ldd	r24, Y+17	; 0x11
    30ce:	88 2f       	mov	r24, r24
    30d0:	90 e0       	ldi	r25, 0x00	; 0
    30d2:	fc 01       	movw	r30, r24
    30d4:	e8 5b       	subi	r30, 0xB8	; 184
    30d6:	fe 4f       	sbci	r31, 0xFE	; 254
    30d8:	90 81       	ld	r25, Z
    30da:	81 e0       	ldi	r24, 0x01	; 1
    30dc:	69 2f       	mov	r22, r25
    30de:	40 e0       	ldi	r20, 0x00	; 0
    30e0:	0e 94 96 1b 	call	0x372c	; 0x372c <DIO_enu_SetPinValue>
            /*Check Which Input Pin Has Zero*/
            for (Local_u8_colsCounter = 0; Local_u8_colsCounter < 4; Local_u8_colsCounter++)
    30e4:	18 8a       	std	Y+16, r1	; 0x10
    30e6:	c1 c0       	rjmp	.+386    	; 0x326a <Keypad_enu_getKey+0x1d4>
            {
                DIO_enu_GetPinValue(KEYPAD_U8_COLUMNS_PORT, Keypad_Au8_ColsPins[Local_u8_colsCounter], &Local_u8_ReturnedState);
    30e8:	88 89       	ldd	r24, Y+16	; 0x10
    30ea:	88 2f       	mov	r24, r24
    30ec:	90 e0       	ldi	r25, 0x00	; 0
    30ee:	fc 01       	movw	r30, r24
    30f0:	e4 5b       	subi	r30, 0xB4	; 180
    30f2:	fe 4f       	sbci	r31, 0xFE	; 254
    30f4:	90 81       	ld	r25, Z
    30f6:	9e 01       	movw	r18, r28
    30f8:	2d 5e       	subi	r18, 0xED	; 237
    30fa:	3f 4f       	sbci	r19, 0xFF	; 255
    30fc:	83 e0       	ldi	r24, 0x03	; 3
    30fe:	69 2f       	mov	r22, r25
    3100:	a9 01       	movw	r20, r18
    3102:	0e 94 c0 1c 	call	0x3980	; 0x3980 <DIO_enu_GetPinValue>
                if (!Local_u8_ReturnedState) // Switch is Pressed
    3106:	8b 89       	ldd	r24, Y+19	; 0x13
    3108:	88 23       	and	r24, r24
    310a:	09 f0       	breq	.+2      	; 0x310e <Keypad_enu_getKey+0x78>
    310c:	ab c0       	rjmp	.+342    	; 0x3264 <Keypad_enu_getKey+0x1ce>
    310e:	80 e0       	ldi	r24, 0x00	; 0
    3110:	90 e0       	ldi	r25, 0x00	; 0
    3112:	a0 ea       	ldi	r26, 0xA0	; 160
    3114:	b1 e4       	ldi	r27, 0x41	; 65
    3116:	8b 87       	std	Y+11, r24	; 0x0b
    3118:	9c 87       	std	Y+12, r25	; 0x0c
    311a:	ad 87       	std	Y+13, r26	; 0x0d
    311c:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    311e:	6b 85       	ldd	r22, Y+11	; 0x0b
    3120:	7c 85       	ldd	r23, Y+12	; 0x0c
    3122:	8d 85       	ldd	r24, Y+13	; 0x0d
    3124:	9e 85       	ldd	r25, Y+14	; 0x0e
    3126:	20 e0       	ldi	r18, 0x00	; 0
    3128:	30 e0       	ldi	r19, 0x00	; 0
    312a:	4a e7       	ldi	r20, 0x7A	; 122
    312c:	55 e4       	ldi	r21, 0x45	; 69
    312e:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    3132:	dc 01       	movw	r26, r24
    3134:	cb 01       	movw	r24, r22
    3136:	8f 83       	std	Y+7, r24	; 0x07
    3138:	98 87       	std	Y+8, r25	; 0x08
    313a:	a9 87       	std	Y+9, r26	; 0x09
    313c:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    313e:	6f 81       	ldd	r22, Y+7	; 0x07
    3140:	78 85       	ldd	r23, Y+8	; 0x08
    3142:	89 85       	ldd	r24, Y+9	; 0x09
    3144:	9a 85       	ldd	r25, Y+10	; 0x0a
    3146:	20 e0       	ldi	r18, 0x00	; 0
    3148:	30 e0       	ldi	r19, 0x00	; 0
    314a:	40 e8       	ldi	r20, 0x80	; 128
    314c:	5f e3       	ldi	r21, 0x3F	; 63
    314e:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    3152:	88 23       	and	r24, r24
    3154:	2c f4       	brge	.+10     	; 0x3160 <Keypad_enu_getKey+0xca>
		__ticks = 1;
    3156:	81 e0       	ldi	r24, 0x01	; 1
    3158:	90 e0       	ldi	r25, 0x00	; 0
    315a:	9e 83       	std	Y+6, r25	; 0x06
    315c:	8d 83       	std	Y+5, r24	; 0x05
    315e:	3f c0       	rjmp	.+126    	; 0x31de <Keypad_enu_getKey+0x148>
	else if (__tmp > 65535)
    3160:	6f 81       	ldd	r22, Y+7	; 0x07
    3162:	78 85       	ldd	r23, Y+8	; 0x08
    3164:	89 85       	ldd	r24, Y+9	; 0x09
    3166:	9a 85       	ldd	r25, Y+10	; 0x0a
    3168:	20 e0       	ldi	r18, 0x00	; 0
    316a:	3f ef       	ldi	r19, 0xFF	; 255
    316c:	4f e7       	ldi	r20, 0x7F	; 127
    316e:	57 e4       	ldi	r21, 0x47	; 71
    3170:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    3174:	18 16       	cp	r1, r24
    3176:	4c f5       	brge	.+82     	; 0x31ca <Keypad_enu_getKey+0x134>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3178:	6b 85       	ldd	r22, Y+11	; 0x0b
    317a:	7c 85       	ldd	r23, Y+12	; 0x0c
    317c:	8d 85       	ldd	r24, Y+13	; 0x0d
    317e:	9e 85       	ldd	r25, Y+14	; 0x0e
    3180:	20 e0       	ldi	r18, 0x00	; 0
    3182:	30 e0       	ldi	r19, 0x00	; 0
    3184:	40 e2       	ldi	r20, 0x20	; 32
    3186:	51 e4       	ldi	r21, 0x41	; 65
    3188:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    318c:	dc 01       	movw	r26, r24
    318e:	cb 01       	movw	r24, r22
    3190:	bc 01       	movw	r22, r24
    3192:	cd 01       	movw	r24, r26
    3194:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    3198:	dc 01       	movw	r26, r24
    319a:	cb 01       	movw	r24, r22
    319c:	9e 83       	std	Y+6, r25	; 0x06
    319e:	8d 83       	std	Y+5, r24	; 0x05
    31a0:	0f c0       	rjmp	.+30     	; 0x31c0 <Keypad_enu_getKey+0x12a>
    31a2:	80 e9       	ldi	r24, 0x90	; 144
    31a4:	91 e0       	ldi	r25, 0x01	; 1
    31a6:	9c 83       	std	Y+4, r25	; 0x04
    31a8:	8b 83       	std	Y+3, r24	; 0x03
    31aa:	8b 81       	ldd	r24, Y+3	; 0x03
    31ac:	9c 81       	ldd	r25, Y+4	; 0x04
    31ae:	01 97       	sbiw	r24, 0x01	; 1
    31b0:	f1 f7       	brne	.-4      	; 0x31ae <Keypad_enu_getKey+0x118>
    31b2:	9c 83       	std	Y+4, r25	; 0x04
    31b4:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    31b6:	8d 81       	ldd	r24, Y+5	; 0x05
    31b8:	9e 81       	ldd	r25, Y+6	; 0x06
    31ba:	01 97       	sbiw	r24, 0x01	; 1
    31bc:	9e 83       	std	Y+6, r25	; 0x06
    31be:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    31c0:	8d 81       	ldd	r24, Y+5	; 0x05
    31c2:	9e 81       	ldd	r25, Y+6	; 0x06
    31c4:	00 97       	sbiw	r24, 0x00	; 0
    31c6:	69 f7       	brne	.-38     	; 0x31a2 <Keypad_enu_getKey+0x10c>
    31c8:	14 c0       	rjmp	.+40     	; 0x31f2 <Keypad_enu_getKey+0x15c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    31ca:	6f 81       	ldd	r22, Y+7	; 0x07
    31cc:	78 85       	ldd	r23, Y+8	; 0x08
    31ce:	89 85       	ldd	r24, Y+9	; 0x09
    31d0:	9a 85       	ldd	r25, Y+10	; 0x0a
    31d2:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    31d6:	dc 01       	movw	r26, r24
    31d8:	cb 01       	movw	r24, r22
    31da:	9e 83       	std	Y+6, r25	; 0x06
    31dc:	8d 83       	std	Y+5, r24	; 0x05
    31de:	8d 81       	ldd	r24, Y+5	; 0x05
    31e0:	9e 81       	ldd	r25, Y+6	; 0x06
    31e2:	9a 83       	std	Y+2, r25	; 0x02
    31e4:	89 83       	std	Y+1, r24	; 0x01
    31e6:	89 81       	ldd	r24, Y+1	; 0x01
    31e8:	9a 81       	ldd	r25, Y+2	; 0x02
    31ea:	01 97       	sbiw	r24, 0x01	; 1
    31ec:	f1 f7       	brne	.-4      	; 0x31ea <Keypad_enu_getKey+0x154>
    31ee:	9a 83       	std	Y+2, r25	; 0x02
    31f0:	89 83       	std	Y+1, r24	; 0x01
                {
                    // Bouncing Handling
                    _delay_ms(20);
                    DIO_enu_GetPinValue(KEYPAD_U8_COLUMNS_PORT, Keypad_Au8_ColsPins[Local_u8_colsCounter], &Local_u8_ReturnedState);
    31f2:	88 89       	ldd	r24, Y+16	; 0x10
    31f4:	88 2f       	mov	r24, r24
    31f6:	90 e0       	ldi	r25, 0x00	; 0
    31f8:	fc 01       	movw	r30, r24
    31fa:	e4 5b       	subi	r30, 0xB4	; 180
    31fc:	fe 4f       	sbci	r31, 0xFE	; 254
    31fe:	90 81       	ld	r25, Z
    3200:	9e 01       	movw	r18, r28
    3202:	2d 5e       	subi	r18, 0xED	; 237
    3204:	3f 4f       	sbci	r19, 0xFF	; 255
    3206:	83 e0       	ldi	r24, 0x03	; 3
    3208:	69 2f       	mov	r22, r25
    320a:	a9 01       	movw	r20, r18
    320c:	0e 94 c0 1c 	call	0x3980	; 0x3980 <DIO_enu_GetPinValue>
    3210:	0f c0       	rjmp	.+30     	; 0x3230 <Keypad_enu_getKey+0x19a>
                    // Check if pin still low
                    while (!Local_u8_ReturnedState)
                    {
                        DIO_enu_GetPinValue(KEYPAD_U8_COLUMNS_PORT, Keypad_Au8_ColsPins[Local_u8_colsCounter], &Local_u8_ReturnedState);
    3212:	88 89       	ldd	r24, Y+16	; 0x10
    3214:	88 2f       	mov	r24, r24
    3216:	90 e0       	ldi	r25, 0x00	; 0
    3218:	fc 01       	movw	r30, r24
    321a:	e4 5b       	subi	r30, 0xB4	; 180
    321c:	fe 4f       	sbci	r31, 0xFE	; 254
    321e:	90 81       	ld	r25, Z
    3220:	9e 01       	movw	r18, r28
    3222:	2d 5e       	subi	r18, 0xED	; 237
    3224:	3f 4f       	sbci	r19, 0xFF	; 255
    3226:	83 e0       	ldi	r24, 0x03	; 3
    3228:	69 2f       	mov	r22, r25
    322a:	a9 01       	movw	r20, r18
    322c:	0e 94 c0 1c 	call	0x3980	; 0x3980 <DIO_enu_GetPinValue>
                {
                    // Bouncing Handling
                    _delay_ms(20);
                    DIO_enu_GetPinValue(KEYPAD_U8_COLUMNS_PORT, Keypad_Au8_ColsPins[Local_u8_colsCounter], &Local_u8_ReturnedState);
                    // Check if pin still low
                    while (!Local_u8_ReturnedState)
    3230:	8b 89       	ldd	r24, Y+19	; 0x13
    3232:	88 23       	and	r24, r24
    3234:	71 f3       	breq	.-36     	; 0x3212 <Keypad_enu_getKey+0x17c>
                    {
                        DIO_enu_GetPinValue(KEYPAD_U8_COLUMNS_PORT, Keypad_Au8_ColsPins[Local_u8_colsCounter], &Local_u8_ReturnedState);
                    }
                    *Copy_pu8_ReturnedKey = Keypad_Au8_Keys[Local_u8_rowsCounter][Local_u8_colsCounter];
    3236:	89 89       	ldd	r24, Y+17	; 0x11
    3238:	48 2f       	mov	r20, r24
    323a:	50 e0       	ldi	r21, 0x00	; 0
    323c:	88 89       	ldd	r24, Y+16	; 0x10
    323e:	28 2f       	mov	r18, r24
    3240:	30 e0       	ldi	r19, 0x00	; 0
    3242:	ca 01       	movw	r24, r20
    3244:	88 0f       	add	r24, r24
    3246:	99 1f       	adc	r25, r25
    3248:	88 0f       	add	r24, r24
    324a:	99 1f       	adc	r25, r25
    324c:	82 0f       	add	r24, r18
    324e:	93 1f       	adc	r25, r19
    3250:	fc 01       	movw	r30, r24
    3252:	e8 5c       	subi	r30, 0xC8	; 200
    3254:	fe 4f       	sbci	r31, 0xFE	; 254
    3256:	80 81       	ld	r24, Z
    3258:	ec 89       	ldd	r30, Y+20	; 0x14
    325a:	fd 89       	ldd	r31, Y+21	; 0x15
    325c:	80 83       	st	Z, r24
                    Local_u8_Flag = 1;
    325e:	81 e0       	ldi	r24, 0x01	; 1
    3260:	8f 87       	std	Y+15, r24	; 0x0f
    3262:	07 c0       	rjmp	.+14     	; 0x3272 <Keypad_enu_getKey+0x1dc>
        /*Activate Each Row*/
        for (Local_u8_rowsCounter = 0; Local_u8_rowsCounter < 4; Local_u8_rowsCounter++)
        {
            DIO_enu_SetPinValue(KEYPAD_U8_ROWS_PORT, Keypad_Au8_RowsPins[Local_u8_rowsCounter], DIO_U8_LOW);
            /*Check Which Input Pin Has Zero*/
            for (Local_u8_colsCounter = 0; Local_u8_colsCounter < 4; Local_u8_colsCounter++)
    3264:	88 89       	ldd	r24, Y+16	; 0x10
    3266:	8f 5f       	subi	r24, 0xFF	; 255
    3268:	88 8b       	std	Y+16, r24	; 0x10
    326a:	88 89       	ldd	r24, Y+16	; 0x10
    326c:	84 30       	cpi	r24, 0x04	; 4
    326e:	08 f4       	brcc	.+2      	; 0x3272 <Keypad_enu_getKey+0x1dc>
    3270:	3b cf       	rjmp	.-394    	; 0x30e8 <Keypad_enu_getKey+0x52>
                    Local_u8_Flag = 1;
                    break;
                }
            }
            // Deactivate the current Row
            DIO_enu_SetPinValue(KEYPAD_U8_ROWS_PORT, Keypad_Au8_RowsPins[Local_u8_rowsCounter], DIO_U8_HIGH);
    3272:	89 89       	ldd	r24, Y+17	; 0x11
    3274:	88 2f       	mov	r24, r24
    3276:	90 e0       	ldi	r25, 0x00	; 0
    3278:	fc 01       	movw	r30, r24
    327a:	e8 5b       	subi	r30, 0xB8	; 184
    327c:	fe 4f       	sbci	r31, 0xFE	; 254
    327e:	90 81       	ld	r25, Z
    3280:	81 e0       	ldi	r24, 0x01	; 1
    3282:	69 2f       	mov	r22, r25
    3284:	41 e0       	ldi	r20, 0x01	; 1
    3286:	0e 94 96 1b 	call	0x372c	; 0x372c <DIO_enu_SetPinValue>
            if (Local_u8_Flag)
    328a:	8f 85       	ldd	r24, Y+15	; 0x0f
    328c:	88 23       	and	r24, r24
    328e:	49 f4       	brne	.+18     	; 0x32a2 <Keypad_enu_getKey+0x20c>
    u8 Local_u8_errorState = STATE_OK, Local_u8_rowsCounter, Local_u8_colsCounter, Local_u8_ReturnedState = 0, Local_u8_Flag = 0;
    if (Copy_pu8_ReturnedKey != NULL)
    {
        *Copy_pu8_ReturnedKey = NO_KEY_PRESSED;
        /*Activate Each Row*/
        for (Local_u8_rowsCounter = 0; Local_u8_rowsCounter < 4; Local_u8_rowsCounter++)
    3290:	89 89       	ldd	r24, Y+17	; 0x11
    3292:	8f 5f       	subi	r24, 0xFF	; 255
    3294:	89 8b       	std	Y+17, r24	; 0x11
    3296:	89 89       	ldd	r24, Y+17	; 0x11
    3298:	84 30       	cpi	r24, 0x04	; 4
    329a:	08 f4       	brcc	.+2      	; 0x329e <Keypad_enu_getKey+0x208>
    329c:	17 cf       	rjmp	.-466    	; 0x30cc <Keypad_enu_getKey+0x36>
    329e:	01 c0       	rjmp	.+2      	; 0x32a2 <Keypad_enu_getKey+0x20c>
            }
        }
    }
    else
    {
        Local_u8_errorState = STATE_NOT_OK;
    32a0:	1a 8a       	std	Y+18, r1	; 0x12
    }
    return Local_u8_errorState;
    32a2:	8a 89       	ldd	r24, Y+18	; 0x12
}
    32a4:	65 96       	adiw	r28, 0x15	; 21
    32a6:	0f b6       	in	r0, 0x3f	; 63
    32a8:	f8 94       	cli
    32aa:	de bf       	out	0x3e, r29	; 62
    32ac:	0f be       	out	0x3f, r0	; 63
    32ae:	cd bf       	out	0x3d, r28	; 61
    32b0:	cf 91       	pop	r28
    32b2:	df 91       	pop	r29
    32b4:	08 95       	ret

000032b6 <DC_Motor_enu_Init>:

#include "../../2-HAL/DC_Motor/DC_Motor_Config.h"
#include "../../2-HAL/DC_Motor/DC_Motor_Private.h"

ES_t DC_Motor_enu_Init(u8 Copy_u8_M1_State, u8 Copy_u8_M2_State)
{
    32b6:	df 93       	push	r29
    32b8:	cf 93       	push	r28
    32ba:	00 d0       	rcall	.+0      	; 0x32bc <DC_Motor_enu_Init+0x6>
    32bc:	0f 92       	push	r0
    32be:	cd b7       	in	r28, 0x3d	; 61
    32c0:	de b7       	in	r29, 0x3e	; 62
    32c2:	8a 83       	std	Y+2, r24	; 0x02
    32c4:	6b 83       	std	Y+3, r22	; 0x03
    u8 Local_u8_errorState = STATE_OK;
    32c6:	81 e0       	ldi	r24, 0x01	; 1
    32c8:	89 83       	std	Y+1, r24	; 0x01
    if ((Copy_u8_M1_State == 1 || Copy_u8_M1_State == 0) && (Copy_u8_M2_State == 1 || Copy_u8_M2_State == 0))
    32ca:	8a 81       	ldd	r24, Y+2	; 0x02
    32cc:	81 30       	cpi	r24, 0x01	; 1
    32ce:	19 f0       	breq	.+6      	; 0x32d6 <DC_Motor_enu_Init+0x20>
    32d0:	8a 81       	ldd	r24, Y+2	; 0x02
    32d2:	88 23       	and	r24, r24
    32d4:	59 f5       	brne	.+86     	; 0x332c <DC_Motor_enu_Init+0x76>
    32d6:	8b 81       	ldd	r24, Y+3	; 0x03
    32d8:	81 30       	cpi	r24, 0x01	; 1
    32da:	19 f0       	breq	.+6      	; 0x32e2 <DC_Motor_enu_Init+0x2c>
    32dc:	8b 81       	ldd	r24, Y+3	; 0x03
    32de:	88 23       	and	r24, r24
    32e0:	29 f5       	brne	.+74     	; 0x332c <DC_Motor_enu_Init+0x76>
    {
        if (Copy_u8_M1_State == CONNECTED)
    32e2:	8a 81       	ldd	r24, Y+2	; 0x02
    32e4:	81 30       	cpi	r24, 0x01	; 1
    32e6:	79 f4       	brne	.+30     	; 0x3306 <DC_Motor_enu_Init+0x50>
        {
            DIO_enu_SetPinDirection(MOTOR_ENA_PORT, MOTOR_ENA_PIN, DIO_U8_OUTPUT);
    32e8:	82 e0       	ldi	r24, 0x02	; 2
    32ea:	64 e0       	ldi	r22, 0x04	; 4
    32ec:	41 e0       	ldi	r20, 0x01	; 1
    32ee:	0e 94 6c 1a 	call	0x34d8	; 0x34d8 <DIO_enu_SetPinDirection>
            DIO_enu_SetPinDirection(MOTOR_IN1_PORT, MOTOR_IN1_PIN, DIO_U8_OUTPUT);
    32f2:	82 e0       	ldi	r24, 0x02	; 2
    32f4:	60 e0       	ldi	r22, 0x00	; 0
    32f6:	41 e0       	ldi	r20, 0x01	; 1
    32f8:	0e 94 6c 1a 	call	0x34d8	; 0x34d8 <DIO_enu_SetPinDirection>
            DIO_enu_SetPinDirection(MOTOR_IN2_PORT, MOTOR_IN2_PIN, DIO_U8_OUTPUT);
    32fc:	82 e0       	ldi	r24, 0x02	; 2
    32fe:	61 e0       	ldi	r22, 0x01	; 1
    3300:	41 e0       	ldi	r20, 0x01	; 1
    3302:	0e 94 6c 1a 	call	0x34d8	; 0x34d8 <DIO_enu_SetPinDirection>
        }
        if (Copy_u8_M2_State == CONNECTED)
    3306:	8b 81       	ldd	r24, Y+3	; 0x03
    3308:	81 30       	cpi	r24, 0x01	; 1
    330a:	89 f4       	brne	.+34     	; 0x332e <DC_Motor_enu_Init+0x78>
        {
            DIO_enu_SetPinDirection(MOTOR_ENB_PORT, MOTOR_ENB_PIN, DIO_U8_OUTPUT);
    330c:	82 e0       	ldi	r24, 0x02	; 2
    330e:	65 e0       	ldi	r22, 0x05	; 5
    3310:	41 e0       	ldi	r20, 0x01	; 1
    3312:	0e 94 6c 1a 	call	0x34d8	; 0x34d8 <DIO_enu_SetPinDirection>
            DIO_enu_SetPinDirection(MOTOR_IN3_PORT, MOTOR_IN3_PIN, DIO_U8_OUTPUT);
    3316:	82 e0       	ldi	r24, 0x02	; 2
    3318:	62 e0       	ldi	r22, 0x02	; 2
    331a:	41 e0       	ldi	r20, 0x01	; 1
    331c:	0e 94 6c 1a 	call	0x34d8	; 0x34d8 <DIO_enu_SetPinDirection>
            DIO_enu_SetPinDirection(MOTOR_IN4_PORT, MOTOR_IN4_PIN, DIO_U8_OUTPUT);
    3320:	82 e0       	ldi	r24, 0x02	; 2
    3322:	63 e0       	ldi	r22, 0x03	; 3
    3324:	41 e0       	ldi	r20, 0x01	; 1
    3326:	0e 94 6c 1a 	call	0x34d8	; 0x34d8 <DIO_enu_SetPinDirection>
    332a:	01 c0       	rjmp	.+2      	; 0x332e <DC_Motor_enu_Init+0x78>
        }
    }
    else
    {
        Local_u8_errorState = STATE_NOT_OK;
    332c:	19 82       	std	Y+1, r1	; 0x01
    }
    return Local_u8_errorState;
    332e:	89 81       	ldd	r24, Y+1	; 0x01
}
    3330:	0f 90       	pop	r0
    3332:	0f 90       	pop	r0
    3334:	0f 90       	pop	r0
    3336:	cf 91       	pop	r28
    3338:	df 91       	pop	r29
    333a:	08 95       	ret

0000333c <DC_Motor_enu_Rotate>:
ES_t DC_Motor_enu_Rotate(u8 Copy_u8_Motor, u8 Copy_u8_Direction)
{
    333c:	df 93       	push	r29
    333e:	cf 93       	push	r28
    3340:	cd b7       	in	r28, 0x3d	; 61
    3342:	de b7       	in	r29, 0x3e	; 62
    3344:	29 97       	sbiw	r28, 0x09	; 9
    3346:	0f b6       	in	r0, 0x3f	; 63
    3348:	f8 94       	cli
    334a:	de bf       	out	0x3e, r29	; 62
    334c:	0f be       	out	0x3f, r0	; 63
    334e:	cd bf       	out	0x3d, r28	; 61
    3350:	8a 83       	std	Y+2, r24	; 0x02
    3352:	6b 83       	std	Y+3, r22	; 0x03
    u8 Local_u8_errorState = STATE_OK;
    3354:	81 e0       	ldi	r24, 0x01	; 1
    3356:	89 83       	std	Y+1, r24	; 0x01
    switch (Copy_u8_Motor)
    3358:	8a 81       	ldd	r24, Y+2	; 0x02
    335a:	28 2f       	mov	r18, r24
    335c:	30 e0       	ldi	r19, 0x00	; 0
    335e:	39 87       	std	Y+9, r19	; 0x09
    3360:	28 87       	std	Y+8, r18	; 0x08
    3362:	88 85       	ldd	r24, Y+8	; 0x08
    3364:	99 85       	ldd	r25, Y+9	; 0x09
    3366:	00 97       	sbiw	r24, 0x00	; 0
    3368:	31 f0       	breq	.+12     	; 0x3376 <DC_Motor_enu_Rotate+0x3a>
    336a:	28 85       	ldd	r18, Y+8	; 0x08
    336c:	39 85       	ldd	r19, Y+9	; 0x09
    336e:	21 30       	cpi	r18, 0x01	; 1
    3370:	31 05       	cpc	r19, r1
    3372:	89 f1       	breq	.+98     	; 0x33d6 <DC_Motor_enu_Rotate+0x9a>
    3374:	60 c0       	rjmp	.+192    	; 0x3436 <DC_Motor_enu_Rotate+0xfa>
    {
    case MOTOR1:
        switch (Copy_u8_Direction)
    3376:	8b 81       	ldd	r24, Y+3	; 0x03
    3378:	28 2f       	mov	r18, r24
    337a:	30 e0       	ldi	r19, 0x00	; 0
    337c:	3f 83       	std	Y+7, r19	; 0x07
    337e:	2e 83       	std	Y+6, r18	; 0x06
    3380:	8e 81       	ldd	r24, Y+6	; 0x06
    3382:	9f 81       	ldd	r25, Y+7	; 0x07
    3384:	00 97       	sbiw	r24, 0x00	; 0
    3386:	a9 f0       	breq	.+42     	; 0x33b2 <DC_Motor_enu_Rotate+0x76>
    3388:	2e 81       	ldd	r18, Y+6	; 0x06
    338a:	3f 81       	ldd	r19, Y+7	; 0x07
    338c:	21 30       	cpi	r18, 0x01	; 1
    338e:	31 05       	cpc	r19, r1
    3390:	01 f5       	brne	.+64     	; 0x33d2 <DC_Motor_enu_Rotate+0x96>
        {
        case CW:
            DIO_enu_SetPinValue(MOTOR_ENA_PORT, MOTOR_ENA_PIN, DIO_U8_HIGH);
    3392:	82 e0       	ldi	r24, 0x02	; 2
    3394:	64 e0       	ldi	r22, 0x04	; 4
    3396:	41 e0       	ldi	r20, 0x01	; 1
    3398:	0e 94 96 1b 	call	0x372c	; 0x372c <DIO_enu_SetPinValue>
            DIO_enu_SetPinValue(MOTOR_IN1_PORT, MOTOR_IN1_PIN, DIO_U8_HIGH);
    339c:	82 e0       	ldi	r24, 0x02	; 2
    339e:	60 e0       	ldi	r22, 0x00	; 0
    33a0:	41 e0       	ldi	r20, 0x01	; 1
    33a2:	0e 94 96 1b 	call	0x372c	; 0x372c <DIO_enu_SetPinValue>
            DIO_enu_SetPinValue(MOTOR_IN2_PORT, MOTOR_IN2_PIN, DIO_U8_LOW);
    33a6:	82 e0       	ldi	r24, 0x02	; 2
    33a8:	61 e0       	ldi	r22, 0x01	; 1
    33aa:	40 e0       	ldi	r20, 0x00	; 0
    33ac:	0e 94 96 1b 	call	0x372c	; 0x372c <DIO_enu_SetPinValue>
    33b0:	43 c0       	rjmp	.+134    	; 0x3438 <DC_Motor_enu_Rotate+0xfc>
            break;
        case CCW:
            DIO_enu_SetPinValue(MOTOR_ENB_PORT, MOTOR_ENA_PIN, DIO_U8_HIGH);
    33b2:	82 e0       	ldi	r24, 0x02	; 2
    33b4:	64 e0       	ldi	r22, 0x04	; 4
    33b6:	41 e0       	ldi	r20, 0x01	; 1
    33b8:	0e 94 96 1b 	call	0x372c	; 0x372c <DIO_enu_SetPinValue>
            DIO_enu_SetPinValue(MOTOR_IN1_PORT, MOTOR_IN1_PIN, DIO_U8_LOW);
    33bc:	82 e0       	ldi	r24, 0x02	; 2
    33be:	60 e0       	ldi	r22, 0x00	; 0
    33c0:	40 e0       	ldi	r20, 0x00	; 0
    33c2:	0e 94 96 1b 	call	0x372c	; 0x372c <DIO_enu_SetPinValue>
            DIO_enu_SetPinValue(MOTOR_IN2_PORT, MOTOR_IN2_PIN, DIO_U8_HIGH);
    33c6:	82 e0       	ldi	r24, 0x02	; 2
    33c8:	61 e0       	ldi	r22, 0x01	; 1
    33ca:	41 e0       	ldi	r20, 0x01	; 1
    33cc:	0e 94 96 1b 	call	0x372c	; 0x372c <DIO_enu_SetPinValue>
    33d0:	33 c0       	rjmp	.+102    	; 0x3438 <DC_Motor_enu_Rotate+0xfc>
            
            break;
        default:
            Local_u8_errorState = STATE_NOT_OK;
    33d2:	19 82       	std	Y+1, r1	; 0x01
    33d4:	31 c0       	rjmp	.+98     	; 0x3438 <DC_Motor_enu_Rotate+0xfc>
            break;
        }
        break;
    case MOTOR2:
        switch (Copy_u8_Direction)
    33d6:	8b 81       	ldd	r24, Y+3	; 0x03
    33d8:	28 2f       	mov	r18, r24
    33da:	30 e0       	ldi	r19, 0x00	; 0
    33dc:	3d 83       	std	Y+5, r19	; 0x05
    33de:	2c 83       	std	Y+4, r18	; 0x04
    33e0:	8c 81       	ldd	r24, Y+4	; 0x04
    33e2:	9d 81       	ldd	r25, Y+5	; 0x05
    33e4:	00 97       	sbiw	r24, 0x00	; 0
    33e6:	a9 f0       	breq	.+42     	; 0x3412 <DC_Motor_enu_Rotate+0xd6>
    33e8:	2c 81       	ldd	r18, Y+4	; 0x04
    33ea:	3d 81       	ldd	r19, Y+5	; 0x05
    33ec:	21 30       	cpi	r18, 0x01	; 1
    33ee:	31 05       	cpc	r19, r1
    33f0:	01 f5       	brne	.+64     	; 0x3432 <DC_Motor_enu_Rotate+0xf6>
        {
        case CW:
            DIO_enu_SetPinValue(MOTOR_ENB_PORT, MOTOR_ENB_PIN, DIO_U8_HIGH);
    33f2:	82 e0       	ldi	r24, 0x02	; 2
    33f4:	65 e0       	ldi	r22, 0x05	; 5
    33f6:	41 e0       	ldi	r20, 0x01	; 1
    33f8:	0e 94 96 1b 	call	0x372c	; 0x372c <DIO_enu_SetPinValue>
            DIO_enu_SetPinValue(MOTOR_IN3_PORT, MOTOR_IN3_PIN, DIO_U8_HIGH);
    33fc:	82 e0       	ldi	r24, 0x02	; 2
    33fe:	62 e0       	ldi	r22, 0x02	; 2
    3400:	41 e0       	ldi	r20, 0x01	; 1
    3402:	0e 94 96 1b 	call	0x372c	; 0x372c <DIO_enu_SetPinValue>
            DIO_enu_SetPinValue(MOTOR_IN4_PORT, MOTOR_IN4_PIN, DIO_U8_LOW);
    3406:	82 e0       	ldi	r24, 0x02	; 2
    3408:	63 e0       	ldi	r22, 0x03	; 3
    340a:	40 e0       	ldi	r20, 0x00	; 0
    340c:	0e 94 96 1b 	call	0x372c	; 0x372c <DIO_enu_SetPinValue>
    3410:	13 c0       	rjmp	.+38     	; 0x3438 <DC_Motor_enu_Rotate+0xfc>
            break;
        case CCW:
            DIO_enu_SetPinValue(MOTOR_ENB_PORT, MOTOR_ENB_PIN, DIO_U8_HIGH);
    3412:	82 e0       	ldi	r24, 0x02	; 2
    3414:	65 e0       	ldi	r22, 0x05	; 5
    3416:	41 e0       	ldi	r20, 0x01	; 1
    3418:	0e 94 96 1b 	call	0x372c	; 0x372c <DIO_enu_SetPinValue>
            DIO_enu_SetPinValue(MOTOR_IN3_PORT, MOTOR_IN3_PIN, DIO_U8_LOW);
    341c:	82 e0       	ldi	r24, 0x02	; 2
    341e:	62 e0       	ldi	r22, 0x02	; 2
    3420:	40 e0       	ldi	r20, 0x00	; 0
    3422:	0e 94 96 1b 	call	0x372c	; 0x372c <DIO_enu_SetPinValue>
            DIO_enu_SetPinValue(MOTOR_IN4_PORT, MOTOR_IN4_PIN, DIO_U8_HIGH);
    3426:	82 e0       	ldi	r24, 0x02	; 2
    3428:	63 e0       	ldi	r22, 0x03	; 3
    342a:	41 e0       	ldi	r20, 0x01	; 1
    342c:	0e 94 96 1b 	call	0x372c	; 0x372c <DIO_enu_SetPinValue>
    3430:	03 c0       	rjmp	.+6      	; 0x3438 <DC_Motor_enu_Rotate+0xfc>

            break;
        default:
            Local_u8_errorState = STATE_NOT_OK;
    3432:	19 82       	std	Y+1, r1	; 0x01
    3434:	01 c0       	rjmp	.+2      	; 0x3438 <DC_Motor_enu_Rotate+0xfc>
            break;
        }
        break;
        break;
    default:
        Local_u8_errorState = STATE_NOT_OK;
    3436:	19 82       	std	Y+1, r1	; 0x01
        break;
    }
    return Local_u8_errorState;
    3438:	89 81       	ldd	r24, Y+1	; 0x01
}
    343a:	29 96       	adiw	r28, 0x09	; 9
    343c:	0f b6       	in	r0, 0x3f	; 63
    343e:	f8 94       	cli
    3440:	de bf       	out	0x3e, r29	; 62
    3442:	0f be       	out	0x3f, r0	; 63
    3444:	cd bf       	out	0x3d, r28	; 61
    3446:	cf 91       	pop	r28
    3448:	df 91       	pop	r29
    344a:	08 95       	ret

0000344c <DC_Motor_enu_Stop>:
ES_t DC_Motor_enu_Stop(u8 Copy_u8_Motor)
{
    344c:	df 93       	push	r29
    344e:	cf 93       	push	r28
    3450:	00 d0       	rcall	.+0      	; 0x3452 <DC_Motor_enu_Stop+0x6>
    3452:	cd b7       	in	r28, 0x3d	; 61
    3454:	de b7       	in	r29, 0x3e	; 62
    3456:	8a 83       	std	Y+2, r24	; 0x02
    u8 Local_u8_errorState = STATE_OK;
    3458:	81 e0       	ldi	r24, 0x01	; 1
    345a:	89 83       	std	Y+1, r24	; 0x01
    if (Copy_u8_Motor == MOTOR1)
    345c:	8a 81       	ldd	r24, Y+2	; 0x02
    345e:	88 23       	and	r24, r24
    3460:	31 f4       	brne	.+12     	; 0x346e <DC_Motor_enu_Stop+0x22>
    {
        DIO_enu_SetPinValue(MOTOR_ENA_PORT, MOTOR_ENA_PIN, DIO_U8_LOW);
    3462:	82 e0       	ldi	r24, 0x02	; 2
    3464:	64 e0       	ldi	r22, 0x04	; 4
    3466:	40 e0       	ldi	r20, 0x00	; 0
    3468:	0e 94 96 1b 	call	0x372c	; 0x372c <DIO_enu_SetPinValue>
    346c:	0a c0       	rjmp	.+20     	; 0x3482 <DC_Motor_enu_Stop+0x36>
    }
    else if (Copy_u8_Motor == MOTOR2)
    346e:	8a 81       	ldd	r24, Y+2	; 0x02
    3470:	81 30       	cpi	r24, 0x01	; 1
    3472:	31 f4       	brne	.+12     	; 0x3480 <DC_Motor_enu_Stop+0x34>
    {
        DIO_enu_SetPinValue(MOTOR_ENB_PORT, MOTOR_ENB_PIN, DIO_U8_LOW);
    3474:	82 e0       	ldi	r24, 0x02	; 2
    3476:	65 e0       	ldi	r22, 0x05	; 5
    3478:	40 e0       	ldi	r20, 0x00	; 0
    347a:	0e 94 96 1b 	call	0x372c	; 0x372c <DIO_enu_SetPinValue>
    347e:	01 c0       	rjmp	.+2      	; 0x3482 <DC_Motor_enu_Stop+0x36>
    }
    else
    {
        Local_u8_errorState = STATE_NOT_OK;
    3480:	19 82       	std	Y+1, r1	; 0x01
    }
    return Local_u8_errorState;
    3482:	89 81       	ldd	r24, Y+1	; 0x01
}
    3484:	0f 90       	pop	r0
    3486:	0f 90       	pop	r0
    3488:	cf 91       	pop	r28
    348a:	df 91       	pop	r29
    348c:	08 95       	ret

0000348e <DIO_enu_Init>:
/*MCAL*/
#include"DIO_private.h"
#include"DIO_config.h"


ES_t DIO_enu_Init(void){
    348e:	df 93       	push	r29
    3490:	cf 93       	push	r28
    3492:	cd b7       	in	r28, 0x3d	; 61
    3494:	de b7       	in	r29, 0x3e	; 62
    DIO_U8_DDRA_REG = Conc(DIO_U8_PA7_INITIAL_DIRECTION,DIO_U8_PA6_INITIAL_DIRECTION,DIO_U8_PA5_INITIAL_DIRECTION,DIO_U8_PA4_INITIAL_DIRECTION,
    3496:	ea e3       	ldi	r30, 0x3A	; 58
    3498:	f0 e0       	ldi	r31, 0x00	; 0
    349a:	8f e7       	ldi	r24, 0x7F	; 127
    349c:	80 83       	st	Z, r24
                           DIO_U8_PA3_INITIAL_DIRECTION,DIO_U8_PA2_INITIAL_DIRECTION,DIO_U8_PA1_INITIAL_DIRECTION,DIO_U8_PA0_INITIAL_DIRECTION);
    DIO_U8_DDRB_REG = Conc(DIO_U8_PB7_INITIAL_DIRECTION,DIO_U8_PB6_INITIAL_DIRECTION,DIO_U8_PB5_INITIAL_DIRECTION,DIO_U8_PB4_INITIAL_DIRECTION,
    349e:	e7 e3       	ldi	r30, 0x37	; 55
    34a0:	f0 e0       	ldi	r31, 0x00	; 0
    34a2:	8d ef       	ldi	r24, 0xFD	; 253
    34a4:	80 83       	st	Z, r24
                           DIO_U8_PB3_INITIAL_DIRECTION,DIO_U8_PB2_INITIAL_DIRECTION,DIO_U8_PB1_INITIAL_DIRECTION,DIO_U8_PB0_INITIAL_DIRECTION);

    DIO_U8_DDRC_REG = Conc(DIO_U8_PC7_INITIAL_DIRECTION,DIO_U8_PC6_INITIAL_DIRECTION,DIO_U8_PC5_INITIAL_DIRECTION,DIO_U8_PC4_INITIAL_DIRECTION,
    34a6:	e4 e3       	ldi	r30, 0x34	; 52
    34a8:	f0 e0       	ldi	r31, 0x00	; 0
    34aa:	83 e1       	ldi	r24, 0x13	; 19
    34ac:	80 83       	st	Z, r24
                           DIO_U8_PC3_INITIAL_DIRECTION,DIO_U8_PC2_INITIAL_DIRECTION,DIO_U8_PC1_INITIAL_DIRECTION,DIO_U8_PC0_INITIAL_DIRECTION);

    DIO_U8_DDRD_REG = Conc(DIO_U8_PD7_INITIAL_DIRECTION,DIO_U8_PD6_INITIAL_DIRECTION,DIO_U8_PD5_INITIAL_DIRECTION,DIO_U8_PD4_INITIAL_DIRECTION,
    34ae:	e1 e3       	ldi	r30, 0x31	; 49
    34b0:	f0 e0       	ldi	r31, 0x00	; 0
    34b2:	10 82       	st	Z, r1
                           DIO_U8_PD3_INITIAL_DIRECTION,DIO_U8_PD2_INITIAL_DIRECTION,DIO_U8_PD1_INITIAL_DIRECTION,DIO_U8_PD0_INITIAL_DIRECTION);

    DIO_U8_PORTA_REG = Conc(DIO_U8_PA7_INITIAL_VALUE,DIO_U8_PA6_INITIAL_VALUE,DIO_U8_PA5_INITIAL_VALUE,DIO_U8_PA4_INITIAL_VALUE,
    34b4:	eb e3       	ldi	r30, 0x3B	; 59
    34b6:	f0 e0       	ldi	r31, 0x00	; 0
    34b8:	10 82       	st	Z, r1
                            DIO_U8_PA3_INITIAL_VALUE,DIO_U8_PA2_INITIAL_VALUE,DIO_U8_PA1_INITIAL_VALUE,DIO_U8_PA0_INITIAL_VALUE);

    DIO_U8_PORTB_REG = Conc(DIO_U8_PB7_INITIAL_VALUE,DIO_U8_PB6_INITIAL_VALUE,DIO_U8_PB5_INITIAL_VALUE,DIO_U8_PB4_INITIAL_VALUE,
    34ba:	e8 e3       	ldi	r30, 0x38	; 56
    34bc:	f0 e0       	ldi	r31, 0x00	; 0
    34be:	84 ef       	ldi	r24, 0xF4	; 244
    34c0:	80 83       	st	Z, r24
                            DIO_U8_PB3_INITIAL_VALUE,DIO_U8_PB2_INITIAL_VALUE,DIO_U8_PB1_INITIAL_VALUE,DIO_U8_PB0_INITIAL_VALUE);

    DIO_U8_PORTC_REG = Conc(DIO_U8_PC7_INITIAL_VALUE,DIO_U8_PC6_INITIAL_VALUE,DIO_U8_PC5_INITIAL_VALUE,DIO_U8_PC4_INITIAL_VALUE,
    34c2:	e5 e3       	ldi	r30, 0x35	; 53
    34c4:	f0 e0       	ldi	r31, 0x00	; 0
    34c6:	10 82       	st	Z, r1
                            DIO_U8_PC3_INITIAL_VALUE,DIO_U8_PC2_INITIAL_VALUE,DIO_U8_PC1_INITIAL_VALUE,DIO_U8_PC0_INITIAL_VALUE);

    DIO_U8_PORTD_REG = Conc(DIO_U8_PD7_INITIAL_VALUE,DIO_U8_PD6_INITIAL_VALUE,DIO_U8_PD5_INITIAL_VALUE,DIO_U8_PD4_INITIAL_VALUE,
    34c8:	e2 e3       	ldi	r30, 0x32	; 50
    34ca:	f0 e0       	ldi	r31, 0x00	; 0
    34cc:	8c e3       	ldi	r24, 0x3C	; 60
    34ce:	80 83       	st	Z, r24
                            DIO_U8_PD3_INITIAL_VALUE,DIO_U8_PD2_INITIAL_VALUE,DIO_U8_PD1_INITIAL_VALUE,DIO_U8_PD0_INITIAL_VALUE);
    return STATE_OK;
    34d0:	81 e0       	ldi	r24, 0x01	; 1
}
    34d2:	cf 91       	pop	r28
    34d4:	df 91       	pop	r29
    34d6:	08 95       	ret

000034d8 <DIO_enu_SetPinDirection>:
ES_t DIO_enu_SetPinDirection (u8 Copy_u8_PortId, u8 Copy_u8_PinId,u8 Copy_u8_PinDirection)
{
    34d8:	df 93       	push	r29
    34da:	cf 93       	push	r28
    34dc:	cd b7       	in	r28, 0x3d	; 61
    34de:	de b7       	in	r29, 0x3e	; 62
    34e0:	2e 97       	sbiw	r28, 0x0e	; 14
    34e2:	0f b6       	in	r0, 0x3f	; 63
    34e4:	f8 94       	cli
    34e6:	de bf       	out	0x3e, r29	; 62
    34e8:	0f be       	out	0x3f, r0	; 63
    34ea:	cd bf       	out	0x3d, r28	; 61
    34ec:	8a 83       	std	Y+2, r24	; 0x02
    34ee:	6b 83       	std	Y+3, r22	; 0x03
    34f0:	4c 83       	std	Y+4, r20	; 0x04
    u8 Local_u8_ErrorState = STATE_OK;
    34f2:	81 e0       	ldi	r24, 0x01	; 1
    34f4:	89 83       	std	Y+1, r24	; 0x01
    if((Copy_u8_PortId <= DIO_U8_PORTD) && (Copy_u8_PinId <= DIO_U8_PIN7) && ((Copy_u8_PinDirection == DIO_U8_OUTPUT)||(Copy_u8_PinDirection == DIO_U8_INPUT))){
    34f6:	8a 81       	ldd	r24, Y+2	; 0x02
    34f8:	84 30       	cpi	r24, 0x04	; 4
    34fa:	08 f0       	brcs	.+2      	; 0x34fe <DIO_enu_SetPinDirection+0x26>
    34fc:	0c c1       	rjmp	.+536    	; 0x3716 <DIO_enu_SetPinDirection+0x23e>
    34fe:	8b 81       	ldd	r24, Y+3	; 0x03
    3500:	88 30       	cpi	r24, 0x08	; 8
    3502:	08 f0       	brcs	.+2      	; 0x3506 <DIO_enu_SetPinDirection+0x2e>
    3504:	08 c1       	rjmp	.+528    	; 0x3716 <DIO_enu_SetPinDirection+0x23e>
    3506:	8c 81       	ldd	r24, Y+4	; 0x04
    3508:	81 30       	cpi	r24, 0x01	; 1
    350a:	21 f0       	breq	.+8      	; 0x3514 <DIO_enu_SetPinDirection+0x3c>
    350c:	8c 81       	ldd	r24, Y+4	; 0x04
    350e:	88 23       	and	r24, r24
    3510:	09 f0       	breq	.+2      	; 0x3514 <DIO_enu_SetPinDirection+0x3c>
    3512:	01 c1       	rjmp	.+514    	; 0x3716 <DIO_enu_SetPinDirection+0x23e>
        switch (Copy_u8_PortId)
    3514:	8a 81       	ldd	r24, Y+2	; 0x02
    3516:	28 2f       	mov	r18, r24
    3518:	30 e0       	ldi	r19, 0x00	; 0
    351a:	3e 87       	std	Y+14, r19	; 0x0e
    351c:	2d 87       	std	Y+13, r18	; 0x0d
    351e:	8d 85       	ldd	r24, Y+13	; 0x0d
    3520:	9e 85       	ldd	r25, Y+14	; 0x0e
    3522:	81 30       	cpi	r24, 0x01	; 1
    3524:	91 05       	cpc	r25, r1
    3526:	09 f4       	brne	.+2      	; 0x352a <DIO_enu_SetPinDirection+0x52>
    3528:	4f c0       	rjmp	.+158    	; 0x35c8 <DIO_enu_SetPinDirection+0xf0>
    352a:	2d 85       	ldd	r18, Y+13	; 0x0d
    352c:	3e 85       	ldd	r19, Y+14	; 0x0e
    352e:	22 30       	cpi	r18, 0x02	; 2
    3530:	31 05       	cpc	r19, r1
    3532:	2c f4       	brge	.+10     	; 0x353e <DIO_enu_SetPinDirection+0x66>
    3534:	8d 85       	ldd	r24, Y+13	; 0x0d
    3536:	9e 85       	ldd	r25, Y+14	; 0x0e
    3538:	00 97       	sbiw	r24, 0x00	; 0
    353a:	71 f0       	breq	.+28     	; 0x3558 <DIO_enu_SetPinDirection+0x80>
    353c:	ed c0       	rjmp	.+474    	; 0x3718 <DIO_enu_SetPinDirection+0x240>
    353e:	2d 85       	ldd	r18, Y+13	; 0x0d
    3540:	3e 85       	ldd	r19, Y+14	; 0x0e
    3542:	22 30       	cpi	r18, 0x02	; 2
    3544:	31 05       	cpc	r19, r1
    3546:	09 f4       	brne	.+2      	; 0x354a <DIO_enu_SetPinDirection+0x72>
    3548:	77 c0       	rjmp	.+238    	; 0x3638 <DIO_enu_SetPinDirection+0x160>
    354a:	8d 85       	ldd	r24, Y+13	; 0x0d
    354c:	9e 85       	ldd	r25, Y+14	; 0x0e
    354e:	83 30       	cpi	r24, 0x03	; 3
    3550:	91 05       	cpc	r25, r1
    3552:	09 f4       	brne	.+2      	; 0x3556 <DIO_enu_SetPinDirection+0x7e>
    3554:	a9 c0       	rjmp	.+338    	; 0x36a8 <DIO_enu_SetPinDirection+0x1d0>
    3556:	e0 c0       	rjmp	.+448    	; 0x3718 <DIO_enu_SetPinDirection+0x240>
        {
        case DIO_U8_PORTA:
            switch (Copy_u8_PinDirection)
    3558:	8c 81       	ldd	r24, Y+4	; 0x04
    355a:	28 2f       	mov	r18, r24
    355c:	30 e0       	ldi	r19, 0x00	; 0
    355e:	3c 87       	std	Y+12, r19	; 0x0c
    3560:	2b 87       	std	Y+11, r18	; 0x0b
    3562:	8b 85       	ldd	r24, Y+11	; 0x0b
    3564:	9c 85       	ldd	r25, Y+12	; 0x0c
    3566:	00 97       	sbiw	r24, 0x00	; 0
    3568:	d1 f0       	breq	.+52     	; 0x359e <DIO_enu_SetPinDirection+0xc6>
    356a:	2b 85       	ldd	r18, Y+11	; 0x0b
    356c:	3c 85       	ldd	r19, Y+12	; 0x0c
    356e:	21 30       	cpi	r18, 0x01	; 1
    3570:	31 05       	cpc	r19, r1
    3572:	09 f0       	breq	.+2      	; 0x3576 <DIO_enu_SetPinDirection+0x9e>
    3574:	d1 c0       	rjmp	.+418    	; 0x3718 <DIO_enu_SetPinDirection+0x240>
            {
                case DIO_U8_OUTPUT:SET_BIT(DIO_U8_DDRA_REG,Copy_u8_PinId); break;
    3576:	aa e3       	ldi	r26, 0x3A	; 58
    3578:	b0 e0       	ldi	r27, 0x00	; 0
    357a:	ea e3       	ldi	r30, 0x3A	; 58
    357c:	f0 e0       	ldi	r31, 0x00	; 0
    357e:	80 81       	ld	r24, Z
    3580:	48 2f       	mov	r20, r24
    3582:	8b 81       	ldd	r24, Y+3	; 0x03
    3584:	28 2f       	mov	r18, r24
    3586:	30 e0       	ldi	r19, 0x00	; 0
    3588:	81 e0       	ldi	r24, 0x01	; 1
    358a:	90 e0       	ldi	r25, 0x00	; 0
    358c:	02 2e       	mov	r0, r18
    358e:	02 c0       	rjmp	.+4      	; 0x3594 <DIO_enu_SetPinDirection+0xbc>
    3590:	88 0f       	add	r24, r24
    3592:	99 1f       	adc	r25, r25
    3594:	0a 94       	dec	r0
    3596:	e2 f7       	brpl	.-8      	; 0x3590 <DIO_enu_SetPinDirection+0xb8>
    3598:	84 2b       	or	r24, r20
    359a:	8c 93       	st	X, r24
    359c:	bd c0       	rjmp	.+378    	; 0x3718 <DIO_enu_SetPinDirection+0x240>
                case DIO_U8_INPUT: CLR_BIT(DIO_U8_DDRA_REG,Copy_u8_PinId); break; 
    359e:	aa e3       	ldi	r26, 0x3A	; 58
    35a0:	b0 e0       	ldi	r27, 0x00	; 0
    35a2:	ea e3       	ldi	r30, 0x3A	; 58
    35a4:	f0 e0       	ldi	r31, 0x00	; 0
    35a6:	80 81       	ld	r24, Z
    35a8:	48 2f       	mov	r20, r24
    35aa:	8b 81       	ldd	r24, Y+3	; 0x03
    35ac:	28 2f       	mov	r18, r24
    35ae:	30 e0       	ldi	r19, 0x00	; 0
    35b0:	81 e0       	ldi	r24, 0x01	; 1
    35b2:	90 e0       	ldi	r25, 0x00	; 0
    35b4:	02 2e       	mov	r0, r18
    35b6:	02 c0       	rjmp	.+4      	; 0x35bc <DIO_enu_SetPinDirection+0xe4>
    35b8:	88 0f       	add	r24, r24
    35ba:	99 1f       	adc	r25, r25
    35bc:	0a 94       	dec	r0
    35be:	e2 f7       	brpl	.-8      	; 0x35b8 <DIO_enu_SetPinDirection+0xe0>
    35c0:	80 95       	com	r24
    35c2:	84 23       	and	r24, r20
    35c4:	8c 93       	st	X, r24
    35c6:	a8 c0       	rjmp	.+336    	; 0x3718 <DIO_enu_SetPinDirection+0x240>
            }
        break;
        case DIO_U8_PORTB:
            switch (Copy_u8_PinDirection)
    35c8:	8c 81       	ldd	r24, Y+4	; 0x04
    35ca:	28 2f       	mov	r18, r24
    35cc:	30 e0       	ldi	r19, 0x00	; 0
    35ce:	3a 87       	std	Y+10, r19	; 0x0a
    35d0:	29 87       	std	Y+9, r18	; 0x09
    35d2:	89 85       	ldd	r24, Y+9	; 0x09
    35d4:	9a 85       	ldd	r25, Y+10	; 0x0a
    35d6:	00 97       	sbiw	r24, 0x00	; 0
    35d8:	d1 f0       	breq	.+52     	; 0x360e <DIO_enu_SetPinDirection+0x136>
    35da:	29 85       	ldd	r18, Y+9	; 0x09
    35dc:	3a 85       	ldd	r19, Y+10	; 0x0a
    35de:	21 30       	cpi	r18, 0x01	; 1
    35e0:	31 05       	cpc	r19, r1
    35e2:	09 f0       	breq	.+2      	; 0x35e6 <DIO_enu_SetPinDirection+0x10e>
    35e4:	99 c0       	rjmp	.+306    	; 0x3718 <DIO_enu_SetPinDirection+0x240>
            {
                case DIO_U8_OUTPUT:SET_BIT(DIO_U8_DDRB_REG,Copy_u8_PinId); break;
    35e6:	a7 e3       	ldi	r26, 0x37	; 55
    35e8:	b0 e0       	ldi	r27, 0x00	; 0
    35ea:	e7 e3       	ldi	r30, 0x37	; 55
    35ec:	f0 e0       	ldi	r31, 0x00	; 0
    35ee:	80 81       	ld	r24, Z
    35f0:	48 2f       	mov	r20, r24
    35f2:	8b 81       	ldd	r24, Y+3	; 0x03
    35f4:	28 2f       	mov	r18, r24
    35f6:	30 e0       	ldi	r19, 0x00	; 0
    35f8:	81 e0       	ldi	r24, 0x01	; 1
    35fa:	90 e0       	ldi	r25, 0x00	; 0
    35fc:	02 2e       	mov	r0, r18
    35fe:	02 c0       	rjmp	.+4      	; 0x3604 <DIO_enu_SetPinDirection+0x12c>
    3600:	88 0f       	add	r24, r24
    3602:	99 1f       	adc	r25, r25
    3604:	0a 94       	dec	r0
    3606:	e2 f7       	brpl	.-8      	; 0x3600 <DIO_enu_SetPinDirection+0x128>
    3608:	84 2b       	or	r24, r20
    360a:	8c 93       	st	X, r24
    360c:	85 c0       	rjmp	.+266    	; 0x3718 <DIO_enu_SetPinDirection+0x240>
                case DIO_U8_INPUT: CLR_BIT(DIO_U8_DDRB_REG,Copy_u8_PinId); break; 
    360e:	a7 e3       	ldi	r26, 0x37	; 55
    3610:	b0 e0       	ldi	r27, 0x00	; 0
    3612:	e7 e3       	ldi	r30, 0x37	; 55
    3614:	f0 e0       	ldi	r31, 0x00	; 0
    3616:	80 81       	ld	r24, Z
    3618:	48 2f       	mov	r20, r24
    361a:	8b 81       	ldd	r24, Y+3	; 0x03
    361c:	28 2f       	mov	r18, r24
    361e:	30 e0       	ldi	r19, 0x00	; 0
    3620:	81 e0       	ldi	r24, 0x01	; 1
    3622:	90 e0       	ldi	r25, 0x00	; 0
    3624:	02 2e       	mov	r0, r18
    3626:	02 c0       	rjmp	.+4      	; 0x362c <DIO_enu_SetPinDirection+0x154>
    3628:	88 0f       	add	r24, r24
    362a:	99 1f       	adc	r25, r25
    362c:	0a 94       	dec	r0
    362e:	e2 f7       	brpl	.-8      	; 0x3628 <DIO_enu_SetPinDirection+0x150>
    3630:	80 95       	com	r24
    3632:	84 23       	and	r24, r20
    3634:	8c 93       	st	X, r24
    3636:	70 c0       	rjmp	.+224    	; 0x3718 <DIO_enu_SetPinDirection+0x240>
            }
        break;
        case DIO_U8_PORTC:
            switch (Copy_u8_PinDirection)
    3638:	8c 81       	ldd	r24, Y+4	; 0x04
    363a:	28 2f       	mov	r18, r24
    363c:	30 e0       	ldi	r19, 0x00	; 0
    363e:	38 87       	std	Y+8, r19	; 0x08
    3640:	2f 83       	std	Y+7, r18	; 0x07
    3642:	8f 81       	ldd	r24, Y+7	; 0x07
    3644:	98 85       	ldd	r25, Y+8	; 0x08
    3646:	00 97       	sbiw	r24, 0x00	; 0
    3648:	d1 f0       	breq	.+52     	; 0x367e <DIO_enu_SetPinDirection+0x1a6>
    364a:	2f 81       	ldd	r18, Y+7	; 0x07
    364c:	38 85       	ldd	r19, Y+8	; 0x08
    364e:	21 30       	cpi	r18, 0x01	; 1
    3650:	31 05       	cpc	r19, r1
    3652:	09 f0       	breq	.+2      	; 0x3656 <DIO_enu_SetPinDirection+0x17e>
    3654:	61 c0       	rjmp	.+194    	; 0x3718 <DIO_enu_SetPinDirection+0x240>
            {
                case DIO_U8_OUTPUT:SET_BIT(DIO_U8_DDRC_REG,Copy_u8_PinId); break;
    3656:	a4 e3       	ldi	r26, 0x34	; 52
    3658:	b0 e0       	ldi	r27, 0x00	; 0
    365a:	e4 e3       	ldi	r30, 0x34	; 52
    365c:	f0 e0       	ldi	r31, 0x00	; 0
    365e:	80 81       	ld	r24, Z
    3660:	48 2f       	mov	r20, r24
    3662:	8b 81       	ldd	r24, Y+3	; 0x03
    3664:	28 2f       	mov	r18, r24
    3666:	30 e0       	ldi	r19, 0x00	; 0
    3668:	81 e0       	ldi	r24, 0x01	; 1
    366a:	90 e0       	ldi	r25, 0x00	; 0
    366c:	02 2e       	mov	r0, r18
    366e:	02 c0       	rjmp	.+4      	; 0x3674 <DIO_enu_SetPinDirection+0x19c>
    3670:	88 0f       	add	r24, r24
    3672:	99 1f       	adc	r25, r25
    3674:	0a 94       	dec	r0
    3676:	e2 f7       	brpl	.-8      	; 0x3670 <DIO_enu_SetPinDirection+0x198>
    3678:	84 2b       	or	r24, r20
    367a:	8c 93       	st	X, r24
    367c:	4d c0       	rjmp	.+154    	; 0x3718 <DIO_enu_SetPinDirection+0x240>
                case DIO_U8_INPUT: CLR_BIT(DIO_U8_DDRC_REG,Copy_u8_PinId); break; 
    367e:	a4 e3       	ldi	r26, 0x34	; 52
    3680:	b0 e0       	ldi	r27, 0x00	; 0
    3682:	e4 e3       	ldi	r30, 0x34	; 52
    3684:	f0 e0       	ldi	r31, 0x00	; 0
    3686:	80 81       	ld	r24, Z
    3688:	48 2f       	mov	r20, r24
    368a:	8b 81       	ldd	r24, Y+3	; 0x03
    368c:	28 2f       	mov	r18, r24
    368e:	30 e0       	ldi	r19, 0x00	; 0
    3690:	81 e0       	ldi	r24, 0x01	; 1
    3692:	90 e0       	ldi	r25, 0x00	; 0
    3694:	02 2e       	mov	r0, r18
    3696:	02 c0       	rjmp	.+4      	; 0x369c <DIO_enu_SetPinDirection+0x1c4>
    3698:	88 0f       	add	r24, r24
    369a:	99 1f       	adc	r25, r25
    369c:	0a 94       	dec	r0
    369e:	e2 f7       	brpl	.-8      	; 0x3698 <DIO_enu_SetPinDirection+0x1c0>
    36a0:	80 95       	com	r24
    36a2:	84 23       	and	r24, r20
    36a4:	8c 93       	st	X, r24
    36a6:	38 c0       	rjmp	.+112    	; 0x3718 <DIO_enu_SetPinDirection+0x240>
            } 
        break;
        case DIO_U8_PORTD:
            switch (Copy_u8_PinDirection)
    36a8:	8c 81       	ldd	r24, Y+4	; 0x04
    36aa:	28 2f       	mov	r18, r24
    36ac:	30 e0       	ldi	r19, 0x00	; 0
    36ae:	3e 83       	std	Y+6, r19	; 0x06
    36b0:	2d 83       	std	Y+5, r18	; 0x05
    36b2:	8d 81       	ldd	r24, Y+5	; 0x05
    36b4:	9e 81       	ldd	r25, Y+6	; 0x06
    36b6:	00 97       	sbiw	r24, 0x00	; 0
    36b8:	c9 f0       	breq	.+50     	; 0x36ec <DIO_enu_SetPinDirection+0x214>
    36ba:	2d 81       	ldd	r18, Y+5	; 0x05
    36bc:	3e 81       	ldd	r19, Y+6	; 0x06
    36be:	21 30       	cpi	r18, 0x01	; 1
    36c0:	31 05       	cpc	r19, r1
    36c2:	51 f5       	brne	.+84     	; 0x3718 <DIO_enu_SetPinDirection+0x240>
            {
                case DIO_U8_OUTPUT:SET_BIT(DIO_U8_DDRD_REG,Copy_u8_PinId); break;
    36c4:	a1 e3       	ldi	r26, 0x31	; 49
    36c6:	b0 e0       	ldi	r27, 0x00	; 0
    36c8:	e1 e3       	ldi	r30, 0x31	; 49
    36ca:	f0 e0       	ldi	r31, 0x00	; 0
    36cc:	80 81       	ld	r24, Z
    36ce:	48 2f       	mov	r20, r24
    36d0:	8b 81       	ldd	r24, Y+3	; 0x03
    36d2:	28 2f       	mov	r18, r24
    36d4:	30 e0       	ldi	r19, 0x00	; 0
    36d6:	81 e0       	ldi	r24, 0x01	; 1
    36d8:	90 e0       	ldi	r25, 0x00	; 0
    36da:	02 2e       	mov	r0, r18
    36dc:	02 c0       	rjmp	.+4      	; 0x36e2 <DIO_enu_SetPinDirection+0x20a>
    36de:	88 0f       	add	r24, r24
    36e0:	99 1f       	adc	r25, r25
    36e2:	0a 94       	dec	r0
    36e4:	e2 f7       	brpl	.-8      	; 0x36de <DIO_enu_SetPinDirection+0x206>
    36e6:	84 2b       	or	r24, r20
    36e8:	8c 93       	st	X, r24
    36ea:	16 c0       	rjmp	.+44     	; 0x3718 <DIO_enu_SetPinDirection+0x240>
                case DIO_U8_INPUT: CLR_BIT(DIO_U8_DDRD_REG,Copy_u8_PinId); break; 
    36ec:	a1 e3       	ldi	r26, 0x31	; 49
    36ee:	b0 e0       	ldi	r27, 0x00	; 0
    36f0:	e1 e3       	ldi	r30, 0x31	; 49
    36f2:	f0 e0       	ldi	r31, 0x00	; 0
    36f4:	80 81       	ld	r24, Z
    36f6:	48 2f       	mov	r20, r24
    36f8:	8b 81       	ldd	r24, Y+3	; 0x03
    36fa:	28 2f       	mov	r18, r24
    36fc:	30 e0       	ldi	r19, 0x00	; 0
    36fe:	81 e0       	ldi	r24, 0x01	; 1
    3700:	90 e0       	ldi	r25, 0x00	; 0
    3702:	02 2e       	mov	r0, r18
    3704:	02 c0       	rjmp	.+4      	; 0x370a <DIO_enu_SetPinDirection+0x232>
    3706:	88 0f       	add	r24, r24
    3708:	99 1f       	adc	r25, r25
    370a:	0a 94       	dec	r0
    370c:	e2 f7       	brpl	.-8      	; 0x3706 <DIO_enu_SetPinDirection+0x22e>
    370e:	80 95       	com	r24
    3710:	84 23       	and	r24, r20
    3712:	8c 93       	st	X, r24
    3714:	01 c0       	rjmp	.+2      	; 0x3718 <DIO_enu_SetPinDirection+0x240>
        break;
        }
    }
    else
    {
        Local_u8_ErrorState = STATE_NOT_OK;
    3716:	19 82       	std	Y+1, r1	; 0x01
    }
    return Local_u8_ErrorState;
    3718:	89 81       	ldd	r24, Y+1	; 0x01
}
    371a:	2e 96       	adiw	r28, 0x0e	; 14
    371c:	0f b6       	in	r0, 0x3f	; 63
    371e:	f8 94       	cli
    3720:	de bf       	out	0x3e, r29	; 62
    3722:	0f be       	out	0x3f, r0	; 63
    3724:	cd bf       	out	0x3d, r28	; 61
    3726:	cf 91       	pop	r28
    3728:	df 91       	pop	r29
    372a:	08 95       	ret

0000372c <DIO_enu_SetPinValue>:

ES_t DIO_enu_SetPinValue(u8 Copy_u8_PortId, u8 Copy_u8_PinId,u8 Copy_u8_PinValue){
    372c:	df 93       	push	r29
    372e:	cf 93       	push	r28
    3730:	cd b7       	in	r28, 0x3d	; 61
    3732:	de b7       	in	r29, 0x3e	; 62
    3734:	2e 97       	sbiw	r28, 0x0e	; 14
    3736:	0f b6       	in	r0, 0x3f	; 63
    3738:	f8 94       	cli
    373a:	de bf       	out	0x3e, r29	; 62
    373c:	0f be       	out	0x3f, r0	; 63
    373e:	cd bf       	out	0x3d, r28	; 61
    3740:	8a 83       	std	Y+2, r24	; 0x02
    3742:	6b 83       	std	Y+3, r22	; 0x03
    3744:	4c 83       	std	Y+4, r20	; 0x04
    u8 Local_u8_ErrorState = STATE_OK;
    3746:	81 e0       	ldi	r24, 0x01	; 1
    3748:	89 83       	std	Y+1, r24	; 0x01
    if((Copy_u8_PortId <= DIO_U8_PORTD) && (Copy_u8_PinId <= DIO_U8_PIN7) && ((Copy_u8_PinValue == DIO_U8_HIGH)||(Copy_u8_PinValue == DIO_U8_LOW))){
    374a:	8a 81       	ldd	r24, Y+2	; 0x02
    374c:	84 30       	cpi	r24, 0x04	; 4
    374e:	08 f0       	brcs	.+2      	; 0x3752 <DIO_enu_SetPinValue+0x26>
    3750:	0c c1       	rjmp	.+536    	; 0x396a <DIO_enu_SetPinValue+0x23e>
    3752:	8b 81       	ldd	r24, Y+3	; 0x03
    3754:	88 30       	cpi	r24, 0x08	; 8
    3756:	08 f0       	brcs	.+2      	; 0x375a <DIO_enu_SetPinValue+0x2e>
    3758:	08 c1       	rjmp	.+528    	; 0x396a <DIO_enu_SetPinValue+0x23e>
    375a:	8c 81       	ldd	r24, Y+4	; 0x04
    375c:	81 30       	cpi	r24, 0x01	; 1
    375e:	21 f0       	breq	.+8      	; 0x3768 <DIO_enu_SetPinValue+0x3c>
    3760:	8c 81       	ldd	r24, Y+4	; 0x04
    3762:	88 23       	and	r24, r24
    3764:	09 f0       	breq	.+2      	; 0x3768 <DIO_enu_SetPinValue+0x3c>
    3766:	01 c1       	rjmp	.+514    	; 0x396a <DIO_enu_SetPinValue+0x23e>
        switch (Copy_u8_PortId)
    3768:	8a 81       	ldd	r24, Y+2	; 0x02
    376a:	28 2f       	mov	r18, r24
    376c:	30 e0       	ldi	r19, 0x00	; 0
    376e:	3e 87       	std	Y+14, r19	; 0x0e
    3770:	2d 87       	std	Y+13, r18	; 0x0d
    3772:	8d 85       	ldd	r24, Y+13	; 0x0d
    3774:	9e 85       	ldd	r25, Y+14	; 0x0e
    3776:	81 30       	cpi	r24, 0x01	; 1
    3778:	91 05       	cpc	r25, r1
    377a:	09 f4       	brne	.+2      	; 0x377e <DIO_enu_SetPinValue+0x52>
    377c:	4f c0       	rjmp	.+158    	; 0x381c <DIO_enu_SetPinValue+0xf0>
    377e:	2d 85       	ldd	r18, Y+13	; 0x0d
    3780:	3e 85       	ldd	r19, Y+14	; 0x0e
    3782:	22 30       	cpi	r18, 0x02	; 2
    3784:	31 05       	cpc	r19, r1
    3786:	2c f4       	brge	.+10     	; 0x3792 <DIO_enu_SetPinValue+0x66>
    3788:	8d 85       	ldd	r24, Y+13	; 0x0d
    378a:	9e 85       	ldd	r25, Y+14	; 0x0e
    378c:	00 97       	sbiw	r24, 0x00	; 0
    378e:	71 f0       	breq	.+28     	; 0x37ac <DIO_enu_SetPinValue+0x80>
    3790:	ed c0       	rjmp	.+474    	; 0x396c <DIO_enu_SetPinValue+0x240>
    3792:	2d 85       	ldd	r18, Y+13	; 0x0d
    3794:	3e 85       	ldd	r19, Y+14	; 0x0e
    3796:	22 30       	cpi	r18, 0x02	; 2
    3798:	31 05       	cpc	r19, r1
    379a:	09 f4       	brne	.+2      	; 0x379e <DIO_enu_SetPinValue+0x72>
    379c:	77 c0       	rjmp	.+238    	; 0x388c <DIO_enu_SetPinValue+0x160>
    379e:	8d 85       	ldd	r24, Y+13	; 0x0d
    37a0:	9e 85       	ldd	r25, Y+14	; 0x0e
    37a2:	83 30       	cpi	r24, 0x03	; 3
    37a4:	91 05       	cpc	r25, r1
    37a6:	09 f4       	brne	.+2      	; 0x37aa <DIO_enu_SetPinValue+0x7e>
    37a8:	a9 c0       	rjmp	.+338    	; 0x38fc <DIO_enu_SetPinValue+0x1d0>
    37aa:	e0 c0       	rjmp	.+448    	; 0x396c <DIO_enu_SetPinValue+0x240>
        {
        case DIO_U8_PORTA:
            switch (Copy_u8_PinValue)
    37ac:	8c 81       	ldd	r24, Y+4	; 0x04
    37ae:	28 2f       	mov	r18, r24
    37b0:	30 e0       	ldi	r19, 0x00	; 0
    37b2:	3c 87       	std	Y+12, r19	; 0x0c
    37b4:	2b 87       	std	Y+11, r18	; 0x0b
    37b6:	8b 85       	ldd	r24, Y+11	; 0x0b
    37b8:	9c 85       	ldd	r25, Y+12	; 0x0c
    37ba:	00 97       	sbiw	r24, 0x00	; 0
    37bc:	d1 f0       	breq	.+52     	; 0x37f2 <DIO_enu_SetPinValue+0xc6>
    37be:	2b 85       	ldd	r18, Y+11	; 0x0b
    37c0:	3c 85       	ldd	r19, Y+12	; 0x0c
    37c2:	21 30       	cpi	r18, 0x01	; 1
    37c4:	31 05       	cpc	r19, r1
    37c6:	09 f0       	breq	.+2      	; 0x37ca <DIO_enu_SetPinValue+0x9e>
    37c8:	d1 c0       	rjmp	.+418    	; 0x396c <DIO_enu_SetPinValue+0x240>
            {
                case DIO_U8_HIGH:SET_BIT(DIO_U8_PORTA_REG,Copy_u8_PinId); break;
    37ca:	ab e3       	ldi	r26, 0x3B	; 59
    37cc:	b0 e0       	ldi	r27, 0x00	; 0
    37ce:	eb e3       	ldi	r30, 0x3B	; 59
    37d0:	f0 e0       	ldi	r31, 0x00	; 0
    37d2:	80 81       	ld	r24, Z
    37d4:	48 2f       	mov	r20, r24
    37d6:	8b 81       	ldd	r24, Y+3	; 0x03
    37d8:	28 2f       	mov	r18, r24
    37da:	30 e0       	ldi	r19, 0x00	; 0
    37dc:	81 e0       	ldi	r24, 0x01	; 1
    37de:	90 e0       	ldi	r25, 0x00	; 0
    37e0:	02 2e       	mov	r0, r18
    37e2:	02 c0       	rjmp	.+4      	; 0x37e8 <DIO_enu_SetPinValue+0xbc>
    37e4:	88 0f       	add	r24, r24
    37e6:	99 1f       	adc	r25, r25
    37e8:	0a 94       	dec	r0
    37ea:	e2 f7       	brpl	.-8      	; 0x37e4 <DIO_enu_SetPinValue+0xb8>
    37ec:	84 2b       	or	r24, r20
    37ee:	8c 93       	st	X, r24
    37f0:	bd c0       	rjmp	.+378    	; 0x396c <DIO_enu_SetPinValue+0x240>
                case DIO_U8_LOW: CLR_BIT(DIO_U8_PORTA_REG,Copy_u8_PinId); break; 
    37f2:	ab e3       	ldi	r26, 0x3B	; 59
    37f4:	b0 e0       	ldi	r27, 0x00	; 0
    37f6:	eb e3       	ldi	r30, 0x3B	; 59
    37f8:	f0 e0       	ldi	r31, 0x00	; 0
    37fa:	80 81       	ld	r24, Z
    37fc:	48 2f       	mov	r20, r24
    37fe:	8b 81       	ldd	r24, Y+3	; 0x03
    3800:	28 2f       	mov	r18, r24
    3802:	30 e0       	ldi	r19, 0x00	; 0
    3804:	81 e0       	ldi	r24, 0x01	; 1
    3806:	90 e0       	ldi	r25, 0x00	; 0
    3808:	02 2e       	mov	r0, r18
    380a:	02 c0       	rjmp	.+4      	; 0x3810 <DIO_enu_SetPinValue+0xe4>
    380c:	88 0f       	add	r24, r24
    380e:	99 1f       	adc	r25, r25
    3810:	0a 94       	dec	r0
    3812:	e2 f7       	brpl	.-8      	; 0x380c <DIO_enu_SetPinValue+0xe0>
    3814:	80 95       	com	r24
    3816:	84 23       	and	r24, r20
    3818:	8c 93       	st	X, r24
    381a:	a8 c0       	rjmp	.+336    	; 0x396c <DIO_enu_SetPinValue+0x240>
            }
        break;
        case DIO_U8_PORTB:
            switch (Copy_u8_PinValue)
    381c:	8c 81       	ldd	r24, Y+4	; 0x04
    381e:	28 2f       	mov	r18, r24
    3820:	30 e0       	ldi	r19, 0x00	; 0
    3822:	3a 87       	std	Y+10, r19	; 0x0a
    3824:	29 87       	std	Y+9, r18	; 0x09
    3826:	89 85       	ldd	r24, Y+9	; 0x09
    3828:	9a 85       	ldd	r25, Y+10	; 0x0a
    382a:	00 97       	sbiw	r24, 0x00	; 0
    382c:	d1 f0       	breq	.+52     	; 0x3862 <DIO_enu_SetPinValue+0x136>
    382e:	29 85       	ldd	r18, Y+9	; 0x09
    3830:	3a 85       	ldd	r19, Y+10	; 0x0a
    3832:	21 30       	cpi	r18, 0x01	; 1
    3834:	31 05       	cpc	r19, r1
    3836:	09 f0       	breq	.+2      	; 0x383a <DIO_enu_SetPinValue+0x10e>
    3838:	99 c0       	rjmp	.+306    	; 0x396c <DIO_enu_SetPinValue+0x240>
            {
                case DIO_U8_HIGH:SET_BIT(DIO_U8_PORTB_REG,Copy_u8_PinId); break;
    383a:	a8 e3       	ldi	r26, 0x38	; 56
    383c:	b0 e0       	ldi	r27, 0x00	; 0
    383e:	e8 e3       	ldi	r30, 0x38	; 56
    3840:	f0 e0       	ldi	r31, 0x00	; 0
    3842:	80 81       	ld	r24, Z
    3844:	48 2f       	mov	r20, r24
    3846:	8b 81       	ldd	r24, Y+3	; 0x03
    3848:	28 2f       	mov	r18, r24
    384a:	30 e0       	ldi	r19, 0x00	; 0
    384c:	81 e0       	ldi	r24, 0x01	; 1
    384e:	90 e0       	ldi	r25, 0x00	; 0
    3850:	02 2e       	mov	r0, r18
    3852:	02 c0       	rjmp	.+4      	; 0x3858 <DIO_enu_SetPinValue+0x12c>
    3854:	88 0f       	add	r24, r24
    3856:	99 1f       	adc	r25, r25
    3858:	0a 94       	dec	r0
    385a:	e2 f7       	brpl	.-8      	; 0x3854 <DIO_enu_SetPinValue+0x128>
    385c:	84 2b       	or	r24, r20
    385e:	8c 93       	st	X, r24
    3860:	85 c0       	rjmp	.+266    	; 0x396c <DIO_enu_SetPinValue+0x240>
                case DIO_U8_LOW: CLR_BIT(DIO_U8_PORTB_REG,Copy_u8_PinId); break; 
    3862:	a8 e3       	ldi	r26, 0x38	; 56
    3864:	b0 e0       	ldi	r27, 0x00	; 0
    3866:	e8 e3       	ldi	r30, 0x38	; 56
    3868:	f0 e0       	ldi	r31, 0x00	; 0
    386a:	80 81       	ld	r24, Z
    386c:	48 2f       	mov	r20, r24
    386e:	8b 81       	ldd	r24, Y+3	; 0x03
    3870:	28 2f       	mov	r18, r24
    3872:	30 e0       	ldi	r19, 0x00	; 0
    3874:	81 e0       	ldi	r24, 0x01	; 1
    3876:	90 e0       	ldi	r25, 0x00	; 0
    3878:	02 2e       	mov	r0, r18
    387a:	02 c0       	rjmp	.+4      	; 0x3880 <DIO_enu_SetPinValue+0x154>
    387c:	88 0f       	add	r24, r24
    387e:	99 1f       	adc	r25, r25
    3880:	0a 94       	dec	r0
    3882:	e2 f7       	brpl	.-8      	; 0x387c <DIO_enu_SetPinValue+0x150>
    3884:	80 95       	com	r24
    3886:	84 23       	and	r24, r20
    3888:	8c 93       	st	X, r24
    388a:	70 c0       	rjmp	.+224    	; 0x396c <DIO_enu_SetPinValue+0x240>
            }
        break;
        case DIO_U8_PORTC:
            switch (Copy_u8_PinValue)
    388c:	8c 81       	ldd	r24, Y+4	; 0x04
    388e:	28 2f       	mov	r18, r24
    3890:	30 e0       	ldi	r19, 0x00	; 0
    3892:	38 87       	std	Y+8, r19	; 0x08
    3894:	2f 83       	std	Y+7, r18	; 0x07
    3896:	8f 81       	ldd	r24, Y+7	; 0x07
    3898:	98 85       	ldd	r25, Y+8	; 0x08
    389a:	00 97       	sbiw	r24, 0x00	; 0
    389c:	d1 f0       	breq	.+52     	; 0x38d2 <DIO_enu_SetPinValue+0x1a6>
    389e:	2f 81       	ldd	r18, Y+7	; 0x07
    38a0:	38 85       	ldd	r19, Y+8	; 0x08
    38a2:	21 30       	cpi	r18, 0x01	; 1
    38a4:	31 05       	cpc	r19, r1
    38a6:	09 f0       	breq	.+2      	; 0x38aa <DIO_enu_SetPinValue+0x17e>
    38a8:	61 c0       	rjmp	.+194    	; 0x396c <DIO_enu_SetPinValue+0x240>
            {
                case DIO_U8_HIGH:SET_BIT(DIO_U8_PORTC_REG,Copy_u8_PinId); break;
    38aa:	a5 e3       	ldi	r26, 0x35	; 53
    38ac:	b0 e0       	ldi	r27, 0x00	; 0
    38ae:	e5 e3       	ldi	r30, 0x35	; 53
    38b0:	f0 e0       	ldi	r31, 0x00	; 0
    38b2:	80 81       	ld	r24, Z
    38b4:	48 2f       	mov	r20, r24
    38b6:	8b 81       	ldd	r24, Y+3	; 0x03
    38b8:	28 2f       	mov	r18, r24
    38ba:	30 e0       	ldi	r19, 0x00	; 0
    38bc:	81 e0       	ldi	r24, 0x01	; 1
    38be:	90 e0       	ldi	r25, 0x00	; 0
    38c0:	02 2e       	mov	r0, r18
    38c2:	02 c0       	rjmp	.+4      	; 0x38c8 <DIO_enu_SetPinValue+0x19c>
    38c4:	88 0f       	add	r24, r24
    38c6:	99 1f       	adc	r25, r25
    38c8:	0a 94       	dec	r0
    38ca:	e2 f7       	brpl	.-8      	; 0x38c4 <DIO_enu_SetPinValue+0x198>
    38cc:	84 2b       	or	r24, r20
    38ce:	8c 93       	st	X, r24
    38d0:	4d c0       	rjmp	.+154    	; 0x396c <DIO_enu_SetPinValue+0x240>
                case DIO_U8_LOW: CLR_BIT(DIO_U8_PORTC_REG,Copy_u8_PinId); break; 
    38d2:	a5 e3       	ldi	r26, 0x35	; 53
    38d4:	b0 e0       	ldi	r27, 0x00	; 0
    38d6:	e5 e3       	ldi	r30, 0x35	; 53
    38d8:	f0 e0       	ldi	r31, 0x00	; 0
    38da:	80 81       	ld	r24, Z
    38dc:	48 2f       	mov	r20, r24
    38de:	8b 81       	ldd	r24, Y+3	; 0x03
    38e0:	28 2f       	mov	r18, r24
    38e2:	30 e0       	ldi	r19, 0x00	; 0
    38e4:	81 e0       	ldi	r24, 0x01	; 1
    38e6:	90 e0       	ldi	r25, 0x00	; 0
    38e8:	02 2e       	mov	r0, r18
    38ea:	02 c0       	rjmp	.+4      	; 0x38f0 <DIO_enu_SetPinValue+0x1c4>
    38ec:	88 0f       	add	r24, r24
    38ee:	99 1f       	adc	r25, r25
    38f0:	0a 94       	dec	r0
    38f2:	e2 f7       	brpl	.-8      	; 0x38ec <DIO_enu_SetPinValue+0x1c0>
    38f4:	80 95       	com	r24
    38f6:	84 23       	and	r24, r20
    38f8:	8c 93       	st	X, r24
    38fa:	38 c0       	rjmp	.+112    	; 0x396c <DIO_enu_SetPinValue+0x240>
            } 
        break;
        case DIO_U8_PORTD:
            switch (Copy_u8_PinValue)
    38fc:	8c 81       	ldd	r24, Y+4	; 0x04
    38fe:	28 2f       	mov	r18, r24
    3900:	30 e0       	ldi	r19, 0x00	; 0
    3902:	3e 83       	std	Y+6, r19	; 0x06
    3904:	2d 83       	std	Y+5, r18	; 0x05
    3906:	8d 81       	ldd	r24, Y+5	; 0x05
    3908:	9e 81       	ldd	r25, Y+6	; 0x06
    390a:	00 97       	sbiw	r24, 0x00	; 0
    390c:	c9 f0       	breq	.+50     	; 0x3940 <DIO_enu_SetPinValue+0x214>
    390e:	2d 81       	ldd	r18, Y+5	; 0x05
    3910:	3e 81       	ldd	r19, Y+6	; 0x06
    3912:	21 30       	cpi	r18, 0x01	; 1
    3914:	31 05       	cpc	r19, r1
    3916:	51 f5       	brne	.+84     	; 0x396c <DIO_enu_SetPinValue+0x240>
            {
                case DIO_U8_HIGH:SET_BIT(DIO_U8_PORTD_REG,Copy_u8_PinId); break;
    3918:	a2 e3       	ldi	r26, 0x32	; 50
    391a:	b0 e0       	ldi	r27, 0x00	; 0
    391c:	e2 e3       	ldi	r30, 0x32	; 50
    391e:	f0 e0       	ldi	r31, 0x00	; 0
    3920:	80 81       	ld	r24, Z
    3922:	48 2f       	mov	r20, r24
    3924:	8b 81       	ldd	r24, Y+3	; 0x03
    3926:	28 2f       	mov	r18, r24
    3928:	30 e0       	ldi	r19, 0x00	; 0
    392a:	81 e0       	ldi	r24, 0x01	; 1
    392c:	90 e0       	ldi	r25, 0x00	; 0
    392e:	02 2e       	mov	r0, r18
    3930:	02 c0       	rjmp	.+4      	; 0x3936 <DIO_enu_SetPinValue+0x20a>
    3932:	88 0f       	add	r24, r24
    3934:	99 1f       	adc	r25, r25
    3936:	0a 94       	dec	r0
    3938:	e2 f7       	brpl	.-8      	; 0x3932 <DIO_enu_SetPinValue+0x206>
    393a:	84 2b       	or	r24, r20
    393c:	8c 93       	st	X, r24
    393e:	16 c0       	rjmp	.+44     	; 0x396c <DIO_enu_SetPinValue+0x240>
                case DIO_U8_LOW: CLR_BIT(DIO_U8_PORTD_REG,Copy_u8_PinId); break; 
    3940:	a2 e3       	ldi	r26, 0x32	; 50
    3942:	b0 e0       	ldi	r27, 0x00	; 0
    3944:	e2 e3       	ldi	r30, 0x32	; 50
    3946:	f0 e0       	ldi	r31, 0x00	; 0
    3948:	80 81       	ld	r24, Z
    394a:	48 2f       	mov	r20, r24
    394c:	8b 81       	ldd	r24, Y+3	; 0x03
    394e:	28 2f       	mov	r18, r24
    3950:	30 e0       	ldi	r19, 0x00	; 0
    3952:	81 e0       	ldi	r24, 0x01	; 1
    3954:	90 e0       	ldi	r25, 0x00	; 0
    3956:	02 2e       	mov	r0, r18
    3958:	02 c0       	rjmp	.+4      	; 0x395e <DIO_enu_SetPinValue+0x232>
    395a:	88 0f       	add	r24, r24
    395c:	99 1f       	adc	r25, r25
    395e:	0a 94       	dec	r0
    3960:	e2 f7       	brpl	.-8      	; 0x395a <DIO_enu_SetPinValue+0x22e>
    3962:	80 95       	com	r24
    3964:	84 23       	and	r24, r20
    3966:	8c 93       	st	X, r24
    3968:	01 c0       	rjmp	.+2      	; 0x396c <DIO_enu_SetPinValue+0x240>
        break;
        }
    }
    else
    {
        Local_u8_ErrorState = STATE_NOT_OK;
    396a:	19 82       	std	Y+1, r1	; 0x01
    }
    return Local_u8_ErrorState;
    396c:	89 81       	ldd	r24, Y+1	; 0x01
}
    396e:	2e 96       	adiw	r28, 0x0e	; 14
    3970:	0f b6       	in	r0, 0x3f	; 63
    3972:	f8 94       	cli
    3974:	de bf       	out	0x3e, r29	; 62
    3976:	0f be       	out	0x3f, r0	; 63
    3978:	cd bf       	out	0x3d, r28	; 61
    397a:	cf 91       	pop	r28
    397c:	df 91       	pop	r29
    397e:	08 95       	ret

00003980 <DIO_enu_GetPinValue>:

ES_t DIO_enu_GetPinValue(u8 Copy_u8_PortId, u8 Copy_u8_PinId,u8 * Copy_pu8_ReturnPinValue){
    3980:	df 93       	push	r29
    3982:	cf 93       	push	r28
    3984:	cd b7       	in	r28, 0x3d	; 61
    3986:	de b7       	in	r29, 0x3e	; 62
    3988:	28 97       	sbiw	r28, 0x08	; 8
    398a:	0f b6       	in	r0, 0x3f	; 63
    398c:	f8 94       	cli
    398e:	de bf       	out	0x3e, r29	; 62
    3990:	0f be       	out	0x3f, r0	; 63
    3992:	cd bf       	out	0x3d, r28	; 61
    3994:	8b 83       	std	Y+3, r24	; 0x03
    3996:	6c 83       	std	Y+4, r22	; 0x04
    3998:	5e 83       	std	Y+6, r21	; 0x06
    399a:	4d 83       	std	Y+5, r20	; 0x05
    u8 Local_u8_ErrorState = STATE_OK;
    399c:	81 e0       	ldi	r24, 0x01	; 1
    399e:	8a 83       	std	Y+2, r24	; 0x02
    u8 Local_u8_PinValue ;
    if((Copy_u8_PortId <= DIO_U8_PORTD) && (Copy_u8_PinId <= DIO_U8_PIN7) && (Copy_pu8_ReturnPinValue != NULL))
    39a0:	8b 81       	ldd	r24, Y+3	; 0x03
    39a2:	84 30       	cpi	r24, 0x04	; 4
    39a4:	08 f0       	brcs	.+2      	; 0x39a8 <DIO_enu_GetPinValue+0x28>
    39a6:	9f c0       	rjmp	.+318    	; 0x3ae6 <DIO_enu_GetPinValue+0x166>
    39a8:	8c 81       	ldd	r24, Y+4	; 0x04
    39aa:	88 30       	cpi	r24, 0x08	; 8
    39ac:	08 f0       	brcs	.+2      	; 0x39b0 <DIO_enu_GetPinValue+0x30>
    39ae:	9b c0       	rjmp	.+310    	; 0x3ae6 <DIO_enu_GetPinValue+0x166>
    39b0:	8d 81       	ldd	r24, Y+5	; 0x05
    39b2:	9e 81       	ldd	r25, Y+6	; 0x06
    39b4:	00 97       	sbiw	r24, 0x00	; 0
    39b6:	09 f4       	brne	.+2      	; 0x39ba <DIO_enu_GetPinValue+0x3a>
    39b8:	96 c0       	rjmp	.+300    	; 0x3ae6 <DIO_enu_GetPinValue+0x166>
    {
        switch (Copy_u8_PortId)
    39ba:	8b 81       	ldd	r24, Y+3	; 0x03
    39bc:	28 2f       	mov	r18, r24
    39be:	30 e0       	ldi	r19, 0x00	; 0
    39c0:	38 87       	std	Y+8, r19	; 0x08
    39c2:	2f 83       	std	Y+7, r18	; 0x07
    39c4:	4f 81       	ldd	r20, Y+7	; 0x07
    39c6:	58 85       	ldd	r21, Y+8	; 0x08
    39c8:	41 30       	cpi	r20, 0x01	; 1
    39ca:	51 05       	cpc	r21, r1
    39cc:	a9 f1       	breq	.+106    	; 0x3a38 <DIO_enu_GetPinValue+0xb8>
    39ce:	8f 81       	ldd	r24, Y+7	; 0x07
    39d0:	98 85       	ldd	r25, Y+8	; 0x08
    39d2:	82 30       	cpi	r24, 0x02	; 2
    39d4:	91 05       	cpc	r25, r1
    39d6:	34 f4       	brge	.+12     	; 0x39e4 <DIO_enu_GetPinValue+0x64>
    39d8:	2f 81       	ldd	r18, Y+7	; 0x07
    39da:	38 85       	ldd	r19, Y+8	; 0x08
    39dc:	21 15       	cp	r18, r1
    39de:	31 05       	cpc	r19, r1
    39e0:	71 f0       	breq	.+28     	; 0x39fe <DIO_enu_GetPinValue+0x7e>
    39e2:	82 c0       	rjmp	.+260    	; 0x3ae8 <DIO_enu_GetPinValue+0x168>
    39e4:	4f 81       	ldd	r20, Y+7	; 0x07
    39e6:	58 85       	ldd	r21, Y+8	; 0x08
    39e8:	42 30       	cpi	r20, 0x02	; 2
    39ea:	51 05       	cpc	r21, r1
    39ec:	09 f4       	brne	.+2      	; 0x39f0 <DIO_enu_GetPinValue+0x70>
    39ee:	41 c0       	rjmp	.+130    	; 0x3a72 <DIO_enu_GetPinValue+0xf2>
    39f0:	8f 81       	ldd	r24, Y+7	; 0x07
    39f2:	98 85       	ldd	r25, Y+8	; 0x08
    39f4:	83 30       	cpi	r24, 0x03	; 3
    39f6:	91 05       	cpc	r25, r1
    39f8:	09 f4       	brne	.+2      	; 0x39fc <DIO_enu_GetPinValue+0x7c>
    39fa:	58 c0       	rjmp	.+176    	; 0x3aac <DIO_enu_GetPinValue+0x12c>
    39fc:	75 c0       	rjmp	.+234    	; 0x3ae8 <DIO_enu_GetPinValue+0x168>
        {
            case DIO_U8_PORTA:Local_u8_PinValue = GET_BIT(DIO_U8_PINA_REG,Copy_u8_PinId);
    39fe:	e9 e3       	ldi	r30, 0x39	; 57
    3a00:	f0 e0       	ldi	r31, 0x00	; 0
    3a02:	80 81       	ld	r24, Z
    3a04:	28 2f       	mov	r18, r24
    3a06:	30 e0       	ldi	r19, 0x00	; 0
    3a08:	8c 81       	ldd	r24, Y+4	; 0x04
    3a0a:	88 2f       	mov	r24, r24
    3a0c:	90 e0       	ldi	r25, 0x00	; 0
    3a0e:	a9 01       	movw	r20, r18
    3a10:	02 c0       	rjmp	.+4      	; 0x3a16 <DIO_enu_GetPinValue+0x96>
    3a12:	55 95       	asr	r21
    3a14:	47 95       	ror	r20
    3a16:	8a 95       	dec	r24
    3a18:	e2 f7       	brpl	.-8      	; 0x3a12 <DIO_enu_GetPinValue+0x92>
    3a1a:	ca 01       	movw	r24, r20
    3a1c:	81 70       	andi	r24, 0x01	; 1
    3a1e:	89 83       	std	Y+1, r24	; 0x01
            if(Local_u8_PinValue == DIO_U8_LOW) {*Copy_pu8_ReturnPinValue = DIO_U8_LOW;}
    3a20:	89 81       	ldd	r24, Y+1	; 0x01
    3a22:	88 23       	and	r24, r24
    3a24:	21 f4       	brne	.+8      	; 0x3a2e <DIO_enu_GetPinValue+0xae>
    3a26:	ed 81       	ldd	r30, Y+5	; 0x05
    3a28:	fe 81       	ldd	r31, Y+6	; 0x06
    3a2a:	10 82       	st	Z, r1
    3a2c:	5d c0       	rjmp	.+186    	; 0x3ae8 <DIO_enu_GetPinValue+0x168>
            else {*Copy_pu8_ReturnPinValue = DIO_U8_HIGH;}
    3a2e:	ed 81       	ldd	r30, Y+5	; 0x05
    3a30:	fe 81       	ldd	r31, Y+6	; 0x06
    3a32:	81 e0       	ldi	r24, 0x01	; 1
    3a34:	80 83       	st	Z, r24
    3a36:	58 c0       	rjmp	.+176    	; 0x3ae8 <DIO_enu_GetPinValue+0x168>
            break;
            case DIO_U8_PORTB:Local_u8_PinValue = GET_BIT(DIO_U8_PINB_REG,Copy_u8_PinId);
    3a38:	e6 e3       	ldi	r30, 0x36	; 54
    3a3a:	f0 e0       	ldi	r31, 0x00	; 0
    3a3c:	80 81       	ld	r24, Z
    3a3e:	28 2f       	mov	r18, r24
    3a40:	30 e0       	ldi	r19, 0x00	; 0
    3a42:	8c 81       	ldd	r24, Y+4	; 0x04
    3a44:	88 2f       	mov	r24, r24
    3a46:	90 e0       	ldi	r25, 0x00	; 0
    3a48:	a9 01       	movw	r20, r18
    3a4a:	02 c0       	rjmp	.+4      	; 0x3a50 <DIO_enu_GetPinValue+0xd0>
    3a4c:	55 95       	asr	r21
    3a4e:	47 95       	ror	r20
    3a50:	8a 95       	dec	r24
    3a52:	e2 f7       	brpl	.-8      	; 0x3a4c <DIO_enu_GetPinValue+0xcc>
    3a54:	ca 01       	movw	r24, r20
    3a56:	81 70       	andi	r24, 0x01	; 1
    3a58:	89 83       	std	Y+1, r24	; 0x01
            if(Local_u8_PinValue == DIO_U8_LOW) {*Copy_pu8_ReturnPinValue = DIO_U8_LOW;}
    3a5a:	89 81       	ldd	r24, Y+1	; 0x01
    3a5c:	88 23       	and	r24, r24
    3a5e:	21 f4       	brne	.+8      	; 0x3a68 <DIO_enu_GetPinValue+0xe8>
    3a60:	ed 81       	ldd	r30, Y+5	; 0x05
    3a62:	fe 81       	ldd	r31, Y+6	; 0x06
    3a64:	10 82       	st	Z, r1
    3a66:	40 c0       	rjmp	.+128    	; 0x3ae8 <DIO_enu_GetPinValue+0x168>
            else {*Copy_pu8_ReturnPinValue = DIO_U8_HIGH;}
    3a68:	ed 81       	ldd	r30, Y+5	; 0x05
    3a6a:	fe 81       	ldd	r31, Y+6	; 0x06
    3a6c:	81 e0       	ldi	r24, 0x01	; 1
    3a6e:	80 83       	st	Z, r24
    3a70:	3b c0       	rjmp	.+118    	; 0x3ae8 <DIO_enu_GetPinValue+0x168>
            break;
            case DIO_U8_PORTC:Local_u8_PinValue = GET_BIT(DIO_U8_PINC_REG,Copy_u8_PinId);
    3a72:	e3 e3       	ldi	r30, 0x33	; 51
    3a74:	f0 e0       	ldi	r31, 0x00	; 0
    3a76:	80 81       	ld	r24, Z
    3a78:	28 2f       	mov	r18, r24
    3a7a:	30 e0       	ldi	r19, 0x00	; 0
    3a7c:	8c 81       	ldd	r24, Y+4	; 0x04
    3a7e:	88 2f       	mov	r24, r24
    3a80:	90 e0       	ldi	r25, 0x00	; 0
    3a82:	a9 01       	movw	r20, r18
    3a84:	02 c0       	rjmp	.+4      	; 0x3a8a <DIO_enu_GetPinValue+0x10a>
    3a86:	55 95       	asr	r21
    3a88:	47 95       	ror	r20
    3a8a:	8a 95       	dec	r24
    3a8c:	e2 f7       	brpl	.-8      	; 0x3a86 <DIO_enu_GetPinValue+0x106>
    3a8e:	ca 01       	movw	r24, r20
    3a90:	81 70       	andi	r24, 0x01	; 1
    3a92:	89 83       	std	Y+1, r24	; 0x01
            if(Local_u8_PinValue == DIO_U8_LOW) {*Copy_pu8_ReturnPinValue = DIO_U8_LOW;}
    3a94:	89 81       	ldd	r24, Y+1	; 0x01
    3a96:	88 23       	and	r24, r24
    3a98:	21 f4       	brne	.+8      	; 0x3aa2 <DIO_enu_GetPinValue+0x122>
    3a9a:	ed 81       	ldd	r30, Y+5	; 0x05
    3a9c:	fe 81       	ldd	r31, Y+6	; 0x06
    3a9e:	10 82       	st	Z, r1
    3aa0:	23 c0       	rjmp	.+70     	; 0x3ae8 <DIO_enu_GetPinValue+0x168>
            else {*Copy_pu8_ReturnPinValue = DIO_U8_HIGH;}
    3aa2:	ed 81       	ldd	r30, Y+5	; 0x05
    3aa4:	fe 81       	ldd	r31, Y+6	; 0x06
    3aa6:	81 e0       	ldi	r24, 0x01	; 1
    3aa8:	80 83       	st	Z, r24
    3aaa:	1e c0       	rjmp	.+60     	; 0x3ae8 <DIO_enu_GetPinValue+0x168>
            break;
            case DIO_U8_PORTD:Local_u8_PinValue = GET_BIT(DIO_U8_PIND_REG,Copy_u8_PinId);
    3aac:	e0 e3       	ldi	r30, 0x30	; 48
    3aae:	f0 e0       	ldi	r31, 0x00	; 0
    3ab0:	80 81       	ld	r24, Z
    3ab2:	28 2f       	mov	r18, r24
    3ab4:	30 e0       	ldi	r19, 0x00	; 0
    3ab6:	8c 81       	ldd	r24, Y+4	; 0x04
    3ab8:	88 2f       	mov	r24, r24
    3aba:	90 e0       	ldi	r25, 0x00	; 0
    3abc:	a9 01       	movw	r20, r18
    3abe:	02 c0       	rjmp	.+4      	; 0x3ac4 <DIO_enu_GetPinValue+0x144>
    3ac0:	55 95       	asr	r21
    3ac2:	47 95       	ror	r20
    3ac4:	8a 95       	dec	r24
    3ac6:	e2 f7       	brpl	.-8      	; 0x3ac0 <DIO_enu_GetPinValue+0x140>
    3ac8:	ca 01       	movw	r24, r20
    3aca:	81 70       	andi	r24, 0x01	; 1
    3acc:	89 83       	std	Y+1, r24	; 0x01
            if(Local_u8_PinValue == DIO_U8_LOW) {*Copy_pu8_ReturnPinValue = DIO_U8_LOW;}
    3ace:	89 81       	ldd	r24, Y+1	; 0x01
    3ad0:	88 23       	and	r24, r24
    3ad2:	21 f4       	brne	.+8      	; 0x3adc <DIO_enu_GetPinValue+0x15c>
    3ad4:	ed 81       	ldd	r30, Y+5	; 0x05
    3ad6:	fe 81       	ldd	r31, Y+6	; 0x06
    3ad8:	10 82       	st	Z, r1
    3ada:	06 c0       	rjmp	.+12     	; 0x3ae8 <DIO_enu_GetPinValue+0x168>
            else {*Copy_pu8_ReturnPinValue = DIO_U8_HIGH;}
    3adc:	ed 81       	ldd	r30, Y+5	; 0x05
    3ade:	fe 81       	ldd	r31, Y+6	; 0x06
    3ae0:	81 e0       	ldi	r24, 0x01	; 1
    3ae2:	80 83       	st	Z, r24
    3ae4:	01 c0       	rjmp	.+2      	; 0x3ae8 <DIO_enu_GetPinValue+0x168>
            break;
        }
    }
    else
    {
        Local_u8_ErrorState = STATE_NOT_OK;
    3ae6:	1a 82       	std	Y+2, r1	; 0x02
    }
    return Local_u8_ErrorState;
    3ae8:	8a 81       	ldd	r24, Y+2	; 0x02
}
    3aea:	28 96       	adiw	r28, 0x08	; 8
    3aec:	0f b6       	in	r0, 0x3f	; 63
    3aee:	f8 94       	cli
    3af0:	de bf       	out	0x3e, r29	; 62
    3af2:	0f be       	out	0x3f, r0	; 63
    3af4:	cd bf       	out	0x3d, r28	; 61
    3af6:	cf 91       	pop	r28
    3af8:	df 91       	pop	r29
    3afa:	08 95       	ret

00003afc <DIO_enu_SetPortDirection>:

ES_t DIO_enu_SetPortDirection(u8 Copy_u8_PortId, u8 Copy_u8_PortDirection){
    3afc:	df 93       	push	r29
    3afe:	cf 93       	push	r28
    3b00:	cd b7       	in	r28, 0x3d	; 61
    3b02:	de b7       	in	r29, 0x3e	; 62
    3b04:	2d 97       	sbiw	r28, 0x0d	; 13
    3b06:	0f b6       	in	r0, 0x3f	; 63
    3b08:	f8 94       	cli
    3b0a:	de bf       	out	0x3e, r29	; 62
    3b0c:	0f be       	out	0x3f, r0	; 63
    3b0e:	cd bf       	out	0x3d, r28	; 61
    3b10:	8a 83       	std	Y+2, r24	; 0x02
    3b12:	6b 83       	std	Y+3, r22	; 0x03
    u8 Local_u8_ErrorState = STATE_OK;
    3b14:	81 e0       	ldi	r24, 0x01	; 1
    3b16:	89 83       	std	Y+1, r24	; 0x01
    if((Copy_u8_PortId <= DIO_U8_PORTD) &&((Copy_u8_PortDirection == DIO_U8_OUTPUT)||(Copy_u8_PortDirection == DIO_U8_INPUT))){
    3b18:	8a 81       	ldd	r24, Y+2	; 0x02
    3b1a:	84 30       	cpi	r24, 0x04	; 4
    3b1c:	08 f0       	brcs	.+2      	; 0x3b20 <DIO_enu_SetPortDirection+0x24>
    3b1e:	84 c0       	rjmp	.+264    	; 0x3c28 <DIO_enu_SetPortDirection+0x12c>
    3b20:	8b 81       	ldd	r24, Y+3	; 0x03
    3b22:	81 30       	cpi	r24, 0x01	; 1
    3b24:	21 f0       	breq	.+8      	; 0x3b2e <DIO_enu_SetPortDirection+0x32>
    3b26:	8b 81       	ldd	r24, Y+3	; 0x03
    3b28:	88 23       	and	r24, r24
    3b2a:	09 f0       	breq	.+2      	; 0x3b2e <DIO_enu_SetPortDirection+0x32>
    3b2c:	7d c0       	rjmp	.+250    	; 0x3c28 <DIO_enu_SetPortDirection+0x12c>
        switch (Copy_u8_PortId)
    3b2e:	8a 81       	ldd	r24, Y+2	; 0x02
    3b30:	28 2f       	mov	r18, r24
    3b32:	30 e0       	ldi	r19, 0x00	; 0
    3b34:	3d 87       	std	Y+13, r19	; 0x0d
    3b36:	2c 87       	std	Y+12, r18	; 0x0c
    3b38:	8c 85       	ldd	r24, Y+12	; 0x0c
    3b3a:	9d 85       	ldd	r25, Y+13	; 0x0d
    3b3c:	81 30       	cpi	r24, 0x01	; 1
    3b3e:	91 05       	cpc	r25, r1
    3b40:	71 f1       	breq	.+92     	; 0x3b9e <DIO_enu_SetPortDirection+0xa2>
    3b42:	2c 85       	ldd	r18, Y+12	; 0x0c
    3b44:	3d 85       	ldd	r19, Y+13	; 0x0d
    3b46:	22 30       	cpi	r18, 0x02	; 2
    3b48:	31 05       	cpc	r19, r1
    3b4a:	2c f4       	brge	.+10     	; 0x3b56 <DIO_enu_SetPortDirection+0x5a>
    3b4c:	8c 85       	ldd	r24, Y+12	; 0x0c
    3b4e:	9d 85       	ldd	r25, Y+13	; 0x0d
    3b50:	00 97       	sbiw	r24, 0x00	; 0
    3b52:	69 f0       	breq	.+26     	; 0x3b6e <DIO_enu_SetPortDirection+0x72>
    3b54:	6a c0       	rjmp	.+212    	; 0x3c2a <DIO_enu_SetPortDirection+0x12e>
    3b56:	2c 85       	ldd	r18, Y+12	; 0x0c
    3b58:	3d 85       	ldd	r19, Y+13	; 0x0d
    3b5a:	22 30       	cpi	r18, 0x02	; 2
    3b5c:	31 05       	cpc	r19, r1
    3b5e:	b1 f1       	breq	.+108    	; 0x3bcc <DIO_enu_SetPortDirection+0xd0>
    3b60:	8c 85       	ldd	r24, Y+12	; 0x0c
    3b62:	9d 85       	ldd	r25, Y+13	; 0x0d
    3b64:	83 30       	cpi	r24, 0x03	; 3
    3b66:	91 05       	cpc	r25, r1
    3b68:	09 f4       	brne	.+2      	; 0x3b6c <DIO_enu_SetPortDirection+0x70>
    3b6a:	47 c0       	rjmp	.+142    	; 0x3bfa <DIO_enu_SetPortDirection+0xfe>
    3b6c:	5e c0       	rjmp	.+188    	; 0x3c2a <DIO_enu_SetPortDirection+0x12e>
        {
        case DIO_U8_PORTA:
            switch (Copy_u8_PortDirection)
    3b6e:	8b 81       	ldd	r24, Y+3	; 0x03
    3b70:	28 2f       	mov	r18, r24
    3b72:	30 e0       	ldi	r19, 0x00	; 0
    3b74:	3b 87       	std	Y+11, r19	; 0x0b
    3b76:	2a 87       	std	Y+10, r18	; 0x0a
    3b78:	8a 85       	ldd	r24, Y+10	; 0x0a
    3b7a:	9b 85       	ldd	r25, Y+11	; 0x0b
    3b7c:	00 97       	sbiw	r24, 0x00	; 0
    3b7e:	59 f0       	breq	.+22     	; 0x3b96 <DIO_enu_SetPortDirection+0x9a>
    3b80:	2a 85       	ldd	r18, Y+10	; 0x0a
    3b82:	3b 85       	ldd	r19, Y+11	; 0x0b
    3b84:	21 30       	cpi	r18, 0x01	; 1
    3b86:	31 05       	cpc	r19, r1
    3b88:	09 f0       	breq	.+2      	; 0x3b8c <DIO_enu_SetPortDirection+0x90>
    3b8a:	4f c0       	rjmp	.+158    	; 0x3c2a <DIO_enu_SetPortDirection+0x12e>
            {
            case DIO_U8_OUTPUT: DIO_U8_DDRA_REG = DIO_U8_SETPORT_OUTPUT; break;
    3b8c:	ea e3       	ldi	r30, 0x3A	; 58
    3b8e:	f0 e0       	ldi	r31, 0x00	; 0
    3b90:	8f ef       	ldi	r24, 0xFF	; 255
    3b92:	80 83       	st	Z, r24
    3b94:	4a c0       	rjmp	.+148    	; 0x3c2a <DIO_enu_SetPortDirection+0x12e>
            case DIO_U8_INPUT: DIO_U8_DDRA_REG =  DIO_U8_SETPORT_INPUT; break;
    3b96:	ea e3       	ldi	r30, 0x3A	; 58
    3b98:	f0 e0       	ldi	r31, 0x00	; 0
    3b9a:	10 82       	st	Z, r1
    3b9c:	46 c0       	rjmp	.+140    	; 0x3c2a <DIO_enu_SetPortDirection+0x12e>
            }
        break;
        case DIO_U8_PORTB:
            switch (Copy_u8_PortDirection)
    3b9e:	8b 81       	ldd	r24, Y+3	; 0x03
    3ba0:	28 2f       	mov	r18, r24
    3ba2:	30 e0       	ldi	r19, 0x00	; 0
    3ba4:	39 87       	std	Y+9, r19	; 0x09
    3ba6:	28 87       	std	Y+8, r18	; 0x08
    3ba8:	88 85       	ldd	r24, Y+8	; 0x08
    3baa:	99 85       	ldd	r25, Y+9	; 0x09
    3bac:	00 97       	sbiw	r24, 0x00	; 0
    3bae:	51 f0       	breq	.+20     	; 0x3bc4 <DIO_enu_SetPortDirection+0xc8>
    3bb0:	28 85       	ldd	r18, Y+8	; 0x08
    3bb2:	39 85       	ldd	r19, Y+9	; 0x09
    3bb4:	21 30       	cpi	r18, 0x01	; 1
    3bb6:	31 05       	cpc	r19, r1
    3bb8:	c1 f5       	brne	.+112    	; 0x3c2a <DIO_enu_SetPortDirection+0x12e>
                {
                case DIO_U8_OUTPUT: DIO_U8_DDRB_REG = DIO_U8_SETPORT_OUTPUT; break;
    3bba:	e7 e3       	ldi	r30, 0x37	; 55
    3bbc:	f0 e0       	ldi	r31, 0x00	; 0
    3bbe:	8f ef       	ldi	r24, 0xFF	; 255
    3bc0:	80 83       	st	Z, r24
    3bc2:	33 c0       	rjmp	.+102    	; 0x3c2a <DIO_enu_SetPortDirection+0x12e>
                case DIO_U8_INPUT: DIO_U8_DDRB_REG =  DIO_U8_SETPORT_INPUT; break;
    3bc4:	e7 e3       	ldi	r30, 0x37	; 55
    3bc6:	f0 e0       	ldi	r31, 0x00	; 0
    3bc8:	10 82       	st	Z, r1
    3bca:	2f c0       	rjmp	.+94     	; 0x3c2a <DIO_enu_SetPortDirection+0x12e>
                }
         break;
        case DIO_U8_PORTC:
            switch (Copy_u8_PortDirection)
    3bcc:	8b 81       	ldd	r24, Y+3	; 0x03
    3bce:	28 2f       	mov	r18, r24
    3bd0:	30 e0       	ldi	r19, 0x00	; 0
    3bd2:	3f 83       	std	Y+7, r19	; 0x07
    3bd4:	2e 83       	std	Y+6, r18	; 0x06
    3bd6:	8e 81       	ldd	r24, Y+6	; 0x06
    3bd8:	9f 81       	ldd	r25, Y+7	; 0x07
    3bda:	00 97       	sbiw	r24, 0x00	; 0
    3bdc:	51 f0       	breq	.+20     	; 0x3bf2 <DIO_enu_SetPortDirection+0xf6>
    3bde:	2e 81       	ldd	r18, Y+6	; 0x06
    3be0:	3f 81       	ldd	r19, Y+7	; 0x07
    3be2:	21 30       	cpi	r18, 0x01	; 1
    3be4:	31 05       	cpc	r19, r1
    3be6:	09 f5       	brne	.+66     	; 0x3c2a <DIO_enu_SetPortDirection+0x12e>
                {
                case DIO_U8_OUTPUT: DIO_U8_DDRC_REG = DIO_U8_SETPORT_OUTPUT; break;
    3be8:	e4 e3       	ldi	r30, 0x34	; 52
    3bea:	f0 e0       	ldi	r31, 0x00	; 0
    3bec:	8f ef       	ldi	r24, 0xFF	; 255
    3bee:	80 83       	st	Z, r24
    3bf0:	1c c0       	rjmp	.+56     	; 0x3c2a <DIO_enu_SetPortDirection+0x12e>
                case DIO_U8_INPUT: DIO_U8_DDRC_REG = DIO_U8_SETPORT_INPUT; break;
    3bf2:	e4 e3       	ldi	r30, 0x34	; 52
    3bf4:	f0 e0       	ldi	r31, 0x00	; 0
    3bf6:	10 82       	st	Z, r1
    3bf8:	18 c0       	rjmp	.+48     	; 0x3c2a <DIO_enu_SetPortDirection+0x12e>
                }
        break;
        case DIO_U8_PORTD:
            switch (Copy_u8_PortDirection)
    3bfa:	8b 81       	ldd	r24, Y+3	; 0x03
    3bfc:	28 2f       	mov	r18, r24
    3bfe:	30 e0       	ldi	r19, 0x00	; 0
    3c00:	3d 83       	std	Y+5, r19	; 0x05
    3c02:	2c 83       	std	Y+4, r18	; 0x04
    3c04:	8c 81       	ldd	r24, Y+4	; 0x04
    3c06:	9d 81       	ldd	r25, Y+5	; 0x05
    3c08:	00 97       	sbiw	r24, 0x00	; 0
    3c0a:	51 f0       	breq	.+20     	; 0x3c20 <DIO_enu_SetPortDirection+0x124>
    3c0c:	2c 81       	ldd	r18, Y+4	; 0x04
    3c0e:	3d 81       	ldd	r19, Y+5	; 0x05
    3c10:	21 30       	cpi	r18, 0x01	; 1
    3c12:	31 05       	cpc	r19, r1
    3c14:	51 f4       	brne	.+20     	; 0x3c2a <DIO_enu_SetPortDirection+0x12e>
                {
                case DIO_U8_OUTPUT: DIO_U8_DDRD_REG = DIO_U8_SETPORT_OUTPUT; break;
    3c16:	e1 e3       	ldi	r30, 0x31	; 49
    3c18:	f0 e0       	ldi	r31, 0x00	; 0
    3c1a:	8f ef       	ldi	r24, 0xFF	; 255
    3c1c:	80 83       	st	Z, r24
    3c1e:	05 c0       	rjmp	.+10     	; 0x3c2a <DIO_enu_SetPortDirection+0x12e>
                case DIO_U8_INPUT: DIO_U8_DDRD_REG = DIO_U8_SETPORT_INPUT; break;
    3c20:	e1 e3       	ldi	r30, 0x31	; 49
    3c22:	f0 e0       	ldi	r31, 0x00	; 0
    3c24:	10 82       	st	Z, r1
    3c26:	01 c0       	rjmp	.+2      	; 0x3c2a <DIO_enu_SetPortDirection+0x12e>
                }
        break;
        }
    }else{
        Local_u8_ErrorState = STATE_NOT_OK;
    3c28:	19 82       	std	Y+1, r1	; 0x01
    }
    return Local_u8_ErrorState;
    3c2a:	89 81       	ldd	r24, Y+1	; 0x01
}
    3c2c:	2d 96       	adiw	r28, 0x0d	; 13
    3c2e:	0f b6       	in	r0, 0x3f	; 63
    3c30:	f8 94       	cli
    3c32:	de bf       	out	0x3e, r29	; 62
    3c34:	0f be       	out	0x3f, r0	; 63
    3c36:	cd bf       	out	0x3d, r28	; 61
    3c38:	cf 91       	pop	r28
    3c3a:	df 91       	pop	r29
    3c3c:	08 95       	ret

00003c3e <DIO_enu_SetPortValue>:

ES_t DIO_enu_SetPortValue(u8 Copy_u8_PortId, u8 Copy_u8_PortValue){
    3c3e:	df 93       	push	r29
    3c40:	cf 93       	push	r28
    3c42:	00 d0       	rcall	.+0      	; 0x3c44 <DIO_enu_SetPortValue+0x6>
    3c44:	00 d0       	rcall	.+0      	; 0x3c46 <DIO_enu_SetPortValue+0x8>
    3c46:	0f 92       	push	r0
    3c48:	cd b7       	in	r28, 0x3d	; 61
    3c4a:	de b7       	in	r29, 0x3e	; 62
    3c4c:	8a 83       	std	Y+2, r24	; 0x02
    3c4e:	6b 83       	std	Y+3, r22	; 0x03
	u8 Local_u8_ErrorState = STATE_OK;
    3c50:	81 e0       	ldi	r24, 0x01	; 1
    3c52:	89 83       	std	Y+1, r24	; 0x01
	    if((Copy_u8_PortId <= DIO_U8_PORTD)){
    3c54:	8a 81       	ldd	r24, Y+2	; 0x02
    3c56:	84 30       	cpi	r24, 0x04	; 4
    3c58:	98 f5       	brcc	.+102    	; 0x3cc0 <DIO_enu_SetPortValue+0x82>
	        switch (Copy_u8_PortId)
    3c5a:	8a 81       	ldd	r24, Y+2	; 0x02
    3c5c:	28 2f       	mov	r18, r24
    3c5e:	30 e0       	ldi	r19, 0x00	; 0
    3c60:	3d 83       	std	Y+5, r19	; 0x05
    3c62:	2c 83       	std	Y+4, r18	; 0x04
    3c64:	8c 81       	ldd	r24, Y+4	; 0x04
    3c66:	9d 81       	ldd	r25, Y+5	; 0x05
    3c68:	81 30       	cpi	r24, 0x01	; 1
    3c6a:	91 05       	cpc	r25, r1
    3c6c:	d1 f0       	breq	.+52     	; 0x3ca2 <DIO_enu_SetPortValue+0x64>
    3c6e:	2c 81       	ldd	r18, Y+4	; 0x04
    3c70:	3d 81       	ldd	r19, Y+5	; 0x05
    3c72:	22 30       	cpi	r18, 0x02	; 2
    3c74:	31 05       	cpc	r19, r1
    3c76:	2c f4       	brge	.+10     	; 0x3c82 <DIO_enu_SetPortValue+0x44>
    3c78:	8c 81       	ldd	r24, Y+4	; 0x04
    3c7a:	9d 81       	ldd	r25, Y+5	; 0x05
    3c7c:	00 97       	sbiw	r24, 0x00	; 0
    3c7e:	61 f0       	breq	.+24     	; 0x3c98 <DIO_enu_SetPortValue+0x5a>
    3c80:	20 c0       	rjmp	.+64     	; 0x3cc2 <DIO_enu_SetPortValue+0x84>
    3c82:	2c 81       	ldd	r18, Y+4	; 0x04
    3c84:	3d 81       	ldd	r19, Y+5	; 0x05
    3c86:	22 30       	cpi	r18, 0x02	; 2
    3c88:	31 05       	cpc	r19, r1
    3c8a:	81 f0       	breq	.+32     	; 0x3cac <DIO_enu_SetPortValue+0x6e>
    3c8c:	8c 81       	ldd	r24, Y+4	; 0x04
    3c8e:	9d 81       	ldd	r25, Y+5	; 0x05
    3c90:	83 30       	cpi	r24, 0x03	; 3
    3c92:	91 05       	cpc	r25, r1
    3c94:	81 f0       	breq	.+32     	; 0x3cb6 <DIO_enu_SetPortValue+0x78>
    3c96:	15 c0       	rjmp	.+42     	; 0x3cc2 <DIO_enu_SetPortValue+0x84>
	        {
	        case DIO_U8_PORTA:DIO_U8_PORTA_REG = Copy_u8_PortValue; break;
    3c98:	eb e3       	ldi	r30, 0x3B	; 59
    3c9a:	f0 e0       	ldi	r31, 0x00	; 0
    3c9c:	8b 81       	ldd	r24, Y+3	; 0x03
    3c9e:	80 83       	st	Z, r24
    3ca0:	10 c0       	rjmp	.+32     	; 0x3cc2 <DIO_enu_SetPortValue+0x84>
	        case DIO_U8_PORTB:DIO_U8_PORTB_REG = Copy_u8_PortValue; break;
    3ca2:	e8 e3       	ldi	r30, 0x38	; 56
    3ca4:	f0 e0       	ldi	r31, 0x00	; 0
    3ca6:	8b 81       	ldd	r24, Y+3	; 0x03
    3ca8:	80 83       	st	Z, r24
    3caa:	0b c0       	rjmp	.+22     	; 0x3cc2 <DIO_enu_SetPortValue+0x84>
	        case DIO_U8_PORTC:DIO_U8_PORTC_REG = Copy_u8_PortValue; break;
    3cac:	e5 e3       	ldi	r30, 0x35	; 53
    3cae:	f0 e0       	ldi	r31, 0x00	; 0
    3cb0:	8b 81       	ldd	r24, Y+3	; 0x03
    3cb2:	80 83       	st	Z, r24
    3cb4:	06 c0       	rjmp	.+12     	; 0x3cc2 <DIO_enu_SetPortValue+0x84>
	        case DIO_U8_PORTD:DIO_U8_PORTD_REG = Copy_u8_PortValue; break;
    3cb6:	e2 e3       	ldi	r30, 0x32	; 50
    3cb8:	f0 e0       	ldi	r31, 0x00	; 0
    3cba:	8b 81       	ldd	r24, Y+3	; 0x03
    3cbc:	80 83       	st	Z, r24
    3cbe:	01 c0       	rjmp	.+2      	; 0x3cc2 <DIO_enu_SetPortValue+0x84>
	        }
	    }else{
	        Local_u8_ErrorState = STATE_NOT_OK;
    3cc0:	19 82       	std	Y+1, r1	; 0x01
	    }
	    return Local_u8_ErrorState;
    3cc2:	89 81       	ldd	r24, Y+1	; 0x01
}
    3cc4:	0f 90       	pop	r0
    3cc6:	0f 90       	pop	r0
    3cc8:	0f 90       	pop	r0
    3cca:	0f 90       	pop	r0
    3ccc:	0f 90       	pop	r0
    3cce:	cf 91       	pop	r28
    3cd0:	df 91       	pop	r29
    3cd2:	08 95       	ret

00003cd4 <DIO_enu_GetPortValue>:

ES_t DIO_enu_GetPortValue(u8 Copy_u8_PortId, u8 * Copy_u8_ReturnPortValue){
    3cd4:	df 93       	push	r29
    3cd6:	cf 93       	push	r28
    3cd8:	00 d0       	rcall	.+0      	; 0x3cda <DIO_enu_GetPortValue+0x6>
    3cda:	00 d0       	rcall	.+0      	; 0x3cdc <DIO_enu_GetPortValue+0x8>
    3cdc:	00 d0       	rcall	.+0      	; 0x3cde <DIO_enu_GetPortValue+0xa>
    3cde:	cd b7       	in	r28, 0x3d	; 61
    3ce0:	de b7       	in	r29, 0x3e	; 62
    3ce2:	8a 83       	std	Y+2, r24	; 0x02
    3ce4:	7c 83       	std	Y+4, r23	; 0x04
    3ce6:	6b 83       	std	Y+3, r22	; 0x03
    u8 Local_u8_ErrorState = STATE_OK;
    3ce8:	81 e0       	ldi	r24, 0x01	; 1
    3cea:	89 83       	std	Y+1, r24	; 0x01
    if((Copy_u8_PortId<= DIO_U8_PORTD) && (Copy_u8_ReturnPortValue != NULL)){
    3cec:	8a 81       	ldd	r24, Y+2	; 0x02
    3cee:	84 30       	cpi	r24, 0x04	; 4
    3cf0:	08 f0       	brcs	.+2      	; 0x3cf4 <DIO_enu_GetPortValue+0x20>
    3cf2:	3f c0       	rjmp	.+126    	; 0x3d72 <DIO_enu_GetPortValue+0x9e>
    3cf4:	8b 81       	ldd	r24, Y+3	; 0x03
    3cf6:	9c 81       	ldd	r25, Y+4	; 0x04
    3cf8:	00 97       	sbiw	r24, 0x00	; 0
    3cfa:	d9 f1       	breq	.+118    	; 0x3d72 <DIO_enu_GetPortValue+0x9e>
        switch (Copy_u8_PortId)
    3cfc:	8a 81       	ldd	r24, Y+2	; 0x02
    3cfe:	28 2f       	mov	r18, r24
    3d00:	30 e0       	ldi	r19, 0x00	; 0
    3d02:	3e 83       	std	Y+6, r19	; 0x06
    3d04:	2d 83       	std	Y+5, r18	; 0x05
    3d06:	8d 81       	ldd	r24, Y+5	; 0x05
    3d08:	9e 81       	ldd	r25, Y+6	; 0x06
    3d0a:	81 30       	cpi	r24, 0x01	; 1
    3d0c:	91 05       	cpc	r25, r1
    3d0e:	e1 f0       	breq	.+56     	; 0x3d48 <DIO_enu_GetPortValue+0x74>
    3d10:	2d 81       	ldd	r18, Y+5	; 0x05
    3d12:	3e 81       	ldd	r19, Y+6	; 0x06
    3d14:	22 30       	cpi	r18, 0x02	; 2
    3d16:	31 05       	cpc	r19, r1
    3d18:	2c f4       	brge	.+10     	; 0x3d24 <DIO_enu_GetPortValue+0x50>
    3d1a:	8d 81       	ldd	r24, Y+5	; 0x05
    3d1c:	9e 81       	ldd	r25, Y+6	; 0x06
    3d1e:	00 97       	sbiw	r24, 0x00	; 0
    3d20:	61 f0       	breq	.+24     	; 0x3d3a <DIO_enu_GetPortValue+0x66>
    3d22:	28 c0       	rjmp	.+80     	; 0x3d74 <DIO_enu_GetPortValue+0xa0>
    3d24:	2d 81       	ldd	r18, Y+5	; 0x05
    3d26:	3e 81       	ldd	r19, Y+6	; 0x06
    3d28:	22 30       	cpi	r18, 0x02	; 2
    3d2a:	31 05       	cpc	r19, r1
    3d2c:	a1 f0       	breq	.+40     	; 0x3d56 <DIO_enu_GetPortValue+0x82>
    3d2e:	8d 81       	ldd	r24, Y+5	; 0x05
    3d30:	9e 81       	ldd	r25, Y+6	; 0x06
    3d32:	83 30       	cpi	r24, 0x03	; 3
    3d34:	91 05       	cpc	r25, r1
    3d36:	b1 f0       	breq	.+44     	; 0x3d64 <DIO_enu_GetPortValue+0x90>
    3d38:	1d c0       	rjmp	.+58     	; 0x3d74 <DIO_enu_GetPortValue+0xa0>
        {
        case DIO_U8_PORTA: *Copy_u8_ReturnPortValue = DIO_U8_PINA_REG;break;
    3d3a:	e9 e3       	ldi	r30, 0x39	; 57
    3d3c:	f0 e0       	ldi	r31, 0x00	; 0
    3d3e:	80 81       	ld	r24, Z
    3d40:	eb 81       	ldd	r30, Y+3	; 0x03
    3d42:	fc 81       	ldd	r31, Y+4	; 0x04
    3d44:	80 83       	st	Z, r24
    3d46:	16 c0       	rjmp	.+44     	; 0x3d74 <DIO_enu_GetPortValue+0xa0>
        case DIO_U8_PORTB: *Copy_u8_ReturnPortValue = DIO_U8_PINB_REG;break;
    3d48:	e6 e3       	ldi	r30, 0x36	; 54
    3d4a:	f0 e0       	ldi	r31, 0x00	; 0
    3d4c:	80 81       	ld	r24, Z
    3d4e:	eb 81       	ldd	r30, Y+3	; 0x03
    3d50:	fc 81       	ldd	r31, Y+4	; 0x04
    3d52:	80 83       	st	Z, r24
    3d54:	0f c0       	rjmp	.+30     	; 0x3d74 <DIO_enu_GetPortValue+0xa0>
        case DIO_U8_PORTC: *Copy_u8_ReturnPortValue = DIO_U8_PINC_REG;break;
    3d56:	e3 e3       	ldi	r30, 0x33	; 51
    3d58:	f0 e0       	ldi	r31, 0x00	; 0
    3d5a:	80 81       	ld	r24, Z
    3d5c:	eb 81       	ldd	r30, Y+3	; 0x03
    3d5e:	fc 81       	ldd	r31, Y+4	; 0x04
    3d60:	80 83       	st	Z, r24
    3d62:	08 c0       	rjmp	.+16     	; 0x3d74 <DIO_enu_GetPortValue+0xa0>
        case DIO_U8_PORTD: *Copy_u8_ReturnPortValue = DIO_U8_PIND_REG;break;
    3d64:	e0 e3       	ldi	r30, 0x30	; 48
    3d66:	f0 e0       	ldi	r31, 0x00	; 0
    3d68:	80 81       	ld	r24, Z
    3d6a:	eb 81       	ldd	r30, Y+3	; 0x03
    3d6c:	fc 81       	ldd	r31, Y+4	; 0x04
    3d6e:	80 83       	st	Z, r24
    3d70:	01 c0       	rjmp	.+2      	; 0x3d74 <DIO_enu_GetPortValue+0xa0>
        }
    }
    else{
        Local_u8_ErrorState = STATE_NOT_OK;
    3d72:	19 82       	std	Y+1, r1	; 0x01
    }
    return Local_u8_ErrorState;
    3d74:	89 81       	ldd	r24, Y+1	; 0x01
}
    3d76:	26 96       	adiw	r28, 0x06	; 6
    3d78:	0f b6       	in	r0, 0x3f	; 63
    3d7a:	f8 94       	cli
    3d7c:	de bf       	out	0x3e, r29	; 62
    3d7e:	0f be       	out	0x3f, r0	; 63
    3d80:	cd bf       	out	0x3d, r28	; 61
    3d82:	cf 91       	pop	r28
    3d84:	df 91       	pop	r29
    3d86:	08 95       	ret

00003d88 <__udivmodhi4>:
    3d88:	aa 1b       	sub	r26, r26
    3d8a:	bb 1b       	sub	r27, r27
    3d8c:	51 e1       	ldi	r21, 0x11	; 17
    3d8e:	07 c0       	rjmp	.+14     	; 0x3d9e <__udivmodhi4_ep>

00003d90 <__udivmodhi4_loop>:
    3d90:	aa 1f       	adc	r26, r26
    3d92:	bb 1f       	adc	r27, r27
    3d94:	a6 17       	cp	r26, r22
    3d96:	b7 07       	cpc	r27, r23
    3d98:	10 f0       	brcs	.+4      	; 0x3d9e <__udivmodhi4_ep>
    3d9a:	a6 1b       	sub	r26, r22
    3d9c:	b7 0b       	sbc	r27, r23

00003d9e <__udivmodhi4_ep>:
    3d9e:	88 1f       	adc	r24, r24
    3da0:	99 1f       	adc	r25, r25
    3da2:	5a 95       	dec	r21
    3da4:	a9 f7       	brne	.-22     	; 0x3d90 <__udivmodhi4_loop>
    3da6:	80 95       	com	r24
    3da8:	90 95       	com	r25
    3daa:	bc 01       	movw	r22, r24
    3dac:	cd 01       	movw	r24, r26
    3dae:	08 95       	ret

00003db0 <__udivmodsi4>:
    3db0:	a1 e2       	ldi	r26, 0x21	; 33
    3db2:	1a 2e       	mov	r1, r26
    3db4:	aa 1b       	sub	r26, r26
    3db6:	bb 1b       	sub	r27, r27
    3db8:	fd 01       	movw	r30, r26
    3dba:	0d c0       	rjmp	.+26     	; 0x3dd6 <__udivmodsi4_ep>

00003dbc <__udivmodsi4_loop>:
    3dbc:	aa 1f       	adc	r26, r26
    3dbe:	bb 1f       	adc	r27, r27
    3dc0:	ee 1f       	adc	r30, r30
    3dc2:	ff 1f       	adc	r31, r31
    3dc4:	a2 17       	cp	r26, r18
    3dc6:	b3 07       	cpc	r27, r19
    3dc8:	e4 07       	cpc	r30, r20
    3dca:	f5 07       	cpc	r31, r21
    3dcc:	20 f0       	brcs	.+8      	; 0x3dd6 <__udivmodsi4_ep>
    3dce:	a2 1b       	sub	r26, r18
    3dd0:	b3 0b       	sbc	r27, r19
    3dd2:	e4 0b       	sbc	r30, r20
    3dd4:	f5 0b       	sbc	r31, r21

00003dd6 <__udivmodsi4_ep>:
    3dd6:	66 1f       	adc	r22, r22
    3dd8:	77 1f       	adc	r23, r23
    3dda:	88 1f       	adc	r24, r24
    3ddc:	99 1f       	adc	r25, r25
    3dde:	1a 94       	dec	r1
    3de0:	69 f7       	brne	.-38     	; 0x3dbc <__udivmodsi4_loop>
    3de2:	60 95       	com	r22
    3de4:	70 95       	com	r23
    3de6:	80 95       	com	r24
    3de8:	90 95       	com	r25
    3dea:	9b 01       	movw	r18, r22
    3dec:	ac 01       	movw	r20, r24
    3dee:	bd 01       	movw	r22, r26
    3df0:	cf 01       	movw	r24, r30
    3df2:	08 95       	ret

00003df4 <__prologue_saves__>:
    3df4:	2f 92       	push	r2
    3df6:	3f 92       	push	r3
    3df8:	4f 92       	push	r4
    3dfa:	5f 92       	push	r5
    3dfc:	6f 92       	push	r6
    3dfe:	7f 92       	push	r7
    3e00:	8f 92       	push	r8
    3e02:	9f 92       	push	r9
    3e04:	af 92       	push	r10
    3e06:	bf 92       	push	r11
    3e08:	cf 92       	push	r12
    3e0a:	df 92       	push	r13
    3e0c:	ef 92       	push	r14
    3e0e:	ff 92       	push	r15
    3e10:	0f 93       	push	r16
    3e12:	1f 93       	push	r17
    3e14:	cf 93       	push	r28
    3e16:	df 93       	push	r29
    3e18:	cd b7       	in	r28, 0x3d	; 61
    3e1a:	de b7       	in	r29, 0x3e	; 62
    3e1c:	ca 1b       	sub	r28, r26
    3e1e:	db 0b       	sbc	r29, r27
    3e20:	0f b6       	in	r0, 0x3f	; 63
    3e22:	f8 94       	cli
    3e24:	de bf       	out	0x3e, r29	; 62
    3e26:	0f be       	out	0x3f, r0	; 63
    3e28:	cd bf       	out	0x3d, r28	; 61
    3e2a:	09 94       	ijmp

00003e2c <__epilogue_restores__>:
    3e2c:	2a 88       	ldd	r2, Y+18	; 0x12
    3e2e:	39 88       	ldd	r3, Y+17	; 0x11
    3e30:	48 88       	ldd	r4, Y+16	; 0x10
    3e32:	5f 84       	ldd	r5, Y+15	; 0x0f
    3e34:	6e 84       	ldd	r6, Y+14	; 0x0e
    3e36:	7d 84       	ldd	r7, Y+13	; 0x0d
    3e38:	8c 84       	ldd	r8, Y+12	; 0x0c
    3e3a:	9b 84       	ldd	r9, Y+11	; 0x0b
    3e3c:	aa 84       	ldd	r10, Y+10	; 0x0a
    3e3e:	b9 84       	ldd	r11, Y+9	; 0x09
    3e40:	c8 84       	ldd	r12, Y+8	; 0x08
    3e42:	df 80       	ldd	r13, Y+7	; 0x07
    3e44:	ee 80       	ldd	r14, Y+6	; 0x06
    3e46:	fd 80       	ldd	r15, Y+5	; 0x05
    3e48:	0c 81       	ldd	r16, Y+4	; 0x04
    3e4a:	1b 81       	ldd	r17, Y+3	; 0x03
    3e4c:	aa 81       	ldd	r26, Y+2	; 0x02
    3e4e:	b9 81       	ldd	r27, Y+1	; 0x01
    3e50:	ce 0f       	add	r28, r30
    3e52:	d1 1d       	adc	r29, r1
    3e54:	0f b6       	in	r0, 0x3f	; 63
    3e56:	f8 94       	cli
    3e58:	de bf       	out	0x3e, r29	; 62
    3e5a:	0f be       	out	0x3f, r0	; 63
    3e5c:	cd bf       	out	0x3d, r28	; 61
    3e5e:	ed 01       	movw	r28, r26
    3e60:	08 95       	ret

00003e62 <_exit>:
    3e62:	f8 94       	cli

00003e64 <__stop_program>:
    3e64:	ff cf       	rjmp	.-2      	; 0x3e64 <__stop_program>
